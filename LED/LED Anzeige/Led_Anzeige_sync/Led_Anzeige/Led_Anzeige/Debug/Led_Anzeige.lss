
Led_Anzeige.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  000011b0  00001244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000116  00800134  00800134  00001278  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000087da  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000172b  00000000  00000000  00009e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001551  00000000  00000000  0000b565  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b88  00000000  00000000  0000cab8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001d8d  00000000  00000000  0000d640  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004868  00000000  00000000  0000f3cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  00013c35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ac 01 	jmp	0x358	; 0x358 <__dtors_end>
       4:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
       8:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
       c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      10:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      14:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      18:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      1c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      20:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      24:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      28:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      2c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      30:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      34:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      38:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      3c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      40:	0c 94 f7 06 	jmp	0xdee	; 0xdee <__vector_16>
      44:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      48:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__vector_18>
      4c:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__vector_19>
      50:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      54:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      58:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      5c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      60:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      64:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	03 08       	sbc	r0, r3
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 01       	movw	r0, r0
      70:	08 5f       	subi	r16, 0xF8	; 248
      72:	00 00       	nop
      74:	00 00       	nop
      76:	03 08       	sbc	r0, r3
      78:	03 00       	.word	0x0003	; ????
      7a:	03 00       	.word	0x0003	; ????
      7c:	00 05       	cpc	r16, r0
      7e:	08 14       	cp	r0, r8
      80:	3e 14       	cp	r3, r14
      82:	3e 14       	cp	r3, r14
      84:	04 08       	sbc	r0, r4
      86:	24 6a       	ori	r18, 0xA4	; 164
      88:	2b 12       	cpse	r2, r27
      8a:	00 05       	cpc	r16, r0
      8c:	08 63       	ori	r16, 0x38	; 56
      8e:	13 08       	sbc	r1, r3
      90:	64 63       	ori	r22, 0x34	; 52
      92:	05 08       	sbc	r0, r5
      94:	36 49       	sbci	r19, 0x96	; 150
      96:	56 20       	and	r5, r6
      98:	50 01       	movw	r10, r0
      9a:	08 03       	fmul	r16, r16
      9c:	00 00       	nop
      9e:	00 00       	nop
      a0:	03 08       	sbc	r0, r3
      a2:	1c 22       	and	r1, r28
      a4:	41 00       	.word	0x0041	; ????
      a6:	00 03       	mulsu	r16, r16
      a8:	08 41       	sbci	r16, 0x18	; 24
      aa:	22 1c       	adc	r2, r2
      ac:	00 00       	nop
      ae:	05 08       	sbc	r0, r5
      b0:	28 18       	sub	r2, r8
      b2:	0e 18       	sub	r0, r14
      b4:	28 05       	cpc	r18, r8
      b6:	08 08       	sbc	r0, r8
      b8:	08 3e       	cpi	r16, 0xE8	; 232
      ba:	08 08       	sbc	r0, r8
      bc:	02 08       	sbc	r0, r2
      be:	b0 70       	andi	r27, 0x00	; 0
      c0:	00 00       	nop
      c2:	00 04       	cpc	r0, r0
      c4:	08 08       	sbc	r0, r8
      c6:	08 08       	sbc	r0, r8
      c8:	08 00       	.word	0x0008	; ????
      ca:	02 08       	sbc	r0, r2
      cc:	60 60       	ori	r22, 0x00	; 0
      ce:	00 00       	nop
      d0:	00 04       	cpc	r0, r0
      d2:	08 60       	ori	r16, 0x08	; 8
      d4:	18 06       	cpc	r1, r24
      d6:	01 00       	.word	0x0001	; ????
      d8:	04 08       	sbc	r0, r4
      da:	3e 41       	sbci	r19, 0x1E	; 30
      dc:	41 3e       	cpi	r20, 0xE1	; 225
      de:	00 03       	mulsu	r16, r16
      e0:	08 42       	sbci	r16, 0x28	; 40
      e2:	7f 40       	sbci	r23, 0x0F	; 15
      e4:	00 00       	nop
      e6:	04 08       	sbc	r0, r4
      e8:	62 51       	subi	r22, 0x12	; 18
      ea:	49 46       	sbci	r20, 0x69	; 105
      ec:	00 04       	cpc	r0, r0
      ee:	08 22       	and	r0, r24
      f0:	41 49       	sbci	r20, 0x91	; 145
      f2:	36 00       	.word	0x0036	; ????
      f4:	04 08       	sbc	r0, r4
      f6:	18 14       	cp	r1, r8
      f8:	12 7f       	andi	r17, 0xF2	; 242
      fa:	00 04       	cpc	r0, r0
      fc:	08 27       	eor	r16, r24
      fe:	45 45       	sbci	r20, 0x55	; 85
     100:	39 00       	.word	0x0039	; ????
     102:	04 08       	sbc	r0, r4
     104:	3e 49       	sbci	r19, 0x9E	; 158
     106:	49 30       	cpi	r20, 0x09	; 9
     108:	00 04       	cpc	r0, r0
     10a:	08 61       	ori	r16, 0x18	; 24
     10c:	11 09       	sbc	r17, r1
     10e:	07 00       	.word	0x0007	; ????
     110:	04 08       	sbc	r0, r4
     112:	36 49       	sbci	r19, 0x96	; 150
     114:	49 36       	cpi	r20, 0x69	; 105
     116:	00 04       	cpc	r0, r0
     118:	08 06       	cpc	r0, r24
     11a:	49 49       	sbci	r20, 0x99	; 153
     11c:	3e 00       	.word	0x003e	; ????
     11e:	02 08       	sbc	r0, r2
     120:	50 00       	.word	0x0050	; ????
     122:	00 00       	nop
     124:	00 02       	muls	r16, r16
     126:	08 80       	ld	r0, Y
     128:	50 00       	.word	0x0050	; ????
     12a:	00 00       	nop
     12c:	03 08       	sbc	r0, r3
     12e:	10 28       	or	r1, r0
     130:	44 00       	.word	0x0044	; ????
     132:	00 03       	mulsu	r16, r16
     134:	08 14       	cp	r0, r8
     136:	14 14       	cp	r1, r4
     138:	00 00       	nop
     13a:	03 08       	sbc	r0, r3
     13c:	44 28       	or	r4, r4
     13e:	10 00       	.word	0x0010	; ????
     140:	00 04       	cpc	r0, r0
     142:	08 02       	muls	r16, r24
     144:	59 09       	sbc	r21, r9
     146:	06 00       	.word	0x0006	; ????
     148:	05 08       	sbc	r0, r5
     14a:	3e 49       	sbci	r19, 0x9E	; 158
     14c:	55 5d       	subi	r21, 0xD5	; 213
     14e:	0e 04       	cpc	r0, r14
     150:	08 7e       	andi	r16, 0xE8	; 232
     152:	11 11       	cpse	r17, r1
     154:	7e 00       	.word	0x007e	; ????
     156:	04 08       	sbc	r0, r4
     158:	7f 49       	sbci	r23, 0x9F	; 159
     15a:	49 36       	cpi	r20, 0x69	; 105
     15c:	00 04       	cpc	r0, r0
     15e:	08 3e       	cpi	r16, 0xE8	; 232
     160:	41 41       	sbci	r20, 0x11	; 17
     162:	22 00       	.word	0x0022	; ????
     164:	04 08       	sbc	r0, r4
     166:	7f 41       	sbci	r23, 0x1F	; 31
     168:	41 3e       	cpi	r20, 0xE1	; 225
     16a:	00 04       	cpc	r0, r0
     16c:	08 7f       	andi	r16, 0xF8	; 248
     16e:	49 49       	sbci	r20, 0x99	; 153
     170:	41 00       	.word	0x0041	; ????
     172:	04 08       	sbc	r0, r4
     174:	7f 09       	sbc	r23, r15
     176:	09 01       	movw	r0, r18
     178:	00 04       	cpc	r0, r0
     17a:	08 3e       	cpi	r16, 0xE8	; 232
     17c:	41 49       	sbci	r20, 0x91	; 145
     17e:	7a 00       	.word	0x007a	; ????
     180:	04 08       	sbc	r0, r4
     182:	7f 08       	sbc	r7, r15
     184:	08 7f       	andi	r16, 0xF8	; 248
     186:	00 03       	mulsu	r16, r16
     188:	08 41       	sbci	r16, 0x18	; 24
     18a:	7f 41       	sbci	r23, 0x1F	; 31
     18c:	00 00       	nop
     18e:	04 08       	sbc	r0, r4
     190:	30 40       	sbci	r19, 0x00	; 0
     192:	41 3f       	cpi	r20, 0xF1	; 241
     194:	00 04       	cpc	r0, r0
     196:	08 7f       	andi	r16, 0xF8	; 248
     198:	08 14       	cp	r0, r8
     19a:	63 00       	.word	0x0063	; ????
     19c:	04 08       	sbc	r0, r4
     19e:	7f 40       	sbci	r23, 0x0F	; 15
     1a0:	40 40       	sbci	r20, 0x00	; 0
     1a2:	00 05       	cpc	r16, r0
     1a4:	08 7f       	andi	r16, 0xF8	; 248
     1a6:	02 0c       	add	r0, r2
     1a8:	02 7f       	andi	r16, 0xF2	; 242
     1aa:	05 08       	sbc	r0, r5
     1ac:	7f 04       	cpc	r7, r15
     1ae:	08 10       	cpse	r0, r8
     1b0:	7f 04       	cpc	r7, r15
     1b2:	08 3e       	cpi	r16, 0xE8	; 232
     1b4:	41 41       	sbci	r20, 0x11	; 17
     1b6:	3e 00       	.word	0x003e	; ????
     1b8:	04 08       	sbc	r0, r4
     1ba:	7f 09       	sbc	r23, r15
     1bc:	09 06       	cpc	r0, r25
     1be:	00 04       	cpc	r0, r0
     1c0:	08 3e       	cpi	r16, 0xE8	; 232
     1c2:	41 41       	sbci	r20, 0x11	; 17
     1c4:	be 00       	.word	0x00be	; ????
     1c6:	04 08       	sbc	r0, r4
     1c8:	7f 09       	sbc	r23, r15
     1ca:	09 76       	andi	r16, 0x69	; 105
     1cc:	00 04       	cpc	r0, r0
     1ce:	08 46       	sbci	r16, 0x68	; 104
     1d0:	49 49       	sbci	r20, 0x99	; 153
     1d2:	32 00       	.word	0x0032	; ????
     1d4:	05 08       	sbc	r0, r5
     1d6:	01 01       	movw	r0, r2
     1d8:	7f 01       	movw	r14, r30
     1da:	01 04       	cpc	r0, r1
     1dc:	08 3f       	cpi	r16, 0xF8	; 248
     1de:	40 40       	sbci	r20, 0x00	; 0
     1e0:	3f 00       	.word	0x003f	; ????
     1e2:	05 08       	sbc	r0, r5
     1e4:	0f 30       	cpi	r16, 0x0F	; 15
     1e6:	40 30       	cpi	r20, 0x00	; 0
     1e8:	0f 05       	cpc	r16, r15
     1ea:	08 3f       	cpi	r16, 0xF8	; 248
     1ec:	40 38       	cpi	r20, 0x80	; 128
     1ee:	40 3f       	cpi	r20, 0xF0	; 240
     1f0:	05 08       	sbc	r0, r5
     1f2:	63 14       	cp	r6, r3
     1f4:	08 14       	cp	r0, r8
     1f6:	63 05       	cpc	r22, r3
     1f8:	08 07       	cpc	r16, r24
     1fa:	08 70       	andi	r16, 0x08	; 8
     1fc:	08 07       	cpc	r16, r24
     1fe:	04 08       	sbc	r0, r4
     200:	61 51       	subi	r22, 0x11	; 17
     202:	49 47       	sbci	r20, 0x79	; 121
     204:	00 02       	muls	r16, r16
     206:	08 7f       	andi	r16, 0xF8	; 248
     208:	41 00       	.word	0x0041	; ????
     20a:	00 00       	nop
     20c:	04 08       	sbc	r0, r4
     20e:	01 06       	cpc	r0, r17
     210:	18 60       	ori	r17, 0x08	; 8
     212:	00 02       	muls	r16, r16
     214:	08 41       	sbci	r16, 0x18	; 24
     216:	7f 00       	.word	0x007f	; ????
     218:	00 00       	nop
     21a:	03 08       	sbc	r0, r3
     21c:	02 01       	movw	r0, r4
     21e:	02 00       	.word	0x0002	; ????
     220:	00 04       	cpc	r0, r0
     222:	08 40       	sbci	r16, 0x08	; 8
     224:	40 40       	sbci	r20, 0x00	; 0
     226:	40 00       	.word	0x0040	; ????
     228:	02 08       	sbc	r0, r2
     22a:	01 02       	muls	r16, r17
     22c:	00 00       	nop
     22e:	00 04       	cpc	r0, r0
     230:	08 20       	and	r0, r8
     232:	54 54       	subi	r21, 0x44	; 68
     234:	78 00       	.word	0x0078	; ????
     236:	04 08       	sbc	r0, r4
     238:	7f 44       	sbci	r23, 0x4F	; 79
     23a:	44 38       	cpi	r20, 0x84	; 132
     23c:	00 04       	cpc	r0, r0
     23e:	08 38       	cpi	r16, 0x88	; 136
     240:	44 44       	sbci	r20, 0x44	; 68
     242:	28 00       	.word	0x0028	; ????
     244:	04 08       	sbc	r0, r4
     246:	38 44       	sbci	r19, 0x48	; 72
     248:	44 7f       	andi	r20, 0xF4	; 244
     24a:	00 04       	cpc	r0, r0
     24c:	08 38       	cpi	r16, 0x88	; 136
     24e:	54 54       	subi	r21, 0x44	; 68
     250:	18 00       	.word	0x0018	; ????
     252:	03 08       	sbc	r0, r3
     254:	04 7e       	andi	r16, 0xE4	; 228
     256:	05 00       	.word	0x0005	; ????
     258:	00 04       	cpc	r0, r0
     25a:	08 98       	cbi	0x01, 0	; 1
     25c:	a4 a4       	ldd	r10, Z+44	; 0x2c
     25e:	78 00       	.word	0x0078	; ????
     260:	04 08       	sbc	r0, r4
     262:	7f 04       	cpc	r7, r15
     264:	04 78       	andi	r16, 0x84	; 132
     266:	00 03       	mulsu	r16, r16
     268:	08 44       	sbci	r16, 0x48	; 72
     26a:	7d 40       	sbci	r23, 0x0D	; 13
     26c:	00 00       	nop
     26e:	04 08       	sbc	r0, r4
     270:	40 80       	ld	r4, Z
     272:	84 7d       	andi	r24, 0xD4	; 212
     274:	00 04       	cpc	r0, r0
     276:	08 7f       	andi	r16, 0xF8	; 248
     278:	10 28       	or	r1, r0
     27a:	44 00       	.word	0x0044	; ????
     27c:	03 08       	sbc	r0, r3
     27e:	41 7f       	andi	r20, 0xF1	; 241
     280:	40 00       	.word	0x0040	; ????
     282:	00 05       	cpc	r16, r0
     284:	08 7c       	andi	r16, 0xC8	; 200
     286:	04 7c       	andi	r16, 0xC4	; 196
     288:	04 78       	andi	r16, 0x84	; 132
     28a:	04 08       	sbc	r0, r4
     28c:	7c 04       	cpc	r7, r12
     28e:	04 78       	andi	r16, 0x84	; 132
     290:	00 04       	cpc	r0, r0
     292:	08 38       	cpi	r16, 0x88	; 136
     294:	44 44       	sbci	r20, 0x44	; 68
     296:	38 00       	.word	0x0038	; ????
     298:	04 08       	sbc	r0, r4
     29a:	fc 24       	eor	r15, r12
     29c:	24 18       	sub	r2, r4
     29e:	00 04       	cpc	r0, r0
     2a0:	08 18       	sub	r0, r8
     2a2:	24 24       	eor	r2, r4
     2a4:	fc 00       	.word	0x00fc	; ????
     2a6:	04 08       	sbc	r0, r4
     2a8:	7c 08       	sbc	r7, r12
     2aa:	04 04       	cpc	r0, r4
     2ac:	00 04       	cpc	r0, r0
     2ae:	08 48       	sbci	r16, 0x88	; 136
     2b0:	54 54       	subi	r21, 0x44	; 68
     2b2:	24 00       	.word	0x0024	; ????
     2b4:	03 08       	sbc	r0, r3
     2b6:	04 3f       	cpi	r16, 0xF4	; 244
     2b8:	44 00       	.word	0x0044	; ????
     2ba:	00 04       	cpc	r0, r0
     2bc:	08 3c       	cpi	r16, 0xC8	; 200
     2be:	40 40       	sbci	r20, 0x00	; 0
     2c0:	7c 00       	.word	0x007c	; ????
     2c2:	05 08       	sbc	r0, r5
     2c4:	1c 20       	and	r1, r12
     2c6:	40 20       	and	r4, r0
     2c8:	1c 05       	cpc	r17, r12
     2ca:	08 3c       	cpi	r16, 0xC8	; 200
     2cc:	40 3c       	cpi	r20, 0xC0	; 192
     2ce:	40 3c       	cpi	r20, 0xC0	; 192
     2d0:	05 08       	sbc	r0, r5
     2d2:	44 28       	or	r4, r4
     2d4:	10 28       	or	r1, r0
     2d6:	44 04       	cpc	r4, r4
     2d8:	08 9c       	mul	r0, r8
     2da:	a0 a0       	ldd	r10, Z+32	; 0x20
     2dc:	7c 00       	.word	0x007c	; ????
     2de:	03 08       	sbc	r0, r3
     2e0:	64 54       	subi	r22, 0x44	; 68
     2e2:	4c 00       	.word	0x004c	; ????
     2e4:	00 03       	mulsu	r16, r16
     2e6:	08 08       	sbc	r0, r8
     2e8:	36 41       	sbci	r19, 0x16	; 22
     2ea:	00 00       	nop
     2ec:	01 08       	sbc	r0, r1
     2ee:	7f 00       	.word	0x007f	; ????
     2f0:	00 00       	nop
     2f2:	00 03       	mulsu	r16, r16
     2f4:	08 41       	sbci	r16, 0x18	; 24
     2f6:	36 08       	sbc	r3, r6
     2f8:	00 00       	nop
     2fa:	04 08       	sbc	r0, r4
     2fc:	08 04       	cpc	r0, r8
     2fe:	08 04       	cpc	r0, r8
	...

00000301 <digital_pin_to_timer_PGM>:
     301:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     311:	00 00 00 00                                         ....

00000315 <digital_pin_to_bit_mask_PGM>:
     315:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     325:	04 08 10 20                                         ... 

00000329 <digital_pin_to_port_PGM>:
     329:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     339:	03 03 03 03                                         ....

0000033d <port_to_output_PGM>:
     33d:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000347 <port_to_mode_PGM>:
     347:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000352 <__ctors_start>:
     352:	54 02       	muls	r21, r20
     354:	92 06       	cpc	r9, r18

00000356 <__ctors_end>:
     356:	63 02       	muls	r22, r19

00000358 <__dtors_end>:
     358:	11 24       	eor	r1, r1
     35a:	1f be       	out	0x3f, r1	; 63
     35c:	cf ef       	ldi	r28, 0xFF	; 255
     35e:	d8 e0       	ldi	r29, 0x08	; 8
     360:	de bf       	out	0x3e, r29	; 62
     362:	cd bf       	out	0x3d, r28	; 61

00000364 <__do_copy_data>:
     364:	11 e0       	ldi	r17, 0x01	; 1
     366:	a0 e0       	ldi	r26, 0x00	; 0
     368:	b1 e0       	ldi	r27, 0x01	; 1
     36a:	e0 eb       	ldi	r30, 0xB0	; 176
     36c:	f1 e1       	ldi	r31, 0x11	; 17
     36e:	02 c0       	rjmp	.+4      	; 0x374 <__do_copy_data+0x10>
     370:	05 90       	lpm	r0, Z+
     372:	0d 92       	st	X+, r0
     374:	a4 33       	cpi	r26, 0x34	; 52
     376:	b1 07       	cpc	r27, r17
     378:	d9 f7       	brne	.-10     	; 0x370 <__do_copy_data+0xc>

0000037a <__do_clear_bss>:
     37a:	22 e0       	ldi	r18, 0x02	; 2
     37c:	a4 e3       	ldi	r26, 0x34	; 52
     37e:	b1 e0       	ldi	r27, 0x01	; 1
     380:	01 c0       	rjmp	.+2      	; 0x384 <.do_clear_bss_start>

00000382 <.do_clear_bss_loop>:
     382:	1d 92       	st	X+, r1

00000384 <.do_clear_bss_start>:
     384:	aa 34       	cpi	r26, 0x4A	; 74
     386:	b2 07       	cpc	r27, r18
     388:	e1 f7       	brne	.-8      	; 0x382 <.do_clear_bss_loop>

0000038a <__do_global_ctors>:
     38a:	11 e0       	ldi	r17, 0x01	; 1
     38c:	cb ea       	ldi	r28, 0xAB	; 171
     38e:	d1 e0       	ldi	r29, 0x01	; 1
     390:	04 c0       	rjmp	.+8      	; 0x39a <__do_global_ctors+0x10>
     392:	21 97       	sbiw	r28, 0x01	; 1
     394:	fe 01       	movw	r30, r28
     396:	0e 94 bc 08 	call	0x1178	; 0x1178 <__tablejump2__>
     39a:	c9 3a       	cpi	r28, 0xA9	; 169
     39c:	d1 07       	cpc	r29, r17
     39e:	c9 f7       	brne	.-14     	; 0x392 <__do_global_ctors+0x8>
     3a0:	0e 94 c0 06 	call	0xd80	; 0xd80 <main>
     3a4:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__do_global_dtors>

000003a8 <__bad_interrupt>:
     3a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003ac <setup>:
char string11[] = " ' , . ; ~ ] ´ [ | < > : ^ } ` { / ?  ";



void setup(){
  m.init(); // module initialize
     3ac:	88 e9       	ldi	r24, 0x98	; 152
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN9MaxMatrix4initEv>
  m.setIntensity(5); // dot matix intensity 0-15
     3b4:	65 e0       	ldi	r22, 0x05	; 5
     3b6:	88 e9       	ldi	r24, 0x98	; 152
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9MaxMatrix12setIntensityEh>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     3be:	26 e0       	ldi	r18, 0x06	; 6
     3c0:	40 e8       	ldi	r20, 0x80	; 128
     3c2:	55 e2       	ldi	r21, 0x25	; 37
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	84 ea       	ldi	r24, 0xA4	; 164
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <_ZN14HardwareSerial5beginEmh>

000003d0 <_Z18printCharWithShiftci>:
  Serial.begin(9600); // serial communication initialize
}

void printCharWithShift(char c, int shift_speed){
     3d0:	cf 92       	push	r12
     3d2:	df 92       	push	r13
     3d4:	ef 92       	push	r14
     3d6:	ff 92       	push	r15
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
	if (c < 64) return;
     3dc:	80 34       	cpi	r24, 0x40	; 64
     3de:	c8 f1       	brcs	.+114    	; 0x452 <_Z18printCharWithShiftci+0x82>
     3e0:	6b 01       	movw	r12, r22
	c -= 64;
     3e2:	80 54       	subi	r24, 0x40	; 64
	memcpy_P(buffer, CH + 7*c, 7);
     3e4:	27 e0       	ldi	r18, 0x07	; 7
     3e6:	82 9f       	mul	r24, r18
     3e8:	c0 01       	movw	r24, r0
     3ea:	11 24       	eor	r1, r1
     3ec:	bc 01       	movw	r22, r24
     3ee:	68 59       	subi	r22, 0x98	; 152
     3f0:	7f 4f       	sbci	r23, 0xFF	; 255
     3f2:	47 e0       	ldi	r20, 0x07	; 7
     3f4:	50 e0       	ldi	r21, 0x00	; 0
     3f6:	84 e3       	ldi	r24, 0x34	; 52
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	0e 94 c2 08 	call	0x1184	; 0x1184 <memcpy_P>
	m.writeSprite(64, 0, buffer);
     3fe:	24 e3       	ldi	r18, 0x34	; 52
     400:	31 e0       	ldi	r19, 0x01	; 1
     402:	40 e0       	ldi	r20, 0x00	; 0
     404:	50 e0       	ldi	r21, 0x00	; 0
     406:	60 e4       	ldi	r22, 0x40	; 64
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	88 e9       	ldi	r24, 0x98	; 152
     40c:	91 e0       	ldi	r25, 0x01	; 1
     40e:	0e 94 10 04 	call	0x820	; 0x820 <_ZN9MaxMatrix11writeSpriteEiiPKh>
	m.setColumn(64 + buffer[0], 0);
     412:	60 91 34 01 	lds	r22, 0x0134
     416:	60 5c       	subi	r22, 0xC0	; 192
     418:	40 e0       	ldi	r20, 0x00	; 0
     41a:	88 e9       	ldi	r24, 0x98	; 152
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	0e 94 b2 02 	call	0x564	; 0x564 <_ZN9MaxMatrix9setColumnEhh>
	
	for (int i=0; i<buffer[0]+1; i++)
     422:	c0 e0       	ldi	r28, 0x00	; 0
     424:	d0 e0       	ldi	r29, 0x00	; 0
	{
		delay(shift_speed);
     426:	0d 2c       	mov	r0, r13
     428:	00 0c       	add	r0, r0
     42a:	ee 08       	sbc	r14, r14
     42c:	ff 08       	sbc	r15, r15
	c -= 64;
	memcpy_P(buffer, CH + 7*c, 7);
	m.writeSprite(64, 0, buffer);
	m.setColumn(64 + buffer[0], 0);
	
	for (int i=0; i<buffer[0]+1; i++)
     42e:	80 91 34 01 	lds	r24, 0x0134
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	8c 17       	cp	r24, r28
     436:	9d 07       	cpc	r25, r29
     438:	64 f0       	brlt	.+24     	; 0x452 <_Z18printCharWithShiftci+0x82>
	{
		delay(shift_speed);
     43a:	c7 01       	movw	r24, r14
     43c:	b6 01       	movw	r22, r12
     43e:	0e 94 66 07 	call	0xecc	; 0xecc <delay>
		m.shiftLeft(false, false);
     442:	40 e0       	ldi	r20, 0x00	; 0
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	88 e9       	ldi	r24, 0x98	; 152
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_ZN9MaxMatrix9shiftLeftEbb>
	c -= 64;
	memcpy_P(buffer, CH + 7*c, 7);
	m.writeSprite(64, 0, buffer);
	m.setColumn(64 + buffer[0], 0);
	
	for (int i=0; i<buffer[0]+1; i++)
     44e:	21 96       	adiw	r28, 0x01	; 1
     450:	ee cf       	rjmp	.-36     	; 0x42e <_Z18printCharWithShiftci+0x5e>
	{
		delay(shift_speed);
		m.shiftLeft(false, false);
	}
}
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	ff 90       	pop	r15
     458:	ef 90       	pop	r14
     45a:	df 90       	pop	r13
     45c:	cf 90       	pop	r12
     45e:	08 95       	ret

00000460 <_Z20printStringWithShiftPci>:

void printStringWithShift(char* s, int shift_speed){
     460:	0f 93       	push	r16
     462:	1f 93       	push	r17
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	8b 01       	movw	r16, r22
     46a:	ec 01       	movw	r28, r24
	while (*s != 0){
     46c:	89 91       	ld	r24, Y+
     46e:	88 23       	and	r24, r24
     470:	21 f0       	breq	.+8      	; 0x47a <_Z20printStringWithShiftPci+0x1a>
		printCharWithShift(*s, shift_speed);
     472:	b8 01       	movw	r22, r16
     474:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_Z18printCharWithShiftci>
     478:	f9 cf       	rjmp	.-14     	; 0x46c <_Z20printStringWithShiftPci+0xc>
		s++;
	}
}
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	1f 91       	pop	r17
     480:	0f 91       	pop	r16
     482:	08 95       	ret

00000484 <loop>:
  //while (Serial.available() > 0){
    //byte c = Serial.read();
    //Serial.println(c, DEC);
    //printCharWithShift(c, 100);
  //}
  delay(100);
     484:	64 e6       	ldi	r22, 0x64	; 100
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 66 07 	call	0xecc	; 0xecc <delay>
  m.shiftLeft(false, true);
     490:	41 e0       	ldi	r20, 0x01	; 1
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	88 e9       	ldi	r24, 0x98	; 152
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_ZN9MaxMatrix9shiftLeftEbb>
    printStringWithShift(string1, 100);
     49c:	64 e6       	ldi	r22, 0x64	; 100
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	0c 94 30 02 	jmp	0x460	; 0x460 <_Z20printStringWithShiftPci>

000004a8 <_GLOBAL__sub_I_data>:
  printStringWithShift(string5, 100);
  printStringWithShift(string6, 100);
  */

 
}
     4a8:	0f 93       	push	r16
int load = 9;    // CS pin of MAX7219 module
int clock = 10;  // CLK pin of MAX7219 module

int maxInUse = 4;    //change this variable to set how many MAX7219's you'll use

MaxMatrix m(data, load, clock, maxInUse); // define module
     4aa:	00 91 1c 01 	lds	r16, 0x011C
     4ae:	20 91 1e 01 	lds	r18, 0x011E
     4b2:	40 91 20 01 	lds	r20, 0x0120
     4b6:	60 91 22 01 	lds	r22, 0x0122
     4ba:	88 e9       	ldi	r24, 0x98	; 152
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	0e 94 67 02 	call	0x4ce	; 0x4ce <_ZN9MaxMatrixC1Ehhhh>
  printStringWithShift(string5, 100);
  printStringWithShift(string6, 100);
  */

 
}
     4c2:	0f 91       	pop	r16
     4c4:	08 95       	ret

000004c6 <_GLOBAL__sub_D_data>:
int load = 9;    // CS pin of MAX7219 module
int clock = 10;  // CLK pin of MAX7219 module

int maxInUse = 4;    //change this variable to set how many MAX7219's you'll use

MaxMatrix m(data, load, clock, maxInUse); // define module
     4c6:	88 e9       	ldi	r24, 0x98	; 152
     4c8:	91 e0       	ldi	r25, 0x01	; 1
     4ca:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <_ZN9MaxMatrixD1Ev>

000004ce <_ZN9MaxMatrixC1Ehhhh>:
 *  \param[in]      sChipSelectPin     number of the Chip Select (CS) Pin
 *  \param[in]      sClockPin          number of the Clock Pin
 *  \param[in]      sNumberOfModules   number of the used Matrix modules
 *  \return         -
 *********************************************************************************************************************/
MaxMatrix::MaxMatrix(byte sDataInPin, byte sChipSelectPin, byte sClockPin, byte sNumberOfModules) 
     4ce:	0f 93       	push	r16
     4d0:	fc 01       	movw	r30, r24
{
	DataInPin = sDataInPin;
     4d2:	60 83       	st	Z, r22
	ChipSelectPin = sChipSelectPin;
     4d4:	41 83       	std	Z+1, r20	; 0x01
	ClockPin = sClockPin;
     4d6:	22 83       	std	Z+2, r18	; 0x02
	NumberOfModules = sNumberOfModules;
     4d8:	03 83       	std	Z+3, r16	; 0x03
     4da:	dc 01       	movw	r26, r24
     4dc:	14 96       	adiw	r26, 0x04	; 4
     4de:	3c 96       	adiw	r30, 0x0c	; 12
	for (int i = 0; i < MAXMATRIX_NUMBER_OF_COLUMNS; i++)
		buffer[i] = 0;
     4e0:	1d 92       	st	X+, r1
{
	DataInPin = sDataInPin;
	ChipSelectPin = sChipSelectPin;
	ClockPin = sClockPin;
	NumberOfModules = sNumberOfModules;
	for (int i = 0; i < MAXMATRIX_NUMBER_OF_COLUMNS; i++)
     4e2:	ae 17       	cp	r26, r30
     4e4:	bf 07       	cpc	r27, r31
     4e6:	e1 f7       	brne	.-8      	; 0x4e0 <_ZN9MaxMatrixC1Ehhhh+0x12>
		buffer[i] = 0;
} /* MaxMatrix */
     4e8:	0f 91       	pop	r16
     4ea:	08 95       	ret

000004ec <_ZN9MaxMatrixD1Ev>:


/**********************************************************************************************************************
  DESTRUCTOR OF MaxMatrix
**********************************************************************************************************************/
MaxMatrix::~MaxMatrix()
     4ec:	08 95       	ret

000004ee <_ZN9MaxMatrix10setCommandEhh>:
		buffer[i] = 0;
}


void MaxMatrix::setCommand(byte Command, byte Value)
{
     4ee:	ef 92       	push	r14
     4f0:	ff 92       	push	r15
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	ec 01       	movw	r28, r24
     4fc:	f6 2e       	mov	r15, r22
     4fe:	e4 2e       	mov	r14, r20
	digitalWrite(ChipSelectPin, LOW);
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	0e 94 2e 08 	call	0x105c	; 0x105c <digitalWrite>
	for(int i = 0; i<NumberOfModules; i++)
     508:	00 e0       	ldi	r16, 0x00	; 0
     50a:	10 e0       	ldi	r17, 0x00	; 0
     50c:	8b 81       	ldd	r24, Y+3	; 0x03
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	08 17       	cp	r16, r24
     512:	19 07       	cpc	r17, r25
     514:	7c f4       	brge	.+30     	; 0x534 <_ZN9MaxMatrix10setCommandEhh+0x46>
	{
		shiftOut(DataInPin, ClockPin, MSBFIRST, Command);
     516:	2f 2d       	mov	r18, r15
     518:	41 e0       	ldi	r20, 0x01	; 1
     51a:	6a 81       	ldd	r22, Y+2	; 0x02
     51c:	88 81       	ld	r24, Y
     51e:	0e 94 5e 08 	call	0x10bc	; 0x10bc <shiftOut>
		shiftOut(DataInPin, ClockPin, MSBFIRST, Value);
     522:	2e 2d       	mov	r18, r14
     524:	41 e0       	ldi	r20, 0x01	; 1
     526:	6a 81       	ldd	r22, Y+2	; 0x02
     528:	88 81       	ld	r24, Y
     52a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <shiftOut>


void MaxMatrix::setCommand(byte Command, byte Value)
{
	digitalWrite(ChipSelectPin, LOW);
	for(int i = 0; i<NumberOfModules; i++)
     52e:	0f 5f       	subi	r16, 0xFF	; 255
     530:	1f 4f       	sbci	r17, 0xFF	; 255
     532:	ec cf       	rjmp	.-40     	; 0x50c <_ZN9MaxMatrix10setCommandEhh+0x1e>
	{
		shiftOut(DataInPin, ClockPin, MSBFIRST, Command);
		shiftOut(DataInPin, ClockPin, MSBFIRST, Value);
	}
	digitalWrite(ChipSelectPin, LOW);
     534:	60 e0       	ldi	r22, 0x00	; 0
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	0e 94 2e 08 	call	0x105c	; 0x105c <digitalWrite>
	digitalWrite(ChipSelectPin, HIGH);
     53c:	61 e0       	ldi	r22, 0x01	; 1
     53e:	89 81       	ldd	r24, Y+1	; 0x01
}
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	0f 91       	pop	r16
     548:	ff 90       	pop	r15
     54a:	ef 90       	pop	r14
	{
		shiftOut(DataInPin, ClockPin, MSBFIRST, Command);
		shiftOut(DataInPin, ClockPin, MSBFIRST, Value);
	}
	digitalWrite(ChipSelectPin, LOW);
	digitalWrite(ChipSelectPin, HIGH);
     54c:	0c 94 2e 08 	jmp	0x105c	; 0x105c <digitalWrite>

00000550 <_ZN9MaxMatrix12setIntensityEh>:
}


stdReturnType MaxMatrix::setIntensity(byte Intensity)
{
	if(Intensity >= MAX7219_REG_INTENSITY_MIN_VALUE && Intensity <= MAX7219_REG_INTENSITY_MAX_VALUE) {
     550:	60 31       	cpi	r22, 0x10	; 16
     552:	30 f4       	brcc	.+12     	; 0x560 <_ZN9MaxMatrix12setIntensityEh+0x10>
     554:	46 2f       	mov	r20, r22
		setCommand(MAX7219_REG_INTENSITY_ADDRESS, Intensity);
     556:	6a e0       	ldi	r22, 0x0A	; 10
     558:	0e 94 77 02 	call	0x4ee	; 0x4ee <_ZN9MaxMatrix10setCommandEhh>
		return E_OK;
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	08 95       	ret
	} else {
		return E_NOT_OK;
     560:	81 e0       	ldi	r24, 0x01	; 1
	}
}
     562:	08 95       	ret

00000564 <_ZN9MaxMatrix9setColumnEhh>:
	digitalWrite(ChipSelectPin, HIGH);
}


stdReturnType MaxMatrix::setColumn(byte Column, byte Value)
{
     564:	bf 92       	push	r11
     566:	cf 92       	push	r12
     568:	df 92       	push	r13
     56a:	ef 92       	push	r14
     56c:	ff 92       	push	r15
     56e:	0f 93       	push	r16
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
	if(Column >= 0 && Column <= MAXMATRIX_NUMBER_OF_COLUMNS) {
     576:	69 30       	cpi	r22, 0x09	; 9
     578:	08 f0       	brcs	.+2      	; 0x57c <_ZN9MaxMatrix9setColumnEhh+0x18>
     57a:	3f c0       	rjmp	.+126    	; 0x5fa <_ZN9MaxMatrix9setColumnEhh+0x96>
     57c:	04 2f       	mov	r16, r20
     57e:	16 2f       	mov	r17, r22
     580:	ec 01       	movw	r28, r24
		int Module = Column / MAXMATRIX_COLUMN_NUMBER_OF_MODULE;
     582:	c6 2e       	mov	r12, r22
     584:	c6 94       	lsr	r12
     586:	c6 94       	lsr	r12
     588:	c6 94       	lsr	r12
     58a:	d1 2c       	mov	r13, r1
		int ModuleColumn = Column % MAXMATRIX_COLUMN_NUMBER_OF_MODULE;
     58c:	86 2f       	mov	r24, r22
     58e:	87 70       	andi	r24, 0x07	; 7
     590:	b8 2e       	mov	r11, r24
		digitalWrite(ChipSelectPin, LOW);
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	89 81       	ldd	r24, Y+1	; 0x01
     596:	0e 94 2e 08 	call	0x105c	; 0x105c <digitalWrite>
		for(int i = 0; i < NumberOfModules; i++)
     59a:	e1 2c       	mov	r14, r1
     59c:	f1 2c       	mov	r15, r1
		{
			if (i == Module) {
				shiftOut(DataInPin, ClockPin, MSBFIRST,  ModuleColumn + 1);
     59e:	b3 94       	inc	r11
{
	if(Column >= 0 && Column <= MAXMATRIX_NUMBER_OF_COLUMNS) {
		int Module = Column / MAXMATRIX_COLUMN_NUMBER_OF_MODULE;
		int ModuleColumn = Column % MAXMATRIX_COLUMN_NUMBER_OF_MODULE;
		digitalWrite(ChipSelectPin, LOW);
		for(int i = 0; i < NumberOfModules; i++)
     5a0:	8b 81       	ldd	r24, Y+3	; 0x03
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	e8 16       	cp	r14, r24
     5a6:	f9 06       	cpc	r15, r25
     5a8:	dc f4       	brge	.+54     	; 0x5e0 <_ZN9MaxMatrix9setColumnEhh+0x7c>
		{
			if (i == Module) {
     5aa:	ec 14       	cp	r14, r12
     5ac:	fd 04       	cpc	r15, r13
     5ae:	41 f4       	brne	.+16     	; 0x5c0 <_ZN9MaxMatrix9setColumnEhh+0x5c>
				shiftOut(DataInPin, ClockPin, MSBFIRST,  ModuleColumn + 1);
     5b0:	2b 2d       	mov	r18, r11
     5b2:	41 e0       	ldi	r20, 0x01	; 1
     5b4:	6a 81       	ldd	r22, Y+2	; 0x02
     5b6:	88 81       	ld	r24, Y
     5b8:	0e 94 5e 08 	call	0x10bc	; 0x10bc <shiftOut>
				shiftOut(DataInPin, ClockPin, MSBFIRST, Value);
     5bc:	20 2f       	mov	r18, r16
     5be:	07 c0       	rjmp	.+14     	; 0x5ce <_ZN9MaxMatrix9setColumnEhh+0x6a>
				} else {
				shiftOut(DataInPin, ClockPin, MSBFIRST, 0);
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	41 e0       	ldi	r20, 0x01	; 1
     5c4:	6a 81       	ldd	r22, Y+2	; 0x02
     5c6:	88 81       	ld	r24, Y
     5c8:	0e 94 5e 08 	call	0x10bc	; 0x10bc <shiftOut>
				shiftOut(DataInPin, ClockPin, MSBFIRST, 0);
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	41 e0       	ldi	r20, 0x01	; 1
     5d0:	6a 81       	ldd	r22, Y+2	; 0x02
     5d2:	88 81       	ld	r24, Y
     5d4:	0e 94 5e 08 	call	0x10bc	; 0x10bc <shiftOut>
{
	if(Column >= 0 && Column <= MAXMATRIX_NUMBER_OF_COLUMNS) {
		int Module = Column / MAXMATRIX_COLUMN_NUMBER_OF_MODULE;
		int ModuleColumn = Column % MAXMATRIX_COLUMN_NUMBER_OF_MODULE;
		digitalWrite(ChipSelectPin, LOW);
		for(int i = 0; i < NumberOfModules; i++)
     5d8:	8f ef       	ldi	r24, 0xFF	; 255
     5da:	e8 1a       	sub	r14, r24
     5dc:	f8 0a       	sbc	r15, r24
     5de:	e0 cf       	rjmp	.-64     	; 0x5a0 <_ZN9MaxMatrix9setColumnEhh+0x3c>
				} else {
				shiftOut(DataInPin, ClockPin, MSBFIRST, 0);
				shiftOut(DataInPin, ClockPin, MSBFIRST, 0);
			}
		}
		digitalWrite(ChipSelectPin, LOW);
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	89 81       	ldd	r24, Y+1	; 0x01
     5e4:	0e 94 2e 08 	call	0x105c	; 0x105c <digitalWrite>
		digitalWrite(ChipSelectPin, HIGH);
     5e8:	61 e0       	ldi	r22, 0x01	; 1
     5ea:	89 81       	ldd	r24, Y+1	; 0x01
     5ec:	0e 94 2e 08 	call	0x105c	; 0x105c <digitalWrite>
		buffer[Column] = Value;
     5f0:	c1 0f       	add	r28, r17
     5f2:	d1 1d       	adc	r29, r1
     5f4:	0c 83       	std	Y+4, r16	; 0x04
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	01 c0       	rjmp	.+2      	; 0x5fc <_ZN9MaxMatrix9setColumnEhh+0x98>
		return E_OK;
	} else {
		return E_NOT_OK;
     5fa:	81 e0       	ldi	r24, 0x01	; 1
	}
}
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	1f 91       	pop	r17
     602:	0f 91       	pop	r16
     604:	ff 90       	pop	r15
     606:	ef 90       	pop	r14
     608:	df 90       	pop	r13
     60a:	cf 90       	pop	r12
     60c:	bf 90       	pop	r11
     60e:	08 95       	ret

00000610 <_ZN9MaxMatrix12setColumnAllEhh>:


stdReturnType MaxMatrix::setColumnAll(byte Column, byte Value)
{
     610:	af 92       	push	r10
     612:	bf 92       	push	r11
     614:	cf 92       	push	r12
     616:	df 92       	push	r13
     618:	ef 92       	push	r14
     61a:	ff 92       	push	r15
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
	if(Column >= 0 && Column <= MAXMATRIX_COLUMN_NUMBER_OF_MODULE) {
     624:	69 30       	cpi	r22, 0x09	; 9
     626:	98 f5       	brcc	.+102    	; 0x68e <_ZN9MaxMatrix12setColumnAllEhh+0x7e>
     628:	04 2f       	mov	r16, r20
     62a:	16 2f       	mov	r17, r22
     62c:	ec 01       	movw	r28, r24
		digitalWrite(ChipSelectPin, LOW);
     62e:	60 e0       	ldi	r22, 0x00	; 0
     630:	89 81       	ldd	r24, Y+1	; 0x01
     632:	0e 94 2e 08 	call	0x105c	; 0x105c <digitalWrite>
     636:	c1 2e       	mov	r12, r17
     638:	d1 2c       	mov	r13, r1
     63a:	5e 01       	movw	r10, r28
     63c:	84 e0       	ldi	r24, 0x04	; 4
     63e:	a8 0e       	add	r10, r24
     640:	b1 1c       	adc	r11, r1
		for(int i = 0; i < NumberOfModules; i++)
     642:	e1 2c       	mov	r14, r1
     644:	f1 2c       	mov	r15, r1
		{
			shiftOut(DataInPin, ClockPin, MSBFIRST, Column + 1);
     646:	1f 5f       	subi	r17, 0xFF	; 255

stdReturnType MaxMatrix::setColumnAll(byte Column, byte Value)
{
	if(Column >= 0 && Column <= MAXMATRIX_COLUMN_NUMBER_OF_MODULE) {
		digitalWrite(ChipSelectPin, LOW);
		for(int i = 0; i < NumberOfModules; i++)
     648:	8b 81       	ldd	r24, Y+3	; 0x03
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	e8 16       	cp	r14, r24
     64e:	f9 06       	cpc	r15, r25
     650:	a4 f4       	brge	.+40     	; 0x67a <_ZN9MaxMatrix12setColumnAllEhh+0x6a>
		{
			shiftOut(DataInPin, ClockPin, MSBFIRST, Column + 1);
     652:	21 2f       	mov	r18, r17
     654:	41 e0       	ldi	r20, 0x01	; 1
     656:	6a 81       	ldd	r22, Y+2	; 0x02
     658:	88 81       	ld	r24, Y
     65a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <shiftOut>
			shiftOut(DataInPin, ClockPin, MSBFIRST, Value);
     65e:	20 2f       	mov	r18, r16
     660:	41 e0       	ldi	r20, 0x01	; 1
     662:	6a 81       	ldd	r22, Y+2	; 0x02
     664:	88 81       	ld	r24, Y
     666:	0e 94 5e 08 	call	0x10bc	; 0x10bc <shiftOut>
			buffer[Column * i] = Value;
     66a:	f5 01       	movw	r30, r10
     66c:	00 83       	st	Z, r16

stdReturnType MaxMatrix::setColumnAll(byte Column, byte Value)
{
	if(Column >= 0 && Column <= MAXMATRIX_COLUMN_NUMBER_OF_MODULE) {
		digitalWrite(ChipSelectPin, LOW);
		for(int i = 0; i < NumberOfModules; i++)
     66e:	ff ef       	ldi	r31, 0xFF	; 255
     670:	ef 1a       	sub	r14, r31
     672:	ff 0a       	sbc	r15, r31
     674:	ac 0c       	add	r10, r12
     676:	bd 1c       	adc	r11, r13
     678:	e7 cf       	rjmp	.-50     	; 0x648 <_ZN9MaxMatrix12setColumnAllEhh+0x38>
		{
			shiftOut(DataInPin, ClockPin, MSBFIRST, Column + 1);
			shiftOut(DataInPin, ClockPin, MSBFIRST, Value);
			buffer[Column * i] = Value;
		}
		digitalWrite(ChipSelectPin, LOW);
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	89 81       	ldd	r24, Y+1	; 0x01
     67e:	0e 94 2e 08 	call	0x105c	; 0x105c <digitalWrite>
		digitalWrite(ChipSelectPin, HIGH);
     682:	61 e0       	ldi	r22, 0x01	; 1
     684:	89 81       	ldd	r24, Y+1	; 0x01
     686:	0e 94 2e 08 	call	0x105c	; 0x105c <digitalWrite>
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	01 c0       	rjmp	.+2      	; 0x690 <_ZN9MaxMatrix12setColumnAllEhh+0x80>
		return E_OK;
	} else {
		return E_NOT_OK;
     68e:	81 e0       	ldi	r24, 0x01	; 1
	}

}
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	1f 91       	pop	r17
     696:	0f 91       	pop	r16
     698:	ff 90       	pop	r15
     69a:	ef 90       	pop	r14
     69c:	df 90       	pop	r13
     69e:	cf 90       	pop	r12
     6a0:	bf 90       	pop	r11
     6a2:	af 90       	pop	r10
     6a4:	08 95       	ret

000006a6 <_ZN9MaxMatrix5clearEv>:
	}
}


void MaxMatrix::clear()
{
     6a6:	1f 93       	push	r17
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	ec 01       	movw	r28, r24
     6ae:	10 e0       	ldi	r17, 0x00	; 0
	for(int i = 0; i < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; i++)
		setColumnAll(i,0);
     6b0:	40 e0       	ldi	r20, 0x00	; 0
     6b2:	61 2f       	mov	r22, r17
     6b4:	ce 01       	movw	r24, r28
     6b6:	0e 94 08 03 	call	0x610	; 0x610 <_ZN9MaxMatrix12setColumnAllEhh>
     6ba:	1f 5f       	subi	r17, 0xFF	; 255
}


void MaxMatrix::clear()
{
	for(int i = 0; i < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; i++)
     6bc:	18 30       	cpi	r17, 0x08	; 8
     6be:	c1 f7       	brne	.-16     	; 0x6b0 <_ZN9MaxMatrix5clearEv+0xa>
     6c0:	fe 01       	movw	r30, r28
     6c2:	34 96       	adiw	r30, 0x04	; 4
     6c4:	2c 96       	adiw	r28, 0x0c	; 12
		setColumnAll(i,0);
		
	for(int i = 0; i < MAXMATRIX_NUMBER_OF_COLUMNS; i++)
		buffer[i] = 0;
     6c6:	11 92       	st	Z+, r1
void MaxMatrix::clear()
{
	for(int i = 0; i < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; i++)
		setColumnAll(i,0);
		
	for(int i = 0; i < MAXMATRIX_NUMBER_OF_COLUMNS; i++)
     6c8:	ec 17       	cp	r30, r28
     6ca:	fd 07       	cpc	r31, r29
     6cc:	e1 f7       	brne	.-8      	; 0x6c6 <_ZN9MaxMatrix5clearEv+0x20>
		buffer[i] = 0;
}
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	1f 91       	pop	r17
     6d4:	08 95       	ret

000006d6 <_ZN9MaxMatrix4initEv>:

} /* ~MaxMatrix */


void MaxMatrix::init()
{
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	ec 01       	movw	r28, r24
	pinMode(DataInPin, OUTPUT);
     6dc:	61 e0       	ldi	r22, 0x01	; 1
     6de:	88 81       	ld	r24, Y
     6e0:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <pinMode>
	pinMode(ClockPin, OUTPUT);
     6e4:	61 e0       	ldi	r22, 0x01	; 1
     6e6:	8a 81       	ldd	r24, Y+2	; 0x02
     6e8:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <pinMode>
	pinMode(ChipSelectPin, OUTPUT);
     6ec:	61 e0       	ldi	r22, 0x01	; 1
     6ee:	89 81       	ldd	r24, Y+1	; 0x01
     6f0:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <pinMode>
	digitalWrite(ClockPin, HIGH); 
     6f4:	61 e0       	ldi	r22, 0x01	; 1
     6f6:	8a 81       	ldd	r24, Y+2	; 0x02
     6f8:	0e 94 2e 08 	call	0x105c	; 0x105c <digitalWrite>

	setCommand(MAX7219_REG_SCAN_LIMIT_ADDRESS, MAX7219_REG_SCAN_LIMIT_DISPLAY_DIGIT_0_TO_7);    // display all digits  
     6fc:	47 e0       	ldi	r20, 0x07	; 7
     6fe:	6b e0       	ldi	r22, 0x0B	; 11
     700:	ce 01       	movw	r24, r28
     702:	0e 94 77 02 	call	0x4ee	; 0x4ee <_ZN9MaxMatrix10setCommandEhh>
	setCommand(MAX7219_REG_DECODE_MODE_ADDRESS, MAX7219_REG_DECODE_MODE_NO_DECODE);				// using an led matrix (not digits)
     706:	40 e0       	ldi	r20, 0x00	; 0
     708:	69 e0       	ldi	r22, 0x09	; 9
     70a:	ce 01       	movw	r24, r28
     70c:	0e 94 77 02 	call	0x4ee	; 0x4ee <_ZN9MaxMatrix10setCommandEhh>
	setCommand(MAX7219_REG_SHUTDOWN_ADDRESS, MAX7219_REG_SHUTDOWN_MODE_NORMAL_OPERATION);		// not in shutdown mode
     710:	41 e0       	ldi	r20, 0x01	; 1
     712:	6c e0       	ldi	r22, 0x0C	; 12
     714:	ce 01       	movw	r24, r28
     716:	0e 94 77 02 	call	0x4ee	; 0x4ee <_ZN9MaxMatrix10setCommandEhh>
	setCommand(MAX7219_REG_DISPLAY_TEST_ADDRESS, MAX7219_REG_DISPLAY_TEST_NORMAL_OPERATION);	// no display test
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	6f e0       	ldi	r22, 0x0F	; 15
     71e:	ce 01       	movw	r24, r28
     720:	0e 94 77 02 	call	0x4ee	; 0x4ee <_ZN9MaxMatrix10setCommandEhh>
	
	// empty registers, turn all LEDs off
	clear();
     724:	ce 01       	movw	r24, r28
     726:	0e 94 53 03 	call	0x6a6	; 0x6a6 <_ZN9MaxMatrix5clearEv>
	
	setIntensity(0x04);    // the first 0x0f is the value you can set
     72a:	64 e0       	ldi	r22, 0x04	; 4
     72c:	ce 01       	movw	r24, r28
}
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
	setCommand(MAX7219_REG_DISPLAY_TEST_ADDRESS, MAX7219_REG_DISPLAY_TEST_NORMAL_OPERATION);	// no display test
	
	// empty registers, turn all LEDs off
	clear();
	
	setIntensity(0x04);    // the first 0x0f is the value you can set
     732:	0c 94 a8 02 	jmp	0x550	; 0x550 <_ZN9MaxMatrix12setIntensityEh>

00000736 <_ZN9MaxMatrix6setDotEhhh>:

}


stdReturnType MaxMatrix::setDot(byte Column, byte Row, byte Value)
{
     736:	cf 92       	push	r12
     738:	df 92       	push	r13
     73a:	ef 92       	push	r14
     73c:	ff 92       	push	r15
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
	if(Column >= 0 && Column < MAXMATRIX_NUMBER_OF_COLUMNS && Row >= 0 && Row < MAXMATRIX_ROW_NUMBER_OF_MODULE) {
     746:	68 30       	cpi	r22, 0x08	; 8
     748:	08 f0       	brcs	.+2      	; 0x74c <_ZN9MaxMatrix6setDotEhhh+0x16>
     74a:	60 c0       	rjmp	.+192    	; 0x80c <_ZN9MaxMatrix6setDotEhhh+0xd6>
     74c:	48 30       	cpi	r20, 0x08	; 8
     74e:	08 f0       	brcs	.+2      	; 0x752 <_ZN9MaxMatrix6setDotEhhh+0x1c>
     750:	5d c0       	rjmp	.+186    	; 0x80c <_ZN9MaxMatrix6setDotEhhh+0xd6>
     752:	e6 2e       	mov	r14, r22
     754:	f1 2c       	mov	r15, r1
	    bitWrite(buffer[Column], Row, Value);
     756:	fc 01       	movw	r30, r24
     758:	ee 0d       	add	r30, r14
     75a:	ff 1d       	adc	r31, r15
     75c:	22 23       	and	r18, r18
     75e:	71 f0       	breq	.+28     	; 0x77c <_ZN9MaxMatrix6setDotEhhh+0x46>
     760:	01 e0       	ldi	r16, 0x01	; 1
     762:	10 e0       	ldi	r17, 0x00	; 0
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	04 c0       	rjmp	.+8      	; 0x772 <_ZN9MaxMatrix6setDotEhhh+0x3c>
     76a:	00 0f       	add	r16, r16
     76c:	11 1f       	adc	r17, r17
     76e:	22 1f       	adc	r18, r18
     770:	33 1f       	adc	r19, r19
     772:	4a 95       	dec	r20
     774:	d2 f7       	brpl	.-12     	; 0x76a <_ZN9MaxMatrix6setDotEhhh+0x34>
     776:	44 81       	ldd	r20, Z+4	; 0x04
     778:	04 2b       	or	r16, r20
     77a:	0e c0       	rjmp	.+28     	; 0x798 <_ZN9MaxMatrix6setDotEhhh+0x62>
     77c:	01 e0       	ldi	r16, 0x01	; 1
     77e:	10 e0       	ldi	r17, 0x00	; 0
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	04 c0       	rjmp	.+8      	; 0x78e <_ZN9MaxMatrix6setDotEhhh+0x58>
     786:	00 0f       	add	r16, r16
     788:	11 1f       	adc	r17, r17
     78a:	22 1f       	adc	r18, r18
     78c:	33 1f       	adc	r19, r19
     78e:	4a 95       	dec	r20
     790:	d2 f7       	brpl	.-12     	; 0x786 <_ZN9MaxMatrix6setDotEhhh+0x50>
     792:	00 95       	com	r16
     794:	24 81       	ldd	r18, Z+4	; 0x04
     796:	02 23       	and	r16, r18
     798:	04 83       	std	Z+4, r16	; 0x04
     79a:	16 2f       	mov	r17, r22
     79c:	ec 01       	movw	r28, r24

	    int Module = Column / MAXMATRIX_COLUMN_NUMBER_OF_MODULE;
	    int ModuleColumn = Column % MAXMATRIX_COLUMN_NUMBER_OF_MODULE;
	    digitalWrite(ChipSelectPin, LOW);
     79e:	60 e0       	ldi	r22, 0x00	; 0
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
     7a2:	0e 94 2e 08 	call	0x105c	; 0x105c <digitalWrite>
	    for(int i = 0; i < NumberOfModules; i++)
     7a6:	c1 2c       	mov	r12, r1
     7a8:	d1 2c       	mov	r13, r1
	    {
		    if (i == Module) {
			    shiftOut(DataInPin, ClockPin, MSBFIRST, ModuleColumn + 1);
     7aa:	1f 5f       	subi	r17, 0xFF	; 255
			    shiftOut(DataInPin, ClockPin, MSBFIRST, buffer[Column]);
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	e8 0e       	add	r14, r24
     7b4:	f1 1c       	adc	r15, r1
	    bitWrite(buffer[Column], Row, Value);

	    int Module = Column / MAXMATRIX_COLUMN_NUMBER_OF_MODULE;
	    int ModuleColumn = Column % MAXMATRIX_COLUMN_NUMBER_OF_MODULE;
	    digitalWrite(ChipSelectPin, LOW);
	    for(int i = 0; i < NumberOfModules; i++)
     7b6:	8b 81       	ldd	r24, Y+3	; 0x03
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	c8 16       	cp	r12, r24
     7bc:	d9 06       	cpc	r13, r25
     7be:	e4 f4       	brge	.+56     	; 0x7f8 <_ZN9MaxMatrix6setDotEhhh+0xc2>
	    {
		    if (i == Module) {
     7c0:	c1 14       	cp	r12, r1
     7c2:	d1 04       	cpc	r13, r1
     7c4:	49 f4       	brne	.+18     	; 0x7d8 <_ZN9MaxMatrix6setDotEhhh+0xa2>
			    shiftOut(DataInPin, ClockPin, MSBFIRST, ModuleColumn + 1);
     7c6:	21 2f       	mov	r18, r17
     7c8:	41 e0       	ldi	r20, 0x01	; 1
     7ca:	6a 81       	ldd	r22, Y+2	; 0x02
     7cc:	88 81       	ld	r24, Y
     7ce:	0e 94 5e 08 	call	0x10bc	; 0x10bc <shiftOut>
			    shiftOut(DataInPin, ClockPin, MSBFIRST, buffer[Column]);
     7d2:	f7 01       	movw	r30, r14
     7d4:	20 81       	ld	r18, Z
     7d6:	07 c0       	rjmp	.+14     	; 0x7e6 <_ZN9MaxMatrix6setDotEhhh+0xb0>
			    } else {
			    shiftOut(DataInPin, ClockPin, MSBFIRST, 0);
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	41 e0       	ldi	r20, 0x01	; 1
     7dc:	6a 81       	ldd	r22, Y+2	; 0x02
     7de:	88 81       	ld	r24, Y
     7e0:	0e 94 5e 08 	call	0x10bc	; 0x10bc <shiftOut>
			    shiftOut(DataInPin, ClockPin, MSBFIRST, 0);
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	41 e0       	ldi	r20, 0x01	; 1
     7e8:	6a 81       	ldd	r22, Y+2	; 0x02
     7ea:	88 81       	ld	r24, Y
     7ec:	0e 94 5e 08 	call	0x10bc	; 0x10bc <shiftOut>
	    bitWrite(buffer[Column], Row, Value);

	    int Module = Column / MAXMATRIX_COLUMN_NUMBER_OF_MODULE;
	    int ModuleColumn = Column % MAXMATRIX_COLUMN_NUMBER_OF_MODULE;
	    digitalWrite(ChipSelectPin, LOW);
	    for(int i = 0; i < NumberOfModules; i++)
     7f0:	ff ef       	ldi	r31, 0xFF	; 255
     7f2:	cf 1a       	sub	r12, r31
     7f4:	df 0a       	sbc	r13, r31
     7f6:	df cf       	rjmp	.-66     	; 0x7b6 <_ZN9MaxMatrix6setDotEhhh+0x80>
			    } else {
			    shiftOut(DataInPin, ClockPin, MSBFIRST, 0);
			    shiftOut(DataInPin, ClockPin, MSBFIRST, 0);
		    }
	    }
	    digitalWrite(ChipSelectPin, LOW);
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
     7fc:	0e 94 2e 08 	call	0x105c	; 0x105c <digitalWrite>
	    digitalWrite(ChipSelectPin, HIGH);
     800:	61 e0       	ldi	r22, 0x01	; 1
     802:	89 81       	ldd	r24, Y+1	; 0x01
     804:	0e 94 2e 08 	call	0x105c	; 0x105c <digitalWrite>
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	01 c0       	rjmp	.+2      	; 0x80e <_ZN9MaxMatrix6setDotEhhh+0xd8>
		return E_OK;
	} else {
		return E_NOT_OK;
     80c:	81 e0       	ldi	r24, 0x01	; 1
	}
}
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	ff 90       	pop	r15
     818:	ef 90       	pop	r14
     81a:	df 90       	pop	r13
     81c:	cf 90       	pop	r12
     81e:	08 95       	ret

00000820 <_ZN9MaxMatrix11writeSpriteEiiPKh>:
	reload();
}


void MaxMatrix::writeSprite(int X, int Y, const byte* Sprite)
{
     820:	2f 92       	push	r2
     822:	3f 92       	push	r3
     824:	4f 92       	push	r4
     826:	5f 92       	push	r5
     828:	6f 92       	push	r6
     82a:	7f 92       	push	r7
     82c:	8f 92       	push	r8
     82e:	9f 92       	push	r9
     830:	af 92       	push	r10
     832:	bf 92       	push	r11
     834:	cf 92       	push	r12
     836:	df 92       	push	r13
     838:	ef 92       	push	r14
     83a:	ff 92       	push	r15
     83c:	0f 93       	push	r16
     83e:	1f 93       	push	r17
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	00 d0       	rcall	.+0      	; 0x846 <_ZN9MaxMatrix11writeSpriteEiiPKh+0x26>
     846:	00 d0       	rcall	.+0      	; 0x848 <_ZN9MaxMatrix11writeSpriteEiiPKh+0x28>
     848:	1f 92       	push	r1
     84a:	cd b7       	in	r28, 0x3d	; 61
     84c:	de b7       	in	r29, 0x3e	; 62
     84e:	4c 01       	movw	r8, r24
     850:	6b 01       	movw	r12, r22
     852:	3a 01       	movw	r6, r20
     854:	59 01       	movw	r10, r18
	int SpriteWidth = Sprite[ASCII_TABLE_SPRITE_WIDTH];
     856:	f9 01       	movw	r30, r18
     858:	40 80       	ld	r4, Z
     85a:	51 2c       	mov	r5, r1
	int SpriteHeight = Sprite[ASCII_TABLE_SPRITE_HEIGHT];
     85c:	e1 80       	ldd	r14, Z+1	; 0x01
     85e:	f1 2c       	mov	r15, r1
	
	if(SpriteHeight == MAXMATRIX_ROW_NUMBER_OF_MODULE && Y == 0) {
     860:	f8 e0       	ldi	r31, 0x08	; 8
     862:	ef 16       	cp	r14, r31
     864:	f1 04       	cpc	r15, r1
     866:	c9 f4       	brne	.+50     	; 0x89a <_ZN9MaxMatrix11writeSpriteEiiPKh+0x7a>
     868:	45 2b       	or	r20, r21
     86a:	b9 f4       	brne	.+46     	; 0x89a <_ZN9MaxMatrix11writeSpriteEiiPKh+0x7a>
     86c:	00 e0       	ldi	r16, 0x00	; 0
     86e:	10 e0       	ldi	r17, 0x00	; 0
		for(int i = 0; i < SpriteWidth; i++)
     870:	04 15       	cp	r16, r4
     872:	15 05       	cpc	r17, r5
     874:	0c f0       	brlt	.+2      	; 0x878 <_ZN9MaxMatrix11writeSpriteEiiPKh+0x58>
     876:	4f c0       	rjmp	.+158    	; 0x916 <__stack+0x17>
     878:	c8 01       	movw	r24, r16
     87a:	8c 0d       	add	r24, r12
     87c:	9d 1d       	adc	r25, r13
		{
			int Column = X + i;
			if(Column >= 0 && Column < MAXMATRIX_NUMBER_OF_COLUMNS)
     87e:	08 97       	sbiw	r24, 0x08	; 8
     880:	48 f4       	brcc	.+18     	; 0x894 <_ZN9MaxMatrix11writeSpriteEiiPKh+0x74>
			setColumn(Column, Sprite[i + ASCII_TABLE_SPRITE_COLUMN1]);
     882:	f5 01       	movw	r30, r10
     884:	e0 0f       	add	r30, r16
     886:	f1 1f       	adc	r31, r17
     888:	42 81       	ldd	r20, Z+2	; 0x02
     88a:	60 2f       	mov	r22, r16
     88c:	6c 0d       	add	r22, r12
     88e:	c4 01       	movw	r24, r8
     890:	0e 94 b2 02 	call	0x564	; 0x564 <_ZN9MaxMatrix9setColumnEhh>
{
	int SpriteWidth = Sprite[ASCII_TABLE_SPRITE_WIDTH];
	int SpriteHeight = Sprite[ASCII_TABLE_SPRITE_HEIGHT];
	
	if(SpriteHeight == MAXMATRIX_ROW_NUMBER_OF_MODULE && Y == 0) {
		for(int i = 0; i < SpriteWidth; i++)
     894:	0f 5f       	subi	r16, 0xFF	; 255
     896:	1f 4f       	sbci	r17, 0xFF	; 255
     898:	eb cf       	rjmp	.-42     	; 0x870 <_ZN9MaxMatrix11writeSpriteEiiPKh+0x50>
     89a:	1d 82       	std	Y+5, r1	; 0x05
     89c:	1c 82       	std	Y+4, r1	; 0x04
			int Column = X + i;
			if(Column >= 0 && Column < MAXMATRIX_NUMBER_OF_COLUMNS)
			setColumn(Column, Sprite[i + ASCII_TABLE_SPRITE_COLUMN1]);
		} 
	} else {
		for(int i = 0; i < SpriteWidth; i++)
     89e:	8c 81       	ldd	r24, Y+4	; 0x04
     8a0:	9d 81       	ldd	r25, Y+5	; 0x05
     8a2:	84 15       	cp	r24, r4
     8a4:	95 05       	cpc	r25, r5
     8a6:	bc f5       	brge	.+110    	; 0x916 <__stack+0x17>
     8a8:	00 e0       	ldi	r16, 0x00	; 0
     8aa:	10 e0       	ldi	r17, 0x00	; 0
     8ac:	2c 80       	ldd	r2, Y+4	; 0x04
     8ae:	3d 80       	ldd	r3, Y+5	; 0x05
     8b0:	2c 0c       	add	r2, r12
     8b2:	3d 1c       	adc	r3, r13
     8b4:	8c 81       	ldd	r24, Y+4	; 0x04
     8b6:	9d 81       	ldd	r25, Y+5	; 0x05
     8b8:	8a 0d       	add	r24, r10
     8ba:	9b 1d       	adc	r25, r11
     8bc:	9a 83       	std	Y+2, r25	; 0x02
     8be:	89 83       	std	Y+1, r24	; 0x01
     8c0:	3c 81       	ldd	r19, Y+4	; 0x04
     8c2:	3c 0d       	add	r19, r12
		{
			for(int j = 0; j < SpriteHeight; j++)
     8c4:	0e 15       	cp	r16, r14
     8c6:	1f 05       	cpc	r17, r15
     8c8:	04 f5       	brge	.+64     	; 0x90a <__stack+0xb>
			{
				int Column = X + i;
				int Row = Y + j;
				if(Column >= 0 && Column < MAXMATRIX_NUMBER_OF_COLUMNS && Row >= 0 && Row < MAXMATRIX_ROW_NUMBER_OF_MODULE)
     8ca:	88 e0       	ldi	r24, 0x08	; 8
     8cc:	28 16       	cp	r2, r24
     8ce:	31 04       	cpc	r3, r1
     8d0:	c8 f4       	brcc	.+50     	; 0x904 <__stack+0x5>
     8d2:	c8 01       	movw	r24, r16
     8d4:	86 0d       	add	r24, r6
     8d6:	97 1d       	adc	r25, r7
     8d8:	08 97       	sbiw	r24, 0x08	; 8
     8da:	a0 f4       	brcc	.+40     	; 0x904 <__stack+0x5>
				setDot(Column, Row, bitRead(Sprite[i + ASCII_TABLE_SPRITE_COLUMN1], j));
     8dc:	e9 81       	ldd	r30, Y+1	; 0x01
     8de:	fa 81       	ldd	r31, Y+2	; 0x02
     8e0:	82 81       	ldd	r24, Z+2	; 0x02
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	00 2e       	mov	r0, r16
     8e6:	02 c0       	rjmp	.+4      	; 0x8ec <_ZN9MaxMatrix11writeSpriteEiiPKh+0xcc>
     8e8:	95 95       	asr	r25
     8ea:	87 95       	ror	r24
     8ec:	0a 94       	dec	r0
     8ee:	e2 f7       	brpl	.-8      	; 0x8e8 <_ZN9MaxMatrix11writeSpriteEiiPKh+0xc8>
     8f0:	28 2f       	mov	r18, r24
     8f2:	21 70       	andi	r18, 0x01	; 1
     8f4:	40 2f       	mov	r20, r16
     8f6:	46 0d       	add	r20, r6
     8f8:	63 2f       	mov	r22, r19
     8fa:	c4 01       	movw	r24, r8
     8fc:	3b 83       	std	Y+3, r19	; 0x03
     8fe:	0e 94 9b 03 	call	0x736	; 0x736 <_ZN9MaxMatrix6setDotEhhh>
     902:	3b 81       	ldd	r19, Y+3	; 0x03
			setColumn(Column, Sprite[i + ASCII_TABLE_SPRITE_COLUMN1]);
		} 
	} else {
		for(int i = 0; i < SpriteWidth; i++)
		{
			for(int j = 0; j < SpriteHeight; j++)
     904:	0f 5f       	subi	r16, 0xFF	; 255
     906:	1f 4f       	sbci	r17, 0xFF	; 255
     908:	dd cf       	rjmp	.-70     	; 0x8c4 <_ZN9MaxMatrix11writeSpriteEiiPKh+0xa4>
			int Column = X + i;
			if(Column >= 0 && Column < MAXMATRIX_NUMBER_OF_COLUMNS)
			setColumn(Column, Sprite[i + ASCII_TABLE_SPRITE_COLUMN1]);
		} 
	} else {
		for(int i = 0; i < SpriteWidth; i++)
     90a:	ec 81       	ldd	r30, Y+4	; 0x04
     90c:	fd 81       	ldd	r31, Y+5	; 0x05
     90e:	31 96       	adiw	r30, 0x01	; 1
     910:	fd 83       	std	Y+5, r31	; 0x05
     912:	ec 83       	std	Y+4, r30	; 0x04
     914:	c4 cf       	rjmp	.-120    	; 0x89e <_ZN9MaxMatrix11writeSpriteEiiPKh+0x7e>
				if(Column >= 0 && Column < MAXMATRIX_NUMBER_OF_COLUMNS && Row >= 0 && Row < MAXMATRIX_ROW_NUMBER_OF_MODULE)
				setDot(Column, Row, bitRead(Sprite[i + ASCII_TABLE_SPRITE_COLUMN1], j));
			}
		}
	}
}
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	ff 90       	pop	r15
     92a:	ef 90       	pop	r14
     92c:	df 90       	pop	r13
     92e:	cf 90       	pop	r12
     930:	bf 90       	pop	r11
     932:	af 90       	pop	r10
     934:	9f 90       	pop	r9
     936:	8f 90       	pop	r8
     938:	7f 90       	pop	r7
     93a:	6f 90       	pop	r6
     93c:	5f 90       	pop	r5
     93e:	4f 90       	pop	r4
     940:	3f 90       	pop	r3
     942:	2f 90       	pop	r2
     944:	08 95       	ret

00000946 <_ZN9MaxMatrix6reloadEv>:


void MaxMatrix::reload()
{
     946:	cf 92       	push	r12
     948:	df 92       	push	r13
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	ec 01       	movw	r28, r24
     958:	01 e0       	ldi	r16, 0x01	; 1
     95a:	10 e0       	ldi	r17, 0x00	; 0
	for(int i = 0; i < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; i++)
	{
		int Column = i;
		digitalWrite(ChipSelectPin, LOW);
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	89 81       	ldd	r24, Y+1	; 0x01
     960:	0e 94 2e 08 	call	0x105c	; 0x105c <digitalWrite>
     964:	78 01       	movw	r14, r16
     966:	83 e0       	ldi	r24, 0x03	; 3
     968:	e8 0e       	add	r14, r24
     96a:	f1 1c       	adc	r15, r1
     96c:	ec 0e       	add	r14, r28
     96e:	fd 1e       	adc	r15, r29
		for(int j = 0; j < NumberOfModules; j++)
     970:	c1 2c       	mov	r12, r1
     972:	d1 2c       	mov	r13, r1
     974:	8b 81       	ldd	r24, Y+3	; 0x03
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	c8 16       	cp	r12, r24
     97a:	d9 06       	cpc	r13, r25
     97c:	a4 f4       	brge	.+40     	; 0x9a6 <_ZN9MaxMatrix6reloadEv+0x60>
		{
			shiftOut(DataInPin, ClockPin, MSBFIRST, i + 1);
     97e:	20 2f       	mov	r18, r16
     980:	41 e0       	ldi	r20, 0x01	; 1
     982:	6a 81       	ldd	r22, Y+2	; 0x02
     984:	88 81       	ld	r24, Y
     986:	0e 94 5e 08 	call	0x10bc	; 0x10bc <shiftOut>
			shiftOut(DataInPin, ClockPin, MSBFIRST, buffer[Column]);
     98a:	f7 01       	movw	r30, r14
     98c:	20 81       	ld	r18, Z
     98e:	41 e0       	ldi	r20, 0x01	; 1
     990:	6a 81       	ldd	r22, Y+2	; 0x02
     992:	88 81       	ld	r24, Y
     994:	0e 94 5e 08 	call	0x10bc	; 0x10bc <shiftOut>
{
	for(int i = 0; i < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; i++)
	{
		int Column = i;
		digitalWrite(ChipSelectPin, LOW);
		for(int j = 0; j < NumberOfModules; j++)
     998:	ff ef       	ldi	r31, 0xFF	; 255
     99a:	cf 1a       	sub	r12, r31
     99c:	df 0a       	sbc	r13, r31
     99e:	88 e0       	ldi	r24, 0x08	; 8
     9a0:	e8 0e       	add	r14, r24
     9a2:	f1 1c       	adc	r15, r1
     9a4:	e7 cf       	rjmp	.-50     	; 0x974 <_ZN9MaxMatrix6reloadEv+0x2e>
		{
			shiftOut(DataInPin, ClockPin, MSBFIRST, i + 1);
			shiftOut(DataInPin, ClockPin, MSBFIRST, buffer[Column]);
			Column += MAXMATRIX_COLUMN_NUMBER_OF_MODULE;
		}
		digitalWrite(ChipSelectPin, LOW);
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	89 81       	ldd	r24, Y+1	; 0x01
     9aa:	0e 94 2e 08 	call	0x105c	; 0x105c <digitalWrite>
		digitalWrite(ChipSelectPin, HIGH);
     9ae:	61 e0       	ldi	r22, 0x01	; 1
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	0e 94 2e 08 	call	0x105c	; 0x105c <digitalWrite>
     9b6:	0f 5f       	subi	r16, 0xFF	; 255
     9b8:	1f 4f       	sbci	r17, 0xFF	; 255
}


void MaxMatrix::reload()
{
	for(int i = 0; i < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; i++)
     9ba:	09 30       	cpi	r16, 0x09	; 9
     9bc:	11 05       	cpc	r17, r1
     9be:	71 f6       	brne	.-100    	; 0x95c <_ZN9MaxMatrix6reloadEv+0x16>
			Column += MAXMATRIX_COLUMN_NUMBER_OF_MODULE;
		}
		digitalWrite(ChipSelectPin, LOW);
		digitalWrite(ChipSelectPin, HIGH);
	}
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	1f 91       	pop	r17
     9c6:	0f 91       	pop	r16
     9c8:	ff 90       	pop	r15
     9ca:	ef 90       	pop	r14
     9cc:	df 90       	pop	r13
     9ce:	cf 90       	pop	r12
     9d0:	08 95       	ret

000009d2 <_ZN9MaxMatrix9shiftLeftEbb>:
	}
}


void MaxMatrix::shiftLeft(bool rotate, bool fill_zero)
{
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
	byte old = buffer[0];
     9d6:	fc 01       	movw	r30, r24
     9d8:	24 81       	ldd	r18, Z+4	; 0x04
     9da:	35 96       	adiw	r30, 0x05	; 5
     9dc:	dc 01       	movw	r26, r24
     9de:	1d 96       	adiw	r26, 0x0d	; 13
	for(int i = 0; i < MAXMATRIX_NUMBER_OF_COLUMNS; i++)
		buffer[i] = buffer[i+1];
     9e0:	31 91       	ld	r19, Z+
     9e2:	ef 01       	movw	r28, r30
     9e4:	22 97       	sbiw	r28, 0x02	; 2
     9e6:	38 83       	st	Y, r19


void MaxMatrix::shiftLeft(bool rotate, bool fill_zero)
{
	byte old = buffer[0];
	for(int i = 0; i < MAXMATRIX_NUMBER_OF_COLUMNS; i++)
     9e8:	ea 17       	cp	r30, r26
     9ea:	fb 07       	cpc	r31, r27
     9ec:	c9 f7       	brne	.-14     	; 0x9e0 <_ZN9MaxMatrix9shiftLeftEbb+0xe>
		buffer[i] = buffer[i+1];
	if(rotate) buffer[MAXMATRIX_NUMBER_OF_COLUMNS-1] = old;
     9ee:	66 23       	and	r22, r22
     9f0:	19 f0       	breq	.+6      	; 0x9f8 <_ZN9MaxMatrix9shiftLeftEbb+0x26>
     9f2:	fc 01       	movw	r30, r24
     9f4:	23 87       	std	Z+11, r18	; 0x0b
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <_ZN9MaxMatrix9shiftLeftEbb+0x2e>
	else if(fill_zero) buffer[MAXMATRIX_NUMBER_OF_COLUMNS-1] = 0;
     9f8:	44 23       	and	r20, r20
     9fa:	11 f0       	breq	.+4      	; 0xa00 <_ZN9MaxMatrix9shiftLeftEbb+0x2e>
     9fc:	fc 01       	movw	r30, r24
     9fe:	13 86       	std	Z+11, r1	; 0x0b
	
	reload();
}
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
	for(int i = 0; i < MAXMATRIX_NUMBER_OF_COLUMNS; i++)
		buffer[i] = buffer[i+1];
	if(rotate) buffer[MAXMATRIX_NUMBER_OF_COLUMNS-1] = old;
	else if(fill_zero) buffer[MAXMATRIX_NUMBER_OF_COLUMNS-1] = 0;
	
	reload();
     a04:	0c 94 a3 04 	jmp	0x946	; 0x946 <_ZN9MaxMatrix6reloadEv>

00000a08 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     a08:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     a0a:	91 8d       	ldd	r25, Z+25	; 0x19
     a0c:	22 8d       	ldd	r18, Z+26	; 0x1a
     a0e:	89 2f       	mov	r24, r25
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	80 5c       	subi	r24, 0xC0	; 192
     a14:	9f 4f       	sbci	r25, 0xFF	; 255
     a16:	82 1b       	sub	r24, r18
     a18:	91 09       	sbc	r25, r1
}
     a1a:	8f 73       	andi	r24, 0x3F	; 63
     a1c:	99 27       	eor	r25, r25
     a1e:	08 95       	ret

00000a20 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     a20:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     a22:	91 8d       	ldd	r25, Z+25	; 0x19
     a24:	82 8d       	ldd	r24, Z+26	; 0x1a
     a26:	98 17       	cp	r25, r24
     a28:	31 f0       	breq	.+12     	; 0xa36 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     a2a:	82 8d       	ldd	r24, Z+26	; 0x1a
     a2c:	e8 0f       	add	r30, r24
     a2e:	f1 1d       	adc	r31, r1
     a30:	85 8d       	ldd	r24, Z+29	; 0x1d
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     a36:	8f ef       	ldi	r24, 0xFF	; 255
     a38:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     a3a:	08 95       	ret

00000a3c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     a3c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     a3e:	91 8d       	ldd	r25, Z+25	; 0x19
     a40:	82 8d       	ldd	r24, Z+26	; 0x1a
     a42:	98 17       	cp	r25, r24
     a44:	61 f0       	breq	.+24     	; 0xa5e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     a46:	82 8d       	ldd	r24, Z+26	; 0x1a
     a48:	df 01       	movw	r26, r30
     a4a:	a8 0f       	add	r26, r24
     a4c:	b1 1d       	adc	r27, r1
     a4e:	5d 96       	adiw	r26, 0x1d	; 29
     a50:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     a52:	92 8d       	ldd	r25, Z+26	; 0x1a
     a54:	9f 5f       	subi	r25, 0xFF	; 255
     a56:	9f 73       	andi	r25, 0x3F	; 63
     a58:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     a5e:	8f ef       	ldi	r24, 0xFF	; 255
     a60:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     a62:	08 95       	ret

00000a64 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     a64:	88 e8       	ldi	r24, 0x88	; 136
     a66:	96 e0       	ldi	r25, 0x06	; 6
     a68:	89 2b       	or	r24, r25
     a6a:	49 f0       	breq	.+18     	; 0xa7e <_Z14serialEventRunv+0x1a>
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	89 2b       	or	r24, r25
     a72:	29 f0       	breq	.+10     	; 0xa7e <_Z14serialEventRunv+0x1a>
     a74:	0e 94 88 06 	call	0xd10	; 0xd10 <_Z17Serial0_availablev>
     a78:	81 11       	cpse	r24, r1
     a7a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     a7e:	08 95       	ret

00000a80 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     a80:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     a82:	84 8d       	ldd	r24, Z+28	; 0x1c
     a84:	df 01       	movw	r26, r30
     a86:	a8 0f       	add	r26, r24
     a88:	b1 1d       	adc	r27, r1
     a8a:	a3 5a       	subi	r26, 0xA3	; 163
     a8c:	bf 4f       	sbci	r27, 0xFF	; 255
     a8e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     a90:	84 8d       	ldd	r24, Z+28	; 0x1c
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	01 96       	adiw	r24, 0x01	; 1
     a96:	8f 73       	andi	r24, 0x3F	; 63
     a98:	99 27       	eor	r25, r25
     a9a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     a9c:	a6 89       	ldd	r26, Z+22	; 0x16
     a9e:	b7 89       	ldd	r27, Z+23	; 0x17
     aa0:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     aa2:	a0 89       	ldd	r26, Z+16	; 0x10
     aa4:	b1 89       	ldd	r27, Z+17	; 0x11
     aa6:	8c 91       	ld	r24, X
     aa8:	80 64       	ori	r24, 0x40	; 64
     aaa:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     aac:	93 8d       	ldd	r25, Z+27	; 0x1b
     aae:	84 8d       	ldd	r24, Z+28	; 0x1c
     ab0:	98 13       	cpse	r25, r24
     ab2:	06 c0       	rjmp	.+12     	; 0xac0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     ab4:	02 88       	ldd	r0, Z+18	; 0x12
     ab6:	f3 89       	ldd	r31, Z+19	; 0x13
     ab8:	e0 2d       	mov	r30, r0
     aba:	80 81       	ld	r24, Z
     abc:	8f 7d       	andi	r24, 0xDF	; 223
     abe:	80 83       	st	Z, r24
     ac0:	08 95       	ret

00000ac2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     ac8:	88 8d       	ldd	r24, Y+24	; 0x18
     aca:	88 23       	and	r24, r24
     acc:	c9 f0       	breq	.+50     	; 0xb00 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     ace:	ea 89       	ldd	r30, Y+18	; 0x12
     ad0:	fb 89       	ldd	r31, Y+19	; 0x13
     ad2:	80 81       	ld	r24, Z
     ad4:	85 fd       	sbrc	r24, 5
     ad6:	05 c0       	rjmp	.+10     	; 0xae2 <_ZN14HardwareSerial5flushEv+0x20>
     ad8:	a8 89       	ldd	r26, Y+16	; 0x10
     ada:	b9 89       	ldd	r27, Y+17	; 0x11
     adc:	8c 91       	ld	r24, X
     ade:	86 fd       	sbrc	r24, 6
     ae0:	0f c0       	rjmp	.+30     	; 0xb00 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	07 fc       	sbrc	r0, 7
     ae6:	f5 cf       	rjmp	.-22     	; 0xad2 <_ZN14HardwareSerial5flushEv+0x10>
     ae8:	80 81       	ld	r24, Z
     aea:	85 ff       	sbrs	r24, 5
     aec:	f2 cf       	rjmp	.-28     	; 0xad2 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     aee:	a8 89       	ldd	r26, Y+16	; 0x10
     af0:	b9 89       	ldd	r27, Y+17	; 0x11
     af2:	8c 91       	ld	r24, X
     af4:	85 ff       	sbrs	r24, 5
     af6:	ed cf       	rjmp	.-38     	; 0xad2 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     af8:	ce 01       	movw	r24, r28
     afa:	0e 94 40 05 	call	0xa80	; 0xa80 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     afe:	e7 cf       	rjmp	.-50     	; 0xace <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	08 95       	ret

00000b06 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     b06:	ef 92       	push	r14
     b08:	ff 92       	push	r15
     b0a:	0f 93       	push	r16
     b0c:	1f 93       	push	r17
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	ec 01       	movw	r28, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     b14:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b16:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b18:	98 13       	cpse	r25, r24
     b1a:	05 c0       	rjmp	.+10     	; 0xb26 <_ZN14HardwareSerial5writeEh+0x20>
     b1c:	e8 89       	ldd	r30, Y+16	; 0x10
     b1e:	f9 89       	ldd	r31, Y+17	; 0x11
     b20:	80 81       	ld	r24, Z
     b22:	85 fd       	sbrc	r24, 5
     b24:	27 c0       	rjmp	.+78     	; 0xb74 <_ZN14HardwareSerial5writeEh+0x6e>
     b26:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     b28:	0b 8d       	ldd	r16, Y+27	; 0x1b
     b2a:	10 e0       	ldi	r17, 0x00	; 0
     b2c:	0f 5f       	subi	r16, 0xFF	; 255
     b2e:	1f 4f       	sbci	r17, 0xFF	; 255
     b30:	0f 73       	andi	r16, 0x3F	; 63
     b32:	11 27       	eor	r17, r17
     b34:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     b36:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b38:	e8 12       	cpse	r14, r24
     b3a:	0c c0       	rjmp	.+24     	; 0xb54 <_ZN14HardwareSerial5writeEh+0x4e>
    if (bit_is_clear(SREG, SREG_I)) {
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	07 fc       	sbrc	r0, 7
     b40:	fa cf       	rjmp	.-12     	; 0xb36 <_ZN14HardwareSerial5writeEh+0x30>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     b42:	e8 89       	ldd	r30, Y+16	; 0x10
     b44:	f9 89       	ldd	r31, Y+17	; 0x11
     b46:	80 81       	ld	r24, Z
     b48:	85 ff       	sbrs	r24, 5
     b4a:	f5 cf       	rjmp	.-22     	; 0xb36 <_ZN14HardwareSerial5writeEh+0x30>
	_tx_udr_empty_irq();
     b4c:	ce 01       	movw	r24, r28
     b4e:	0e 94 40 05 	call	0xa80	; 0xa80 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     b52:	f1 cf       	rjmp	.-30     	; 0xb36 <_ZN14HardwareSerial5writeEh+0x30>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     b54:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b56:	fe 01       	movw	r30, r28
     b58:	e8 0f       	add	r30, r24
     b5a:	f1 1d       	adc	r31, r1
     b5c:	e3 5a       	subi	r30, 0xA3	; 163
     b5e:	ff 4f       	sbci	r31, 0xFF	; 255
     b60:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     b62:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     b64:	ea 89       	ldd	r30, Y+18	; 0x12
     b66:	fb 89       	ldd	r31, Y+19	; 0x13
     b68:	80 81       	ld	r24, Z
     b6a:	80 62       	ori	r24, 0x20	; 32
     b6c:	80 83       	st	Z, r24
  _written = true;
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	88 8f       	std	Y+24, r24	; 0x18
     b72:	08 c0       	rjmp	.+16     	; 0xb84 <_ZN14HardwareSerial5writeEh+0x7e>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     b74:	ee 89       	ldd	r30, Y+22	; 0x16
     b76:	ff 89       	ldd	r31, Y+23	; 0x17
     b78:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     b7a:	e8 89       	ldd	r30, Y+16	; 0x10
     b7c:	f9 89       	ldd	r31, Y+17	; 0x11
     b7e:	80 81       	ld	r24, Z
     b80:	80 64       	ori	r24, 0x40	; 64
     b82:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	ff 90       	pop	r15
     b92:	ef 90       	pop	r14
     b94:	08 95       	ret

00000b96 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     b96:	cf 92       	push	r12
     b98:	df 92       	push	r13
     b9a:	ef 92       	push	r14
     b9c:	ff 92       	push	r15
     b9e:	1f 93       	push	r17
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	ec 01       	movw	r28, r24
     ba6:	6a 01       	movw	r12, r20
     ba8:	7b 01       	movw	r14, r22
     baa:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     bac:	e8 89       	ldd	r30, Y+16	; 0x10
     bae:	f9 89       	ldd	r31, Y+17	; 0x11
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     bb4:	41 15       	cp	r20, r1
     bb6:	51 4e       	sbci	r21, 0xE1	; 225
     bb8:	61 05       	cpc	r22, r1
     bba:	71 05       	cpc	r23, r1
     bbc:	b1 f0       	breq	.+44     	; 0xbea <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	79 e0       	ldi	r23, 0x09	; 9
     bc2:	8d e3       	ldi	r24, 0x3D	; 61
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	a7 01       	movw	r20, r14
     bc8:	96 01       	movw	r18, r12
     bca:	0e 94 9a 08 	call	0x1134	; 0x1134 <__udivmodsi4>
     bce:	da 01       	movw	r26, r20
     bd0:	c9 01       	movw	r24, r18
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	a1 09       	sbc	r26, r1
     bd6:	b1 09       	sbc	r27, r1
     bd8:	b6 95       	lsr	r27
     bda:	a7 95       	ror	r26
     bdc:	97 95       	ror	r25
     bde:	87 95       	ror	r24
     be0:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     be2:	41 15       	cp	r20, r1
     be4:	80 e1       	ldi	r24, 0x10	; 16
     be6:	58 07       	cpc	r21, r24
     be8:	a8 f0       	brcs	.+42     	; 0xc14 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     bea:	e8 89       	ldd	r30, Y+16	; 0x10
     bec:	f9 89       	ldd	r31, Y+17	; 0x11
     bee:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     bf0:	60 e8       	ldi	r22, 0x80	; 128
     bf2:	74 e8       	ldi	r23, 0x84	; 132
     bf4:	8e e1       	ldi	r24, 0x1E	; 30
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	a7 01       	movw	r20, r14
     bfa:	96 01       	movw	r18, r12
     bfc:	0e 94 9a 08 	call	0x1134	; 0x1134 <__udivmodsi4>
     c00:	ba 01       	movw	r22, r20
     c02:	a9 01       	movw	r20, r18
     c04:	41 50       	subi	r20, 0x01	; 1
     c06:	51 09       	sbc	r21, r1
     c08:	61 09       	sbc	r22, r1
     c0a:	71 09       	sbc	r23, r1
     c0c:	76 95       	lsr	r23
     c0e:	67 95       	ror	r22
     c10:	57 95       	ror	r21
     c12:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     c14:	ec 85       	ldd	r30, Y+12	; 0x0c
     c16:	fd 85       	ldd	r31, Y+13	; 0x0d
     c18:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
     c1a:	ee 85       	ldd	r30, Y+14	; 0x0e
     c1c:	ff 85       	ldd	r31, Y+15	; 0x0f
     c1e:	40 83       	st	Z, r20

  _written = false;
     c20:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     c22:	ec 89       	ldd	r30, Y+20	; 0x14
     c24:	fd 89       	ldd	r31, Y+21	; 0x15
     c26:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     c28:	ea 89       	ldd	r30, Y+18	; 0x12
     c2a:	fb 89       	ldd	r31, Y+19	; 0x13
     c2c:	80 81       	ld	r24, Z
     c2e:	80 61       	ori	r24, 0x10	; 16
     c30:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     c32:	ea 89       	ldd	r30, Y+18	; 0x12
     c34:	fb 89       	ldd	r31, Y+19	; 0x13
     c36:	80 81       	ld	r24, Z
     c38:	88 60       	ori	r24, 0x08	; 8
     c3a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     c3c:	ea 89       	ldd	r30, Y+18	; 0x12
     c3e:	fb 89       	ldd	r31, Y+19	; 0x13
     c40:	80 81       	ld	r24, Z
     c42:	80 68       	ori	r24, 0x80	; 128
     c44:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     c46:	ea 89       	ldd	r30, Y+18	; 0x12
     c48:	fb 89       	ldd	r31, Y+19	; 0x13
     c4a:	80 81       	ld	r24, Z
     c4c:	8f 7d       	andi	r24, 0xDF	; 223
     c4e:	80 83       	st	Z, r24
}
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	1f 91       	pop	r17
     c56:	ff 90       	pop	r15
     c58:	ef 90       	pop	r14
     c5a:	df 90       	pop	r13
     c5c:	cf 90       	pop	r12
     c5e:	08 95       	ret

00000c60 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     c60:	1f 92       	push	r1
     c62:	0f 92       	push	r0
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	0f 92       	push	r0
     c68:	11 24       	eor	r1, r1
     c6a:	2f 93       	push	r18
     c6c:	8f 93       	push	r24
     c6e:	9f 93       	push	r25
     c70:	ef 93       	push	r30
     c72:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     c74:	e0 91 b4 01 	lds	r30, 0x01B4
     c78:	f0 91 b5 01 	lds	r31, 0x01B5
     c7c:	80 81       	ld	r24, Z
     c7e:	e0 91 ba 01 	lds	r30, 0x01BA
     c82:	f0 91 bb 01 	lds	r31, 0x01BB
     c86:	82 fd       	sbrc	r24, 2
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     c8a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     c8c:	80 91 bd 01 	lds	r24, 0x01BD
     c90:	8f 5f       	subi	r24, 0xFF	; 255
     c92:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     c94:	20 91 be 01 	lds	r18, 0x01BE
     c98:	82 17       	cp	r24, r18
     c9a:	51 f0       	breq	.+20     	; 0xcb0 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     c9c:	e0 91 bd 01 	lds	r30, 0x01BD
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	ec 55       	subi	r30, 0x5C	; 92
     ca4:	fe 4f       	sbci	r31, 0xFE	; 254
     ca6:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     ca8:	80 93 bd 01 	sts	0x01BD, r24
     cac:	01 c0       	rjmp	.+2      	; 0xcb0 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     cae:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     cb0:	ff 91       	pop	r31
     cb2:	ef 91       	pop	r30
     cb4:	9f 91       	pop	r25
     cb6:	8f 91       	pop	r24
     cb8:	2f 91       	pop	r18
     cba:	0f 90       	pop	r0
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	0f 90       	pop	r0
     cc0:	1f 90       	pop	r1
     cc2:	18 95       	reti

00000cc4 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     cc4:	1f 92       	push	r1
     cc6:	0f 92       	push	r0
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	0f 92       	push	r0
     ccc:	11 24       	eor	r1, r1
     cce:	2f 93       	push	r18
     cd0:	3f 93       	push	r19
     cd2:	4f 93       	push	r20
     cd4:	5f 93       	push	r21
     cd6:	6f 93       	push	r22
     cd8:	7f 93       	push	r23
     cda:	8f 93       	push	r24
     cdc:	9f 93       	push	r25
     cde:	af 93       	push	r26
     ce0:	bf 93       	push	r27
     ce2:	ef 93       	push	r30
     ce4:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     ce6:	84 ea       	ldi	r24, 0xA4	; 164
     ce8:	91 e0       	ldi	r25, 0x01	; 1
     cea:	0e 94 40 05 	call	0xa80	; 0xa80 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     cee:	ff 91       	pop	r31
     cf0:	ef 91       	pop	r30
     cf2:	bf 91       	pop	r27
     cf4:	af 91       	pop	r26
     cf6:	9f 91       	pop	r25
     cf8:	8f 91       	pop	r24
     cfa:	7f 91       	pop	r23
     cfc:	6f 91       	pop	r22
     cfe:	5f 91       	pop	r21
     d00:	4f 91       	pop	r20
     d02:	3f 91       	pop	r19
     d04:	2f 91       	pop	r18
     d06:	0f 90       	pop	r0
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	0f 90       	pop	r0
     d0c:	1f 90       	pop	r1
     d0e:	18 95       	reti

00000d10 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     d10:	84 ea       	ldi	r24, 0xA4	; 164
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	0e 94 04 05 	call	0xa08	; 0xa08 <_ZN14HardwareSerial9availableEv>
     d18:	21 e0       	ldi	r18, 0x01	; 1
     d1a:	89 2b       	or	r24, r25
     d1c:	09 f4       	brne	.+2      	; 0xd20 <_Z17Serial0_availablev+0x10>
     d1e:	20 e0       	ldi	r18, 0x00	; 0
}
     d20:	82 2f       	mov	r24, r18
     d22:	08 95       	ret

00000d24 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     d24:	e4 ea       	ldi	r30, 0xA4	; 164
     d26:	f1 e0       	ldi	r31, 0x01	; 1
     d28:	13 82       	std	Z+3, r1	; 0x03
     d2a:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     d2c:	88 ee       	ldi	r24, 0xE8	; 232
     d2e:	93 e0       	ldi	r25, 0x03	; 3
     d30:	a0 e0       	ldi	r26, 0x00	; 0
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	84 83       	std	Z+4, r24	; 0x04
     d36:	95 83       	std	Z+5, r25	; 0x05
     d38:	a6 83       	std	Z+6, r26	; 0x06
     d3a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     d3c:	88 e2       	ldi	r24, 0x28	; 40
     d3e:	91 e0       	ldi	r25, 0x01	; 1
     d40:	91 83       	std	Z+1, r25	; 0x01
     d42:	80 83       	st	Z, r24
     d44:	85 ec       	ldi	r24, 0xC5	; 197
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	95 87       	std	Z+13, r25	; 0x0d
     d4a:	84 87       	std	Z+12, r24	; 0x0c
     d4c:	84 ec       	ldi	r24, 0xC4	; 196
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	97 87       	std	Z+15, r25	; 0x0f
     d52:	86 87       	std	Z+14, r24	; 0x0e
     d54:	80 ec       	ldi	r24, 0xC0	; 192
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	91 8b       	std	Z+17, r25	; 0x11
     d5a:	80 8b       	std	Z+16, r24	; 0x10
     d5c:	81 ec       	ldi	r24, 0xC1	; 193
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	93 8b       	std	Z+19, r25	; 0x13
     d62:	82 8b       	std	Z+18, r24	; 0x12
     d64:	82 ec       	ldi	r24, 0xC2	; 194
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	95 8b       	std	Z+21, r25	; 0x15
     d6a:	84 8b       	std	Z+20, r24	; 0x14
     d6c:	86 ec       	ldi	r24, 0xC6	; 198
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	97 8b       	std	Z+23, r25	; 0x17
     d72:	86 8b       	std	Z+22, r24	; 0x16
     d74:	11 8e       	std	Z+25, r1	; 0x19
     d76:	12 8e       	std	Z+26, r1	; 0x1a
     d78:	13 8e       	std	Z+27, r1	; 0x1b
     d7a:	14 8e       	std	Z+28, r1	; 0x1c
     d7c:	08 95       	ret

00000d7e <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     d7e:	08 95       	ret

00000d80 <main>:

int main(void)
{
	init();
     d80:	0e 94 8e 07 	call	0xf1c	; 0xf1c <init>

	initVariant();
     d84:	0e 94 bf 06 	call	0xd7e	; 0xd7e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     d88:	0e 94 d6 01 	call	0x3ac	; 0x3ac <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     d8c:	c2 e3       	ldi	r28, 0x32	; 50
     d8e:	d5 e0       	ldi	r29, 0x05	; 5
#endif
	
	setup();
    
	for (;;) {
		loop();
     d90:	0e 94 42 02 	call	0x484	; 0x484 <loop>
		if (serialEventRun) serialEventRun();
     d94:	20 97       	sbiw	r28, 0x00	; 0
     d96:	e1 f3       	breq	.-8      	; 0xd90 <main+0x10>
     d98:	0e 94 32 05 	call	0xa64	; 0xa64 <_Z14serialEventRunv>
     d9c:	f9 cf       	rjmp	.-14     	; 0xd90 <main+0x10>

00000d9e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     d9e:	cf 92       	push	r12
     da0:	df 92       	push	r13
     da2:	ef 92       	push	r14
     da4:	ff 92       	push	r15
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	6c 01       	movw	r12, r24
     db0:	eb 01       	movw	r28, r22
     db2:	7b 01       	movw	r14, r22
     db4:	e4 0e       	add	r14, r20
     db6:	f5 1e       	adc	r15, r21
  size_t n = 0;
     db8:	00 e0       	ldi	r16, 0x00	; 0
     dba:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
     dbc:	ce 15       	cp	r28, r14
     dbe:	df 05       	cpc	r29, r15
     dc0:	61 f0       	breq	.+24     	; 0xdda <_ZN5Print5writeEPKhj+0x3c>
    n += write(*buffer++);
     dc2:	69 91       	ld	r22, Y+
     dc4:	d6 01       	movw	r26, r12
     dc6:	ed 91       	ld	r30, X+
     dc8:	fc 91       	ld	r31, X
     dca:	01 90       	ld	r0, Z+
     dcc:	f0 81       	ld	r31, Z
     dce:	e0 2d       	mov	r30, r0
     dd0:	c6 01       	movw	r24, r12
     dd2:	09 95       	icall
     dd4:	08 0f       	add	r16, r24
     dd6:	19 1f       	adc	r17, r25
     dd8:	f1 cf       	rjmp	.-30     	; 0xdbc <_ZN5Print5writeEPKhj+0x1e>
  }
  return n;
}
     dda:	c8 01       	movw	r24, r16
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	ff 90       	pop	r15
     de6:	ef 90       	pop	r14
     de8:	df 90       	pop	r13
     dea:	cf 90       	pop	r12
     dec:	08 95       	ret

00000dee <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     dee:	1f 92       	push	r1
     df0:	0f 92       	push	r0
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	0f 92       	push	r0
     df6:	11 24       	eor	r1, r1
     df8:	2f 93       	push	r18
     dfa:	3f 93       	push	r19
     dfc:	8f 93       	push	r24
     dfe:	9f 93       	push	r25
     e00:	af 93       	push	r26
     e02:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     e04:	80 91 42 02 	lds	r24, 0x0242
     e08:	90 91 43 02 	lds	r25, 0x0243
     e0c:	a0 91 44 02 	lds	r26, 0x0244
     e10:	b0 91 45 02 	lds	r27, 0x0245
	unsigned char f = timer0_fract;
     e14:	30 91 41 02 	lds	r19, 0x0241

	m += MILLIS_INC;
	f += FRACT_INC;
     e18:	23 e0       	ldi	r18, 0x03	; 3
     e1a:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     e1c:	2d 37       	cpi	r18, 0x7D	; 125
     e1e:	20 f4       	brcc	.+8      	; 0xe28 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     e20:	01 96       	adiw	r24, 0x01	; 1
     e22:	a1 1d       	adc	r26, r1
     e24:	b1 1d       	adc	r27, r1
     e26:	05 c0       	rjmp	.+10     	; 0xe32 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     e28:	26 e8       	ldi	r18, 0x86	; 134
     e2a:	23 0f       	add	r18, r19
		m += 1;
     e2c:	02 96       	adiw	r24, 0x02	; 2
     e2e:	a1 1d       	adc	r26, r1
     e30:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     e32:	20 93 41 02 	sts	0x0241, r18
	timer0_millis = m;
     e36:	80 93 42 02 	sts	0x0242, r24
     e3a:	90 93 43 02 	sts	0x0243, r25
     e3e:	a0 93 44 02 	sts	0x0244, r26
     e42:	b0 93 45 02 	sts	0x0245, r27
	timer0_overflow_count++;
     e46:	80 91 46 02 	lds	r24, 0x0246
     e4a:	90 91 47 02 	lds	r25, 0x0247
     e4e:	a0 91 48 02 	lds	r26, 0x0248
     e52:	b0 91 49 02 	lds	r27, 0x0249
     e56:	01 96       	adiw	r24, 0x01	; 1
     e58:	a1 1d       	adc	r26, r1
     e5a:	b1 1d       	adc	r27, r1
     e5c:	80 93 46 02 	sts	0x0246, r24
     e60:	90 93 47 02 	sts	0x0247, r25
     e64:	a0 93 48 02 	sts	0x0248, r26
     e68:	b0 93 49 02 	sts	0x0249, r27
}
     e6c:	bf 91       	pop	r27
     e6e:	af 91       	pop	r26
     e70:	9f 91       	pop	r25
     e72:	8f 91       	pop	r24
     e74:	3f 91       	pop	r19
     e76:	2f 91       	pop	r18
     e78:	0f 90       	pop	r0
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	0f 90       	pop	r0
     e7e:	1f 90       	pop	r1
     e80:	18 95       	reti

00000e82 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     e82:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     e84:	f8 94       	cli
	m = timer0_overflow_count;
     e86:	80 91 46 02 	lds	r24, 0x0246
     e8a:	90 91 47 02 	lds	r25, 0x0247
     e8e:	a0 91 48 02 	lds	r26, 0x0248
     e92:	b0 91 49 02 	lds	r27, 0x0249
#if defined(TCNT0)
	t = TCNT0;
     e96:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     e98:	a8 9b       	sbis	0x15, 0	; 21
     e9a:	05 c0       	rjmp	.+10     	; 0xea6 <micros+0x24>
     e9c:	2f 3f       	cpi	r18, 0xFF	; 255
     e9e:	19 f0       	breq	.+6      	; 0xea6 <micros+0x24>
		m++;
     ea0:	01 96       	adiw	r24, 0x01	; 1
     ea2:	a1 1d       	adc	r26, r1
     ea4:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     ea6:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     ea8:	ba 2f       	mov	r27, r26
     eaa:	a9 2f       	mov	r26, r25
     eac:	98 2f       	mov	r25, r24
     eae:	88 27       	eor	r24, r24
     eb0:	82 0f       	add	r24, r18
     eb2:	91 1d       	adc	r25, r1
     eb4:	a1 1d       	adc	r26, r1
     eb6:	b1 1d       	adc	r27, r1
     eb8:	bc 01       	movw	r22, r24
     eba:	cd 01       	movw	r24, r26
     ebc:	42 e0       	ldi	r20, 0x02	; 2
     ebe:	66 0f       	add	r22, r22
     ec0:	77 1f       	adc	r23, r23
     ec2:	88 1f       	adc	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	4a 95       	dec	r20
     ec8:	d1 f7       	brne	.-12     	; 0xebe <micros+0x3c>
}
     eca:	08 95       	ret

00000ecc <delay>:

void delay(unsigned long ms)
{
     ecc:	cf 92       	push	r12
     ece:	df 92       	push	r13
     ed0:	ef 92       	push	r14
     ed2:	ff 92       	push	r15
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	6b 01       	movw	r12, r22
     eda:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
     edc:	0e 94 41 07 	call	0xe82	; 0xe82 <micros>
     ee0:	eb 01       	movw	r28, r22

	while (ms > 0) {
     ee2:	c1 14       	cp	r12, r1
     ee4:	d1 04       	cpc	r13, r1
     ee6:	e1 04       	cpc	r14, r1
     ee8:	f1 04       	cpc	r15, r1
     eea:	89 f0       	breq	.+34     	; 0xf0e <delay+0x42>
		yield();
     eec:	0e 94 99 08 	call	0x1132	; 0x1132 <yield>
		if (((uint16_t)micros() - start) >= 1000) {
     ef0:	0e 94 41 07 	call	0xe82	; 0xe82 <micros>
     ef4:	6c 1b       	sub	r22, r28
     ef6:	7d 0b       	sbc	r23, r29
     ef8:	68 3e       	cpi	r22, 0xE8	; 232
     efa:	73 40       	sbci	r23, 0x03	; 3
     efc:	90 f3       	brcs	.-28     	; 0xee2 <delay+0x16>
			ms--;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	c8 1a       	sub	r12, r24
     f02:	d1 08       	sbc	r13, r1
     f04:	e1 08       	sbc	r14, r1
     f06:	f1 08       	sbc	r15, r1
			start += 1000;
     f08:	c8 51       	subi	r28, 0x18	; 24
     f0a:	dc 4f       	sbci	r29, 0xFC	; 252
     f0c:	ea cf       	rjmp	.-44     	; 0xee2 <delay+0x16>
		}
	}
}
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	ff 90       	pop	r15
     f14:	ef 90       	pop	r14
     f16:	df 90       	pop	r13
     f18:	cf 90       	pop	r12
     f1a:	08 95       	ret

00000f1c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     f1c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     f1e:	84 b5       	in	r24, 0x24	; 36
     f20:	82 60       	ori	r24, 0x02	; 2
     f22:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     f24:	84 b5       	in	r24, 0x24	; 36
     f26:	81 60       	ori	r24, 0x01	; 1
     f28:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     f2a:	85 b5       	in	r24, 0x25	; 37
     f2c:	82 60       	ori	r24, 0x02	; 2
     f2e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     f30:	85 b5       	in	r24, 0x25	; 37
     f32:	81 60       	ori	r24, 0x01	; 1
     f34:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     f36:	ee e6       	ldi	r30, 0x6E	; 110
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	81 60       	ori	r24, 0x01	; 1
     f3e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     f40:	e1 e8       	ldi	r30, 0x81	; 129
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     f46:	80 81       	ld	r24, Z
     f48:	82 60       	ori	r24, 0x02	; 2
     f4a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     f4c:	80 81       	ld	r24, Z
     f4e:	81 60       	ori	r24, 0x01	; 1
     f50:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     f52:	e0 e8       	ldi	r30, 0x80	; 128
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	81 60       	ori	r24, 0x01	; 1
     f5a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     f5c:	e1 eb       	ldi	r30, 0xB1	; 177
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	84 60       	ori	r24, 0x04	; 4
     f64:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     f66:	e0 eb       	ldi	r30, 0xB0	; 176
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	81 60       	ori	r24, 0x01	; 1
     f6e:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     f70:	ea e7       	ldi	r30, 0x7A	; 122
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	84 60       	ori	r24, 0x04	; 4
     f78:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     f7a:	80 81       	ld	r24, Z
     f7c:	82 60       	ori	r24, 0x02	; 2
     f7e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     f80:	80 81       	ld	r24, Z
     f82:	81 60       	ori	r24, 0x01	; 1
     f84:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     f86:	80 81       	ld	r24, Z
     f88:	80 68       	ori	r24, 0x80	; 128
     f8a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     f8c:	10 92 c1 00 	sts	0x00C1, r1
     f90:	08 95       	ret

00000f92 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     f92:	83 30       	cpi	r24, 0x03	; 3
     f94:	81 f0       	breq	.+32     	; 0xfb6 <turnOffPWM+0x24>
     f96:	28 f4       	brcc	.+10     	; 0xfa2 <turnOffPWM+0x10>
     f98:	81 30       	cpi	r24, 0x01	; 1
     f9a:	99 f0       	breq	.+38     	; 0xfc2 <turnOffPWM+0x30>
     f9c:	82 30       	cpi	r24, 0x02	; 2
     f9e:	a1 f0       	breq	.+40     	; 0xfc8 <turnOffPWM+0x36>
     fa0:	08 95       	ret
     fa2:	87 30       	cpi	r24, 0x07	; 7
     fa4:	a9 f0       	breq	.+42     	; 0xfd0 <turnOffPWM+0x3e>
     fa6:	88 30       	cpi	r24, 0x08	; 8
     fa8:	b9 f0       	breq	.+46     	; 0xfd8 <turnOffPWM+0x46>
     faa:	84 30       	cpi	r24, 0x04	; 4
     fac:	d1 f4       	brne	.+52     	; 0xfe2 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     fae:	80 91 80 00 	lds	r24, 0x0080
     fb2:	8f 7d       	andi	r24, 0xDF	; 223
     fb4:	03 c0       	rjmp	.+6      	; 0xfbc <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     fb6:	80 91 80 00 	lds	r24, 0x0080
     fba:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     fbc:	80 93 80 00 	sts	0x0080, r24
     fc0:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     fc2:	84 b5       	in	r24, 0x24	; 36
     fc4:	8f 77       	andi	r24, 0x7F	; 127
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <turnOffPWM+0x3a>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     fc8:	84 b5       	in	r24, 0x24	; 36
     fca:	8f 7d       	andi	r24, 0xDF	; 223
     fcc:	84 bd       	out	0x24, r24	; 36
     fce:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     fd0:	80 91 b0 00 	lds	r24, 0x00B0
     fd4:	8f 77       	andi	r24, 0x7F	; 127
     fd6:	03 c0       	rjmp	.+6      	; 0xfde <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     fd8:	80 91 b0 00 	lds	r24, 0x00B0
     fdc:	8f 7d       	andi	r24, 0xDF	; 223
     fde:	80 93 b0 00 	sts	0x00B0, r24
     fe2:	08 95       	ret

00000fe4 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	fc 01       	movw	r30, r24
     fec:	eb 5e       	subi	r30, 0xEB	; 235
     fee:	fc 4f       	sbci	r31, 0xFC	; 252
     ff0:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     ff2:	fc 01       	movw	r30, r24
     ff4:	e7 5d       	subi	r30, 0xD7	; 215
     ff6:	fc 4f       	sbci	r31, 0xFC	; 252
     ff8:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     ffa:	88 23       	and	r24, r24
     ffc:	61 f1       	breq	.+88     	; 0x1056 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	fc 01       	movw	r30, r24
    1006:	e9 5b       	subi	r30, 0xB9	; 185
    1008:	fc 4f       	sbci	r31, 0xFC	; 252
    100a:	c5 91       	lpm	r28, Z+
    100c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    100e:	fc 01       	movw	r30, r24
    1010:	e3 5c       	subi	r30, 0xC3	; 195
    1012:	fc 4f       	sbci	r31, 0xFC	; 252
    1014:	a5 91       	lpm	r26, Z+
    1016:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1018:	61 11       	cpse	r22, r1
    101a:	09 c0       	rjmp	.+18     	; 0x102e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    101c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    101e:	f8 94       	cli
		*reg &= ~bit;
    1020:	88 81       	ld	r24, Y
    1022:	20 95       	com	r18
    1024:	82 23       	and	r24, r18
    1026:	88 83       	st	Y, r24
		*out &= ~bit;
    1028:	ec 91       	ld	r30, X
    102a:	2e 23       	and	r18, r30
    102c:	0b c0       	rjmp	.+22     	; 0x1044 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    102e:	62 30       	cpi	r22, 0x02	; 2
    1030:	61 f4       	brne	.+24     	; 0x104a <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1032:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1034:	f8 94       	cli
		*reg &= ~bit;
    1036:	38 81       	ld	r19, Y
    1038:	82 2f       	mov	r24, r18
    103a:	80 95       	com	r24
    103c:	83 23       	and	r24, r19
    103e:	88 83       	st	Y, r24
		*out |= bit;
    1040:	ec 91       	ld	r30, X
    1042:	2e 2b       	or	r18, r30
    1044:	2c 93       	st	X, r18
		SREG = oldSREG;
    1046:	9f bf       	out	0x3f, r25	; 63
    1048:	06 c0       	rjmp	.+12     	; 0x1056 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    104a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    104c:	f8 94       	cli
		*reg |= bit;
    104e:	e8 81       	ld	r30, Y
    1050:	2e 2b       	or	r18, r30
    1052:	28 83       	st	Y, r18
		SREG = oldSREG;
    1054:	8f bf       	out	0x3f, r24	; 63
	}
}
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	08 95       	ret

0000105c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    105c:	1f 93       	push	r17
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	f9 01       	movw	r30, r18
    1068:	ef 5f       	subi	r30, 0xFF	; 255
    106a:	fc 4f       	sbci	r31, 0xFC	; 252
    106c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    106e:	f9 01       	movw	r30, r18
    1070:	eb 5e       	subi	r30, 0xEB	; 235
    1072:	fc 4f       	sbci	r31, 0xFC	; 252
    1074:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1076:	f9 01       	movw	r30, r18
    1078:	e7 5d       	subi	r30, 0xD7	; 215
    107a:	fc 4f       	sbci	r31, 0xFC	; 252
    107c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    107e:	cc 23       	and	r28, r28
    1080:	c9 f0       	breq	.+50     	; 0x10b4 <digitalWrite+0x58>
    1082:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1084:	81 11       	cpse	r24, r1
    1086:	0e 94 c9 07 	call	0xf92	; 0xf92 <turnOffPWM>

	out = portOutputRegister(port);
    108a:	ec 2f       	mov	r30, r28
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	ee 0f       	add	r30, r30
    1090:	ff 1f       	adc	r31, r31
    1092:	e3 5c       	subi	r30, 0xC3	; 195
    1094:	fc 4f       	sbci	r31, 0xFC	; 252
    1096:	a5 91       	lpm	r26, Z+
    1098:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    109a:	8f b7       	in	r24, 0x3f	; 63
	cli();
    109c:	f8 94       	cli

	if (val == LOW) {
    109e:	11 11       	cpse	r17, r1
    10a0:	05 c0       	rjmp	.+10     	; 0x10ac <digitalWrite+0x50>
		*out &= ~bit;
    10a2:	9c 91       	ld	r25, X
    10a4:	ed 2f       	mov	r30, r29
    10a6:	e0 95       	com	r30
    10a8:	e9 23       	and	r30, r25
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <digitalWrite+0x54>
	} else {
		*out |= bit;
    10ac:	ec 91       	ld	r30, X
    10ae:	ed 2b       	or	r30, r29
    10b0:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    10b2:	8f bf       	out	0x3f, r24	; 63
}
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	1f 91       	pop	r17
    10ba:	08 95       	ret

000010bc <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    10bc:	bf 92       	push	r11
    10be:	cf 92       	push	r12
    10c0:	df 92       	push	r13
    10c2:	ef 92       	push	r14
    10c4:	ff 92       	push	r15
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	c8 2e       	mov	r12, r24
    10d0:	d6 2e       	mov	r13, r22
    10d2:	b4 2e       	mov	r11, r20
    10d4:	c7 e0       	ldi	r28, 0x07	; 7
    10d6:	d0 e0       	ldi	r29, 0x00	; 0
    10d8:	02 2f       	mov	r16, r18
    10da:	10 e0       	ldi	r17, 0x00	; 0
    10dc:	87 e0       	ldi	r24, 0x07	; 7
    10de:	e8 2e       	mov	r14, r24
    10e0:	f1 2c       	mov	r15, r1
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    10e2:	b1 10       	cpse	r11, r1
    10e4:	05 c0       	rjmp	.+10     	; 0x10f0 <shiftOut+0x34>
    10e6:	c7 01       	movw	r24, r14
    10e8:	8c 1b       	sub	r24, r28
    10ea:	9d 0b       	sbc	r25, r29
			digitalWrite(dataPin, !!(val & (1 << i)));
    10ec:	98 01       	movw	r18, r16
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <shiftOut+0x38>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    10f0:	98 01       	movw	r18, r16
    10f2:	8c 2f       	mov	r24, r28
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <shiftOut+0x3e>
    10f6:	35 95       	asr	r19
    10f8:	27 95       	ror	r18
    10fa:	8a 95       	dec	r24
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <shiftOut+0x3a>
    10fe:	b9 01       	movw	r22, r18
    1100:	61 70       	andi	r22, 0x01	; 1
    1102:	77 27       	eor	r23, r23
    1104:	8c 2d       	mov	r24, r12
    1106:	0e 94 2e 08 	call	0x105c	; 0x105c <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    110a:	61 e0       	ldi	r22, 0x01	; 1
    110c:	8d 2d       	mov	r24, r13
    110e:	0e 94 2e 08 	call	0x105c	; 0x105c <digitalWrite>
		digitalWrite(clockPin, LOW);		
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	8d 2d       	mov	r24, r13
    1116:	0e 94 2e 08 	call	0x105c	; 0x105c <digitalWrite>
    111a:	21 97       	sbiw	r28, 0x01	; 1
    111c:	10 f7       	brcc	.-60     	; 0x10e2 <shiftOut+0x26>
	}
}
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	1f 91       	pop	r17
    1124:	0f 91       	pop	r16
    1126:	ff 90       	pop	r15
    1128:	ef 90       	pop	r14
    112a:	df 90       	pop	r13
    112c:	cf 90       	pop	r12
    112e:	bf 90       	pop	r11
    1130:	08 95       	ret

00001132 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1132:	08 95       	ret

00001134 <__udivmodsi4>:
    1134:	a1 e2       	ldi	r26, 0x21	; 33
    1136:	1a 2e       	mov	r1, r26
    1138:	aa 1b       	sub	r26, r26
    113a:	bb 1b       	sub	r27, r27
    113c:	fd 01       	movw	r30, r26
    113e:	0d c0       	rjmp	.+26     	; 0x115a <__udivmodsi4_ep>

00001140 <__udivmodsi4_loop>:
    1140:	aa 1f       	adc	r26, r26
    1142:	bb 1f       	adc	r27, r27
    1144:	ee 1f       	adc	r30, r30
    1146:	ff 1f       	adc	r31, r31
    1148:	a2 17       	cp	r26, r18
    114a:	b3 07       	cpc	r27, r19
    114c:	e4 07       	cpc	r30, r20
    114e:	f5 07       	cpc	r31, r21
    1150:	20 f0       	brcs	.+8      	; 0x115a <__udivmodsi4_ep>
    1152:	a2 1b       	sub	r26, r18
    1154:	b3 0b       	sbc	r27, r19
    1156:	e4 0b       	sbc	r30, r20
    1158:	f5 0b       	sbc	r31, r21

0000115a <__udivmodsi4_ep>:
    115a:	66 1f       	adc	r22, r22
    115c:	77 1f       	adc	r23, r23
    115e:	88 1f       	adc	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	1a 94       	dec	r1
    1164:	69 f7       	brne	.-38     	; 0x1140 <__udivmodsi4_loop>
    1166:	60 95       	com	r22
    1168:	70 95       	com	r23
    116a:	80 95       	com	r24
    116c:	90 95       	com	r25
    116e:	9b 01       	movw	r18, r22
    1170:	ac 01       	movw	r20, r24
    1172:	bd 01       	movw	r22, r26
    1174:	cf 01       	movw	r24, r30
    1176:	08 95       	ret

00001178 <__tablejump2__>:
    1178:	ee 0f       	add	r30, r30
    117a:	ff 1f       	adc	r31, r31
    117c:	05 90       	lpm	r0, Z+
    117e:	f4 91       	lpm	r31, Z
    1180:	e0 2d       	mov	r30, r0
    1182:	09 94       	ijmp

00001184 <memcpy_P>:
    1184:	fb 01       	movw	r30, r22
    1186:	dc 01       	movw	r26, r24
    1188:	02 c0       	rjmp	.+4      	; 0x118e <memcpy_P+0xa>
    118a:	05 90       	lpm	r0, Z+
    118c:	0d 92       	st	X+, r0
    118e:	41 50       	subi	r20, 0x01	; 1
    1190:	50 40       	sbci	r21, 0x00	; 0
    1192:	d8 f7       	brcc	.-10     	; 0x118a <memcpy_P+0x6>
    1194:	08 95       	ret

00001196 <__do_global_dtors>:
    1196:	11 e0       	ldi	r17, 0x01	; 1
    1198:	cb ea       	ldi	r28, 0xAB	; 171
    119a:	d1 e0       	ldi	r29, 0x01	; 1
    119c:	04 c0       	rjmp	.+8      	; 0x11a6 <__do_global_dtors+0x10>
    119e:	fe 01       	movw	r30, r28
    11a0:	0e 94 bc 08 	call	0x1178	; 0x1178 <__tablejump2__>
    11a4:	21 96       	adiw	r28, 0x01	; 1
    11a6:	cc 3a       	cpi	r28, 0xAC	; 172
    11a8:	d1 07       	cpc	r29, r17
    11aa:	c9 f7       	brne	.-14     	; 0x119e <__do_global_dtors+0x8>
    11ac:	f8 94       	cli

000011ae <__stop_program>:
    11ae:	ff cf       	rjmp	.-2      	; 0x11ae <__stop_program>
