
Led_Anzeige.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000017b8  0000184c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010c  00800136  00800136  00001882  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001882  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000418  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009b00  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019a4  00000000  00000000  0000b80c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000024ea  00000000  00000000  0000d1b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d48  00000000  00000000  0000f69c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000226a  00000000  00000000  000103e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000538c  00000000  00000000  0001264e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000438  00000000  00000000  000179da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 02 	jmp	0x466	; 0x466 <__dtors_end>
       4:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
       8:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
       c:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
      10:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
      14:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
      18:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
      1c:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
      20:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
      24:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
      28:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
      2c:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
      30:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
      34:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__vector_13>
      38:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
      3c:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
      40:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__vector_16>
      44:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
      48:	0c 94 bd 08 	jmp	0x117a	; 0x117a <__vector_18>
      4c:	0c 94 ef 08 	jmp	0x11de	; 0x11de <__vector_19>
      50:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
      54:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
      58:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
      5c:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
      60:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
      64:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	45 78       	andi	r20, 0x85	; 133
      6a:	61 6d       	ori	r22, 0xD1	; 209
      6c:	70 6c       	ori	r23, 0xC0	; 192
      6e:	65 3a       	cpi	r22, 0xA5	; 165
      70:	20 74       	andi	r18, 0x40	; 64
      72:	65 78       	andi	r22, 0x85	; 133
      74:	74 3d       	cpi	r23, 0xD4	; 212
      76:	65 78       	andi	r22, 0x85	; 133
      78:	61 6d       	ori	r22, 0xD1	; 209
      7a:	70 6c       	ori	r23, 0xC0	; 192
      7c:	65 20       	and	r6, r5
      7e:	74 65       	ori	r23, 0x54	; 84
      80:	78 74       	andi	r23, 0x48	; 72
	...

00000083 <_ZZ9printHelpvE3__c_1>:
      83:	63 6f 6d 6d 61 6e 64 20 61 6e 64 20 76 61 6c 75     command and valu
      93:	65 20 68 61 73 20 74 6f 20 62 65 20 73 65 70 61     e has to be sepa
      a3:	72 61 74 65 64 20 62 79 20 61 6e 20 65 71 75 61     rated by an equa
      b3:	6c 20 73 69 67 6e 00                                l sign.

000000ba <_ZZ9printHelpvE3__c_0>:
      ba:	6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 73 20 61     known commands a
      ca:	72 65 3a 20 74 65 78 74 2c 20 69 6e 74 65 6e 73     re: text, intens
      da:	69 74 79 20 61 6e 64 20 73 70 65 65 64 00           ity and speed.

000000e8 <_ZZ9printHelpvE3__c>:
      e8:	63 6f 6d 6d 61 6e 64 20 64 6f 65 73 20 6e 6f 74     command does not
      f8:	20 6d 61 74 63 68 00                                 match.

000000ff <_ZZ15uartInputHandlevE3__c_2>:
      ff:	73 70 65 65 64 20 72 61 6e 67 65 20 31 20 2e 2e     speed range 1 ..
     10f:	2e 20 31 30 00                                      . 10.

00000114 <_ZZ15uartInputHandlevE3__c_1>:
     114:	76 61 6c 75 65 20 6f 75 74 20 6f 66 20 72 61 6e     value out of ran
     124:	67 65 00                                            ge.

00000127 <_ZZ15uartInputHandlevE3__c_0>:
     127:	69 6e 74 65 6e 73 69 74 79 20 72 61 6e 67 65 20     intensity range 
     137:	31 20 2e 2e 2e 20 31 36 00                          1 ... 16.

00000140 <_ZZ15uartInputHandlevE3__c>:
     140:	76 61 6c 75 65 20 6f 75 74 20 6f 66 20 72 61 6e     value out of ran
     150:	67 65 00                                            ge.

00000153 <_ZL11SpriteTable>:
     153:	03 08 00 00 00 00 00 01 08 5f 00 00 00 00 03 08     ........._......
     163:	03 00 03 00 00 05 08 14 3e 14 3e 14 04 08 24 6a     ........>.>...$j
     173:	2b 12 00 05 08 63 13 08 64 63 05 08 36 49 56 20     +....c..dc..6IV 
     183:	50 01 08 03 00 00 00 00 03 08 1c 22 41 00 00 03     P.........."A...
     193:	08 41 22 1c 00 00 05 08 28 18 0e 18 28 05 08 08     .A".....(...(...
     1a3:	08 3e 08 08 02 08 b0 70 00 00 00 04 08 08 08 08     .>.....p........
     1b3:	08 00 02 08 60 60 00 00 00 04 08 60 18 06 01 00     ....``.....`....
     1c3:	04 08 3e 41 41 3e 00 03 08 42 7f 40 00 00 04 08     ..>AA>...B.@....
     1d3:	62 51 49 46 00 04 08 22 41 49 36 00 04 08 18 14     bQIF..."AI6.....
     1e3:	12 7f 00 04 08 27 45 45 39 00 04 08 3e 49 49 30     .....'EE9...>II0
     1f3:	00 04 08 61 11 09 07 00 04 08 36 49 49 36 00 04     ...a......6II6..
     203:	08 06 49 49 3e 00 02 08 50 00 00 00 00 02 08 80     ..II>...P.......
     213:	50 00 00 00 03 08 10 28 44 00 00 03 08 14 14 14     P......(D.......
     223:	00 00 03 08 44 28 10 00 00 04 08 02 59 09 06 00     ....D(......Y...
     233:	05 08 3e 49 55 5d 0e 04 08 7e 11 11 7e 00 04 08     ..>IU]...~..~...
     243:	7f 49 49 36 00 04 08 3e 41 41 22 00 04 08 7f 41     .II6...>AA"....A
     253:	41 3e 00 04 08 7f 49 49 41 00 04 08 7f 09 09 01     A>....IIA.......
     263:	00 04 08 3e 41 49 7a 00 04 08 7f 08 08 7f 00 03     ...>AIz.........
     273:	08 41 7f 41 00 00 04 08 30 40 41 3f 00 04 08 7f     .A.A....0@A?....
     283:	08 14 63 00 04 08 7f 40 40 40 00 05 08 7f 02 0c     ..c....@@@......
     293:	02 7f 05 08 7f 04 08 10 7f 04 08 3e 41 41 3e 00     ...........>AA>.
     2a3:	04 08 7f 09 09 06 00 04 08 3e 41 41 be 00 04 08     .........>AA....
     2b3:	7f 09 09 76 00 04 08 46 49 49 32 00 05 08 01 01     ...v...FII2.....
     2c3:	7f 01 01 04 08 3f 40 40 3f 00 05 08 0f 30 40 30     .....?@@?....0@0
     2d3:	0f 05 08 3f 40 38 40 3f 05 08 63 14 08 14 63 05     ...?@8@?..c...c.
     2e3:	08 07 08 70 08 07 04 08 61 51 49 47 00 02 08 7f     ...p....aQIG....
     2f3:	41 00 00 00 04 08 01 06 18 60 00 03 08 02 01 02     A........`......
     303:	00 00 04 08 40 40 40 40 00 02 08 01 02 00 00 00     ....@@@@........
     313:	04 08 20 54 54 78 00 04 08 7f 44 44 38 00 04 08     .. TTx....DD8...
     323:	38 44 44 28 00 04 08 38 44 44 7f 00 04 08 38 54     8DD(...8DD....8T
     333:	54 18 00 03 08 04 7e 05 00 00 04 08 98 a4 a4 78     T.....~........x
     343:	00 04 08 7f 04 04 78 00 03 08 44 7d 40 00 00 04     ......x...D}@...
     353:	08 40 80 84 7d 00 04 08 7f 10 28 44 00 03 08 41     .@..}.....(D...A
     363:	7f 40 00 00 05 08 7c 04 7c 04 78 04 08 7c 04 04     .@....|.|.x..|..
     373:	78 00 04 08 38 44 44 38 00 04 08 fc 24 24 18 00     x...8DD8....$$..
     383:	04 08 18 24 24 fc 00 04 08 7c 08 04 04 00 04 08     ...$$....|......
     393:	48 54 54 24 00 03 08 04 3f 44 00 00 04 08 3c 40     HTT$....?D....<@
     3a3:	40 7c 00 05 08 1c 20 40 20 1c 05 08 3c 40 3c 40     @|.... @ ...<@<@
     3b3:	3c 05 08 44 28 10 28 44 04 08 9c a0 a0 7c 00 03     <..D(.(D.....|..
     3c3:	08 64 54 4c 00 00 03 08 08 36 41 00 00 01 08 7f     .dTL.....6A.....
     3d3:	00 00 00 00 03 08 41 36 08 00 00 04 08 08 04 08     ......A6........
     3e3:	04 00 04 08 7c 13 13 7c 00 04 08 3c 43 43 3c 00     ....|..|...<CC<.
     3f3:	04 08 3e 41 41 3e 00 04 08 20 56 56 78 00 04 08     ..>AA>... VVx...
     403:	38 46 46 38 00 04 08 3c 42 42 7c 00                 8FF8...<BB|.

0000040f <digital_pin_to_timer_PGM>:
     40f:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     41f:	00 00 00 00                                         ....

00000423 <digital_pin_to_bit_mask_PGM>:
     423:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     433:	04 08 10 20                                         ... 

00000437 <digital_pin_to_port_PGM>:
     437:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     447:	03 03 03 03                                         ....

0000044b <port_to_output_PGM>:
     44b:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000455 <port_to_mode_PGM>:
     455:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000460 <__ctors_start>:
     460:	98 03       	fmulsu	r17, r16
     462:	1f 09       	sbc	r17, r15

00000464 <__ctors_end>:
     464:	9f 03       	fmulsu	r17, r23

00000466 <__dtors_end>:
     466:	11 24       	eor	r1, r1
     468:	1f be       	out	0x3f, r1	; 63
     46a:	cf ef       	ldi	r28, 0xFF	; 255
     46c:	d8 e0       	ldi	r29, 0x08	; 8
     46e:	de bf       	out	0x3e, r29	; 62
     470:	cd bf       	out	0x3d, r28	; 61

00000472 <__do_copy_data>:
     472:	11 e0       	ldi	r17, 0x01	; 1
     474:	a0 e0       	ldi	r26, 0x00	; 0
     476:	b1 e0       	ldi	r27, 0x01	; 1
     478:	e8 eb       	ldi	r30, 0xB8	; 184
     47a:	f7 e1       	ldi	r31, 0x17	; 23
     47c:	02 c0       	rjmp	.+4      	; 0x482 <__do_copy_data+0x10>
     47e:	05 90       	lpm	r0, Z+
     480:	0d 92       	st	X+, r0
     482:	a6 33       	cpi	r26, 0x36	; 54
     484:	b1 07       	cpc	r27, r17
     486:	d9 f7       	brne	.-10     	; 0x47e <__do_copy_data+0xc>

00000488 <__do_clear_bss>:
     488:	22 e0       	ldi	r18, 0x02	; 2
     48a:	a6 e3       	ldi	r26, 0x36	; 54
     48c:	b1 e0       	ldi	r27, 0x01	; 1
     48e:	01 c0       	rjmp	.+2      	; 0x492 <.do_clear_bss_start>

00000490 <.do_clear_bss_loop>:
     490:	1d 92       	st	X+, r1

00000492 <.do_clear_bss_start>:
     492:	a2 34       	cpi	r26, 0x42	; 66
     494:	b2 07       	cpc	r27, r18
     496:	e1 f7       	brne	.-8      	; 0x490 <.do_clear_bss_loop>

00000498 <__do_global_ctors>:
     498:	12 e0       	ldi	r17, 0x02	; 2
     49a:	c2 e3       	ldi	r28, 0x32	; 50
     49c:	d2 e0       	ldi	r29, 0x02	; 2
     49e:	04 c0       	rjmp	.+8      	; 0x4a8 <__do_global_ctors+0x10>
     4a0:	21 97       	sbiw	r28, 0x01	; 1
     4a2:	fe 01       	movw	r30, r28
     4a4:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__tablejump2__>
     4a8:	c0 33       	cpi	r28, 0x30	; 48
     4aa:	d1 07       	cpc	r29, r17
     4ac:	c9 f7       	brne	.-14     	; 0x4a0 <__do_global_ctors+0x8>
     4ae:	0e 94 4d 09 	call	0x129a	; 0x129a <main>
     4b2:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <__do_global_dtors>

000004b6 <__bad_interrupt>:
     4b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000004ba <_Z8systTickv>:
 *  \details        
 *                  
 *********************************************************************************************************************/
void systTick()
{
    Timer1Overflow = true;
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <Timer1Overflow>
     4c0:	08 95       	ret

000004c2 <setup>:
/**********************************************************************************************************************
 *  ARDUINO setup
 *********************************************************************************************************************/
void setup()
{
    Timer1.initialize(200000);
     4c2:	40 e4       	ldi	r20, 0x40	; 64
     4c4:	5d e0       	ldi	r21, 0x0D	; 13
     4c6:	63 e0       	ldi	r22, 0x03	; 3
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	86 e9       	ldi	r24, 0x96	; 150
     4cc:	91 e0       	ldi	r25, 0x01	; 1
     4ce:	0e 94 66 07 	call	0xecc	; 0xecc <_ZN8TimerOne10initializeEl>
    Timer1.attachInterrupt(systTick);
     4d2:	2f ef       	ldi	r18, 0xFF	; 255
     4d4:	3f ef       	ldi	r19, 0xFF	; 255
     4d6:	a9 01       	movw	r20, r18
     4d8:	6d e5       	ldi	r22, 0x5D	; 93
     4da:	72 e0       	ldi	r23, 0x02	; 2
     4dc:	86 e9       	ldi	r24, 0x96	; 150
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	0e 94 76 07 	call	0xeec	; 0xeec <_ZN8TimerOne15attachInterruptEPFvvEl>
    Matrix.init();
     4e4:	88 e3       	ldi	r24, 0x38	; 56
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	0e 94 99 04 	call	0x932	; 0x932 <_ZN9MaxMatrix4initEv>
 *  \param[in]		Length				maximum characters to copy
 *                  
 *********************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     4ec:	4d e1       	ldi	r20, 0x1D	; 29
     4ee:	50 e0       	ldi	r21, 0x00	; 0
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	71 e0       	ldi	r23, 0x01	; 1
     4f4:	8f e4       	ldi	r24, 0x4F	; 79
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	0e 94 91 0b 	call	0x1722	; 0x1722 <strncpy>
    Destination[Length-1] = '\0';
     4fc:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <MaxMatrixText+0x1d>
{
    Timer1.initialize(200000);
    Timer1.attachInterrupt(systTick);
    Matrix.init();
    stringCopy(MaxMatrixText, "Andreas Burnickl", sizeof(MaxMatrixText));
    UartInputComplete = false;
     500:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <UartInputComplete>
    Timer1Overflow = false;
     504:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <Timer1Overflow>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     508:	26 e0       	ldi	r18, 0x06	; 6
     50a:	40 e8       	ldi	r20, 0x80	; 128
     50c:	55 e2       	ldi	r21, 0x25	; 37
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	8c e9       	ldi	r24, 0x9C	; 156
     514:	91 e0       	ldi	r25, 0x01	; 1
     516:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <_ZN14HardwareSerial5beginEmh>

0000051a <_Z9printHelpv>:
 *  \details        this function prints usage of Led Matrix over UART
 *                  
 *********************************************************************************************************************/
void printHelp()
{
    Serial.println(F("command does not match"));
     51a:	68 ee       	ldi	r22, 0xE8	; 232
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	8c e9       	ldi	r24, 0x9C	; 156
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	0e 94 c2 09 	call	0x1384	; 0x1384 <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(F("known commands are: text, intensity and speed"));
     526:	6a eb       	ldi	r22, 0xBA	; 186
     528:	70 e0       	ldi	r23, 0x00	; 0
     52a:	8c e9       	ldi	r24, 0x9C	; 156
     52c:	91 e0       	ldi	r25, 0x01	; 1
     52e:	0e 94 c2 09 	call	0x1384	; 0x1384 <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(F("command and value has to be separated by an equal sign"));
     532:	63 e8       	ldi	r22, 0x83	; 131
     534:	70 e0       	ldi	r23, 0x00	; 0
     536:	8c e9       	ldi	r24, 0x9C	; 156
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	0e 94 c2 09 	call	0x1384	; 0x1384 <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(F("Example: text=example text"));
     53e:	68 e6       	ldi	r22, 0x68	; 104
     540:	70 e0       	ldi	r23, 0x00	; 0
     542:	8c e9       	ldi	r24, 0x9C	; 156
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <_ZN5Print7printlnEPK19__FlashStringHelper>

0000054a <_Z15uartInputHandlev>:
 *  \details        this function handles and validates the incoming data. After splitting the data into
 *                  command and value a specific action will be called.
 *                 
 *********************************************************************************************************************/
void uartInputHandle()
{
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
     552:	aa 97       	sbiw	r28, 0x2a	; 42
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	f8 94       	cli
     558:	de bf       	out	0x3e, r29	; 62
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	cd bf       	out	0x3d, r28	; 61
    char command[COMMAND_MAX_LENGTH] = "";
     55e:	1f 8e       	std	Y+31, r1	; 0x1f
     560:	18 a2       	std	Y+32, r1	; 0x20
     562:	19 a2       	std	Y+33, r1	; 0x21
     564:	1a a2       	std	Y+34, r1	; 0x22
     566:	fe 01       	movw	r30, r28
     568:	b3 96       	adiw	r30, 0x23	; 35
     56a:	86 e0       	ldi	r24, 0x06	; 6
     56c:	df 01       	movw	r26, r30
     56e:	1d 92       	st	X+, r1
     570:	8a 95       	dec	r24
     572:	e9 f7       	brne	.-6      	; 0x56e <_Z15uartInputHandlev+0x24>
    char valueASCII[MAXMATRIX_MAX_TEXT_LENGTH] = "";
     574:	19 82       	std	Y+1, r1	; 0x01
     576:	1a 82       	std	Y+2, r1	; 0x02
     578:	1b 82       	std	Y+3, r1	; 0x03
     57a:	1c 82       	std	Y+4, r1	; 0x04
     57c:	7e 97       	sbiw	r30, 0x1e	; 30
     57e:	8a e1       	ldi	r24, 0x1A	; 26
     580:	df 01       	movw	r26, r30
     582:	1d 92       	st	X+, r1
     584:	8a 95       	dec	r24
     586:	e9 f7       	brne	.-6      	; 0x582 <_Z15uartInputHandlev+0x38>
    int value = 0;
    const char delimiter[] = "=";
     588:	8d e3       	ldi	r24, 0x3D	; 61
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	9a a7       	std	Y+42, r25	; 0x2a
     58e:	89 a7       	std	Y+41, r24	; 0x29
    char *token = NULL;

    if(strchr(UartInput, '='))
     590:	6d e3       	ldi	r22, 0x3D	; 61
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	8e e6       	ldi	r24, 0x6E	; 110
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <strchr>
     59c:	89 2b       	or	r24, r25
     59e:	09 f4       	brne	.+2      	; 0x5a2 <_Z15uartInputHandlev+0x58>
     5a0:	99 c0       	rjmp	.+306    	; 0x6d4 <_Z15uartInputHandlev+0x18a>
    {
        token = strtok(UartInput, delimiter);
     5a2:	be 01       	movw	r22, r28
     5a4:	67 5d       	subi	r22, 0xD7	; 215
     5a6:	7f 4f       	sbci	r23, 0xFF	; 255
     5a8:	8e e6       	ldi	r24, 0x6E	; 110
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <strtok>
        if(token != NULL) stringCopy(command, token, sizeof(command));
     5b0:	00 97       	sbiw	r24, 0x00	; 0
     5b2:	41 f0       	breq	.+16     	; 0x5c4 <_Z15uartInputHandlev+0x7a>
 *  \param[in]		Length				maximum characters to copy
 *                  
 *********************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     5b4:	49 e0       	ldi	r20, 0x09	; 9
     5b6:	50 e0       	ldi	r21, 0x00	; 0
     5b8:	bc 01       	movw	r22, r24
     5ba:	ce 01       	movw	r24, r28
     5bc:	4f 96       	adiw	r24, 0x1f	; 31
     5be:	0e 94 91 0b 	call	0x1722	; 0x1722 <strncpy>
    Destination[Length-1] = '\0';
     5c2:	18 a6       	std	Y+40, r1	; 0x28

    if(strchr(UartInput, '='))
    {
        token = strtok(UartInput, delimiter);
        if(token != NULL) stringCopy(command, token, sizeof(command));
        token = strtok(NULL, delimiter);
     5c4:	be 01       	movw	r22, r28
     5c6:	67 5d       	subi	r22, 0xD7	; 215
     5c8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <strtok>
        if(token != NULL) stringCopy(valueASCII, token, sizeof(valueASCII));
     5d2:	00 97       	sbiw	r24, 0x00	; 0
     5d4:	41 f0       	breq	.+16     	; 0x5e6 <_Z15uartInputHandlev+0x9c>
 *  \param[in]		Length				maximum characters to copy
 *                  
 *********************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     5d6:	4d e1       	ldi	r20, 0x1D	; 29
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	bc 01       	movw	r22, r24
     5dc:	ce 01       	movw	r24, r28
     5de:	01 96       	adiw	r24, 0x01	; 1
     5e0:	0e 94 91 0b 	call	0x1722	; 0x1722 <strncpy>
    Destination[Length-1] = '\0';
     5e4:	1e 8e       	std	Y+30, r1	; 0x1e
        token = strtok(UartInput, delimiter);
        if(token != NULL) stringCopy(command, token, sizeof(command));
        token = strtok(NULL, delimiter);
        if(token != NULL) stringCopy(valueASCII, token, sizeof(valueASCII));

        if(strcmp(command, "text") == 0) {
     5e6:	61 e1       	ldi	r22, 0x11	; 17
     5e8:	71 e0       	ldi	r23, 0x01	; 1
     5ea:	ce 01       	movw	r24, r28
     5ec:	4f 96       	adiw	r24, 0x1f	; 31
     5ee:	0e 94 88 0b 	call	0x1710	; 0x1710 <strcmp>
     5f2:	89 2b       	or	r24, r25
     5f4:	b1 f4       	brne	.+44     	; 0x622 <_Z15uartInputHandlev+0xd8>
 *  \param[in]		Length				maximum characters to copy
 *                  
 *********************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     5f6:	4d e1       	ldi	r20, 0x1D	; 29
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	be 01       	movw	r22, r28
     5fc:	6f 5f       	subi	r22, 0xFF	; 255
     5fe:	7f 4f       	sbci	r23, 0xFF	; 255
     600:	8f e4       	ldi	r24, 0x4F	; 79
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	0e 94 91 0b 	call	0x1722	; 0x1722 <strncpy>
    Destination[Length-1] = '\0';
     608:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <MaxMatrixText+0x1d>
        token = strtok(NULL, delimiter);
        if(token != NULL) stringCopy(valueASCII, token, sizeof(valueASCII));

        if(strcmp(command, "text") == 0) {
            stringCopy(MaxMatrixText, valueASCII, sizeof(MaxMatrixText));
            Matrix.clear();
     60c:	88 e3       	ldi	r24, 0x38	; 56
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	0e 94 81 04 	call	0x902	; 0x902 <_ZN9MaxMatrix5clearEv>
            Matrix.setTextWithShift(MaxMatrixText);
     614:	6f e4       	ldi	r22, 0x4F	; 79
     616:	71 e0       	ldi	r23, 0x01	; 1
     618:	88 e3       	ldi	r24, 0x38	; 56
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	0e 94 26 05 	call	0xa4c	; 0xa4c <_ZN9MaxMatrix16setTextWithShiftEPc>
     620:	5b c0       	rjmp	.+182    	; 0x6d8 <_Z15uartInputHandlev+0x18e>
        }
        else if(strcmp(command, "intensity") == 0) {
     622:	66 e1       	ldi	r22, 0x16	; 22
     624:	71 e0       	ldi	r23, 0x01	; 1
     626:	ce 01       	movw	r24, r28
     628:	4f 96       	adiw	r24, 0x1f	; 31
     62a:	0e 94 88 0b 	call	0x1710	; 0x1710 <strcmp>
     62e:	89 2b       	or	r24, r25
     630:	d1 f4       	brne	.+52     	; 0x666 <_Z15uartInputHandlev+0x11c>
            value = atoi(valueASCII);
     632:	ce 01       	movw	r24, r28
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <atoi>
            if(value >= MAXMATRIX_INTENSITY_MIN_VALUE && value <= MAXMATRIX_INTENSITY_MAX_VALUE) {
     63a:	9c 01       	movw	r18, r24
     63c:	21 50       	subi	r18, 0x01	; 1
     63e:	31 09       	sbc	r19, r1
     640:	20 31       	cpi	r18, 0x10	; 16
     642:	31 05       	cpc	r19, r1
     644:	38 f4       	brcc	.+14     	; 0x654 <_Z15uartInputHandlev+0x10a>
                Matrix.setIntensity(value-1);
     646:	6f ef       	ldi	r22, 0xFF	; 255
     648:	68 0f       	add	r22, r24
     64a:	88 e3       	ldi	r24, 0x38	; 56
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	0e 94 15 04 	call	0x82a	; 0x82a <_ZN9MaxMatrix12setIntensityEh>
     652:	42 c0       	rjmp	.+132    	; 0x6d8 <_Z15uartInputHandlev+0x18e>
            } else {
                Serial.println(F("value out of range"));
     654:	60 e4       	ldi	r22, 0x40	; 64
     656:	71 e0       	ldi	r23, 0x01	; 1
     658:	8c e9       	ldi	r24, 0x9C	; 156
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	0e 94 c2 09 	call	0x1384	; 0x1384 <_ZN5Print7printlnEPK19__FlashStringHelper>
                Serial.println(F("intensity range 1 ... 16"));
     660:	67 e2       	ldi	r22, 0x27	; 39
     662:	71 e0       	ldi	r23, 0x01	; 1
     664:	32 c0       	rjmp	.+100    	; 0x6ca <_Z15uartInputHandlev+0x180>
            }
        }
        else if(strcmp(command, "speed") == 0) {
     666:	60 e2       	ldi	r22, 0x20	; 32
     668:	71 e0       	ldi	r23, 0x01	; 1
     66a:	ce 01       	movw	r24, r28
     66c:	4f 96       	adiw	r24, 0x1f	; 31
     66e:	0e 94 88 0b 	call	0x1710	; 0x1710 <strcmp>
     672:	89 2b       	or	r24, r25
     674:	79 f5       	brne	.+94     	; 0x6d4 <_Z15uartInputHandlev+0x18a>
            value = atoi(valueASCII);
     676:	ce 01       	movw	r24, r28
     678:	01 96       	adiw	r24, 0x01	; 1
     67a:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <atoi>
            if(value >= MAXMATRIX_SPEED_MIN_VALUE && value <= MAXMATRIX_SPEED_MAX_VALUE) {
     67e:	9c 01       	movw	r18, r24
     680:	21 50       	subi	r18, 0x01	; 1
     682:	31 09       	sbc	r19, r1
     684:	24 36       	cpi	r18, 0x64	; 100
     686:	31 05       	cpc	r19, r1
     688:	c0 f4       	brcc	.+48     	; 0x6ba <_Z15uartInputHandlev+0x170>
                Timer1.setPeriod((MAXMATRIX_SPEED_MAX_VALUE-value+1) * 10000);
     68a:	25 e6       	ldi	r18, 0x65	; 101
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	a9 01       	movw	r20, r18
     690:	48 1b       	sub	r20, r24
     692:	59 0b       	sbc	r21, r25
     694:	ca 01       	movw	r24, r20
     696:	20 e1       	ldi	r18, 0x10	; 16
     698:	37 e2       	ldi	r19, 0x27	; 39
     69a:	82 9f       	mul	r24, r18
     69c:	a0 01       	movw	r20, r0
     69e:	83 9f       	mul	r24, r19
     6a0:	50 0d       	add	r21, r0
     6a2:	92 9f       	mul	r25, r18
     6a4:	50 0d       	add	r21, r0
     6a6:	11 24       	eor	r1, r1
     6a8:	05 2e       	mov	r0, r21
     6aa:	00 0c       	add	r0, r0
     6ac:	66 0b       	sbc	r22, r22
     6ae:	77 0b       	sbc	r23, r23
     6b0:	86 e9       	ldi	r24, 0x96	; 150
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	0e 94 fe 06 	call	0xdfc	; 0xdfc <_ZN8TimerOne9setPeriodEl>
     6b8:	0f c0       	rjmp	.+30     	; 0x6d8 <_Z15uartInputHandlev+0x18e>
            } else {
                Serial.println(F("value out of range"));
     6ba:	64 e1       	ldi	r22, 0x14	; 20
     6bc:	71 e0       	ldi	r23, 0x01	; 1
     6be:	8c e9       	ldi	r24, 0x9C	; 156
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	0e 94 c2 09 	call	0x1384	; 0x1384 <_ZN5Print7printlnEPK19__FlashStringHelper>
                Serial.println(F("speed range 1 ... 10"));
     6c6:	6f ef       	ldi	r22, 0xFF	; 255
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	8c e9       	ldi	r24, 0x9C	; 156
     6cc:	91 e0       	ldi	r25, 0x01	; 1
     6ce:	0e 94 c2 09 	call	0x1384	; 0x1384 <_ZN5Print7printlnEPK19__FlashStringHelper>
     6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <_Z15uartInputHandlev+0x18e>
            }
        }
        else { 
            printHelp(); 
     6d4:	0e 94 8d 02 	call	0x51a	; 0x51a <_Z9printHelpv>
        }
    } else { 
        printHelp(); 
    }
}
     6d8:	aa 96       	adiw	r28, 0x2a	; 42
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	de bf       	out	0x3e, r29	; 62
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	cd bf       	out	0x3d, r28	; 61
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	08 95       	ret

000006ea <loop>:
/**********************************************************************************************************************
 *  ARDUINO loop
 *********************************************************************************************************************/
void loop()
{ 
    if (UartInputComplete)
     6ea:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <UartInputComplete>
     6ee:	88 23       	and	r24, r24
     6f0:	31 f0       	breq	.+12     	; 0x6fe <loop+0x14>
    {
        uartInputHandle();
     6f2:	0e 94 a5 02 	call	0x54a	; 0x54a <_Z15uartInputHandlev>
        // clear the string:
        UartInput[0] = '\0';
     6f6:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <UartInput>
        UartInputComplete = false;
     6fa:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <UartInputComplete>
    }

    if(Timer1Overflow)
     6fe:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <Timer1Overflow>
     702:	88 23       	and	r24, r24
     704:	a1 f0       	breq	.+40     	; 0x72e <loop+0x44>
    {
        if(Matrix.getState() == MAXMATRIX_STATE_STRING_SHIFT)
     706:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <Matrix+0x15>
     70a:	83 30       	cpi	r24, 0x03	; 3
     70c:	21 f4       	brne	.+8      	; 0x716 <loop+0x2c>
            Matrix.shiftTask();
     70e:	88 e3       	ldi	r24, 0x38	; 56
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	0e 94 c3 06 	call	0xd86	; 0xd86 <_ZN9MaxMatrix9shiftTaskEv>
        if(Matrix.getState() == MAXMATRIX_STATE_READY)
     716:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <Matrix+0x15>
     71a:	82 30       	cpi	r24, 0x02	; 2
     71c:	31 f4       	brne	.+12     	; 0x72a <loop+0x40>
        {
            Matrix.setTextWithShift(MaxMatrixText);
     71e:	6f e4       	ldi	r22, 0x4F	; 79
     720:	71 e0       	ldi	r23, 0x01	; 1
     722:	88 e3       	ldi	r24, 0x38	; 56
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	0e 94 26 05 	call	0xa4c	; 0xa4c <_ZN9MaxMatrix16setTextWithShiftEPc>
        }
        Timer1Overflow = false;
     72a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <Timer1Overflow>
     72e:	08 95       	ret

00000730 <_GLOBAL__sub_I_UartInput>:
 **********************************************************************************************************************/
char UartInput[UART_INPUT_LENGTH];                  // buffer for incoming UART data
boolean UartInputComplete;                          // flag UART string is complete
char MaxMatrixText[MAXMATRIX_MAX_TEXT_LENGTH];      // current Matrix Text
bool Timer1Overflow;                                // flag Timer1 overflow
MaxMatrix Matrix(MAXMATRIX_DATA_PIN, MAXMATRIX_CS_PIN, MAXMATRIX_CLOCK_PIN);
     730:	2b e0       	ldi	r18, 0x0B	; 11
     732:	4a e0       	ldi	r20, 0x0A	; 10
     734:	6c e0       	ldi	r22, 0x0C	; 12
     736:	88 e3       	ldi	r24, 0x38	; 56
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	0c 94 cb 03 	jmp	0x796	; 0x796 <_ZN9MaxMatrixC1Ehhh>

0000073e <_GLOBAL__sub_D_UartInput>:
     73e:	88 e3       	ldi	r24, 0x38	; 56
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <_ZN9MaxMatrixD1Ev>

00000746 <_Z11serialEventv>:
 *  \details        this function saves incoming UART signs into UART buffer.
 *                  After receiving new line, string is complete and flag will be set.
 *  \pre            will be called at the end of the main function             
 *********************************************************************************************************************/
void serialEvent() 
{
     746:	1f 93       	push	r17
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
        // if the incoming character is a newline, set a flag
        if (inChar == '\n') {
            UartInputComplete = true;
        } else {
            // check for free space in buffer
            int UartInputLength = strlen(UartInput);
     74c:	ce e6       	ldi	r28, 0x6E	; 110
     74e:	d1 e0       	ldi	r29, 0x01	; 1
    {
        // get the new byte from uart
        char inChar = (char) Serial.read();
        // if the incoming character is a newline, set a flag
        if (inChar == '\n') {
            UartInputComplete = true;
     750:	11 e0       	ldi	r17, 0x01	; 1
 *                  After receiving new line, string is complete and flag will be set.
 *  \pre            will be called at the end of the main function             
 *********************************************************************************************************************/
void serialEvent() 
{
    while (Serial.available()) 
     752:	8c e9       	ldi	r24, 0x9C	; 156
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN14HardwareSerial9availableEv>
     75a:	89 2b       	or	r24, r25
     75c:	c1 f0       	breq	.+48     	; 0x78e <_Z11serialEventv+0x48>
    {
        // get the new byte from uart
        char inChar = (char) Serial.read();
     75e:	8c e9       	ldi	r24, 0x9C	; 156
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	0e 94 ab 07 	call	0xf56	; 0xf56 <_ZN14HardwareSerial4readEv>
        // if the incoming character is a newline, set a flag
        if (inChar == '\n') {
     766:	8a 30       	cpi	r24, 0x0A	; 10
     768:	19 f4       	brne	.+6      	; 0x770 <_Z11serialEventv+0x2a>
            UartInputComplete = true;
     76a:	10 93 6d 01 	sts	0x016D, r17	; 0x80016d <UartInputComplete>
     76e:	f1 cf       	rjmp	.-30     	; 0x752 <_Z11serialEventv+0xc>
        } else {
            // check for free space in buffer
            int UartInputLength = strlen(UartInput);
     770:	fe 01       	movw	r30, r28
     772:	01 90       	ld	r0, Z+
     774:	00 20       	and	r0, r0
     776:	e9 f7       	brne	.-6      	; 0x772 <_Z11serialEventv+0x2c>
     778:	31 97       	sbiw	r30, 0x01	; 1
     77a:	ee 56       	subi	r30, 0x6E	; 110
     77c:	f1 40       	sbci	r31, 0x01	; 1
            if(UartInputLength < UART_INPUT_LENGTH-1)
     77e:	e7 32       	cpi	r30, 0x27	; 39
     780:	f1 05       	cpc	r31, r1
     782:	3c f7       	brge	.-50     	; 0x752 <_Z11serialEventv+0xc>
            {
                // save new char
                UartInput[UartInputLength] = inChar;
     784:	e2 59       	subi	r30, 0x92	; 146
     786:	fe 4f       	sbci	r31, 0xFE	; 254
     788:	80 83       	st	Z, r24
                UartInput[UartInputLength+1] = '\0';
     78a:	11 82       	std	Z+1, r1	; 0x01
     78c:	e2 cf       	rjmp	.-60     	; 0x752 <_Z11serialEventv+0xc>
            }
        }
    }
} /* serialEvent */
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	08 95       	ret

00000796 <_ZN9MaxMatrixC1Ehhh>:
			if(CharColumn > MAXMATRIX_NUMBER_OF_COLUMNS) break;
		}
		String++;
	}
	return E_OK;
} /* setText */
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	fc 01       	movw	r30, r24
     79c:	60 83       	st	Z, r22
     79e:	41 83       	std	Z+1, r20	; 0x01
     7a0:	22 83       	std	Z+2, r18	; 0x02
     7a2:	14 8a       	std	Z+20, r1	; 0x14
     7a4:	13 8a       	std	Z+19, r1	; 0x13
     7a6:	12 8a       	std	Z+18, r1	; 0x12
     7a8:	15 8a       	std	Z+21, r1	; 0x15
     7aa:	ec 01       	movw	r28, r24
     7ac:	23 96       	adiw	r28, 0x03	; 3
     7ae:	dc 01       	movw	r26, r24
     7b0:	1b 96       	adiw	r26, 0x0b	; 11
     7b2:	19 92       	st	Y+, r1
     7b4:	ca 17       	cp	r28, r26
     7b6:	db 07       	cpc	r29, r27
     7b8:	e1 f7       	brne	.-8      	; 0x7b2 <_ZN9MaxMatrixC1Ehhh+0x1c>
     7ba:	72 96       	adiw	r30, 0x12	; 18
     7bc:	1d 92       	st	X+, r1
     7be:	ae 17       	cp	r26, r30
     7c0:	bf 07       	cpc	r27, r31
     7c2:	e1 f7       	brne	.-8      	; 0x7bc <_ZN9MaxMatrixC1Ehhh+0x26>
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	08 95       	ret

000007ca <_ZN9MaxMatrixD1Ev>:
     7ca:	08 95       	ret

000007cc <_ZN9MaxMatrix13RegisterWriteEhh>:
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	1f 92       	push	r1
     7d8:	cd b7       	in	r28, 0x3d	; 61
     7da:	de b7       	in	r29, 0x3e	; 62
     7dc:	7c 01       	movw	r14, r24
     7de:	26 2f       	mov	r18, r22
     7e0:	14 2f       	mov	r17, r20
     7e2:	60 e0       	ldi	r22, 0x00	; 0
     7e4:	fc 01       	movw	r30, r24
     7e6:	81 81       	ldd	r24, Z+1	; 0x01
     7e8:	29 83       	std	Y+1, r18	; 0x01
     7ea:	0e 94 be 0a 	call	0x157c	; 0x157c <digitalWrite>
     7ee:	29 81       	ldd	r18, Y+1	; 0x01
     7f0:	41 e0       	ldi	r20, 0x01	; 1
     7f2:	f7 01       	movw	r30, r14
     7f4:	62 81       	ldd	r22, Z+2	; 0x02
     7f6:	80 81       	ld	r24, Z
     7f8:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <shiftOut>
     7fc:	21 2f       	mov	r18, r17
     7fe:	41 e0       	ldi	r20, 0x01	; 1
     800:	f7 01       	movw	r30, r14
     802:	62 81       	ldd	r22, Z+2	; 0x02
     804:	80 81       	ld	r24, Z
     806:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <shiftOut>
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	f7 01       	movw	r30, r14
     80e:	81 81       	ldd	r24, Z+1	; 0x01
     810:	0e 94 be 0a 	call	0x157c	; 0x157c <digitalWrite>
     814:	61 e0       	ldi	r22, 0x01	; 1
     816:	f7 01       	movw	r30, r14
     818:	81 81       	ldd	r24, Z+1	; 0x01
     81a:	0f 90       	pop	r0
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	1f 91       	pop	r17
     822:	ff 90       	pop	r15
     824:	ef 90       	pop	r14
     826:	0c 94 be 0a 	jmp	0x157c	; 0x157c <digitalWrite>

0000082a <_ZN9MaxMatrix12setIntensityEh>:
     82a:	60 31       	cpi	r22, 0x10	; 16
     82c:	30 f4       	brcc	.+12     	; 0x83a <_ZN9MaxMatrix12setIntensityEh+0x10>
     82e:	46 2f       	mov	r20, r22
     830:	6a e0       	ldi	r22, 0x0A	; 10
     832:	0e 94 e6 03 	call	0x7cc	; 0x7cc <_ZN9MaxMatrix13RegisterWriteEhh>
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	08 95       	ret
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	08 95       	ret

0000083e <_ZN9MaxMatrix9setColumnEhh>:
     83e:	0f 93       	push	r16
     840:	1f 93       	push	r17
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	69 30       	cpi	r22, 0x09	; 9
     848:	58 f5       	brcc	.+86     	; 0x8a0 <_ZN9MaxMatrix9setColumnEhh+0x62>
     84a:	04 2f       	mov	r16, r20
     84c:	16 2f       	mov	r17, r22
     84e:	ec 01       	movw	r28, r24
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	0e 94 be 0a 	call	0x157c	; 0x157c <digitalWrite>
     858:	18 30       	cpi	r17, 0x08	; 8
     85a:	41 f4       	brne	.+16     	; 0x86c <_ZN9MaxMatrix9setColumnEhh+0x2e>
     85c:	20 e0       	ldi	r18, 0x00	; 0
     85e:	41 e0       	ldi	r20, 0x01	; 1
     860:	6a 81       	ldd	r22, Y+2	; 0x02
     862:	88 81       	ld	r24, Y
     864:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <shiftOut>
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	08 c0       	rjmp	.+16     	; 0x87c <_ZN9MaxMatrix9setColumnEhh+0x3e>
     86c:	21 e0       	ldi	r18, 0x01	; 1
     86e:	21 0f       	add	r18, r17
     870:	41 e0       	ldi	r20, 0x01	; 1
     872:	6a 81       	ldd	r22, Y+2	; 0x02
     874:	88 81       	ld	r24, Y
     876:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <shiftOut>
     87a:	20 2f       	mov	r18, r16
     87c:	41 e0       	ldi	r20, 0x01	; 1
     87e:	6a 81       	ldd	r22, Y+2	; 0x02
     880:	88 81       	ld	r24, Y
     882:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <shiftOut>
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	89 81       	ldd	r24, Y+1	; 0x01
     88a:	0e 94 be 0a 	call	0x157c	; 0x157c <digitalWrite>
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	89 81       	ldd	r24, Y+1	; 0x01
     892:	0e 94 be 0a 	call	0x157c	; 0x157c <digitalWrite>
     896:	c1 0f       	add	r28, r17
     898:	d1 1d       	adc	r29, r1
     89a:	0b 83       	std	Y+3, r16	; 0x03
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <_ZN9MaxMatrix9setColumnEhh+0x64>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	08 95       	ret

000008ac <_ZN9MaxMatrix21setColumnOnAllModulesEhh>:
     8ac:	0f 93       	push	r16
     8ae:	1f 93       	push	r17
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	69 30       	cpi	r22, 0x09	; 9
     8b6:	f8 f4       	brcc	.+62     	; 0x8f6 <_ZN9MaxMatrix21setColumnOnAllModulesEhh+0x4a>
     8b8:	04 2f       	mov	r16, r20
     8ba:	16 2f       	mov	r17, r22
     8bc:	ec 01       	movw	r28, r24
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	89 81       	ldd	r24, Y+1	; 0x01
     8c2:	0e 94 be 0a 	call	0x157c	; 0x157c <digitalWrite>
     8c6:	21 e0       	ldi	r18, 0x01	; 1
     8c8:	21 0f       	add	r18, r17
     8ca:	41 e0       	ldi	r20, 0x01	; 1
     8cc:	6a 81       	ldd	r22, Y+2	; 0x02
     8ce:	88 81       	ld	r24, Y
     8d0:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <shiftOut>
     8d4:	20 2f       	mov	r18, r16
     8d6:	41 e0       	ldi	r20, 0x01	; 1
     8d8:	6a 81       	ldd	r22, Y+2	; 0x02
     8da:	88 81       	ld	r24, Y
     8dc:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <shiftOut>
     8e0:	0b 83       	std	Y+3, r16	; 0x03
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	89 81       	ldd	r24, Y+1	; 0x01
     8e6:	0e 94 be 0a 	call	0x157c	; 0x157c <digitalWrite>
     8ea:	61 e0       	ldi	r22, 0x01	; 1
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	0e 94 be 0a 	call	0x157c	; 0x157c <digitalWrite>
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	01 c0       	rjmp	.+2      	; 0x8f8 <_ZN9MaxMatrix21setColumnOnAllModulesEhh+0x4c>
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	0f 91       	pop	r16
     900:	08 95       	ret

00000902 <_ZN9MaxMatrix5clearEv>:
     902:	1f 93       	push	r17
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	ec 01       	movw	r28, r24
     90a:	10 e0       	ldi	r17, 0x00	; 0
     90c:	40 e0       	ldi	r20, 0x00	; 0
     90e:	61 2f       	mov	r22, r17
     910:	ce 01       	movw	r24, r28
     912:	0e 94 56 04 	call	0x8ac	; 0x8ac <_ZN9MaxMatrix21setColumnOnAllModulesEhh>
     916:	1f 5f       	subi	r17, 0xFF	; 255
     918:	18 30       	cpi	r17, 0x08	; 8
     91a:	c1 f7       	brne	.-16     	; 0x90c <_ZN9MaxMatrix5clearEv+0xa>
     91c:	fe 01       	movw	r30, r28
     91e:	33 96       	adiw	r30, 0x03	; 3
     920:	2b 96       	adiw	r28, 0x0b	; 11
     922:	11 92       	st	Z+, r1
     924:	ec 17       	cp	r30, r28
     926:	fd 07       	cpc	r31, r29
     928:	e1 f7       	brne	.-8      	; 0x922 <_ZN9MaxMatrix5clearEv+0x20>
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	1f 91       	pop	r17
     930:	08 95       	ret

00000932 <_ZN9MaxMatrix4initEv>:
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	ec 01       	movw	r28, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	8d 8b       	std	Y+21, r24	; 0x15
     93c:	61 e0       	ldi	r22, 0x01	; 1
     93e:	88 81       	ld	r24, Y
     940:	0e 94 82 0a 	call	0x1504	; 0x1504 <pinMode>
     944:	61 e0       	ldi	r22, 0x01	; 1
     946:	8a 81       	ldd	r24, Y+2	; 0x02
     948:	0e 94 82 0a 	call	0x1504	; 0x1504 <pinMode>
     94c:	61 e0       	ldi	r22, 0x01	; 1
     94e:	89 81       	ldd	r24, Y+1	; 0x01
     950:	0e 94 82 0a 	call	0x1504	; 0x1504 <pinMode>
     954:	61 e0       	ldi	r22, 0x01	; 1
     956:	8a 81       	ldd	r24, Y+2	; 0x02
     958:	0e 94 be 0a 	call	0x157c	; 0x157c <digitalWrite>
     95c:	47 e0       	ldi	r20, 0x07	; 7
     95e:	6b e0       	ldi	r22, 0x0B	; 11
     960:	ce 01       	movw	r24, r28
     962:	0e 94 e6 03 	call	0x7cc	; 0x7cc <_ZN9MaxMatrix13RegisterWriteEhh>
     966:	40 e0       	ldi	r20, 0x00	; 0
     968:	69 e0       	ldi	r22, 0x09	; 9
     96a:	ce 01       	movw	r24, r28
     96c:	0e 94 e6 03 	call	0x7cc	; 0x7cc <_ZN9MaxMatrix13RegisterWriteEhh>
     970:	41 e0       	ldi	r20, 0x01	; 1
     972:	6c e0       	ldi	r22, 0x0C	; 12
     974:	ce 01       	movw	r24, r28
     976:	0e 94 e6 03 	call	0x7cc	; 0x7cc <_ZN9MaxMatrix13RegisterWriteEhh>
     97a:	40 e0       	ldi	r20, 0x00	; 0
     97c:	6f e0       	ldi	r22, 0x0F	; 15
     97e:	ce 01       	movw	r24, r28
     980:	0e 94 e6 03 	call	0x7cc	; 0x7cc <_ZN9MaxMatrix13RegisterWriteEhh>
     984:	ce 01       	movw	r24, r28
     986:	0e 94 81 04 	call	0x902	; 0x902 <_ZN9MaxMatrix5clearEv>
     98a:	64 e0       	ldi	r22, 0x04	; 4
     98c:	ce 01       	movw	r24, r28
     98e:	0e 94 15 04 	call	0x82a	; 0x82a <_ZN9MaxMatrix12setIntensityEh>
     992:	82 e0       	ldi	r24, 0x02	; 2
     994:	8d 8b       	std	Y+21, r24	; 0x15
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	08 95       	ret

0000099c <_ZN9MaxMatrix6setDotEhhb>:
     99c:	ef 92       	push	r14
     99e:	ff 92       	push	r15
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	68 30       	cpi	r22, 0x08	; 8
     9aa:	08 f0       	brcs	.+2      	; 0x9ae <_ZN9MaxMatrix6setDotEhhb+0x12>
     9ac:	47 c0       	rjmp	.+142    	; 0xa3c <_ZN9MaxMatrix6setDotEhhb+0xa0>
     9ae:	48 30       	cpi	r20, 0x08	; 8
     9b0:	08 f0       	brcs	.+2      	; 0x9b4 <_ZN9MaxMatrix6setDotEhhb+0x18>
     9b2:	44 c0       	rjmp	.+136    	; 0xa3c <_ZN9MaxMatrix6setDotEhhb+0xa0>
     9b4:	e6 2e       	mov	r14, r22
     9b6:	f1 2c       	mov	r15, r1
     9b8:	fc 01       	movw	r30, r24
     9ba:	ee 0d       	add	r30, r14
     9bc:	ff 1d       	adc	r31, r15
     9be:	22 23       	and	r18, r18
     9c0:	71 f0       	breq	.+28     	; 0x9de <_ZN9MaxMatrix6setDotEhhb+0x42>
     9c2:	01 e0       	ldi	r16, 0x01	; 1
     9c4:	10 e0       	ldi	r17, 0x00	; 0
     9c6:	20 e0       	ldi	r18, 0x00	; 0
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	04 c0       	rjmp	.+8      	; 0x9d4 <_ZN9MaxMatrix6setDotEhhb+0x38>
     9cc:	00 0f       	add	r16, r16
     9ce:	11 1f       	adc	r17, r17
     9d0:	22 1f       	adc	r18, r18
     9d2:	33 1f       	adc	r19, r19
     9d4:	4a 95       	dec	r20
     9d6:	d2 f7       	brpl	.-12     	; 0x9cc <_ZN9MaxMatrix6setDotEhhb+0x30>
     9d8:	43 81       	ldd	r20, Z+3	; 0x03
     9da:	04 2b       	or	r16, r20
     9dc:	0e c0       	rjmp	.+28     	; 0x9fa <_ZN9MaxMatrix6setDotEhhb+0x5e>
     9de:	01 e0       	ldi	r16, 0x01	; 1
     9e0:	10 e0       	ldi	r17, 0x00	; 0
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <_ZN9MaxMatrix6setDotEhhb+0x54>
     9e8:	00 0f       	add	r16, r16
     9ea:	11 1f       	adc	r17, r17
     9ec:	22 1f       	adc	r18, r18
     9ee:	33 1f       	adc	r19, r19
     9f0:	4a 95       	dec	r20
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <_ZN9MaxMatrix6setDotEhhb+0x4c>
     9f4:	00 95       	com	r16
     9f6:	23 81       	ldd	r18, Z+3	; 0x03
     9f8:	02 23       	and	r16, r18
     9fa:	03 83       	std	Z+3, r16	; 0x03
     9fc:	16 2f       	mov	r17, r22
     9fe:	ec 01       	movw	r28, r24
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	89 81       	ldd	r24, Y+1	; 0x01
     a04:	0e 94 be 0a 	call	0x157c	; 0x157c <digitalWrite>
     a08:	21 e0       	ldi	r18, 0x01	; 1
     a0a:	21 0f       	add	r18, r17
     a0c:	41 e0       	ldi	r20, 0x01	; 1
     a0e:	6a 81       	ldd	r22, Y+2	; 0x02
     a10:	88 81       	ld	r24, Y
     a12:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <shiftOut>
     a16:	fe 01       	movw	r30, r28
     a18:	ee 0d       	add	r30, r14
     a1a:	ff 1d       	adc	r31, r15
     a1c:	23 81       	ldd	r18, Z+3	; 0x03
     a1e:	41 e0       	ldi	r20, 0x01	; 1
     a20:	6a 81       	ldd	r22, Y+2	; 0x02
     a22:	88 81       	ld	r24, Y
     a24:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <shiftOut>
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	89 81       	ldd	r24, Y+1	; 0x01
     a2c:	0e 94 be 0a 	call	0x157c	; 0x157c <digitalWrite>
     a30:	61 e0       	ldi	r22, 0x01	; 1
     a32:	89 81       	ldd	r24, Y+1	; 0x01
     a34:	0e 94 be 0a 	call	0x157c	; 0x157c <digitalWrite>
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	01 c0       	rjmp	.+2      	; 0xa3e <_ZN9MaxMatrix6setDotEhhb+0xa2>
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	ff 90       	pop	r15
     a48:	ef 90       	pop	r14
     a4a:	08 95       	ret

00000a4c <_ZN9MaxMatrix16setTextWithShiftEPc>:
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	61 15       	cp	r22, r1
     a56:	71 05       	cpc	r23, r1
     a58:	59 f0       	breq	.+22     	; 0xa70 <_ZN9MaxMatrix16setTextWithShiftEPc+0x24>
     a5a:	8b 01       	movw	r16, r22
     a5c:	ec 01       	movw	r28, r24
     a5e:	0e 94 81 04 	call	0x902	; 0x902 <_ZN9MaxMatrix5clearEv>
     a62:	1a 8a       	std	Y+18, r1	; 0x12
     a64:	1c 8b       	std	Y+20, r17	; 0x14
     a66:	0b 8b       	std	Y+19, r16	; 0x13
     a68:	83 e0       	ldi	r24, 0x03	; 3
     a6a:	8d 8b       	std	Y+21, r24	; 0x15
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	01 c0       	rjmp	.+2      	; 0xa72 <_ZN9MaxMatrix16setTextWithShiftEPc+0x26>
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	1f 91       	pop	r17
     a78:	0f 91       	pop	r16
     a7a:	08 95       	ret

00000a7c <_ZN9MaxMatrix9getSpriteEhPA7_h>:
     a7c:	64 36       	cpi	r22, 0x64	; 100
     a7e:	68 f4       	brcc	.+26     	; 0xa9a <_ZN9MaxMatrix9getSpriteEhPA7_h+0x1e>
     a80:	ca 01       	movw	r24, r20
     a82:	27 e0       	ldi	r18, 0x07	; 7
     a84:	62 9f       	mul	r22, r18
     a86:	b0 01       	movw	r22, r0
     a88:	11 24       	eor	r1, r1
     a8a:	6d 5a       	subi	r22, 0xAD	; 173
     a8c:	7e 4f       	sbci	r23, 0xFE	; 254
     a8e:	47 e0       	ldi	r20, 0x07	; 7
     a90:	50 e0       	ldi	r21, 0x00	; 0
     a92:	0e 94 6f 0b 	call	0x16de	; 0x16de <memcpy_P>
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	08 95       	ret
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	08 95       	ret

00000a9e <_ZN9MaxMatrix9setSpriteEiiPA7_Kh>:
     a9e:	2f 92       	push	r2
     aa0:	3f 92       	push	r3
     aa2:	4f 92       	push	r4
     aa4:	5f 92       	push	r5
     aa6:	6f 92       	push	r6
     aa8:	7f 92       	push	r7
     aaa:	8f 92       	push	r8
     aac:	9f 92       	push	r9
     aae:	af 92       	push	r10
     ab0:	bf 92       	push	r11
     ab2:	cf 92       	push	r12
     ab4:	df 92       	push	r13
     ab6:	ef 92       	push	r14
     ab8:	ff 92       	push	r15
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	00 d0       	rcall	.+0      	; 0xac4 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x26>
     ac4:	00 d0       	rcall	.+0      	; 0xac6 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x28>
     ac6:	1f 92       	push	r1
     ac8:	cd b7       	in	r28, 0x3d	; 61
     aca:	de b7       	in	r29, 0x3e	; 62
     acc:	4c 01       	movw	r8, r24
     ace:	6b 01       	movw	r12, r22
     ad0:	3a 01       	movw	r6, r20
     ad2:	59 01       	movw	r10, r18
     ad4:	f9 01       	movw	r30, r18
     ad6:	40 80       	ld	r4, Z
     ad8:	51 2c       	mov	r5, r1
     ada:	e1 80       	ldd	r14, Z+1	; 0x01
     adc:	f1 2c       	mov	r15, r1
     ade:	f8 e0       	ldi	r31, 0x08	; 8
     ae0:	ef 16       	cp	r14, r31
     ae2:	f1 04       	cpc	r15, r1
     ae4:	c9 f4       	brne	.+50     	; 0xb18 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x7a>
     ae6:	45 2b       	or	r20, r21
     ae8:	b9 f4       	brne	.+46     	; 0xb18 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x7a>
     aea:	00 e0       	ldi	r16, 0x00	; 0
     aec:	10 e0       	ldi	r17, 0x00	; 0
     aee:	04 15       	cp	r16, r4
     af0:	15 05       	cpc	r17, r5
     af2:	0c f0       	brlt	.+2      	; 0xaf6 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x58>
     af4:	4f c0       	rjmp	.+158    	; 0xb94 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xf6>
     af6:	c8 01       	movw	r24, r16
     af8:	8c 0d       	add	r24, r12
     afa:	9d 1d       	adc	r25, r13
     afc:	08 97       	sbiw	r24, 0x08	; 8
     afe:	48 f4       	brcc	.+18     	; 0xb12 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x74>
     b00:	f5 01       	movw	r30, r10
     b02:	e0 0f       	add	r30, r16
     b04:	f1 1f       	adc	r31, r17
     b06:	42 81       	ldd	r20, Z+2	; 0x02
     b08:	60 2f       	mov	r22, r16
     b0a:	6c 0d       	add	r22, r12
     b0c:	c4 01       	movw	r24, r8
     b0e:	0e 94 1f 04 	call	0x83e	; 0x83e <_ZN9MaxMatrix9setColumnEhh>
     b12:	0f 5f       	subi	r16, 0xFF	; 255
     b14:	1f 4f       	sbci	r17, 0xFF	; 255
     b16:	eb cf       	rjmp	.-42     	; 0xaee <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x50>
     b18:	1d 82       	std	Y+5, r1	; 0x05
     b1a:	1c 82       	std	Y+4, r1	; 0x04
     b1c:	8c 81       	ldd	r24, Y+4	; 0x04
     b1e:	9d 81       	ldd	r25, Y+5	; 0x05
     b20:	84 15       	cp	r24, r4
     b22:	95 05       	cpc	r25, r5
     b24:	bc f5       	brge	.+110    	; 0xb94 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xf6>
     b26:	00 e0       	ldi	r16, 0x00	; 0
     b28:	10 e0       	ldi	r17, 0x00	; 0
     b2a:	2c 80       	ldd	r2, Y+4	; 0x04
     b2c:	3d 80       	ldd	r3, Y+5	; 0x05
     b2e:	2c 0c       	add	r2, r12
     b30:	3d 1c       	adc	r3, r13
     b32:	8c 81       	ldd	r24, Y+4	; 0x04
     b34:	9d 81       	ldd	r25, Y+5	; 0x05
     b36:	8a 0d       	add	r24, r10
     b38:	9b 1d       	adc	r25, r11
     b3a:	9a 83       	std	Y+2, r25	; 0x02
     b3c:	89 83       	std	Y+1, r24	; 0x01
     b3e:	3c 81       	ldd	r19, Y+4	; 0x04
     b40:	3c 0d       	add	r19, r12
     b42:	0e 15       	cp	r16, r14
     b44:	1f 05       	cpc	r17, r15
     b46:	04 f5       	brge	.+64     	; 0xb88 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xea>
     b48:	88 e0       	ldi	r24, 0x08	; 8
     b4a:	28 16       	cp	r2, r24
     b4c:	31 04       	cpc	r3, r1
     b4e:	c8 f4       	brcc	.+50     	; 0xb82 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xe4>
     b50:	c8 01       	movw	r24, r16
     b52:	86 0d       	add	r24, r6
     b54:	97 1d       	adc	r25, r7
     b56:	08 97       	sbiw	r24, 0x08	; 8
     b58:	a0 f4       	brcc	.+40     	; 0xb82 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xe4>
     b5a:	e9 81       	ldd	r30, Y+1	; 0x01
     b5c:	fa 81       	ldd	r31, Y+2	; 0x02
     b5e:	82 81       	ldd	r24, Z+2	; 0x02
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	00 2e       	mov	r0, r16
     b64:	02 c0       	rjmp	.+4      	; 0xb6a <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xcc>
     b66:	95 95       	asr	r25
     b68:	87 95       	ror	r24
     b6a:	0a 94       	dec	r0
     b6c:	e2 f7       	brpl	.-8      	; 0xb66 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xc8>
     b6e:	28 2f       	mov	r18, r24
     b70:	21 70       	andi	r18, 0x01	; 1
     b72:	40 2f       	mov	r20, r16
     b74:	46 0d       	add	r20, r6
     b76:	63 2f       	mov	r22, r19
     b78:	c4 01       	movw	r24, r8
     b7a:	3b 83       	std	Y+3, r19	; 0x03
     b7c:	0e 94 ce 04 	call	0x99c	; 0x99c <_ZN9MaxMatrix6setDotEhhb>
     b80:	3b 81       	ldd	r19, Y+3	; 0x03
     b82:	0f 5f       	subi	r16, 0xFF	; 255
     b84:	1f 4f       	sbci	r17, 0xFF	; 255
     b86:	dd cf       	rjmp	.-70     	; 0xb42 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xa4>
     b88:	ec 81       	ldd	r30, Y+4	; 0x04
     b8a:	fd 81       	ldd	r31, Y+5	; 0x05
     b8c:	31 96       	adiw	r30, 0x01	; 1
     b8e:	fd 83       	std	Y+5, r31	; 0x05
     b90:	ec 83       	std	Y+4, r30	; 0x04
     b92:	c4 cf       	rjmp	.-120    	; 0xb1c <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x7e>
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	1f 91       	pop	r17
     ba4:	0f 91       	pop	r16
     ba6:	ff 90       	pop	r15
     ba8:	ef 90       	pop	r14
     baa:	df 90       	pop	r13
     bac:	cf 90       	pop	r12
     bae:	bf 90       	pop	r11
     bb0:	af 90       	pop	r10
     bb2:	9f 90       	pop	r9
     bb4:	8f 90       	pop	r8
     bb6:	7f 90       	pop	r7
     bb8:	6f 90       	pop	r6
     bba:	5f 90       	pop	r5
     bbc:	4f 90       	pop	r4
     bbe:	3f 90       	pop	r3
     bc0:	2f 90       	pop	r2
     bc2:	08 95       	ret

00000bc4 <_ZN9MaxMatrix6reloadEv>:
     bc4:	ef 92       	push	r14
     bc6:	ff 92       	push	r15
     bc8:	1f 93       	push	r17
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	ec 01       	movw	r28, r24
     bd0:	7c 01       	movw	r14, r24
     bd2:	83 e0       	ldi	r24, 0x03	; 3
     bd4:	e8 0e       	add	r14, r24
     bd6:	f1 1c       	adc	r15, r1
     bd8:	11 e0       	ldi	r17, 0x01	; 1
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	0e 94 be 0a 	call	0x157c	; 0x157c <digitalWrite>
     be2:	21 2f       	mov	r18, r17
     be4:	41 e0       	ldi	r20, 0x01	; 1
     be6:	6a 81       	ldd	r22, Y+2	; 0x02
     be8:	88 81       	ld	r24, Y
     bea:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <shiftOut>
     bee:	f7 01       	movw	r30, r14
     bf0:	21 91       	ld	r18, Z+
     bf2:	7f 01       	movw	r14, r30
     bf4:	41 e0       	ldi	r20, 0x01	; 1
     bf6:	6a 81       	ldd	r22, Y+2	; 0x02
     bf8:	88 81       	ld	r24, Y
     bfa:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <shiftOut>
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	0e 94 be 0a 	call	0x157c	; 0x157c <digitalWrite>
     c06:	61 e0       	ldi	r22, 0x01	; 1
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	0e 94 be 0a 	call	0x157c	; 0x157c <digitalWrite>
     c0e:	1f 5f       	subi	r17, 0xFF	; 255
     c10:	19 30       	cpi	r17, 0x09	; 9
     c12:	19 f7       	brne	.-58     	; 0xbda <_ZN9MaxMatrix6reloadEv+0x16>
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	ff 90       	pop	r15
     c1c:	ef 90       	pop	r14
     c1e:	08 95       	ret

00000c20 <_ZN9MaxMatrix9shiftLeftEbb>:
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	fc 01       	movw	r30, r24
     c26:	23 81       	ldd	r18, Z+3	; 0x03
     c28:	34 96       	adiw	r30, 0x04	; 4
     c2a:	dc 01       	movw	r26, r24
     c2c:	1c 96       	adiw	r26, 0x0c	; 12
     c2e:	31 91       	ld	r19, Z+
     c30:	ef 01       	movw	r28, r30
     c32:	22 97       	sbiw	r28, 0x02	; 2
     c34:	38 83       	st	Y, r19
     c36:	ea 17       	cp	r30, r26
     c38:	fb 07       	cpc	r31, r27
     c3a:	c9 f7       	brne	.-14     	; 0xc2e <_ZN9MaxMatrix9shiftLeftEbb+0xe>
     c3c:	66 23       	and	r22, r22
     c3e:	19 f0       	breq	.+6      	; 0xc46 <_ZN9MaxMatrix9shiftLeftEbb+0x26>
     c40:	fc 01       	movw	r30, r24
     c42:	22 87       	std	Z+10, r18	; 0x0a
     c44:	04 c0       	rjmp	.+8      	; 0xc4e <_ZN9MaxMatrix9shiftLeftEbb+0x2e>
     c46:	44 23       	and	r20, r20
     c48:	11 f0       	breq	.+4      	; 0xc4e <_ZN9MaxMatrix9shiftLeftEbb+0x2e>
     c4a:	fc 01       	movw	r30, r24
     c4c:	12 86       	std	Z+10, r1	; 0x0a
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <_ZN9MaxMatrix6reloadEv>

00000c56 <_ZN9MaxMatrix13charShiftTaskEv>:
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	ec 01       	movw	r28, r24
     c5c:	9a 89       	ldd	r25, Y+18	; 0x12
     c5e:	8b 85       	ldd	r24, Y+11	; 0x0b
     c60:	89 17       	cp	r24, r25
     c62:	b0 f0       	brcs	.+44     	; 0xc90 <_ZN9MaxMatrix13charShiftTaskEv+0x3a>
     c64:	41 e0       	ldi	r20, 0x01	; 1
     c66:	60 e0       	ldi	r22, 0x00	; 0
     c68:	ce 01       	movw	r24, r28
     c6a:	0e 94 10 06 	call	0xc20	; 0xc20 <_ZN9MaxMatrix9shiftLeftEbb>
     c6e:	9e 01       	movw	r18, r28
     c70:	25 5f       	subi	r18, 0xF5	; 245
     c72:	3f 4f       	sbci	r19, 0xFF	; 255
     c74:	8a 89       	ldd	r24, Y+18	; 0x12
     c76:	68 e0       	ldi	r22, 0x08	; 8
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	68 1b       	sub	r22, r24
     c7c:	71 09       	sbc	r23, r1
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	ce 01       	movw	r24, r28
     c84:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN9MaxMatrix9setSpriteEiiPA7_Kh>
     c88:	8a 89       	ldd	r24, Y+18	; 0x12
     c8a:	8f 5f       	subi	r24, 0xFF	; 255
     c8c:	8a 8b       	std	Y+18, r24	; 0x12
     c8e:	06 c0       	rjmp	.+12     	; 0xc9c <_ZN9MaxMatrix13charShiftTaskEv+0x46>
     c90:	8d 89       	ldd	r24, Y+21	; 0x15
     c92:	84 30       	cpi	r24, 0x04	; 4
     c94:	11 f4       	brne	.+4      	; 0xc9a <_ZN9MaxMatrix13charShiftTaskEv+0x44>
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	8d 8b       	std	Y+21, r24	; 0x15
     c9a:	1a 8a       	std	Y+18, r1	; 0x12
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	08 95       	ret

00000ca2 <_ZN9MaxMatrix19convertCharToSpriteEcPh>:
     ca2:	fa 01       	movw	r30, r20
     ca4:	64 3c       	cpi	r22, 0xC4	; 196
     ca6:	11 f4       	brne	.+4      	; 0xcac <_ZN9MaxMatrix19convertCharToSpriteEcPh+0xa>
     ca8:	8f e5       	ldi	r24, 0x5F	; 95
     caa:	13 c0       	rjmp	.+38     	; 0xcd2 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     cac:	66 3d       	cpi	r22, 0xD6	; 214
     cae:	11 f4       	brne	.+4      	; 0xcb4 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x12>
     cb0:	80 e6       	ldi	r24, 0x60	; 96
     cb2:	0f c0       	rjmp	.+30     	; 0xcd2 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     cb4:	6c 3d       	cpi	r22, 0xDC	; 220
     cb6:	11 f4       	brne	.+4      	; 0xcbc <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x1a>
     cb8:	81 e6       	ldi	r24, 0x61	; 97
     cba:	0b c0       	rjmp	.+22     	; 0xcd2 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     cbc:	64 3e       	cpi	r22, 0xE4	; 228
     cbe:	11 f4       	brne	.+4      	; 0xcc4 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x22>
     cc0:	82 e6       	ldi	r24, 0x62	; 98
     cc2:	07 c0       	rjmp	.+14     	; 0xcd2 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     cc4:	66 3f       	cpi	r22, 0xF6	; 246
     cc6:	11 f4       	brne	.+4      	; 0xccc <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x2a>
     cc8:	83 e6       	ldi	r24, 0x63	; 99
     cca:	03 c0       	rjmp	.+6      	; 0xcd2 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     ccc:	6c 3f       	cpi	r22, 0xFC	; 252
     cce:	19 f4       	brne	.+6      	; 0xcd6 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x34>
     cd0:	84 e6       	ldi	r24, 0x64	; 100
     cd2:	80 83       	st	Z, r24
     cd4:	04 c0       	rjmp	.+8      	; 0xcde <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x3c>
     cd6:	60 52       	subi	r22, 0x20	; 32
     cd8:	6f 35       	cpi	r22, 0x5F	; 95
     cda:	18 f4       	brcc	.+6      	; 0xce2 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x40>
     cdc:	60 83       	st	Z, r22
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	08 95       	ret
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	08 95       	ret

00000ce6 <_ZN9MaxMatrix15stringShiftTaskEv>:
 *                  MAXMATRIX_STATE_CHAR_SHIFT or MAXMATRIX_STATE_STRING_SHIFT to MAXMATRIX_STATE_READY
 *  \return         -
 *  \pre            has to be called from shiftTask()
 *********************************************************************************************************************/
void MaxMatrix::stringShiftTask()
{
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	1f 92       	push	r1
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	8c 01       	movw	r16, r24
    spriteIndexType SpriteIndex;
    
    if(SpriteShiftCounter == 0)
     cf6:	dc 01       	movw	r26, r24
     cf8:	52 96       	adiw	r26, 0x12	; 18
     cfa:	8c 91       	ld	r24, X
     cfc:	52 97       	sbiw	r26, 0x12	; 18
     cfe:	81 11       	cpse	r24, r1
     d00:	30 c0       	rjmp	.+96     	; 0xd62 <_ZN9MaxMatrix15stringShiftTaskEv+0x7c>
    {
        if(*String != NULL) {
     d02:	53 96       	adiw	r26, 0x13	; 19
     d04:	ed 91       	ld	r30, X+
     d06:	fc 91       	ld	r31, X
     d08:	54 97       	sbiw	r26, 0x14	; 20
     d0a:	60 81       	ld	r22, Z
     d0c:	66 23       	and	r22, r22
     d0e:	21 f1       	breq	.+72     	; 0xd58 <_ZN9MaxMatrix15stringShiftTaskEv+0x72>
            convertCharToSprite(*String, &SpriteIndex);
     d10:	ae 01       	movw	r20, r28
     d12:	4f 5f       	subi	r20, 0xFF	; 255
     d14:	5f 4f       	sbci	r21, 0xFF	; 255
     d16:	c8 01       	movw	r24, r16
     d18:	0e 94 51 06 	call	0xca2	; 0xca2 <_ZN9MaxMatrix19convertCharToSpriteEcPh>
            getSprite(SpriteIndex, &SpriteBuffer);
     d1c:	a8 01       	movw	r20, r16
     d1e:	45 5f       	subi	r20, 0xF5	; 245
     d20:	5f 4f       	sbci	r21, 0xFF	; 255
     d22:	69 81       	ldd	r22, Y+1	; 0x01
     d24:	c8 01       	movw	r24, r16
     d26:	0e 94 3e 05 	call	0xa7c	; 0xa7c <_ZN9MaxMatrix9getSpriteEhPA7_h>
            if(SpriteShiftCounter != 0) shiftLeft(false, true);
     d2a:	f8 01       	movw	r30, r16
     d2c:	82 89       	ldd	r24, Z+18	; 0x12
     d2e:	88 23       	and	r24, r24
     d30:	29 f0       	breq	.+10     	; 0xd3c <_ZN9MaxMatrix15stringShiftTaskEv+0x56>
     d32:	41 e0       	ldi	r20, 0x01	; 1
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	c8 01       	movw	r24, r16
     d38:	0e 94 10 06 	call	0xc20	; 0xc20 <_ZN9MaxMatrix9shiftLeftEbb>
            SpriteShiftCounter = 1;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	d8 01       	movw	r26, r16
     d40:	52 96       	adiw	r26, 0x12	; 18
     d42:	8c 93       	st	X, r24
            charShiftTask();
     d44:	c8 01       	movw	r24, r16
     d46:	0e 94 2b 06 	call	0xc56	; 0xc56 <_ZN9MaxMatrix13charShiftTaskEv>
            String++;
     d4a:	f8 01       	movw	r30, r16
     d4c:	83 89       	ldd	r24, Z+19	; 0x13
     d4e:	94 89       	ldd	r25, Z+20	; 0x14
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	94 8b       	std	Z+20, r25	; 0x14
     d54:	83 8b       	std	Z+19, r24	; 0x13
     d56:	11 c0       	rjmp	.+34     	; 0xd7a <_ZN9MaxMatrix15stringShiftTaskEv+0x94>
        } else {
            State = MAXMATRIX_STATE_READY;
     d58:	82 e0       	ldi	r24, 0x02	; 2
     d5a:	d8 01       	movw	r26, r16
     d5c:	55 96       	adiw	r26, 0x15	; 21
     d5e:	8c 93       	st	X, r24
     d60:	07 c0       	rjmp	.+14     	; 0xd70 <_ZN9MaxMatrix15stringShiftTaskEv+0x8a>
            shiftLeft(false, true);
        }
    } else {
        charShiftTask();
     d62:	c8 01       	movw	r24, r16
     d64:	0e 94 2b 06 	call	0xc56	; 0xc56 <_ZN9MaxMatrix13charShiftTaskEv>
        if(SpriteShiftCounter == 0) shiftLeft(false, true);
     d68:	f8 01       	movw	r30, r16
     d6a:	82 89       	ldd	r24, Z+18	; 0x12
     d6c:	81 11       	cpse	r24, r1
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <_ZN9MaxMatrix15stringShiftTaskEv+0x94>
     d70:	41 e0       	ldi	r20, 0x01	; 1
     d72:	60 e0       	ldi	r22, 0x00	; 0
     d74:	c8 01       	movw	r24, r16
     d76:	0e 94 10 06 	call	0xc20	; 0xc20 <_ZN9MaxMatrix9shiftLeftEbb>
    }
} /* stringShiftTask */
     d7a:	0f 90       	pop	r0
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	08 95       	ret

00000d86 <_ZN9MaxMatrix9shiftTaskEv>:
 *                  MAXMATRIX_STATE_CHAR_SHIFT or MAXMATRIX_STATE_STRING_SHIFT to MAXMATRIX_STATE_READY
 *  \return         -
 *  \pre            setCharWithShift or setTextWithShift must be called first
 *********************************************************************************************************************/
void MaxMatrix::shiftTask()
{
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	ec 01       	movw	r28, r24
    //if(MAXMATRIX_STATE_INIT == State) State = MAXMATRIX_STATE_READY;
    if(MAXMATRIX_STATE_STRING_SHIFT == State) stringShiftTask();
     d8c:	8d 89       	ldd	r24, Y+21	; 0x15
     d8e:	83 30       	cpi	r24, 0x03	; 3
     d90:	19 f4       	brne	.+6      	; 0xd98 <_ZN9MaxMatrix9shiftTaskEv+0x12>
     d92:	ce 01       	movw	r24, r28
     d94:	0e 94 73 06 	call	0xce6	; 0xce6 <_ZN9MaxMatrix15stringShiftTaskEv>
    if(MAXMATRIX_STATE_CHAR_SHIFT == State) charShiftTask();
     d98:	8d 89       	ldd	r24, Y+21	; 0x15
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	29 f4       	brne	.+10     	; 0xda8 <_ZN9MaxMatrix9shiftTaskEv+0x22>
     d9e:	ce 01       	movw	r24, r28
} /* shiftTask */
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
 *********************************************************************************************************************/
void MaxMatrix::shiftTask()
{
    //if(MAXMATRIX_STATE_INIT == State) State = MAXMATRIX_STATE_READY;
    if(MAXMATRIX_STATE_STRING_SHIFT == State) stringShiftTask();
    if(MAXMATRIX_STATE_CHAR_SHIFT == State) charShiftTask();
     da4:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <_ZN9MaxMatrix13charShiftTaskEv>
} /* shiftTask */
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	08 95       	ret

00000dae <__vector_13>:
  else if(pin == 2 || pin == 10) {
    DDRB |= _BV(PORTB2);
    TCCR1A |= _BV(COM1B1);
  }
  setPwmDuty(pin, duty);
  resume();			// Lex - make sure the clock is running.  We don't want to restart the count, in case we are starting the second WGM
     dae:	1f 92       	push	r1
     db0:	0f 92       	push	r0
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	0f 92       	push	r0
     db6:	11 24       	eor	r1, r1
     db8:	2f 93       	push	r18
     dba:	3f 93       	push	r19
     dbc:	4f 93       	push	r20
     dbe:	5f 93       	push	r21
     dc0:	6f 93       	push	r22
     dc2:	7f 93       	push	r23
     dc4:	8f 93       	push	r24
     dc6:	9f 93       	push	r25
     dc8:	af 93       	push	r26
     dca:	bf 93       	push	r27
     dcc:	ef 93       	push	r30
     dce:	ff 93       	push	r31
     dd0:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <Timer1+0x4>
     dd4:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <Timer1+0x5>
     dd8:	09 95       	icall
     dda:	ff 91       	pop	r31
     ddc:	ef 91       	pop	r30
     dde:	bf 91       	pop	r27
     de0:	af 91       	pop	r26
     de2:	9f 91       	pop	r25
     de4:	8f 91       	pop	r24
     de6:	7f 91       	pop	r23
     de8:	6f 91       	pop	r22
     dea:	5f 91       	pop	r21
     dec:	4f 91       	pop	r20
     dee:	3f 91       	pop	r19
     df0:	2f 91       	pop	r18
     df2:	0f 90       	pop	r0
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	0f 90       	pop	r0
     df8:	1f 90       	pop	r1
     dfa:	18 95       	reti

00000dfc <_ZN8TimerOne9setPeriodEl>:
     dfc:	fc 01       	movw	r30, r24
     dfe:	a3 e0       	ldi	r26, 0x03	; 3
     e00:	44 0f       	add	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	66 1f       	adc	r22, r22
     e06:	77 1f       	adc	r23, r23
     e08:	aa 95       	dec	r26
     e0a:	d1 f7       	brne	.-12     	; 0xe00 <_ZN8TimerOne9setPeriodEl+0x4>
     e0c:	41 15       	cp	r20, r1
     e0e:	51 05       	cpc	r21, r1
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	68 07       	cpc	r22, r24
     e14:	71 05       	cpc	r23, r1
     e16:	14 f4       	brge	.+4      	; 0xe1c <_ZN8TimerOne9setPeriodEl+0x20>
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	0e c0       	rjmp	.+28     	; 0xe38 <_ZN8TimerOne9setPeriodEl+0x3c>
     e1c:	33 e0       	ldi	r19, 0x03	; 3
     e1e:	75 95       	asr	r23
     e20:	67 95       	ror	r22
     e22:	57 95       	ror	r21
     e24:	47 95       	ror	r20
     e26:	3a 95       	dec	r19
     e28:	d1 f7       	brne	.-12     	; 0xe1e <_ZN8TimerOne9setPeriodEl+0x22>
     e2a:	41 15       	cp	r20, r1
     e2c:	51 05       	cpc	r21, r1
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	68 07       	cpc	r22, r24
     e32:	71 05       	cpc	r23, r1
     e34:	1c f4       	brge	.+6      	; 0xe3c <_ZN8TimerOne9setPeriodEl+0x40>
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	82 83       	std	Z+2, r24	; 0x02
     e3a:	31 c0       	rjmp	.+98     	; 0xe9e <_ZN8TimerOne9setPeriodEl+0xa2>
     e3c:	23 e0       	ldi	r18, 0x03	; 3
     e3e:	75 95       	asr	r23
     e40:	67 95       	ror	r22
     e42:	57 95       	ror	r21
     e44:	47 95       	ror	r20
     e46:	2a 95       	dec	r18
     e48:	d1 f7       	brne	.-12     	; 0xe3e <_ZN8TimerOne9setPeriodEl+0x42>
     e4a:	41 15       	cp	r20, r1
     e4c:	51 05       	cpc	r21, r1
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	68 07       	cpc	r22, r24
     e52:	71 05       	cpc	r23, r1
     e54:	14 f4       	brge	.+4      	; 0xe5a <_ZN8TimerOne9setPeriodEl+0x5e>
     e56:	83 e0       	ldi	r24, 0x03	; 3
     e58:	ef cf       	rjmp	.-34     	; 0xe38 <_ZN8TimerOne9setPeriodEl+0x3c>
     e5a:	92 e0       	ldi	r25, 0x02	; 2
     e5c:	75 95       	asr	r23
     e5e:	67 95       	ror	r22
     e60:	57 95       	ror	r21
     e62:	47 95       	ror	r20
     e64:	9a 95       	dec	r25
     e66:	d1 f7       	brne	.-12     	; 0xe5c <_ZN8TimerOne9setPeriodEl+0x60>
     e68:	41 15       	cp	r20, r1
     e6a:	51 05       	cpc	r21, r1
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	68 07       	cpc	r22, r24
     e70:	71 05       	cpc	r23, r1
     e72:	14 f4       	brge	.+4      	; 0xe78 <_ZN8TimerOne9setPeriodEl+0x7c>
     e74:	84 e0       	ldi	r24, 0x04	; 4
     e76:	e0 cf       	rjmp	.-64     	; 0xe38 <_ZN8TimerOne9setPeriodEl+0x3c>
     e78:	82 e0       	ldi	r24, 0x02	; 2
     e7a:	75 95       	asr	r23
     e7c:	67 95       	ror	r22
     e7e:	57 95       	ror	r21
     e80:	47 95       	ror	r20
     e82:	8a 95       	dec	r24
     e84:	d1 f7       	brne	.-12     	; 0xe7a <_ZN8TimerOne9setPeriodEl+0x7e>
     e86:	85 e0       	ldi	r24, 0x05	; 5
     e88:	82 83       	std	Z+2, r24	; 0x02
     e8a:	41 15       	cp	r20, r1
     e8c:	51 05       	cpc	r21, r1
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	68 07       	cpc	r22, r24
     e92:	71 05       	cpc	r23, r1
     e94:	24 f0       	brlt	.+8      	; 0xe9e <_ZN8TimerOne9setPeriodEl+0xa2>
     e96:	4f ef       	ldi	r20, 0xFF	; 255
     e98:	5f ef       	ldi	r21, 0xFF	; 255
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	8f b7       	in	r24, 0x3f	; 63
     ea0:	83 83       	std	Z+3, r24	; 0x03
     ea2:	f8 94       	cli
     ea4:	51 83       	std	Z+1, r21	; 0x01
     ea6:	40 83       	st	Z, r20
     ea8:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     eac:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     eb0:	83 81       	ldd	r24, Z+3	; 0x03
     eb2:	8f bf       	out	0x3f, r24	; 63
     eb4:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     eb8:	88 7f       	andi	r24, 0xF8	; 248
     eba:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     ebe:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     ec2:	82 81       	ldd	r24, Z+2	; 0x02
     ec4:	89 2b       	or	r24, r25
     ec6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     eca:	08 95       	ret

00000ecc <_ZN8TimerOne10initializeEl>:
     ecc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     ed0:	20 e1       	ldi	r18, 0x10	; 16
     ed2:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     ed6:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <_ZN8TimerOne9setPeriodEl>

00000eda <_ZN8TimerOne6resumeEv>:
     eda:	e1 e8       	ldi	r30, 0x81	; 129
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	20 81       	ld	r18, Z
     ee0:	dc 01       	movw	r26, r24
     ee2:	12 96       	adiw	r26, 0x02	; 2
     ee4:	8c 91       	ld	r24, X
     ee6:	82 2b       	or	r24, r18
     ee8:	80 83       	st	Z, r24
     eea:	08 95       	ret

00000eec <_ZN8TimerOne15attachInterruptEPFvvEl>:
  if(pin == 1 || pin == 9)       TCCR1A &= ~_BV(COM1A1);   // clear the bit that enables pwm on PB1
  else if(pin == 2 || pin == 10) TCCR1A &= ~_BV(COM1B1);   // clear the bit that enables pwm on PB2
}

void TimerOne::attachInterrupt(void (*isr)(), long microseconds)
{
     eec:	0f 93       	push	r16
     eee:	1f 93       	push	r17
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	ec 01       	movw	r28, r24
     ef6:	8b 01       	movw	r16, r22
     ef8:	ba 01       	movw	r22, r20
     efa:	a9 01       	movw	r20, r18
  if(microseconds > 0) setPeriod(microseconds);
     efc:	14 16       	cp	r1, r20
     efe:	15 06       	cpc	r1, r21
     f00:	16 06       	cpc	r1, r22
     f02:	17 06       	cpc	r1, r23
     f04:	14 f4       	brge	.+4      	; 0xf0a <_ZN8TimerOne15attachInterruptEPFvvEl+0x1e>
     f06:	0e 94 fe 06 	call	0xdfc	; 0xdfc <_ZN8TimerOne9setPeriodEl>
  isrCallback = isr;                                       // register the user's callback with the real ISR
     f0a:	1d 83       	std	Y+5, r17	; 0x05
     f0c:	0c 83       	std	Y+4, r16	; 0x04
  TIMSK1 = _BV(TOIE1);                                     // sets the timer overflow interrupt enable bit
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	// might be running with interrupts disabled (eg inside an ISR), so don't touch the global state
//  sei();
  resume();												
     f14:	ce 01       	movw	r24, r28
}
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	1f 91       	pop	r17
     f1c:	0f 91       	pop	r16
  if(microseconds > 0) setPeriod(microseconds);
  isrCallback = isr;                                       // register the user's callback with the real ISR
  TIMSK1 = _BV(TOIE1);                                     // sets the timer overflow interrupt enable bit
	// might be running with interrupts disabled (eg inside an ISR), so don't touch the global state
//  sei();
  resume();												
     f1e:	0c 94 6d 07 	jmp	0xeda	; 0xeda <_ZN8TimerOne6resumeEv>

00000f22 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     f22:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     f24:	91 8d       	ldd	r25, Z+25	; 0x19
     f26:	22 8d       	ldd	r18, Z+26	; 0x1a
     f28:	89 2f       	mov	r24, r25
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	80 5c       	subi	r24, 0xC0	; 192
     f2e:	9f 4f       	sbci	r25, 0xFF	; 255
     f30:	82 1b       	sub	r24, r18
     f32:	91 09       	sbc	r25, r1
}
     f34:	8f 73       	andi	r24, 0x3F	; 63
     f36:	99 27       	eor	r25, r25
     f38:	08 95       	ret

00000f3a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     f3a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     f3c:	91 8d       	ldd	r25, Z+25	; 0x19
     f3e:	82 8d       	ldd	r24, Z+26	; 0x1a
     f40:	98 17       	cp	r25, r24
     f42:	31 f0       	breq	.+12     	; 0xf50 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     f44:	82 8d       	ldd	r24, Z+26	; 0x1a
     f46:	e8 0f       	add	r30, r24
     f48:	f1 1d       	adc	r31, r1
     f4a:	85 8d       	ldd	r24, Z+29	; 0x1d
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     f50:	8f ef       	ldi	r24, 0xFF	; 255
     f52:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     f54:	08 95       	ret

00000f56 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     f56:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     f58:	91 8d       	ldd	r25, Z+25	; 0x19
     f5a:	82 8d       	ldd	r24, Z+26	; 0x1a
     f5c:	98 17       	cp	r25, r24
     f5e:	61 f0       	breq	.+24     	; 0xf78 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     f60:	82 8d       	ldd	r24, Z+26	; 0x1a
     f62:	df 01       	movw	r26, r30
     f64:	a8 0f       	add	r26, r24
     f66:	b1 1d       	adc	r27, r1
     f68:	5d 96       	adiw	r26, 0x1d	; 29
     f6a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     f6c:	92 8d       	ldd	r25, Z+26	; 0x1a
     f6e:	9f 5f       	subi	r25, 0xFF	; 255
     f70:	9f 73       	andi	r25, 0x3F	; 63
     f72:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     f78:	8f ef       	ldi	r24, 0xFF	; 255
     f7a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     f7c:	08 95       	ret

00000f7e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     f7e:	85 e1       	ldi	r24, 0x15	; 21
     f80:	99 e0       	ldi	r25, 0x09	; 9
     f82:	89 2b       	or	r24, r25
     f84:	49 f0       	breq	.+18     	; 0xf98 <_Z14serialEventRunv+0x1a>
     f86:	83 ea       	ldi	r24, 0xA3	; 163
     f88:	93 e0       	ldi	r25, 0x03	; 3
     f8a:	89 2b       	or	r24, r25
     f8c:	29 f0       	breq	.+10     	; 0xf98 <_Z14serialEventRunv+0x1a>
     f8e:	0e 94 15 09 	call	0x122a	; 0x122a <_Z17Serial0_availablev>
     f92:	81 11       	cpse	r24, r1
     f94:	0c 94 a3 03 	jmp	0x746	; 0x746 <_Z11serialEventv>
     f98:	08 95       	ret

00000f9a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     f9a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     f9c:	84 8d       	ldd	r24, Z+28	; 0x1c
     f9e:	df 01       	movw	r26, r30
     fa0:	a8 0f       	add	r26, r24
     fa2:	b1 1d       	adc	r27, r1
     fa4:	a3 5a       	subi	r26, 0xA3	; 163
     fa6:	bf 4f       	sbci	r27, 0xFF	; 255
     fa8:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     faa:	84 8d       	ldd	r24, Z+28	; 0x1c
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	01 96       	adiw	r24, 0x01	; 1
     fb0:	8f 73       	andi	r24, 0x3F	; 63
     fb2:	99 27       	eor	r25, r25
     fb4:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     fb6:	a6 89       	ldd	r26, Z+22	; 0x16
     fb8:	b7 89       	ldd	r27, Z+23	; 0x17
     fba:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     fbc:	a0 89       	ldd	r26, Z+16	; 0x10
     fbe:	b1 89       	ldd	r27, Z+17	; 0x11
     fc0:	8c 91       	ld	r24, X
     fc2:	80 64       	ori	r24, 0x40	; 64
     fc4:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     fc6:	93 8d       	ldd	r25, Z+27	; 0x1b
     fc8:	84 8d       	ldd	r24, Z+28	; 0x1c
     fca:	98 13       	cpse	r25, r24
     fcc:	06 c0       	rjmp	.+12     	; 0xfda <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     fce:	02 88       	ldd	r0, Z+18	; 0x12
     fd0:	f3 89       	ldd	r31, Z+19	; 0x13
     fd2:	e0 2d       	mov	r30, r0
     fd4:	80 81       	ld	r24, Z
     fd6:	8f 7d       	andi	r24, 0xDF	; 223
     fd8:	80 83       	st	Z, r24
     fda:	08 95       	ret

00000fdc <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     fe2:	88 8d       	ldd	r24, Y+24	; 0x18
     fe4:	88 23       	and	r24, r24
     fe6:	c9 f0       	breq	.+50     	; 0x101a <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     fe8:	ea 89       	ldd	r30, Y+18	; 0x12
     fea:	fb 89       	ldd	r31, Y+19	; 0x13
     fec:	80 81       	ld	r24, Z
     fee:	85 fd       	sbrc	r24, 5
     ff0:	05 c0       	rjmp	.+10     	; 0xffc <_ZN14HardwareSerial5flushEv+0x20>
     ff2:	a8 89       	ldd	r26, Y+16	; 0x10
     ff4:	b9 89       	ldd	r27, Y+17	; 0x11
     ff6:	8c 91       	ld	r24, X
     ff8:	86 fd       	sbrc	r24, 6
     ffa:	0f c0       	rjmp	.+30     	; 0x101a <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	07 fc       	sbrc	r0, 7
    1000:	f5 cf       	rjmp	.-22     	; 0xfec <_ZN14HardwareSerial5flushEv+0x10>
    1002:	80 81       	ld	r24, Z
    1004:	85 ff       	sbrs	r24, 5
    1006:	f2 cf       	rjmp	.-28     	; 0xfec <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1008:	a8 89       	ldd	r26, Y+16	; 0x10
    100a:	b9 89       	ldd	r27, Y+17	; 0x11
    100c:	8c 91       	ld	r24, X
    100e:	85 ff       	sbrs	r24, 5
    1010:	ed cf       	rjmp	.-38     	; 0xfec <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1012:	ce 01       	movw	r24, r28
    1014:	0e 94 cd 07 	call	0xf9a	; 0xf9a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1018:	e7 cf       	rjmp	.-50     	; 0xfe8 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	08 95       	ret

00001020 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1020:	ef 92       	push	r14
    1022:	ff 92       	push	r15
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	ec 01       	movw	r28, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    102e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1030:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1032:	98 13       	cpse	r25, r24
    1034:	05 c0       	rjmp	.+10     	; 0x1040 <_ZN14HardwareSerial5writeEh+0x20>
    1036:	e8 89       	ldd	r30, Y+16	; 0x10
    1038:	f9 89       	ldd	r31, Y+17	; 0x11
    103a:	80 81       	ld	r24, Z
    103c:	85 fd       	sbrc	r24, 5
    103e:	27 c0       	rjmp	.+78     	; 0x108e <_ZN14HardwareSerial5writeEh+0x6e>
    1040:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1042:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1044:	10 e0       	ldi	r17, 0x00	; 0
    1046:	0f 5f       	subi	r16, 0xFF	; 255
    1048:	1f 4f       	sbci	r17, 0xFF	; 255
    104a:	0f 73       	andi	r16, 0x3F	; 63
    104c:	11 27       	eor	r17, r17
    104e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1050:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1052:	e8 12       	cpse	r14, r24
    1054:	0c c0       	rjmp	.+24     	; 0x106e <_ZN14HardwareSerial5writeEh+0x4e>
    if (bit_is_clear(SREG, SREG_I)) {
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	07 fc       	sbrc	r0, 7
    105a:	fa cf       	rjmp	.-12     	; 0x1050 <_ZN14HardwareSerial5writeEh+0x30>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    105c:	e8 89       	ldd	r30, Y+16	; 0x10
    105e:	f9 89       	ldd	r31, Y+17	; 0x11
    1060:	80 81       	ld	r24, Z
    1062:	85 ff       	sbrs	r24, 5
    1064:	f5 cf       	rjmp	.-22     	; 0x1050 <_ZN14HardwareSerial5writeEh+0x30>
	_tx_udr_empty_irq();
    1066:	ce 01       	movw	r24, r28
    1068:	0e 94 cd 07 	call	0xf9a	; 0xf9a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    106c:	f1 cf       	rjmp	.-30     	; 0x1050 <_ZN14HardwareSerial5writeEh+0x30>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    106e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1070:	fe 01       	movw	r30, r28
    1072:	e8 0f       	add	r30, r24
    1074:	f1 1d       	adc	r31, r1
    1076:	e3 5a       	subi	r30, 0xA3	; 163
    1078:	ff 4f       	sbci	r31, 0xFF	; 255
    107a:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    107c:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    107e:	ea 89       	ldd	r30, Y+18	; 0x12
    1080:	fb 89       	ldd	r31, Y+19	; 0x13
    1082:	80 81       	ld	r24, Z
    1084:	80 62       	ori	r24, 0x20	; 32
    1086:	80 83       	st	Z, r24
  _written = true;
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	88 8f       	std	Y+24, r24	; 0x18
    108c:	08 c0       	rjmp	.+16     	; 0x109e <_ZN14HardwareSerial5writeEh+0x7e>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    108e:	ee 89       	ldd	r30, Y+22	; 0x16
    1090:	ff 89       	ldd	r31, Y+23	; 0x17
    1092:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1094:	e8 89       	ldd	r30, Y+16	; 0x10
    1096:	f9 89       	ldd	r31, Y+17	; 0x11
    1098:	80 81       	ld	r24, Z
    109a:	80 64       	ori	r24, 0x40	; 64
    109c:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	ff 90       	pop	r15
    10ac:	ef 90       	pop	r14
    10ae:	08 95       	ret

000010b0 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    10b0:	cf 92       	push	r12
    10b2:	df 92       	push	r13
    10b4:	ef 92       	push	r14
    10b6:	ff 92       	push	r15
    10b8:	1f 93       	push	r17
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	ec 01       	movw	r28, r24
    10c0:	6a 01       	movw	r12, r20
    10c2:	7b 01       	movw	r14, r22
    10c4:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    10c6:	e8 89       	ldd	r30, Y+16	; 0x10
    10c8:	f9 89       	ldd	r31, Y+17	; 0x11
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    10ce:	41 15       	cp	r20, r1
    10d0:	51 4e       	sbci	r21, 0xE1	; 225
    10d2:	61 05       	cpc	r22, r1
    10d4:	71 05       	cpc	r23, r1
    10d6:	b1 f0       	breq	.+44     	; 0x1104 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	79 e0       	ldi	r23, 0x09	; 9
    10dc:	8d e3       	ldi	r24, 0x3D	; 61
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	a7 01       	movw	r20, r14
    10e2:	96 01       	movw	r18, r12
    10e4:	0e 94 29 0b 	call	0x1652	; 0x1652 <__udivmodsi4>
    10e8:	da 01       	movw	r26, r20
    10ea:	c9 01       	movw	r24, r18
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	a1 09       	sbc	r26, r1
    10f0:	b1 09       	sbc	r27, r1
    10f2:	b6 95       	lsr	r27
    10f4:	a7 95       	ror	r26
    10f6:	97 95       	ror	r25
    10f8:	87 95       	ror	r24
    10fa:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    10fc:	41 15       	cp	r20, r1
    10fe:	80 e1       	ldi	r24, 0x10	; 16
    1100:	58 07       	cpc	r21, r24
    1102:	a8 f0       	brcs	.+42     	; 0x112e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1104:	e8 89       	ldd	r30, Y+16	; 0x10
    1106:	f9 89       	ldd	r31, Y+17	; 0x11
    1108:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    110a:	60 e8       	ldi	r22, 0x80	; 128
    110c:	74 e8       	ldi	r23, 0x84	; 132
    110e:	8e e1       	ldi	r24, 0x1E	; 30
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	a7 01       	movw	r20, r14
    1114:	96 01       	movw	r18, r12
    1116:	0e 94 29 0b 	call	0x1652	; 0x1652 <__udivmodsi4>
    111a:	ba 01       	movw	r22, r20
    111c:	a9 01       	movw	r20, r18
    111e:	41 50       	subi	r20, 0x01	; 1
    1120:	51 09       	sbc	r21, r1
    1122:	61 09       	sbc	r22, r1
    1124:	71 09       	sbc	r23, r1
    1126:	76 95       	lsr	r23
    1128:	67 95       	ror	r22
    112a:	57 95       	ror	r21
    112c:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    112e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1130:	fd 85       	ldd	r31, Y+13	; 0x0d
    1132:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    1134:	ee 85       	ldd	r30, Y+14	; 0x0e
    1136:	ff 85       	ldd	r31, Y+15	; 0x0f
    1138:	40 83       	st	Z, r20

  _written = false;
    113a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    113c:	ec 89       	ldd	r30, Y+20	; 0x14
    113e:	fd 89       	ldd	r31, Y+21	; 0x15
    1140:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1142:	ea 89       	ldd	r30, Y+18	; 0x12
    1144:	fb 89       	ldd	r31, Y+19	; 0x13
    1146:	80 81       	ld	r24, Z
    1148:	80 61       	ori	r24, 0x10	; 16
    114a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    114c:	ea 89       	ldd	r30, Y+18	; 0x12
    114e:	fb 89       	ldd	r31, Y+19	; 0x13
    1150:	80 81       	ld	r24, Z
    1152:	88 60       	ori	r24, 0x08	; 8
    1154:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1156:	ea 89       	ldd	r30, Y+18	; 0x12
    1158:	fb 89       	ldd	r31, Y+19	; 0x13
    115a:	80 81       	ld	r24, Z
    115c:	80 68       	ori	r24, 0x80	; 128
    115e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1160:	ea 89       	ldd	r30, Y+18	; 0x12
    1162:	fb 89       	ldd	r31, Y+19	; 0x13
    1164:	80 81       	ld	r24, Z
    1166:	8f 7d       	andi	r24, 0xDF	; 223
    1168:	80 83       	st	Z, r24
}
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	ff 90       	pop	r15
    1172:	ef 90       	pop	r14
    1174:	df 90       	pop	r13
    1176:	cf 90       	pop	r12
    1178:	08 95       	ret

0000117a <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    117a:	1f 92       	push	r1
    117c:	0f 92       	push	r0
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	0f 92       	push	r0
    1182:	11 24       	eor	r1, r1
    1184:	2f 93       	push	r18
    1186:	8f 93       	push	r24
    1188:	9f 93       	push	r25
    118a:	ef 93       	push	r30
    118c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    118e:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <Serial+0x10>
    1192:	f0 91 ad 01 	lds	r31, 0x01AD	; 0x8001ad <Serial+0x11>
    1196:	80 81       	ld	r24, Z
    1198:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <Serial+0x16>
    119c:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <Serial+0x17>
    11a0:	82 fd       	sbrc	r24, 2
    11a2:	12 c0       	rjmp	.+36     	; 0x11c8 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    11a4:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    11a6:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <Serial+0x19>
    11aa:	8f 5f       	subi	r24, 0xFF	; 255
    11ac:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    11ae:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <Serial+0x1a>
    11b2:	82 17       	cp	r24, r18
    11b4:	51 f0       	breq	.+20     	; 0x11ca <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    11b6:	e0 91 b5 01 	lds	r30, 0x01B5	; 0x8001b5 <Serial+0x19>
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	e4 56       	subi	r30, 0x64	; 100
    11be:	fe 4f       	sbci	r31, 0xFE	; 254
    11c0:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    11c2:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <Serial+0x19>
    11c6:	01 c0       	rjmp	.+2      	; 0x11ca <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    11c8:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    11ca:	ff 91       	pop	r31
    11cc:	ef 91       	pop	r30
    11ce:	9f 91       	pop	r25
    11d0:	8f 91       	pop	r24
    11d2:	2f 91       	pop	r18
    11d4:	0f 90       	pop	r0
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	0f 90       	pop	r0
    11da:	1f 90       	pop	r1
    11dc:	18 95       	reti

000011de <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    11de:	1f 92       	push	r1
    11e0:	0f 92       	push	r0
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	0f 92       	push	r0
    11e6:	11 24       	eor	r1, r1
    11e8:	2f 93       	push	r18
    11ea:	3f 93       	push	r19
    11ec:	4f 93       	push	r20
    11ee:	5f 93       	push	r21
    11f0:	6f 93       	push	r22
    11f2:	7f 93       	push	r23
    11f4:	8f 93       	push	r24
    11f6:	9f 93       	push	r25
    11f8:	af 93       	push	r26
    11fa:	bf 93       	push	r27
    11fc:	ef 93       	push	r30
    11fe:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1200:	8c e9       	ldi	r24, 0x9C	; 156
    1202:	91 e0       	ldi	r25, 0x01	; 1
    1204:	0e 94 cd 07 	call	0xf9a	; 0xf9a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1208:	ff 91       	pop	r31
    120a:	ef 91       	pop	r30
    120c:	bf 91       	pop	r27
    120e:	af 91       	pop	r26
    1210:	9f 91       	pop	r25
    1212:	8f 91       	pop	r24
    1214:	7f 91       	pop	r23
    1216:	6f 91       	pop	r22
    1218:	5f 91       	pop	r21
    121a:	4f 91       	pop	r20
    121c:	3f 91       	pop	r19
    121e:	2f 91       	pop	r18
    1220:	0f 90       	pop	r0
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	0f 90       	pop	r0
    1226:	1f 90       	pop	r1
    1228:	18 95       	reti

0000122a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    122a:	8c e9       	ldi	r24, 0x9C	; 156
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN14HardwareSerial9availableEv>
    1232:	21 e0       	ldi	r18, 0x01	; 1
    1234:	89 2b       	or	r24, r25
    1236:	09 f4       	brne	.+2      	; 0x123a <_Z17Serial0_availablev+0x10>
    1238:	20 e0       	ldi	r18, 0x00	; 0
}
    123a:	82 2f       	mov	r24, r18
    123c:	08 95       	ret

0000123e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    123e:	ec e9       	ldi	r30, 0x9C	; 156
    1240:	f1 e0       	ldi	r31, 0x01	; 1
    1242:	13 82       	std	Z+3, r1	; 0x03
    1244:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1246:	88 ee       	ldi	r24, 0xE8	; 232
    1248:	93 e0       	ldi	r25, 0x03	; 3
    124a:	a0 e0       	ldi	r26, 0x00	; 0
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	84 83       	std	Z+4, r24	; 0x04
    1250:	95 83       	std	Z+5, r25	; 0x05
    1252:	a6 83       	std	Z+6, r26	; 0x06
    1254:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1256:	8a e2       	ldi	r24, 0x2A	; 42
    1258:	91 e0       	ldi	r25, 0x01	; 1
    125a:	91 83       	std	Z+1, r25	; 0x01
    125c:	80 83       	st	Z, r24
    125e:	85 ec       	ldi	r24, 0xC5	; 197
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	95 87       	std	Z+13, r25	; 0x0d
    1264:	84 87       	std	Z+12, r24	; 0x0c
    1266:	84 ec       	ldi	r24, 0xC4	; 196
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	97 87       	std	Z+15, r25	; 0x0f
    126c:	86 87       	std	Z+14, r24	; 0x0e
    126e:	80 ec       	ldi	r24, 0xC0	; 192
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	91 8b       	std	Z+17, r25	; 0x11
    1274:	80 8b       	std	Z+16, r24	; 0x10
    1276:	81 ec       	ldi	r24, 0xC1	; 193
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	93 8b       	std	Z+19, r25	; 0x13
    127c:	82 8b       	std	Z+18, r24	; 0x12
    127e:	82 ec       	ldi	r24, 0xC2	; 194
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	95 8b       	std	Z+21, r25	; 0x15
    1284:	84 8b       	std	Z+20, r24	; 0x14
    1286:	86 ec       	ldi	r24, 0xC6	; 198
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	97 8b       	std	Z+23, r25	; 0x17
    128c:	86 8b       	std	Z+22, r24	; 0x16
    128e:	11 8e       	std	Z+25, r1	; 0x19
    1290:	12 8e       	std	Z+26, r1	; 0x1a
    1292:	13 8e       	std	Z+27, r1	; 0x1b
    1294:	14 8e       	std	Z+28, r1	; 0x1c
    1296:	08 95       	ret

00001298 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1298:	08 95       	ret

0000129a <main>:

int main(void)
{
	init();
    129a:	0e 94 1e 0a 	call	0x143c	; 0x143c <init>

	initVariant();
    129e:	0e 94 4c 09 	call	0x1298	; 0x1298 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    12a2:	0e 94 61 02 	call	0x4c2	; 0x4c2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    12a6:	cf eb       	ldi	r28, 0xBF	; 191
    12a8:	d7 e0       	ldi	r29, 0x07	; 7
#endif
	
	setup();
    
	for (;;) {
		loop();
    12aa:	0e 94 75 03 	call	0x6ea	; 0x6ea <loop>
		if (serialEventRun) serialEventRun();
    12ae:	20 97       	sbiw	r28, 0x00	; 0
    12b0:	e1 f3       	breq	.-8      	; 0x12aa <main+0x10>
    12b2:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z14serialEventRunv>
    12b6:	f9 cf       	rjmp	.-14     	; 0x12aa <main+0x10>

000012b8 <_ZN5Print5writeEPKhj>:
  return n;
}

size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
    12b8:	cf 92       	push	r12
    12ba:	df 92       	push	r13
    12bc:	ef 92       	push	r14
    12be:	ff 92       	push	r15
    12c0:	0f 93       	push	r16
    12c2:	1f 93       	push	r17
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	6c 01       	movw	r12, r24
    12ca:	eb 01       	movw	r28, r22
    12cc:	7b 01       	movw	r14, r22
    12ce:	e4 0e       	add	r14, r20
    12d0:	f5 1e       	adc	r15, r21
    12d2:	00 e0       	ldi	r16, 0x00	; 0
    12d4:	10 e0       	ldi	r17, 0x00	; 0
    12d6:	ce 15       	cp	r28, r14
    12d8:	df 05       	cpc	r29, r15
    12da:	61 f0       	breq	.+24     	; 0x12f4 <_ZN5Print5writeEPKhj+0x3c>
    12dc:	69 91       	ld	r22, Y+
    12de:	d6 01       	movw	r26, r12
    12e0:	ed 91       	ld	r30, X+
    12e2:	fc 91       	ld	r31, X
    12e4:	01 90       	ld	r0, Z+
    12e6:	f0 81       	ld	r31, Z
    12e8:	e0 2d       	mov	r30, r0
    12ea:	c6 01       	movw	r24, r12
    12ec:	09 95       	icall
    12ee:	08 0f       	add	r16, r24
    12f0:	19 1f       	adc	r17, r25
    12f2:	f1 cf       	rjmp	.-30     	; 0x12d6 <_ZN5Print5writeEPKhj+0x1e>
    12f4:	c8 01       	movw	r24, r16
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	1f 91       	pop	r17
    12fc:	0f 91       	pop	r16
    12fe:	ff 90       	pop	r15
    1300:	ef 90       	pop	r14
    1302:	df 90       	pop	r13
    1304:	cf 90       	pop	r12
    1306:	08 95       	ret

00001308 <_ZN5Print5printEPK19__FlashStringHelper>:
    1308:	ef 92       	push	r14
    130a:	ff 92       	push	r15
    130c:	0f 93       	push	r16
    130e:	1f 93       	push	r17
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	7c 01       	movw	r14, r24
    1316:	fb 01       	movw	r30, r22
    1318:	00 e0       	ldi	r16, 0x00	; 0
    131a:	10 e0       	ldi	r17, 0x00	; 0
    131c:	64 91       	lpm	r22, Z
    131e:	ef 01       	movw	r28, r30
    1320:	21 96       	adiw	r28, 0x01	; 1
    1322:	66 23       	and	r22, r22
    1324:	61 f0       	breq	.+24     	; 0x133e <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    1326:	d7 01       	movw	r26, r14
    1328:	ed 91       	ld	r30, X+
    132a:	fc 91       	ld	r31, X
    132c:	01 90       	ld	r0, Z+
    132e:	f0 81       	ld	r31, Z
    1330:	e0 2d       	mov	r30, r0
    1332:	c7 01       	movw	r24, r14
    1334:	09 95       	icall
    1336:	08 0f       	add	r16, r24
    1338:	19 1f       	adc	r17, r25
    133a:	fe 01       	movw	r30, r28
    133c:	ef cf       	rjmp	.-34     	; 0x131c <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    133e:	c8 01       	movw	r24, r16
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
    1348:	ff 90       	pop	r15
    134a:	ef 90       	pop	r14
    134c:	08 95       	ret

0000134e <_ZN5Print5printEc>:
    134e:	dc 01       	movw	r26, r24
    1350:	ed 91       	ld	r30, X+
    1352:	fc 91       	ld	r31, X
    1354:	01 90       	ld	r0, Z+
    1356:	f0 81       	ld	r31, Z
    1358:	e0 2d       	mov	r30, r0
    135a:	09 94       	ijmp

0000135c <_ZN5Print7printlnEv>:
}

size_t Print::println(void)
{
    135c:	0f 93       	push	r16
    135e:	1f 93       	push	r17
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	ec 01       	movw	r28, r24
  size_t n = print('\r');
    1366:	6d e0       	ldi	r22, 0x0D	; 13
    1368:	0e 94 a7 09 	call	0x134e	; 0x134e <_ZN5Print5printEc>
    136c:	8c 01       	movw	r16, r24
  n += print('\n');
    136e:	6a e0       	ldi	r22, 0x0A	; 10
    1370:	ce 01       	movw	r24, r28
    1372:	0e 94 a7 09 	call	0x134e	; 0x134e <_ZN5Print5printEc>
  return n;
}
    1376:	80 0f       	add	r24, r16
    1378:	91 1f       	adc	r25, r17
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	1f 91       	pop	r17
    1380:	0f 91       	pop	r16
    1382:	08 95       	ret

00001384 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	ec 01       	movw	r28, r24
  size_t n = print(ifsh);
    138e:	0e 94 84 09 	call	0x1308	; 0x1308 <_ZN5Print5printEPK19__FlashStringHelper>
    1392:	8c 01       	movw	r16, r24
  n += println();
    1394:	ce 01       	movw	r24, r28
    1396:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN5Print7printlnEv>
  return n;
}
    139a:	80 0f       	add	r24, r16
    139c:	91 1f       	adc	r25, r17
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	1f 91       	pop	r17
    13a4:	0f 91       	pop	r16
    13a6:	08 95       	ret

000013a8 <__vector_16>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    13a8:	1f 92       	push	r1
    13aa:	0f 92       	push	r0
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	0f 92       	push	r0
    13b0:	11 24       	eor	r1, r1
    13b2:	2f 93       	push	r18
    13b4:	3f 93       	push	r19
    13b6:	8f 93       	push	r24
    13b8:	9f 93       	push	r25
    13ba:	af 93       	push	r26
    13bc:	bf 93       	push	r27
    13be:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <timer0_millis>
    13c2:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <timer0_millis+0x1>
    13c6:	a0 91 3c 02 	lds	r26, 0x023C	; 0x80023c <timer0_millis+0x2>
    13ca:	b0 91 3d 02 	lds	r27, 0x023D	; 0x80023d <timer0_millis+0x3>
    13ce:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <timer0_fract>
    13d2:	23 e0       	ldi	r18, 0x03	; 3
    13d4:	23 0f       	add	r18, r19
    13d6:	2d 37       	cpi	r18, 0x7D	; 125
    13d8:	20 f4       	brcc	.+8      	; 0x13e2 <__vector_16+0x3a>
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	a1 1d       	adc	r26, r1
    13de:	b1 1d       	adc	r27, r1
    13e0:	05 c0       	rjmp	.+10     	; 0x13ec <__vector_16+0x44>
    13e2:	26 e8       	ldi	r18, 0x86	; 134
    13e4:	23 0f       	add	r18, r19
    13e6:	02 96       	adiw	r24, 0x02	; 2
    13e8:	a1 1d       	adc	r26, r1
    13ea:	b1 1d       	adc	r27, r1
    13ec:	20 93 39 02 	sts	0x0239, r18	; 0x800239 <timer0_fract>
    13f0:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <timer0_millis>
    13f4:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <timer0_millis+0x1>
    13f8:	a0 93 3c 02 	sts	0x023C, r26	; 0x80023c <timer0_millis+0x2>
    13fc:	b0 93 3d 02 	sts	0x023D, r27	; 0x80023d <timer0_millis+0x3>
    1400:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <timer0_overflow_count>
    1404:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <timer0_overflow_count+0x1>
    1408:	a0 91 40 02 	lds	r26, 0x0240	; 0x800240 <timer0_overflow_count+0x2>
    140c:	b0 91 41 02 	lds	r27, 0x0241	; 0x800241 <timer0_overflow_count+0x3>
    1410:	01 96       	adiw	r24, 0x01	; 1
    1412:	a1 1d       	adc	r26, r1
    1414:	b1 1d       	adc	r27, r1
    1416:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <timer0_overflow_count>
    141a:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <timer0_overflow_count+0x1>
    141e:	a0 93 40 02 	sts	0x0240, r26	; 0x800240 <timer0_overflow_count+0x2>
    1422:	b0 93 41 02 	sts	0x0241, r27	; 0x800241 <timer0_overflow_count+0x3>
    1426:	bf 91       	pop	r27
    1428:	af 91       	pop	r26
    142a:	9f 91       	pop	r25
    142c:	8f 91       	pop	r24
    142e:	3f 91       	pop	r19
    1430:	2f 91       	pop	r18
    1432:	0f 90       	pop	r0
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	0f 90       	pop	r0
    1438:	1f 90       	pop	r1
    143a:	18 95       	reti

0000143c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    143c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    143e:	84 b5       	in	r24, 0x24	; 36
    1440:	82 60       	ori	r24, 0x02	; 2
    1442:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1444:	84 b5       	in	r24, 0x24	; 36
    1446:	81 60       	ori	r24, 0x01	; 1
    1448:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    144a:	85 b5       	in	r24, 0x25	; 37
    144c:	82 60       	ori	r24, 0x02	; 2
    144e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1450:	85 b5       	in	r24, 0x25	; 37
    1452:	81 60       	ori	r24, 0x01	; 1
    1454:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1456:	ee e6       	ldi	r30, 0x6E	; 110
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	81 60       	ori	r24, 0x01	; 1
    145e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1460:	e1 e8       	ldi	r30, 0x81	; 129
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1466:	80 81       	ld	r24, Z
    1468:	82 60       	ori	r24, 0x02	; 2
    146a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    146c:	80 81       	ld	r24, Z
    146e:	81 60       	ori	r24, 0x01	; 1
    1470:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1472:	e0 e8       	ldi	r30, 0x80	; 128
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	81 60       	ori	r24, 0x01	; 1
    147a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    147c:	e1 eb       	ldi	r30, 0xB1	; 177
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	84 60       	ori	r24, 0x04	; 4
    1484:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1486:	e0 eb       	ldi	r30, 0xB0	; 176
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	81 60       	ori	r24, 0x01	; 1
    148e:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    1490:	ea e7       	ldi	r30, 0x7A	; 122
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	84 60       	ori	r24, 0x04	; 4
    1498:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    149a:	80 81       	ld	r24, Z
    149c:	82 60       	ori	r24, 0x02	; 2
    149e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    14a0:	80 81       	ld	r24, Z
    14a2:	81 60       	ori	r24, 0x01	; 1
    14a4:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    14a6:	80 81       	ld	r24, Z
    14a8:	80 68       	ori	r24, 0x80	; 128
    14aa:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    14ac:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    14b0:	08 95       	ret

000014b2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    14b2:	83 30       	cpi	r24, 0x03	; 3
    14b4:	81 f0       	breq	.+32     	; 0x14d6 <turnOffPWM+0x24>
    14b6:	28 f4       	brcc	.+10     	; 0x14c2 <turnOffPWM+0x10>
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	99 f0       	breq	.+38     	; 0x14e2 <turnOffPWM+0x30>
    14bc:	82 30       	cpi	r24, 0x02	; 2
    14be:	a1 f0       	breq	.+40     	; 0x14e8 <turnOffPWM+0x36>
    14c0:	08 95       	ret
    14c2:	87 30       	cpi	r24, 0x07	; 7
    14c4:	a9 f0       	breq	.+42     	; 0x14f0 <turnOffPWM+0x3e>
    14c6:	88 30       	cpi	r24, 0x08	; 8
    14c8:	b9 f0       	breq	.+46     	; 0x14f8 <turnOffPWM+0x46>
    14ca:	84 30       	cpi	r24, 0x04	; 4
    14cc:	d1 f4       	brne	.+52     	; 0x1502 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    14ce:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    14d2:	8f 7d       	andi	r24, 0xDF	; 223
    14d4:	03 c0       	rjmp	.+6      	; 0x14dc <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    14d6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    14da:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    14dc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    14e0:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    14e2:	84 b5       	in	r24, 0x24	; 36
    14e4:	8f 77       	andi	r24, 0x7F	; 127
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <turnOffPWM+0x3a>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    14e8:	84 b5       	in	r24, 0x24	; 36
    14ea:	8f 7d       	andi	r24, 0xDF	; 223
    14ec:	84 bd       	out	0x24, r24	; 36
    14ee:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    14f0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    14f4:	8f 77       	andi	r24, 0x7F	; 127
    14f6:	03 c0       	rjmp	.+6      	; 0x14fe <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    14f8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    14fc:	8f 7d       	andi	r24, 0xDF	; 223
    14fe:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1502:	08 95       	ret

00001504 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	fc 01       	movw	r30, r24
    150c:	ed 5d       	subi	r30, 0xDD	; 221
    150e:	fb 4f       	sbci	r31, 0xFB	; 251
    1510:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1512:	fc 01       	movw	r30, r24
    1514:	e9 5c       	subi	r30, 0xC9	; 201
    1516:	fb 4f       	sbci	r31, 0xFB	; 251
    1518:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    151a:	88 23       	and	r24, r24
    151c:	61 f1       	breq	.+88     	; 0x1576 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	fc 01       	movw	r30, r24
    1526:	eb 5a       	subi	r30, 0xAB	; 171
    1528:	fb 4f       	sbci	r31, 0xFB	; 251
    152a:	c5 91       	lpm	r28, Z+
    152c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    152e:	fc 01       	movw	r30, r24
    1530:	e5 5b       	subi	r30, 0xB5	; 181
    1532:	fb 4f       	sbci	r31, 0xFB	; 251
    1534:	a5 91       	lpm	r26, Z+
    1536:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1538:	61 11       	cpse	r22, r1
    153a:	09 c0       	rjmp	.+18     	; 0x154e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    153c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    153e:	f8 94       	cli
		*reg &= ~bit;
    1540:	88 81       	ld	r24, Y
    1542:	20 95       	com	r18
    1544:	82 23       	and	r24, r18
    1546:	88 83       	st	Y, r24
		*out &= ~bit;
    1548:	ec 91       	ld	r30, X
    154a:	2e 23       	and	r18, r30
    154c:	0b c0       	rjmp	.+22     	; 0x1564 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    154e:	62 30       	cpi	r22, 0x02	; 2
    1550:	61 f4       	brne	.+24     	; 0x156a <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1552:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1554:	f8 94       	cli
		*reg &= ~bit;
    1556:	38 81       	ld	r19, Y
    1558:	82 2f       	mov	r24, r18
    155a:	80 95       	com	r24
    155c:	83 23       	and	r24, r19
    155e:	88 83       	st	Y, r24
		*out |= bit;
    1560:	ec 91       	ld	r30, X
    1562:	2e 2b       	or	r18, r30
    1564:	2c 93       	st	X, r18
		SREG = oldSREG;
    1566:	9f bf       	out	0x3f, r25	; 63
    1568:	06 c0       	rjmp	.+12     	; 0x1576 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    156a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    156c:	f8 94       	cli
		*reg |= bit;
    156e:	e8 81       	ld	r30, Y
    1570:	2e 2b       	or	r18, r30
    1572:	28 83       	st	Y, r18
		SREG = oldSREG;
    1574:	8f bf       	out	0x3f, r24	; 63
	}
}
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	08 95       	ret

0000157c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    157c:	1f 93       	push	r17
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	f9 01       	movw	r30, r18
    1588:	e1 5f       	subi	r30, 0xF1	; 241
    158a:	fb 4f       	sbci	r31, 0xFB	; 251
    158c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    158e:	f9 01       	movw	r30, r18
    1590:	ed 5d       	subi	r30, 0xDD	; 221
    1592:	fb 4f       	sbci	r31, 0xFB	; 251
    1594:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1596:	f9 01       	movw	r30, r18
    1598:	e9 5c       	subi	r30, 0xC9	; 201
    159a:	fb 4f       	sbci	r31, 0xFB	; 251
    159c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    159e:	cc 23       	and	r28, r28
    15a0:	c9 f0       	breq	.+50     	; 0x15d4 <digitalWrite+0x58>
    15a2:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    15a4:	81 11       	cpse	r24, r1
    15a6:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <turnOffPWM>

	out = portOutputRegister(port);
    15aa:	ec 2f       	mov	r30, r28
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	ee 0f       	add	r30, r30
    15b0:	ff 1f       	adc	r31, r31
    15b2:	e5 5b       	subi	r30, 0xB5	; 181
    15b4:	fb 4f       	sbci	r31, 0xFB	; 251
    15b6:	a5 91       	lpm	r26, Z+
    15b8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    15ba:	8f b7       	in	r24, 0x3f	; 63
	cli();
    15bc:	f8 94       	cli

	if (val == LOW) {
    15be:	11 11       	cpse	r17, r1
    15c0:	05 c0       	rjmp	.+10     	; 0x15cc <digitalWrite+0x50>
		*out &= ~bit;
    15c2:	9c 91       	ld	r25, X
    15c4:	ed 2f       	mov	r30, r29
    15c6:	e0 95       	com	r30
    15c8:	e9 23       	and	r30, r25
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <digitalWrite+0x54>
	} else {
		*out |= bit;
    15cc:	ec 91       	ld	r30, X
    15ce:	ed 2b       	or	r30, r29
    15d0:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    15d2:	8f bf       	out	0x3f, r24	; 63
}
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	1f 91       	pop	r17
    15da:	08 95       	ret

000015dc <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    15dc:	bf 92       	push	r11
    15de:	cf 92       	push	r12
    15e0:	df 92       	push	r13
    15e2:	ef 92       	push	r14
    15e4:	ff 92       	push	r15
    15e6:	0f 93       	push	r16
    15e8:	1f 93       	push	r17
    15ea:	cf 93       	push	r28
    15ec:	df 93       	push	r29
    15ee:	c8 2e       	mov	r12, r24
    15f0:	d6 2e       	mov	r13, r22
    15f2:	b4 2e       	mov	r11, r20
    15f4:	c7 e0       	ldi	r28, 0x07	; 7
    15f6:	d0 e0       	ldi	r29, 0x00	; 0
    15f8:	02 2f       	mov	r16, r18
    15fa:	10 e0       	ldi	r17, 0x00	; 0
    15fc:	87 e0       	ldi	r24, 0x07	; 7
    15fe:	e8 2e       	mov	r14, r24
    1600:	f1 2c       	mov	r15, r1
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    1602:	b1 10       	cpse	r11, r1
    1604:	05 c0       	rjmp	.+10     	; 0x1610 <shiftOut+0x34>
    1606:	c7 01       	movw	r24, r14
    1608:	8c 1b       	sub	r24, r28
    160a:	9d 0b       	sbc	r25, r29
			digitalWrite(dataPin, !!(val & (1 << i)));
    160c:	98 01       	movw	r18, r16
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <shiftOut+0x38>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    1610:	98 01       	movw	r18, r16
    1612:	8c 2f       	mov	r24, r28
    1614:	02 c0       	rjmp	.+4      	; 0x161a <shiftOut+0x3e>
    1616:	35 95       	asr	r19
    1618:	27 95       	ror	r18
    161a:	8a 95       	dec	r24
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <shiftOut+0x3a>
    161e:	b9 01       	movw	r22, r18
    1620:	61 70       	andi	r22, 0x01	; 1
    1622:	77 27       	eor	r23, r23
    1624:	8c 2d       	mov	r24, r12
    1626:	0e 94 be 0a 	call	0x157c	; 0x157c <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    162a:	61 e0       	ldi	r22, 0x01	; 1
    162c:	8d 2d       	mov	r24, r13
    162e:	0e 94 be 0a 	call	0x157c	; 0x157c <digitalWrite>
		digitalWrite(clockPin, LOW);		
    1632:	60 e0       	ldi	r22, 0x00	; 0
    1634:	8d 2d       	mov	r24, r13
    1636:	0e 94 be 0a 	call	0x157c	; 0x157c <digitalWrite>
    163a:	21 97       	sbiw	r28, 0x01	; 1
    163c:	10 f7       	brcc	.-60     	; 0x1602 <shiftOut+0x26>
	}
}
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	1f 91       	pop	r17
    1644:	0f 91       	pop	r16
    1646:	ff 90       	pop	r15
    1648:	ef 90       	pop	r14
    164a:	df 90       	pop	r13
    164c:	cf 90       	pop	r12
    164e:	bf 90       	pop	r11
    1650:	08 95       	ret

00001652 <__udivmodsi4>:
    1652:	a1 e2       	ldi	r26, 0x21	; 33
    1654:	1a 2e       	mov	r1, r26
    1656:	aa 1b       	sub	r26, r26
    1658:	bb 1b       	sub	r27, r27
    165a:	fd 01       	movw	r30, r26
    165c:	0d c0       	rjmp	.+26     	; 0x1678 <__udivmodsi4_ep>

0000165e <__udivmodsi4_loop>:
    165e:	aa 1f       	adc	r26, r26
    1660:	bb 1f       	adc	r27, r27
    1662:	ee 1f       	adc	r30, r30
    1664:	ff 1f       	adc	r31, r31
    1666:	a2 17       	cp	r26, r18
    1668:	b3 07       	cpc	r27, r19
    166a:	e4 07       	cpc	r30, r20
    166c:	f5 07       	cpc	r31, r21
    166e:	20 f0       	brcs	.+8      	; 0x1678 <__udivmodsi4_ep>
    1670:	a2 1b       	sub	r26, r18
    1672:	b3 0b       	sbc	r27, r19
    1674:	e4 0b       	sbc	r30, r20
    1676:	f5 0b       	sbc	r31, r21

00001678 <__udivmodsi4_ep>:
    1678:	66 1f       	adc	r22, r22
    167a:	77 1f       	adc	r23, r23
    167c:	88 1f       	adc	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	1a 94       	dec	r1
    1682:	69 f7       	brne	.-38     	; 0x165e <__udivmodsi4_loop>
    1684:	60 95       	com	r22
    1686:	70 95       	com	r23
    1688:	80 95       	com	r24
    168a:	90 95       	com	r25
    168c:	9b 01       	movw	r18, r22
    168e:	ac 01       	movw	r20, r24
    1690:	bd 01       	movw	r22, r26
    1692:	cf 01       	movw	r24, r30
    1694:	08 95       	ret

00001696 <__tablejump2__>:
    1696:	ee 0f       	add	r30, r30
    1698:	ff 1f       	adc	r31, r31
    169a:	05 90       	lpm	r0, Z+
    169c:	f4 91       	lpm	r31, Z
    169e:	e0 2d       	mov	r30, r0
    16a0:	09 94       	ijmp

000016a2 <atoi>:
    16a2:	fc 01       	movw	r30, r24
    16a4:	88 27       	eor	r24, r24
    16a6:	99 27       	eor	r25, r25
    16a8:	e8 94       	clt
    16aa:	21 91       	ld	r18, Z+
    16ac:	20 32       	cpi	r18, 0x20	; 32
    16ae:	e9 f3       	breq	.-6      	; 0x16aa <atoi+0x8>
    16b0:	29 30       	cpi	r18, 0x09	; 9
    16b2:	10 f0       	brcs	.+4      	; 0x16b8 <atoi+0x16>
    16b4:	2e 30       	cpi	r18, 0x0E	; 14
    16b6:	c8 f3       	brcs	.-14     	; 0x16aa <atoi+0x8>
    16b8:	2b 32       	cpi	r18, 0x2B	; 43
    16ba:	41 f0       	breq	.+16     	; 0x16cc <atoi+0x2a>
    16bc:	2d 32       	cpi	r18, 0x2D	; 45
    16be:	39 f4       	brne	.+14     	; 0x16ce <atoi+0x2c>
    16c0:	68 94       	set
    16c2:	04 c0       	rjmp	.+8      	; 0x16cc <atoi+0x2a>
    16c4:	0e 94 c7 0b 	call	0x178e	; 0x178e <__mulhi_const_10>
    16c8:	82 0f       	add	r24, r18
    16ca:	91 1d       	adc	r25, r1
    16cc:	21 91       	ld	r18, Z+
    16ce:	20 53       	subi	r18, 0x30	; 48
    16d0:	2a 30       	cpi	r18, 0x0A	; 10
    16d2:	c0 f3       	brcs	.-16     	; 0x16c4 <atoi+0x22>
    16d4:	1e f4       	brtc	.+6      	; 0x16dc <atoi+0x3a>
    16d6:	90 95       	com	r25
    16d8:	81 95       	neg	r24
    16da:	9f 4f       	sbci	r25, 0xFF	; 255
    16dc:	08 95       	ret

000016de <memcpy_P>:
    16de:	fb 01       	movw	r30, r22
    16e0:	dc 01       	movw	r26, r24
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <memcpy_P+0xa>
    16e4:	05 90       	lpm	r0, Z+
    16e6:	0d 92       	st	X+, r0
    16e8:	41 50       	subi	r20, 0x01	; 1
    16ea:	50 40       	sbci	r21, 0x00	; 0
    16ec:	d8 f7       	brcc	.-10     	; 0x16e4 <memcpy_P+0x6>
    16ee:	08 95       	ret

000016f0 <strtok>:
    16f0:	46 e3       	ldi	r20, 0x36	; 54
    16f2:	51 e0       	ldi	r21, 0x01	; 1
    16f4:	0e 94 a0 0b 	call	0x1740	; 0x1740 <strtok_r>
    16f8:	08 95       	ret

000016fa <strchr>:
    16fa:	fc 01       	movw	r30, r24
    16fc:	81 91       	ld	r24, Z+
    16fe:	86 17       	cp	r24, r22
    1700:	21 f0       	breq	.+8      	; 0x170a <strchr+0x10>
    1702:	88 23       	and	r24, r24
    1704:	d9 f7       	brne	.-10     	; 0x16fc <strchr+0x2>
    1706:	99 27       	eor	r25, r25
    1708:	08 95       	ret
    170a:	31 97       	sbiw	r30, 0x01	; 1
    170c:	cf 01       	movw	r24, r30
    170e:	08 95       	ret

00001710 <strcmp>:
    1710:	fb 01       	movw	r30, r22
    1712:	dc 01       	movw	r26, r24
    1714:	8d 91       	ld	r24, X+
    1716:	01 90       	ld	r0, Z+
    1718:	80 19       	sub	r24, r0
    171a:	01 10       	cpse	r0, r1
    171c:	d9 f3       	breq	.-10     	; 0x1714 <strcmp+0x4>
    171e:	99 0b       	sbc	r25, r25
    1720:	08 95       	ret

00001722 <strncpy>:
    1722:	fb 01       	movw	r30, r22
    1724:	dc 01       	movw	r26, r24
    1726:	41 50       	subi	r20, 0x01	; 1
    1728:	50 40       	sbci	r21, 0x00	; 0
    172a:	48 f0       	brcs	.+18     	; 0x173e <strncpy+0x1c>
    172c:	01 90       	ld	r0, Z+
    172e:	0d 92       	st	X+, r0
    1730:	00 20       	and	r0, r0
    1732:	c9 f7       	brne	.-14     	; 0x1726 <strncpy+0x4>
    1734:	01 c0       	rjmp	.+2      	; 0x1738 <strncpy+0x16>
    1736:	1d 92       	st	X+, r1
    1738:	41 50       	subi	r20, 0x01	; 1
    173a:	50 40       	sbci	r21, 0x00	; 0
    173c:	e0 f7       	brcc	.-8      	; 0x1736 <strncpy+0x14>
    173e:	08 95       	ret

00001740 <strtok_r>:
    1740:	fa 01       	movw	r30, r20
    1742:	a1 91       	ld	r26, Z+
    1744:	b0 81       	ld	r27, Z
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	19 f4       	brne	.+6      	; 0x1750 <strtok_r+0x10>
    174a:	10 97       	sbiw	r26, 0x00	; 0
    174c:	e1 f0       	breq	.+56     	; 0x1786 <strtok_r+0x46>
    174e:	cd 01       	movw	r24, r26
    1750:	dc 01       	movw	r26, r24
    1752:	cd 01       	movw	r24, r26
    1754:	0d 90       	ld	r0, X+
    1756:	00 20       	and	r0, r0
    1758:	11 f4       	brne	.+4      	; 0x175e <strtok_r+0x1e>
    175a:	c0 01       	movw	r24, r0
    175c:	13 c0       	rjmp	.+38     	; 0x1784 <strtok_r+0x44>
    175e:	fb 01       	movw	r30, r22
    1760:	21 91       	ld	r18, Z+
    1762:	22 23       	and	r18, r18
    1764:	19 f0       	breq	.+6      	; 0x176c <strtok_r+0x2c>
    1766:	20 15       	cp	r18, r0
    1768:	d9 f7       	brne	.-10     	; 0x1760 <strtok_r+0x20>
    176a:	f3 cf       	rjmp	.-26     	; 0x1752 <strtok_r+0x12>
    176c:	fb 01       	movw	r30, r22
    176e:	21 91       	ld	r18, Z+
    1770:	20 15       	cp	r18, r0
    1772:	19 f4       	brne	.+6      	; 0x177a <strtok_r+0x3a>
    1774:	1e 92       	st	-X, r1
    1776:	11 96       	adiw	r26, 0x01	; 1
    1778:	06 c0       	rjmp	.+12     	; 0x1786 <strtok_r+0x46>
    177a:	22 23       	and	r18, r18
    177c:	c1 f7       	brne	.-16     	; 0x176e <strtok_r+0x2e>
    177e:	0d 90       	ld	r0, X+
    1780:	00 20       	and	r0, r0
    1782:	a1 f7       	brne	.-24     	; 0x176c <strtok_r+0x2c>
    1784:	d0 01       	movw	r26, r0
    1786:	fa 01       	movw	r30, r20
    1788:	a1 93       	st	Z+, r26
    178a:	b0 83       	st	Z, r27
    178c:	08 95       	ret

0000178e <__mulhi_const_10>:
    178e:	7a e0       	ldi	r23, 0x0A	; 10
    1790:	97 9f       	mul	r25, r23
    1792:	90 2d       	mov	r25, r0
    1794:	87 9f       	mul	r24, r23
    1796:	80 2d       	mov	r24, r0
    1798:	91 0d       	add	r25, r1
    179a:	11 24       	eor	r1, r1
    179c:	08 95       	ret

0000179e <__do_global_dtors>:
    179e:	12 e0       	ldi	r17, 0x02	; 2
    17a0:	c2 e3       	ldi	r28, 0x32	; 50
    17a2:	d2 e0       	ldi	r29, 0x02	; 2
    17a4:	04 c0       	rjmp	.+8      	; 0x17ae <__do_global_dtors+0x10>
    17a6:	fe 01       	movw	r30, r28
    17a8:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__tablejump2__>
    17ac:	21 96       	adiw	r28, 0x01	; 1
    17ae:	c3 33       	cpi	r28, 0x33	; 51
    17b0:	d1 07       	cpc	r29, r17
    17b2:	c9 f7       	brne	.-14     	; 0x17a6 <__do_global_dtors+0x8>
    17b4:	f8 94       	cli

000017b6 <__stop_program>:
    17b6:	ff cf       	rjmp	.-2      	; 0x17b6 <__stop_program>
