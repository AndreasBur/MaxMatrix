
Led_Anzeige.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  000025da  0000266e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a5  00800162  00800162  000026d0  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000026d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002730  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000560  00000000  00000000  00002770  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c9da  00000000  00000000  00002cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d85  00000000  00000000  0000f6aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000036bc  00000000  00000000  0001142f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013f4  00000000  00000000  00014aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002dc2  00000000  00000000  00015ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008a62  00000000  00000000  00018ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007f8  00000000  00000000  00021704  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 aa 02 	jmp	0x554	; 0x554 <__dtors_end>
       4:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
       8:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
       c:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      10:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      14:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      18:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      1c:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      20:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      24:	0c 94 37 0e 	jmp	0x1c6e	; 0x1c6e <__vector_9>
      28:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      2c:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      30:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      34:	0c 94 7d 0d 	jmp	0x1afa	; 0x1afa <__vector_13>
      38:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      3c:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      40:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__vector_16>
      44:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      48:	0c 94 91 0f 	jmp	0x1f22	; 0x1f22 <__vector_18>
      4c:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__vector_19>
      50:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      54:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      58:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      5c:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      60:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      64:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	45 78       	andi	r20, 0x85	; 133
      6a:	61 6d       	ori	r22, 0xD1	; 209
      6c:	70 6c       	ori	r23, 0xC0	; 192
      6e:	65 3a       	cpi	r22, 0xA5	; 165
      70:	20 74       	andi	r18, 0x40	; 64
      72:	65 78       	andi	r22, 0x85	; 133
      74:	74 3d       	cpi	r23, 0xD4	; 212
      76:	65 78       	andi	r22, 0x85	; 133
      78:	61 6d       	ori	r22, 0xD1	; 209
      7a:	70 6c       	ori	r23, 0xC0	; 192
      7c:	65 20       	and	r6, r5
      7e:	74 65       	ori	r23, 0x54	; 84
      80:	78 74       	andi	r23, 0x48	; 72
	...

00000083 <_ZZ9printHelpvE3__c_1>:
      83:	63 6f 6d 6d 61 6e 64 20 61 6e 64 20 76 61 6c 75     command and valu
      93:	65 20 68 61 73 20 74 6f 20 62 65 20 73 65 70 61     e has to be sepa
      a3:	72 61 74 65 64 20 62 79 20 61 6e 20 65 71 75 61     rated by an equa
      b3:	6c 20 73 69 67 6e 00                                l sign.

000000ba <_ZZ9printHelpvE3__c_0>:
      ba:	6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 73 20 61     known commands a
      ca:	72 65 3a 20 74 65 78 74 2c 20 69 6e 74 65 6e 73     re: text, intens
      da:	69 74 79 20 61 6e 64 20 73 70 65 65 64 00           ity and speed.

000000e8 <_ZZ9printHelpvE3__c>:
      e8:	63 6f 6d 6d 61 6e 64 20 64 6f 65 73 20 6e 6f 74     command does not
      f8:	20 6d 61 74 63 68 00                                 match.

000000ff <_ZZ15uartInputHandlevE3__c_4>:
      ff:	73 70 61 63 65 42 65 74 77 65 65 6e 43 68 61 72     spaceBetweenChar
     10f:	73 20 72 61 6e 67 65 20 4d 41 58 4d 41 54 52 49     s range MAXMATRI
     11f:	58 5f 53 50 41 43 45 5f 42 45 54 57 45 45 4e 5f     X_SPACE_BETWEEN_
     12f:	43 48 41 52 53 5f 4d 49 4e 5f 56 41 4c 55 45 20     CHARS_MIN_VALUE 
     13f:	2e 2e 2e 20 4d 41 58 4d 41 54 52 49 58 5f 53 50     ... MAXMATRIX_SP
     14f:	41 43 45 5f 42 45 54 57 45 45 4e 5f 43 48 41 52     ACE_BETWEEN_CHAR
     15f:	53 5f 4d 41 58 5f 56 41 4c 55 45 00                 S_MAX_VALUE.

0000016b <_ZZ15uartInputHandlevE3__c_3>:
     16b:	76 61 6c 75 65 20 6f 75 74 20 6f 66 20 72 61 6e     value out of ran
     17b:	67 65 00                                            ge.

0000017e <_ZZ15uartInputHandlevE3__c_2>:
     17e:	73 70 65 65 64 20 72 61 6e 67 65 20 4d 41 58 4d     speed range MAXM
     18e:	41 54 52 49 58 5f 53 50 45 45 44 5f 4d 49 4e 5f     ATRIX_SPEED_MIN_
     19e:	56 41 4c 55 45 20 2e 2e 2e 20 4d 41 58 4d 41 54     VALUE ... MAXMAT
     1ae:	52 49 58 5f 53 50 45 45 44 5f 4d 41 58 5f 56 41     RIX_SPEED_MAX_VA
     1be:	4c 55 45 00                                         LUE.

000001c2 <_ZZ15uartInputHandlevE3__c_1>:
     1c2:	76 61 6c 75 65 20 6f 75 74 20 6f 66 20 72 61 6e     value out of ran
     1d2:	67 65 00                                            ge.

000001d5 <_ZZ15uartInputHandlevE3__c_0>:
     1d5:	69 6e 74 65 6e 73 69 74 79 20 72 61 6e 67 65 20     intensity range 
     1e5:	4d 41 58 4d 41 54 52 49 58 5f 49 4e 54 45 4e 53     MAXMATRIX_INTENS
     1f5:	49 54 59 5f 4d 49 4e 5f 56 41 4c 55 45 20 2e 2e     ITY_MIN_VALUE ..
     205:	2e 20 4d 41 58 4d 41 54 52 49 58 5f 49 4e 54 45     . MAXMATRIX_INTE
     215:	4e 53 49 54 59 5f 4d 41 58 5f 56 41 4c 55 45 00     NSITY_MAX_VALUE.

00000225 <_ZZ15uartInputHandlevE3__c>:
     225:	76 61 6c 75 65 20 6f 75 74 20 6f 66 20 72 61 6e     value out of ran
     235:	67 65 00                                            ge.

00000238 <_ZL11SpriteTable>:
     238:	03 08 00 00 00 00 00 01 08 5f 00 00 00 00 03 08     ........._......
     248:	03 00 03 00 00 05 08 14 3e 14 3e 14 04 08 24 6a     ........>.>...$j
     258:	2b 12 00 05 08 63 13 08 64 63 05 08 36 49 56 20     +....c..dc..6IV 
     268:	50 01 08 03 00 00 00 00 03 08 1c 22 41 00 00 03     P.........."A...
     278:	08 41 22 1c 00 00 05 08 28 18 0e 18 28 05 08 08     .A".....(...(...
     288:	08 3e 08 08 02 08 b0 70 00 00 00 04 08 08 08 08     .>.....p........
     298:	08 00 02 08 60 60 00 00 00 04 08 60 18 06 01 00     ....``.....`....
     2a8:	04 08 3e 41 41 3e 00 03 08 42 7f 40 00 00 04 08     ..>AA>...B.@....
     2b8:	62 51 49 46 00 04 08 22 41 49 36 00 04 08 18 14     bQIF..."AI6.....
     2c8:	12 7f 00 04 08 27 45 45 39 00 04 08 3e 49 49 30     .....'EE9...>II0
     2d8:	00 04 08 61 11 09 07 00 04 08 36 49 49 36 00 04     ...a......6II6..
     2e8:	08 06 49 49 3e 00 02 08 50 00 00 00 00 02 08 80     ..II>...P.......
     2f8:	50 00 00 00 03 08 10 28 44 00 00 03 08 14 14 14     P......(D.......
     308:	00 00 03 08 44 28 10 00 00 04 08 02 59 09 06 00     ....D(......Y...
     318:	05 08 3e 49 55 5d 0e 04 08 7e 11 11 7e 00 04 08     ..>IU]...~..~...
     328:	7f 49 49 36 00 04 08 3e 41 41 22 00 04 08 7f 41     .II6...>AA"....A
     338:	41 3e 00 04 08 7f 49 49 41 00 04 08 7f 09 09 01     A>....IIA.......
     348:	00 04 08 3e 41 49 7a 00 04 08 7f 08 08 7f 00 03     ...>AIz.........
     358:	08 41 7f 41 00 00 04 08 30 40 41 3f 00 04 08 7f     .A.A....0@A?....
     368:	08 14 63 00 04 08 7f 40 40 40 00 05 08 7f 02 0c     ..c....@@@......
     378:	02 7f 05 08 7f 04 08 10 7f 04 08 3e 41 41 3e 00     ...........>AA>.
     388:	04 08 7f 09 09 06 00 04 08 3e 41 41 be 00 04 08     .........>AA....
     398:	7f 09 09 76 00 04 08 46 49 49 32 00 05 08 01 01     ...v...FII2.....
     3a8:	7f 01 01 04 08 3f 40 40 3f 00 05 08 0f 30 40 30     .....?@@?....0@0
     3b8:	0f 05 08 3f 40 38 40 3f 05 08 63 14 08 14 63 05     ...?@8@?..c...c.
     3c8:	08 07 08 70 08 07 04 08 61 51 49 47 00 02 08 7f     ...p....aQIG....
     3d8:	41 00 00 00 04 08 01 06 18 60 00 02 08 41 7f 00     A........`...A..
     3e8:	00 00 03 08 02 01 02 00 00 04 08 40 40 40 40 00     ...........@@@@.
     3f8:	02 08 01 02 00 00 00 04 08 20 54 54 78 00 04 08     ......... TTx...
     408:	7f 44 44 38 00 04 08 38 44 44 28 00 04 08 38 44     .DD8...8DD(...8D
     418:	44 7f 00 04 08 38 54 54 18 00 03 08 04 7e 05 00     D....8TT.....~..
     428:	00 04 08 98 a4 a4 78 00 04 08 7f 04 04 78 00 03     ......x......x..
     438:	08 44 7d 40 00 00 04 08 40 80 84 7d 00 04 08 7f     .D}@....@..}....
     448:	10 28 44 00 03 08 41 7f 40 00 00 05 08 7c 04 7c     .(D...A.@....|.|
     458:	04 78 04 08 7c 04 04 78 00 04 08 38 44 44 38 00     .x..|..x...8DD8.
     468:	04 08 fc 24 24 18 00 04 08 18 24 24 fc 00 04 08     ...$$.....$$....
     478:	7c 08 04 04 00 04 08 48 54 54 24 00 03 08 04 3f     |......HTT$....?
     488:	44 00 00 04 08 3c 40 40 7c 00 05 08 1c 20 40 20     D....<@@|.... @ 
     498:	1c 05 08 3c 40 3c 40 3c 05 08 44 28 10 28 44 04     ...<@<@<..D(.(D.
     4a8:	08 9c a0 a0 7c 00 03 08 64 54 4c 00 00 03 08 08     ....|...dTL.....
     4b8:	36 41 00 00 01 08 7f 00 00 00 00 03 08 41 36 08     6A...........A6.
     4c8:	00 00 04 08 08 04 08 04 00 04 08 7c 13 13 7c 00     ...........|..|.
     4d8:	04 08 3c 43 43 3c 00 04 08 3e 41 41 3e 00 04 08     ..<CC<...>AA>...
     4e8:	20 56 56 78 00 04 08 38 46 46 38 00 04 08 3c 42      VVx...8FF8...<B
     4f8:	42 7c 00                                            B|.

000004fb <digital_pin_to_timer_PGM>:
     4fb:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     50b:	00 00 00 00                                         ....

0000050f <digital_pin_to_bit_mask_PGM>:
     50f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     51f:	04 08 10 20                                         ... 

00000523 <digital_pin_to_port_PGM>:
     523:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     533:	03 03 03 03                                         ....

00000537 <port_to_output_PGM>:
     537:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000541 <port_to_mode_PGM>:
     541:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

0000054c <__ctors_start>:
     54c:	06 05       	cpc	r16, r6
     54e:	5e 0e       	add	r5, r30
     550:	f3 0f       	add	r31, r19

00000552 <__ctors_end>:
     552:	0d 05       	cpc	r16, r13

00000554 <__dtors_end>:
     554:	11 24       	eor	r1, r1
     556:	1f be       	out	0x3f, r1	; 63
     558:	cf ef       	ldi	r28, 0xFF	; 255
     55a:	d8 e0       	ldi	r29, 0x08	; 8
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	cd bf       	out	0x3d, r28	; 61

00000560 <__do_copy_data>:
     560:	11 e0       	ldi	r17, 0x01	; 1
     562:	a0 e0       	ldi	r26, 0x00	; 0
     564:	b1 e0       	ldi	r27, 0x01	; 1
     566:	ea ed       	ldi	r30, 0xDA	; 218
     568:	f5 e2       	ldi	r31, 0x25	; 37
     56a:	02 c0       	rjmp	.+4      	; 0x570 <__do_copy_data+0x10>
     56c:	05 90       	lpm	r0, Z+
     56e:	0d 92       	st	X+, r0
     570:	a2 36       	cpi	r26, 0x62	; 98
     572:	b1 07       	cpc	r27, r17
     574:	d9 f7       	brne	.-10     	; 0x56c <__do_copy_data+0xc>

00000576 <__do_clear_bss>:
     576:	23 e0       	ldi	r18, 0x03	; 3
     578:	a2 e6       	ldi	r26, 0x62	; 98
     57a:	b1 e0       	ldi	r27, 0x01	; 1
     57c:	01 c0       	rjmp	.+2      	; 0x580 <.do_clear_bss_start>

0000057e <.do_clear_bss_loop>:
     57e:	1d 92       	st	X+, r1

00000580 <.do_clear_bss_start>:
     580:	a7 30       	cpi	r26, 0x07	; 7
     582:	b2 07       	cpc	r27, r18
     584:	e1 f7       	brne	.-8      	; 0x57e <.do_clear_bss_loop>

00000586 <__do_global_ctors>:
     586:	12 e0       	ldi	r17, 0x02	; 2
     588:	c9 ea       	ldi	r28, 0xA9	; 169
     58a:	d2 e0       	ldi	r29, 0x02	; 2
     58c:	04 c0       	rjmp	.+8      	; 0x596 <__do_global_ctors+0x10>
     58e:	21 97       	sbiw	r28, 0x01	; 1
     590:	fe 01       	movw	r30, r28
     592:	0e 94 4d 12 	call	0x249a	; 0x249a <__tablejump2__>
     596:	c6 3a       	cpi	r28, 0xA6	; 166
     598:	d1 07       	cpc	r29, r17
     59a:	c9 f7       	brne	.-14     	; 0x58e <__do_global_ctors+0x8>
     59c:	0e 94 21 10 	call	0x2042	; 0x2042 <main>
     5a0:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <__do_global_dtors>

000005a4 <__bad_interrupt>:
     5a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005a8 <_Z8systTickv>:
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <Timer1Overflow>
     5ae:	08 95       	ret

000005b0 <setup>:
     5b0:	40 e4       	ldi	r20, 0x40	; 64
     5b2:	5d e0       	ldi	r21, 0x0D	; 13
     5b4:	63 e0       	ldi	r22, 0x03	; 3
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	85 e5       	ldi	r24, 0x55	; 85
     5ba:	92 e0       	ldi	r25, 0x02	; 2
     5bc:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <_ZN8TimerOne10initializeEl>
     5c0:	2f ef       	ldi	r18, 0xFF	; 255
     5c2:	3f ef       	ldi	r19, 0xFF	; 255
     5c4:	a9 01       	movw	r20, r18
     5c6:	64 ed       	ldi	r22, 0xD4	; 212
     5c8:	72 e0       	ldi	r23, 0x02	; 2
     5ca:	85 e5       	ldi	r24, 0x55	; 85
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZN8TimerOne15attachInterruptEPFvvEl>
     5d2:	26 e0       	ldi	r18, 0x06	; 6
     5d4:	40 e8       	ldi	r20, 0x80	; 128
     5d6:	55 e2       	ldi	r21, 0x25	; 37
     5d8:	60 e0       	ldi	r22, 0x00	; 0
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	81 e6       	ldi	r24, 0x61	; 97
     5de:	92 e0       	ldi	r25, 0x02	; 2
     5e0:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN14HardwareSerial5beginEmh>
     5e4:	85 e6       	ldi	r24, 0x65	; 101
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN9MaxMatrix4initEv>
     5ec:	61 e0       	ldi	r22, 0x01	; 1
     5ee:	85 e6       	ldi	r24, 0x65	; 101
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	0e 94 05 06 	call	0xc0a	; 0xc0a <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType>
     5f6:	60 e0       	ldi	r22, 0x00	; 0
     5f8:	71 e0       	ldi	r23, 0x01	; 1
     5fa:	85 e6       	ldi	r24, 0x65	; 101
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN9MaxMatrix7setTextEPKc>
     602:	49 e5       	ldi	r20, 0x59	; 89
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	68 e0       	ldi	r22, 0x08	; 8
     608:	71 e0       	ldi	r23, 0x01	; 1
     60a:	86 e9       	ldi	r24, 0x96	; 150
     60c:	91 e0       	ldi	r25, 0x01	; 1
     60e:	0e 94 a2 12 	call	0x2544	; 0x2544 <strncpy>
     612:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <MaxMatrixText+0x59>
     616:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <UartInputComplete>
     61a:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <Timer1Overflow>
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <State>
     624:	08 95       	ret

00000626 <_Z9printHelpv>:
     626:	68 ee       	ldi	r22, 0xE8	; 232
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	81 e6       	ldi	r24, 0x61	; 97
     62c:	92 e0       	ldi	r25, 0x02	; 2
     62e:	0e 94 ab 10 	call	0x2156	; 0x2156 <_ZN5Print7printlnEPK19__FlashStringHelper>
     632:	6a eb       	ldi	r22, 0xBA	; 186
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	81 e6       	ldi	r24, 0x61	; 97
     638:	92 e0       	ldi	r25, 0x02	; 2
     63a:	0e 94 ab 10 	call	0x2156	; 0x2156 <_ZN5Print7printlnEPK19__FlashStringHelper>
     63e:	63 e8       	ldi	r22, 0x83	; 131
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	81 e6       	ldi	r24, 0x61	; 97
     644:	92 e0       	ldi	r25, 0x02	; 2
     646:	0e 94 ab 10 	call	0x2156	; 0x2156 <_ZN5Print7printlnEPK19__FlashStringHelper>
     64a:	68 e6       	ldi	r22, 0x68	; 104
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	81 e6       	ldi	r24, 0x61	; 97
     650:	92 e0       	ldi	r25, 0x02	; 2
     652:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <_ZN5Print7printlnEPK19__FlashStringHelper>

00000656 <_Z15uartInputHandlev>:
     656:	0f 93       	push	r16
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	cd b7       	in	r28, 0x3d	; 61
     660:	de b7       	in	r29, 0x3e	; 62
     662:	c2 57       	subi	r28, 0x72	; 114
     664:	d1 09       	sbc	r29, r1
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	f8 94       	cli
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	cd bf       	out	0x3d, r28	; 61
     670:	fe 01       	movw	r30, r28
     672:	e5 5a       	subi	r30, 0xA5	; 165
     674:	ff 4f       	sbci	r31, 0xFF	; 255
     676:	11 92       	st	Z+, r1
     678:	11 92       	st	Z+, r1
     67a:	11 92       	st	Z+, r1
     67c:	11 92       	st	Z+, r1
     67e:	86 e0       	ldi	r24, 0x06	; 6
     680:	df 01       	movw	r26, r30
     682:	1d 92       	st	X+, r1
     684:	8a 95       	dec	r24
     686:	e9 f7       	brne	.-6      	; 0x682 <_Z15uartInputHandlev+0x2c>
     688:	19 82       	std	Y+1, r1	; 0x01
     68a:	1a 82       	std	Y+2, r1	; 0x02
     68c:	1b 82       	std	Y+3, r1	; 0x03
     68e:	1c 82       	std	Y+4, r1	; 0x04
     690:	fe 01       	movw	r30, r28
     692:	35 96       	adiw	r30, 0x05	; 5
     694:	86 e5       	ldi	r24, 0x56	; 86
     696:	df 01       	movw	r26, r30
     698:	1d 92       	st	X+, r1
     69a:	8a 95       	dec	r24
     69c:	e9 f7       	brne	.-6      	; 0x698 <_Z15uartInputHandlev+0x42>
     69e:	8d e3       	ldi	r24, 0x3D	; 61
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	e2 96       	adiw	r28, 0x32	; 50
     6a4:	9f af       	std	Y+63, r25	; 0x3f
     6a6:	8e af       	std	Y+62, r24	; 0x3e
     6a8:	e2 97       	sbiw	r28, 0x32	; 50
     6aa:	8c e2       	ldi	r24, 0x2C	; 44
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	e0 96       	adiw	r28, 0x30	; 48
     6b0:	9f af       	std	Y+63, r25	; 0x3f
     6b2:	8e af       	std	Y+62, r24	; 0x3e
     6b4:	e0 97       	sbiw	r28, 0x30	; 48
     6b6:	6d e3       	ldi	r22, 0x3D	; 61
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	81 ef       	ldi	r24, 0xF1	; 241
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	0e 94 8e 12 	call	0x251c	; 0x251c <strchr>
     6c2:	89 2b       	or	r24, r25
     6c4:	09 f4       	brne	.+2      	; 0x6c8 <_Z15uartInputHandlev+0x72>
     6c6:	66 c1       	rjmp	.+716    	; 0x994 <__stack+0x95>
     6c8:	be 01       	movw	r22, r28
     6ca:	60 59       	subi	r22, 0x90	; 144
     6cc:	7f 4f       	sbci	r23, 0xFF	; 255
     6ce:	81 ef       	ldi	r24, 0xF1	; 241
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	0e 94 89 12 	call	0x2512	; 0x2512 <strtok>
     6d6:	00 97       	sbiw	r24, 0x00	; 0
     6d8:	59 f0       	breq	.+22     	; 0x6f0 <_Z15uartInputHandlev+0x9a>
     6da:	49 e0       	ldi	r20, 0x09	; 9
     6dc:	50 e0       	ldi	r21, 0x00	; 0
     6de:	bc 01       	movw	r22, r24
     6e0:	ce 01       	movw	r24, r28
     6e2:	85 5a       	subi	r24, 0xA5	; 165
     6e4:	9f 4f       	sbci	r25, 0xFF	; 255
     6e6:	0e 94 a2 12 	call	0x2544	; 0x2544 <strncpy>
     6ea:	a5 96       	adiw	r28, 0x25	; 37
     6ec:	1f ae       	std	Y+63, r1	; 0x3f
     6ee:	a5 97       	sbiw	r28, 0x25	; 37
     6f0:	be 01       	movw	r22, r28
     6f2:	60 59       	subi	r22, 0x90	; 144
     6f4:	7f 4f       	sbci	r23, 0xFF	; 255
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	0e 94 89 12 	call	0x2512	; 0x2512 <strtok>
     6fe:	00 97       	sbiw	r24, 0x00	; 0
     700:	51 f0       	breq	.+20     	; 0x716 <_Z15uartInputHandlev+0xc0>
     702:	49 e5       	ldi	r20, 0x59	; 89
     704:	50 e0       	ldi	r21, 0x00	; 0
     706:	bc 01       	movw	r22, r24
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	0e 94 a2 12 	call	0x2544	; 0x2544 <strncpy>
     710:	6b 96       	adiw	r28, 0x1b	; 27
     712:	1f ae       	std	Y+63, r1	; 0x3f
     714:	6b 97       	sbiw	r28, 0x1b	; 27
     716:	69 e1       	ldi	r22, 0x19	; 25
     718:	71 e0       	ldi	r23, 0x01	; 1
     71a:	ce 01       	movw	r24, r28
     71c:	85 5a       	subi	r24, 0xA5	; 165
     71e:	9f 4f       	sbci	r25, 0xFF	; 255
     720:	0e 94 99 12 	call	0x2532	; 0x2532 <strcmp>
     724:	89 2b       	or	r24, r25
     726:	e9 f4       	brne	.+58     	; 0x762 <_Z15uartInputHandlev+0x10c>
     728:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <State>
     72c:	82 30       	cpi	r24, 0x02	; 2
     72e:	19 f0       	breq	.+6      	; 0x736 <_Z15uartInputHandlev+0xe0>
     730:	82 e0       	ldi	r24, 0x02	; 2
     732:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <State>
     736:	49 e5       	ldi	r20, 0x59	; 89
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	be 01       	movw	r22, r28
     73c:	6f 5f       	subi	r22, 0xFF	; 255
     73e:	7f 4f       	sbci	r23, 0xFF	; 255
     740:	86 e9       	ldi	r24, 0x96	; 150
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	0e 94 a2 12 	call	0x2544	; 0x2544 <strncpy>
     748:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <MaxMatrixText+0x59>
     74c:	85 e6       	ldi	r24, 0x65	; 101
     74e:	91 e0       	ldi	r25, 0x01	; 1
     750:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN9MaxMatrix5clearEv>
     754:	66 e9       	ldi	r22, 0x96	; 150
     756:	71 e0       	ldi	r23, 0x01	; 1
     758:	85 e6       	ldi	r24, 0x65	; 101
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN9MaxMatrix16setTextWithShiftEPc>
     760:	22 c1       	rjmp	.+580    	; 0x9a6 <__stack+0xa7>
     762:	63 e2       	ldi	r22, 0x23	; 35
     764:	71 e0       	ldi	r23, 0x01	; 1
     766:	ce 01       	movw	r24, r28
     768:	85 5a       	subi	r24, 0xA5	; 165
     76a:	9f 4f       	sbci	r25, 0xFF	; 255
     76c:	0e 94 99 12 	call	0x2532	; 0x2532 <strcmp>
     770:	89 2b       	or	r24, r25
     772:	e9 f4       	brne	.+58     	; 0x7ae <_Z15uartInputHandlev+0x158>
     774:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <State>
     778:	81 30       	cpi	r24, 0x01	; 1
     77a:	19 f0       	breq	.+6      	; 0x782 <_Z15uartInputHandlev+0x12c>
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <State>
     782:	49 e5       	ldi	r20, 0x59	; 89
     784:	50 e0       	ldi	r21, 0x00	; 0
     786:	be 01       	movw	r22, r28
     788:	6f 5f       	subi	r22, 0xFF	; 255
     78a:	7f 4f       	sbci	r23, 0xFF	; 255
     78c:	86 e9       	ldi	r24, 0x96	; 150
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	0e 94 a2 12 	call	0x2544	; 0x2544 <strncpy>
     794:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <MaxMatrixText+0x59>
     798:	85 e6       	ldi	r24, 0x65	; 101
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN9MaxMatrix5clearEv>
     7a0:	66 e9       	ldi	r22, 0x96	; 150
     7a2:	71 e0       	ldi	r23, 0x01	; 1
     7a4:	85 e6       	ldi	r24, 0x65	; 101
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN9MaxMatrix7setTextEPKc>
     7ac:	fc c0       	rjmp	.+504    	; 0x9a6 <__stack+0xa7>
     7ae:	68 e2       	ldi	r22, 0x28	; 40
     7b0:	71 e0       	ldi	r23, 0x01	; 1
     7b2:	ce 01       	movw	r24, r28
     7b4:	85 5a       	subi	r24, 0xA5	; 165
     7b6:	9f 4f       	sbci	r25, 0xFF	; 255
     7b8:	0e 94 99 12 	call	0x2532	; 0x2532 <strcmp>
     7bc:	89 2b       	or	r24, r25
     7be:	d1 f4       	brne	.+52     	; 0x7f4 <_Z15uartInputHandlev+0x19e>
     7c0:	ce 01       	movw	r24, r28
     7c2:	01 96       	adiw	r24, 0x01	; 1
     7c4:	0e 94 62 12 	call	0x24c4	; 0x24c4 <atoi>
     7c8:	9c 01       	movw	r18, r24
     7ca:	21 50       	subi	r18, 0x01	; 1
     7cc:	31 09       	sbc	r19, r1
     7ce:	20 31       	cpi	r18, 0x10	; 16
     7d0:	31 05       	cpc	r19, r1
     7d2:	38 f4       	brcc	.+14     	; 0x7e2 <_Z15uartInputHandlev+0x18c>
     7d4:	6f ef       	ldi	r22, 0xFF	; 255
     7d6:	68 0f       	add	r22, r24
     7d8:	85 e6       	ldi	r24, 0x65	; 101
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZN9MaxMatrix12setIntensityEh>
     7e0:	e2 c0       	rjmp	.+452    	; 0x9a6 <__stack+0xa7>
     7e2:	65 e2       	ldi	r22, 0x25	; 37
     7e4:	72 e0       	ldi	r23, 0x02	; 2
     7e6:	81 e6       	ldi	r24, 0x61	; 97
     7e8:	92 e0       	ldi	r25, 0x02	; 2
     7ea:	0e 94 ab 10 	call	0x2156	; 0x2156 <_ZN5Print7printlnEPK19__FlashStringHelper>
     7ee:	65 ed       	ldi	r22, 0xD5	; 213
     7f0:	71 e0       	ldi	r23, 0x01	; 1
     7f2:	4a c0       	rjmp	.+148    	; 0x888 <_Z15uartInputHandlev+0x232>
     7f4:	62 e3       	ldi	r22, 0x32	; 50
     7f6:	71 e0       	ldi	r23, 0x01	; 1
     7f8:	ce 01       	movw	r24, r28
     7fa:	85 5a       	subi	r24, 0xA5	; 165
     7fc:	9f 4f       	sbci	r25, 0xFF	; 255
     7fe:	0e 94 99 12 	call	0x2532	; 0x2532 <strcmp>
     802:	89 2b       	or	r24, r25
     804:	11 f5       	brne	.+68     	; 0x84a <_Z15uartInputHandlev+0x1f4>
     806:	ce 01       	movw	r24, r28
     808:	01 96       	adiw	r24, 0x01	; 1
     80a:	0e 94 62 12 	call	0x24c4	; 0x24c4 <atoi>
     80e:	9c 01       	movw	r18, r24
     810:	21 50       	subi	r18, 0x01	; 1
     812:	31 09       	sbc	r19, r1
     814:	24 31       	cpi	r18, 0x14	; 20
     816:	31 05       	cpc	r19, r1
     818:	78 f4       	brcc	.+30     	; 0x838 <_Z15uartInputHandlev+0x1e2>
     81a:	a5 e1       	ldi	r26, 0x15	; 21
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	a8 1b       	sub	r26, r24
     820:	b9 0b       	sbc	r27, r25
     822:	20 e5       	ldi	r18, 0x50	; 80
     824:	33 ec       	ldi	r19, 0xC3	; 195
     826:	0e 94 46 12 	call	0x248c	; 0x248c <__usmulhisi3>
     82a:	ab 01       	movw	r20, r22
     82c:	bc 01       	movw	r22, r24
     82e:	85 e5       	ldi	r24, 0x55	; 85
     830:	92 e0       	ldi	r25, 0x02	; 2
     832:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <_ZN8TimerOne9setPeriodEl>
     836:	b7 c0       	rjmp	.+366    	; 0x9a6 <__stack+0xa7>
     838:	62 ec       	ldi	r22, 0xC2	; 194
     83a:	71 e0       	ldi	r23, 0x01	; 1
     83c:	81 e6       	ldi	r24, 0x61	; 97
     83e:	92 e0       	ldi	r25, 0x02	; 2
     840:	0e 94 ab 10 	call	0x2156	; 0x2156 <_ZN5Print7printlnEPK19__FlashStringHelper>
     844:	6e e7       	ldi	r22, 0x7E	; 126
     846:	71 e0       	ldi	r23, 0x01	; 1
     848:	1f c0       	rjmp	.+62     	; 0x888 <_Z15uartInputHandlev+0x232>
     84a:	68 e3       	ldi	r22, 0x38	; 56
     84c:	71 e0       	ldi	r23, 0x01	; 1
     84e:	ce 01       	movw	r24, r28
     850:	85 5a       	subi	r24, 0xA5	; 165
     852:	9f 4f       	sbci	r25, 0xFF	; 255
     854:	0e 94 99 12 	call	0x2532	; 0x2532 <strcmp>
     858:	89 2b       	or	r24, r25
     85a:	d9 f4       	brne	.+54     	; 0x892 <_Z15uartInputHandlev+0x23c>
     85c:	ce 01       	movw	r24, r28
     85e:	01 96       	adiw	r24, 0x01	; 1
     860:	0e 94 62 12 	call	0x24c4	; 0x24c4 <atoi>
     864:	8f 3f       	cpi	r24, 0xFF	; 255
     866:	91 05       	cpc	r25, r1
     868:	09 f0       	breq	.+2      	; 0x86c <_Z15uartInputHandlev+0x216>
     86a:	30 f4       	brcc	.+12     	; 0x878 <_Z15uartInputHandlev+0x222>
     86c:	68 2f       	mov	r22, r24
     86e:	85 e6       	ldi	r24, 0x65	; 101
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN9MaxMatrix20setSpaceBetweenCharsEh>
     876:	97 c0       	rjmp	.+302    	; 0x9a6 <__stack+0xa7>
     878:	6b e6       	ldi	r22, 0x6B	; 107
     87a:	71 e0       	ldi	r23, 0x01	; 1
     87c:	81 e6       	ldi	r24, 0x61	; 97
     87e:	92 e0       	ldi	r25, 0x02	; 2
     880:	0e 94 ab 10 	call	0x2156	; 0x2156 <_ZN5Print7printlnEPK19__FlashStringHelper>
     884:	6f ef       	ldi	r22, 0xFF	; 255
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	81 e6       	ldi	r24, 0x61	; 97
     88a:	92 e0       	ldi	r25, 0x02	; 2
     88c:	0e 94 ab 10 	call	0x2156	; 0x2156 <_ZN5Print7printlnEPK19__FlashStringHelper>
     890:	8a c0       	rjmp	.+276    	; 0x9a6 <__stack+0xa7>
     892:	6a e4       	ldi	r22, 0x4A	; 74
     894:	71 e0       	ldi	r23, 0x01	; 1
     896:	ce 01       	movw	r24, r28
     898:	85 5a       	subi	r24, 0xA5	; 165
     89a:	9f 4f       	sbci	r25, 0xFF	; 255
     89c:	0e 94 99 12 	call	0x2532	; 0x2532 <strcmp>
     8a0:	89 2b       	or	r24, r25
     8a2:	09 f0       	breq	.+2      	; 0x8a6 <_Z15uartInputHandlev+0x250>
     8a4:	77 c0       	rjmp	.+238    	; 0x994 <__stack+0x95>
     8a6:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <State>
     8aa:	81 30       	cpi	r24, 0x01	; 1
     8ac:	39 f0       	breq	.+14     	; 0x8bc <_Z15uartInputHandlev+0x266>
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <State>
     8b4:	85 e6       	ldi	r24, 0x65	; 101
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN9MaxMatrix5clearEv>
     8bc:	ae 96       	adiw	r28, 0x2e	; 46
     8be:	1d ae       	std	Y+61, r1	; 0x3d
     8c0:	1e ae       	std	Y+62, r1	; 0x3e
     8c2:	1f ae       	std	Y+63, r1	; 0x3f
     8c4:	ae 97       	sbiw	r28, 0x2e	; 46
     8c6:	ab 96       	adiw	r28, 0x2b	; 43
     8c8:	1d ae       	std	Y+61, r1	; 0x3d
     8ca:	1e ae       	std	Y+62, r1	; 0x3e
     8cc:	1f ae       	std	Y+63, r1	; 0x3f
     8ce:	ab 97       	sbiw	r28, 0x2b	; 43
     8d0:	a8 96       	adiw	r28, 0x28	; 40
     8d2:	1d ae       	std	Y+61, r1	; 0x3d
     8d4:	1e ae       	std	Y+62, r1	; 0x3e
     8d6:	1f ae       	std	Y+63, r1	; 0x3f
     8d8:	a8 97       	sbiw	r28, 0x28	; 40
     8da:	be 01       	movw	r22, r28
     8dc:	62 59       	subi	r22, 0x92	; 146
     8de:	7f 4f       	sbci	r23, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	01 96       	adiw	r24, 0x01	; 1
     8e4:	0e 94 89 12 	call	0x2512	; 0x2512 <strtok>
     8e8:	00 97       	sbiw	r24, 0x00	; 0
     8ea:	59 f0       	breq	.+22     	; 0x902 <__stack+0x3>
     8ec:	42 e0       	ldi	r20, 0x02	; 2
     8ee:	50 e0       	ldi	r21, 0x00	; 0
     8f0:	bc 01       	movw	r22, r24
     8f2:	ce 01       	movw	r24, r28
     8f4:	85 59       	subi	r24, 0x95	; 149
     8f6:	9f 4f       	sbci	r25, 0xFF	; 255
     8f8:	0e 94 a2 12 	call	0x2544	; 0x2544 <strncpy>
     8fc:	ae 96       	adiw	r28, 0x2e	; 46
     8fe:	1f ae       	std	Y+63, r1	; 0x3f
     900:	ae 97       	sbiw	r28, 0x2e	; 46
     902:	be 01       	movw	r22, r28
     904:	62 59       	subi	r22, 0x92	; 146
     906:	7f 4f       	sbci	r23, 0xFF	; 255
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	0e 94 89 12 	call	0x2512	; 0x2512 <strtok>
     910:	00 97       	sbiw	r24, 0x00	; 0
     912:	59 f0       	breq	.+22     	; 0x92a <__stack+0x2b>
     914:	42 e0       	ldi	r20, 0x02	; 2
     916:	50 e0       	ldi	r21, 0x00	; 0
     918:	bc 01       	movw	r22, r24
     91a:	ce 01       	movw	r24, r28
     91c:	88 59       	subi	r24, 0x98	; 152
     91e:	9f 4f       	sbci	r25, 0xFF	; 255
     920:	0e 94 a2 12 	call	0x2544	; 0x2544 <strncpy>
     924:	ab 96       	adiw	r28, 0x2b	; 43
     926:	1f ae       	std	Y+63, r1	; 0x3f
     928:	ab 97       	sbiw	r28, 0x2b	; 43
     92a:	be 01       	movw	r22, r28
     92c:	62 59       	subi	r22, 0x92	; 146
     92e:	7f 4f       	sbci	r23, 0xFF	; 255
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 89 12 	call	0x2512	; 0x2512 <strtok>
     938:	00 97       	sbiw	r24, 0x00	; 0
     93a:	59 f0       	breq	.+22     	; 0x952 <__stack+0x53>
     93c:	42 e0       	ldi	r20, 0x02	; 2
     93e:	50 e0       	ldi	r21, 0x00	; 0
     940:	bc 01       	movw	r22, r24
     942:	ce 01       	movw	r24, r28
     944:	8b 59       	subi	r24, 0x9B	; 155
     946:	9f 4f       	sbci	r25, 0xFF	; 255
     948:	0e 94 a2 12 	call	0x2544	; 0x2544 <strncpy>
     94c:	a8 96       	adiw	r28, 0x28	; 40
     94e:	1f ae       	std	Y+63, r1	; 0x3f
     950:	a8 97       	sbiw	r28, 0x28	; 40
     952:	ce 01       	movw	r24, r28
     954:	8b 59       	subi	r24, 0x9B	; 155
     956:	9f 4f       	sbci	r25, 0xFF	; 255
     958:	0e 94 62 12 	call	0x24c4	; 0x24c4 <atoi>
     95c:	8c 01       	movw	r16, r24
     95e:	ce 01       	movw	r24, r28
     960:	88 59       	subi	r24, 0x98	; 152
     962:	9f 4f       	sbci	r25, 0xFF	; 255
     964:	0e 94 62 12 	call	0x24c4	; 0x24c4 <atoi>
     968:	48 2f       	mov	r20, r24
     96a:	ce 01       	movw	r24, r28
     96c:	85 59       	subi	r24, 0x95	; 149
     96e:	9f 4f       	sbci	r25, 0xFF	; 255
     970:	e3 96       	adiw	r28, 0x33	; 51
     972:	4f af       	std	Y+63, r20	; 0x3f
     974:	e3 97       	sbiw	r28, 0x33	; 51
     976:	0e 94 62 12 	call	0x24c4	; 0x24c4 <atoi>
     97a:	68 2f       	mov	r22, r24
     97c:	21 e0       	ldi	r18, 0x01	; 1
     97e:	e3 96       	adiw	r28, 0x33	; 51
     980:	4f ad       	ldd	r20, Y+63	; 0x3f
     982:	e3 97       	sbiw	r28, 0x33	; 51
     984:	01 2b       	or	r16, r17
     986:	09 f4       	brne	.+2      	; 0x98a <__stack+0x8b>
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	85 e6       	ldi	r24, 0x65	; 101
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <_ZN9MaxMatrix6setDotEhhb>
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__stack+0xa7>
     994:	be 01       	movw	r22, r28
     996:	65 5a       	subi	r22, 0xA5	; 165
     998:	7f 4f       	sbci	r23, 0xFF	; 255
     99a:	81 e6       	ldi	r24, 0x61	; 97
     99c:	92 e0       	ldi	r25, 0x02	; 2
     99e:	0e 94 bd 10 	call	0x217a	; 0x217a <_ZN5Print7printlnEPKc>
     9a2:	0e 94 13 03 	call	0x626	; 0x626 <_Z9printHelpv>
     9a6:	ce 58       	subi	r28, 0x8E	; 142
     9a8:	df 4f       	sbci	r29, 0xFF	; 255
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	08 95       	ret

000009be <loop>:
     9be:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <UartInputComplete>
     9c2:	88 23       	and	r24, r24
     9c4:	31 f0       	breq	.+12     	; 0x9d2 <loop+0x14>
     9c6:	0e 94 2b 03 	call	0x656	; 0x656 <_Z15uartInputHandlev>
     9ca:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <UartInput>
     9ce:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <UartInputComplete>
     9d2:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <Timer1Overflow>
     9d6:	88 23       	and	r24, r24
     9d8:	c1 f0       	breq	.+48     	; 0xa0a <loop+0x4c>
     9da:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <State>
     9de:	82 30       	cpi	r24, 0x02	; 2
     9e0:	a1 f4       	brne	.+40     	; 0xa0a <loop+0x4c>
     9e2:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <Matrix+0x3>
     9e6:	83 30       	cpi	r24, 0x03	; 3
     9e8:	21 f4       	brne	.+8      	; 0x9f2 <loop+0x34>
     9ea:	85 e6       	ldi	r24, 0x65	; 101
     9ec:	91 e0       	ldi	r25, 0x01	; 1
     9ee:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <_ZN9MaxMatrix9shiftTaskEv>
     9f2:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <Matrix+0x3>
     9f6:	82 30       	cpi	r24, 0x02	; 2
     9f8:	31 f4       	brne	.+12     	; 0xa06 <loop+0x48>
     9fa:	66 e9       	ldi	r22, 0x96	; 150
     9fc:	71 e0       	ldi	r23, 0x01	; 1
     9fe:	85 e6       	ldi	r24, 0x65	; 101
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN9MaxMatrix16setTextWithShiftEPc>
     a06:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <Timer1Overflow>
     a0a:	08 95       	ret

00000a0c <_GLOBAL__sub_I_UartInput>:
     a0c:	2b e0       	ldi	r18, 0x0B	; 11
     a0e:	4a e0       	ldi	r20, 0x0A	; 10
     a10:	6c e0       	ldi	r22, 0x0C	; 12
     a12:	85 e6       	ldi	r24, 0x65	; 101
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	0c 94 39 05 	jmp	0xa72	; 0xa72 <_ZN9MaxMatrixC1Ehhh>

00000a1a <_GLOBAL__sub_D_UartInput>:
     a1a:	85 e6       	ldi	r24, 0x65	; 101
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	0c 94 56 05 	jmp	0xaac	; 0xaac <_ZN9MaxMatrixD1Ev>

00000a22 <_Z11serialEventv>:
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	c1 ef       	ldi	r28, 0xF1	; 241
     a2a:	d1 e0       	ldi	r29, 0x01	; 1
     a2c:	11 e0       	ldi	r17, 0x01	; 1
     a2e:	81 e6       	ldi	r24, 0x61	; 97
     a30:	92 e0       	ldi	r25, 0x02	; 2
     a32:	0e 94 65 0e 	call	0x1cca	; 0x1cca <_ZN14HardwareSerial9availableEv>
     a36:	89 2b       	or	r24, r25
     a38:	c1 f0       	breq	.+48     	; 0xa6a <_Z11serialEventv+0x48>
     a3a:	81 e6       	ldi	r24, 0x61	; 97
     a3c:	92 e0       	ldi	r25, 0x02	; 2
     a3e:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <_ZN14HardwareSerial4readEv>
     a42:	8a 30       	cpi	r24, 0x0A	; 10
     a44:	19 f4       	brne	.+6      	; 0xa4c <_Z11serialEventv+0x2a>
     a46:	10 93 f0 01 	sts	0x01F0, r17	; 0x8001f0 <UartInputComplete>
     a4a:	f1 cf       	rjmp	.-30     	; 0xa2e <_Z11serialEventv+0xc>
     a4c:	fe 01       	movw	r30, r28
     a4e:	01 90       	ld	r0, Z+
     a50:	00 20       	and	r0, r0
     a52:	e9 f7       	brne	.-6      	; 0xa4e <_Z11serialEventv+0x2c>
     a54:	31 97       	sbiw	r30, 0x01	; 1
     a56:	e1 5f       	subi	r30, 0xF1	; 241
     a58:	f1 40       	sbci	r31, 0x01	; 1
     a5a:	e3 36       	cpi	r30, 0x63	; 99
     a5c:	f1 05       	cpc	r31, r1
     a5e:	3c f7       	brge	.-50     	; 0xa2e <_Z11serialEventv+0xc>
     a60:	ef 50       	subi	r30, 0x0F	; 15
     a62:	fe 4f       	sbci	r31, 0xFE	; 254
     a64:	80 83       	st	Z, r24
     a66:	11 82       	std	Z+1, r1	; 0x01
     a68:	e2 cf       	rjmp	.-60     	; 0xa2e <_Z11serialEventv+0xc>
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	1f 91       	pop	r17
     a70:	08 95       	ret

00000a72 <_ZN9MaxMatrixC1Ehhh>:
        }
        return E_OK;
    } else {
        return E_NOT_OK;
    }
} /* setRowOnAllModulesLL */
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	fc 01       	movw	r30, r24
     a78:	60 83       	st	Z, r22
     a7a:	41 83       	std	Z+1, r20	; 0x01
     a7c:	22 83       	std	Z+2, r18	; 0x02
     a7e:	17 a6       	std	Z+47, r1	; 0x2f
     a80:	16 a6       	std	Z+46, r1	; 0x2e
     a82:	14 a6       	std	Z+44, r1	; 0x2c
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	85 a7       	std	Z+45, r24	; 0x2d
     a88:	14 82       	std	Z+4, r1	; 0x04
     a8a:	13 82       	std	Z+3, r1	; 0x03
     a8c:	ef 01       	movw	r28, r30
     a8e:	25 96       	adiw	r28, 0x05	; 5
     a90:	df 01       	movw	r26, r30
     a92:	95 96       	adiw	r26, 0x25	; 37
     a94:	19 92       	st	Y+, r1
     a96:	ca 17       	cp	r28, r26
     a98:	db 07       	cpc	r29, r27
     a9a:	e1 f7       	brne	.-8      	; 0xa94 <_ZN9MaxMatrixC1Ehhh+0x22>
     a9c:	bc 96       	adiw	r30, 0x2c	; 44
     a9e:	1d 92       	st	X+, r1
     aa0:	ae 17       	cp	r26, r30
     aa2:	bf 07       	cpc	r27, r31
     aa4:	e1 f7       	brne	.-8      	; 0xa9e <_ZN9MaxMatrixC1Ehhh+0x2c>
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	08 95       	ret

00000aac <_ZN9MaxMatrixD1Ev>:
     aac:	08 95       	ret

00000aae <_ZN9MaxMatrix13RegisterWriteEhh>:
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	ec 01       	movw	r28, r24
     abc:	e6 2e       	mov	r14, r22
     abe:	f4 2e       	mov	r15, r20
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	89 81       	ldd	r24, Y+1	; 0x01
     ac4:	0e 94 b9 11 	call	0x2372	; 0x2372 <digitalWrite>
     ac8:	04 e0       	ldi	r16, 0x04	; 4
     aca:	10 e0       	ldi	r17, 0x00	; 0
     acc:	2e 2d       	mov	r18, r14
     ace:	41 e0       	ldi	r20, 0x01	; 1
     ad0:	6a 81       	ldd	r22, Y+2	; 0x02
     ad2:	88 81       	ld	r24, Y
     ad4:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <shiftOut>
     ad8:	2f 2d       	mov	r18, r15
     ada:	41 e0       	ldi	r20, 0x01	; 1
     adc:	6a 81       	ldd	r22, Y+2	; 0x02
     ade:	88 81       	ld	r24, Y
     ae0:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <shiftOut>
     ae4:	01 50       	subi	r16, 0x01	; 1
     ae6:	11 09       	sbc	r17, r1
     ae8:	89 f7       	brne	.-30     	; 0xacc <_ZN9MaxMatrix13RegisterWriteEhh+0x1e>
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	0e 94 b9 11 	call	0x2372	; 0x2372 <digitalWrite>
     af2:	61 e0       	ldi	r22, 0x01	; 1
     af4:	89 81       	ldd	r24, Y+1	; 0x01
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	0f 91       	pop	r16
     afe:	ff 90       	pop	r15
     b00:	ef 90       	pop	r14
     b02:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <digitalWrite>

00000b06 <_ZN9MaxMatrix12setIntensityEh>:
     b06:	60 31       	cpi	r22, 0x10	; 16
     b08:	30 f4       	brcc	.+12     	; 0xb16 <_ZN9MaxMatrix12setIntensityEh+0x10>
     b0a:	46 2f       	mov	r20, r22
     b0c:	6a e0       	ldi	r22, 0x0A	; 10
     b0e:	0e 94 57 05 	call	0xaae	; 0xaae <_ZN9MaxMatrix13RegisterWriteEhh>
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	08 95       	ret
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	08 95       	ret

00000b1a <_ZN9MaxMatrix16setTextWithShiftEPc>:
     b1a:	fc 01       	movw	r30, r24
     b1c:	61 15       	cp	r22, r1
     b1e:	71 05       	cpc	r23, r1
     b20:	39 f0       	breq	.+14     	; 0xb30 <_ZN9MaxMatrix16setTextWithShiftEPc+0x16>
     b22:	14 a6       	std	Z+44, r1	; 0x2c
     b24:	77 a7       	std	Z+47, r23	; 0x2f
     b26:	66 a7       	std	Z+46, r22	; 0x2e
     b28:	83 e0       	ldi	r24, 0x03	; 3
     b2a:	83 83       	std	Z+3, r24	; 0x03
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	08 95       	ret
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	08 95       	ret

00000b34 <_ZN9MaxMatrix9getSpriteEhPA7_h>:
     b34:	65 36       	cpi	r22, 0x65	; 101
     b36:	68 f4       	brcc	.+26     	; 0xb52 <_ZN9MaxMatrix9getSpriteEhPA7_h+0x1e>
     b38:	ca 01       	movw	r24, r20
     b3a:	27 e0       	ldi	r18, 0x07	; 7
     b3c:	62 9f       	mul	r22, r18
     b3e:	b0 01       	movw	r22, r0
     b40:	11 24       	eor	r1, r1
     b42:	68 5c       	subi	r22, 0xC8	; 200
     b44:	7d 4f       	sbci	r23, 0xFD	; 253
     b46:	47 e0       	ldi	r20, 0x07	; 7
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	0e 94 80 12 	call	0x2500	; 0x2500 <memcpy_P>
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	08 95       	ret
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	08 95       	ret

00000b56 <_ZN9MaxMatrix20setSpaceBetweenCharsEh>:
     b56:	66 23       	and	r22, r22
     b58:	21 f0       	breq	.+8      	; 0xb62 <_ZN9MaxMatrix20setSpaceBetweenCharsEh+0xc>
     b5a:	fc 01       	movw	r30, r24
     b5c:	65 a7       	std	Z+45, r22	; 0x2d
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	08 95       	ret
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	08 95       	ret

00000b66 <_ZN9MaxMatrix11reverseByteEh>:
     b66:	62 95       	swap	r22
     b68:	96 2f       	mov	r25, r22
     b6a:	93 73       	andi	r25, 0x33	; 51
     b6c:	84 e0       	ldi	r24, 0x04	; 4
     b6e:	98 9f       	mul	r25, r24
     b70:	90 01       	movw	r18, r0
     b72:	11 24       	eor	r1, r1
     b74:	6c 7c       	andi	r22, 0xCC	; 204
     b76:	66 95       	lsr	r22
     b78:	66 95       	lsr	r22
     b7a:	26 2b       	or	r18, r22
     b7c:	82 2f       	mov	r24, r18
     b7e:	85 75       	andi	r24, 0x55	; 85
     b80:	88 0f       	add	r24, r24
     b82:	2a 7a       	andi	r18, 0xAA	; 170
     b84:	26 95       	lsr	r18
     b86:	82 2b       	or	r24, r18
     b88:	08 95       	ret

00000b8a <_ZN9MaxMatrix6reloadEv>:
     b8a:	df 92       	push	r13
     b8c:	ef 92       	push	r14
     b8e:	ff 92       	push	r15
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	ec 01       	movw	r28, r24
     b9a:	00 e0       	ldi	r16, 0x00	; 0
     b9c:	10 e0       	ldi	r17, 0x00	; 0
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	0e 94 b9 11 	call	0x2372	; 0x2372 <digitalWrite>
     ba6:	e1 2c       	mov	r14, r1
     ba8:	f1 2c       	mov	r15, r1
     baa:	dd 24       	eor	r13, r13
     bac:	d3 94       	inc	r13
     bae:	d0 0e       	add	r13, r16
     bb0:	2d 2d       	mov	r18, r13
     bb2:	41 e0       	ldi	r20, 0x01	; 1
     bb4:	6a 81       	ldd	r22, Y+2	; 0x02
     bb6:	88 81       	ld	r24, Y
     bb8:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <shiftOut>
     bbc:	f7 01       	movw	r30, r14
     bbe:	e0 0f       	add	r30, r16
     bc0:	f1 1f       	adc	r31, r17
     bc2:	ec 0f       	add	r30, r28
     bc4:	fd 1f       	adc	r31, r29
     bc6:	25 81       	ldd	r18, Z+5	; 0x05
     bc8:	41 e0       	ldi	r20, 0x01	; 1
     bca:	6a 81       	ldd	r22, Y+2	; 0x02
     bcc:	88 81       	ld	r24, Y
     bce:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <shiftOut>
     bd2:	88 e0       	ldi	r24, 0x08	; 8
     bd4:	e8 0e       	add	r14, r24
     bd6:	f1 1c       	adc	r15, r1
     bd8:	80 e2       	ldi	r24, 0x20	; 32
     bda:	e8 16       	cp	r14, r24
     bdc:	f1 04       	cpc	r15, r1
     bde:	41 f7       	brne	.-48     	; 0xbb0 <_ZN9MaxMatrix6reloadEv+0x26>
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	0e 94 b9 11 	call	0x2372	; 0x2372 <digitalWrite>
     be8:	61 e0       	ldi	r22, 0x01	; 1
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	0e 94 b9 11 	call	0x2372	; 0x2372 <digitalWrite>
     bf0:	0f 5f       	subi	r16, 0xFF	; 255
     bf2:	1f 4f       	sbci	r17, 0xFF	; 255
     bf4:	08 30       	cpi	r16, 0x08	; 8
     bf6:	11 05       	cpc	r17, r1
     bf8:	91 f6       	brne	.-92     	; 0xb9e <_ZN9MaxMatrix6reloadEv+0x14>
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	ff 90       	pop	r15
     c04:	ef 90       	pop	r14
     c06:	df 90       	pop	r13
     c08:	08 95       	ret

00000c0a <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType>:
     c0a:	3f 92       	push	r3
     c0c:	4f 92       	push	r4
     c0e:	5f 92       	push	r5
     c10:	6f 92       	push	r6
     c12:	7f 92       	push	r7
     c14:	8f 92       	push	r8
     c16:	9f 92       	push	r9
     c18:	af 92       	push	r10
     c1a:	bf 92       	push	r11
     c1c:	cf 92       	push	r12
     c1e:	df 92       	push	r13
     c20:	ef 92       	push	r14
     c22:	ff 92       	push	r15
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	a8 97       	sbiw	r28, 0x28	; 40
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	de bf       	out	0x3e, r29	; 62
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	cd bf       	out	0x3d, r28	; 61
     c3c:	fc 01       	movw	r30, r24
     c3e:	94 81       	ldd	r25, Z+4	; 0x04
     c40:	69 17       	cp	r22, r25
     c42:	09 f4       	brne	.+2      	; 0xc46 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x3c>
     c44:	90 c1       	rjmp	.+800    	; 0xf66 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x35c>
     c46:	91 11       	cpse	r25, r1
     c48:	04 c0       	rjmp	.+8      	; 0xc52 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x48>
     c4a:	61 30       	cpi	r22, 0x01	; 1
     c4c:	a9 f0       	breq	.+42     	; 0xc78 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x6e>
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	7e c0       	rjmp	.+252    	; 0xd4e <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x144>
     c52:	91 30       	cpi	r25, 0x01	; 1
     c54:	21 f4       	brne	.+8      	; 0xc5e <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x54>
     c56:	62 30       	cpi	r22, 0x02	; 2
     c58:	79 f0       	breq	.+30     	; 0xc78 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x6e>
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	7f c0       	rjmp	.+254    	; 0xd5c <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x152>
     c5e:	92 30       	cpi	r25, 0x02	; 2
     c60:	21 f4       	brne	.+8      	; 0xc6a <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x60>
     c62:	63 30       	cpi	r22, 0x03	; 3
     c64:	49 f0       	breq	.+18     	; 0xc78 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x6e>
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	7f c0       	rjmp	.+254    	; 0xd68 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x15e>
     c6a:	93 30       	cpi	r25, 0x03	; 3
     c6c:	09 f0       	breq	.+2      	; 0xc70 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x66>
     c6e:	73 c0       	rjmp	.+230    	; 0xd56 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x14c>
     c70:	66 23       	and	r22, r22
     c72:	11 f0       	breq	.+4      	; 0xc78 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x6e>
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	86 c0       	rjmp	.+268    	; 0xd84 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x17a>
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	41 2c       	mov	r4, r1
     c7e:	51 2c       	mov	r5, r1
     c80:	32 01       	movw	r6, r4
     c82:	43 94       	inc	r4
     c84:	49 01       	movw	r8, r18
     c86:	47 e0       	ldi	r20, 0x07	; 7
     c88:	84 0e       	add	r8, r20
     c8a:	91 1c       	adc	r9, r1
     c8c:	47 e0       	ldi	r20, 0x07	; 7
     c8e:	50 e0       	ldi	r21, 0x00	; 0
     c90:	87 e0       	ldi	r24, 0x07	; 7
     c92:	38 2e       	mov	r3, r24
     c94:	32 0e       	add	r3, r18
     c96:	aa 24       	eor	r10, r10
     c98:	a3 94       	inc	r10
     c9a:	b1 2c       	mov	r11, r1
     c9c:	04 2e       	mov	r0, r20
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x9a>
     ca0:	aa 0c       	add	r10, r10
     ca2:	bb 1c       	adc	r11, r11
     ca4:	0a 94       	dec	r0
     ca6:	e2 f7       	brpl	.-8      	; 0xca0 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x96>
     ca8:	be a2       	std	Y+38, r11	; 0x26
     caa:	ad a2       	std	Y+37, r10	; 0x25
     cac:	84 01       	movw	r16, r8
     cae:	87 e0       	ldi	r24, 0x07	; 7
     cb0:	73 2d       	mov	r23, r3
     cb2:	74 1b       	sub	r23, r20
     cb4:	ee 24       	eor	r14, r14
     cb6:	e3 94       	inc	r14
     cb8:	f1 2c       	mov	r15, r1
     cba:	ec 0e       	add	r14, r28
     cbc:	fd 1e       	adc	r15, r29
     cbe:	e7 0e       	add	r14, r23
     cc0:	f1 1c       	adc	r15, r1
     cc2:	02 17       	cp	r16, r18
     cc4:	13 07       	cpc	r17, r19
     cc6:	b4 f1       	brlt	.+108    	; 0xd34 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x12a>
     cc8:	df 01       	movw	r26, r30
     cca:	a0 0f       	add	r26, r16
     ccc:	b1 1f       	adc	r27, r17
     cce:	15 96       	adiw	r26, 0x05	; 5
     cd0:	ac 91       	ld	r26, X
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	cd a0       	ldd	r12, Y+37	; 0x25
     cd6:	de a0       	ldd	r13, Y+38	; 0x26
     cd8:	ac 21       	and	r26, r12
     cda:	bd 21       	and	r27, r13
     cdc:	ab 2b       	or	r26, r27
     cde:	91 f0       	breq	.+36     	; 0xd04 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0xfa>
     ce0:	d7 01       	movw	r26, r14
     ce2:	7c 91       	ld	r23, X
     ce4:	63 01       	movw	r12, r6
     ce6:	52 01       	movw	r10, r4
     ce8:	08 2e       	mov	r0, r24
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0xea>
     cec:	aa 0c       	add	r10, r10
     cee:	bb 1c       	adc	r11, r11
     cf0:	cc 1c       	adc	r12, r12
     cf2:	dd 1c       	adc	r13, r13
     cf4:	0a 94       	dec	r0
     cf6:	d2 f7       	brpl	.-12     	; 0xcec <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0xe2>
     cf8:	a9 a2       	std	Y+33, r10	; 0x21
     cfa:	ba a2       	std	Y+34, r11	; 0x22
     cfc:	cb a2       	std	Y+35, r12	; 0x23
     cfe:	dc a2       	std	Y+36, r13	; 0x24
     d00:	7a 29       	or	r23, r10
     d02:	13 c0       	rjmp	.+38     	; 0xd2a <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x120>
     d04:	63 01       	movw	r12, r6
     d06:	52 01       	movw	r10, r4
     d08:	08 2e       	mov	r0, r24
     d0a:	04 c0       	rjmp	.+8      	; 0xd14 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x10a>
     d0c:	aa 0c       	add	r10, r10
     d0e:	bb 1c       	adc	r11, r11
     d10:	cc 1c       	adc	r12, r12
     d12:	dd 1c       	adc	r13, r13
     d14:	0a 94       	dec	r0
     d16:	d2 f7       	brpl	.-12     	; 0xd0c <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x102>
     d18:	a9 a2       	std	Y+33, r10	; 0x21
     d1a:	ba a2       	std	Y+34, r11	; 0x22
     d1c:	cb a2       	std	Y+35, r12	; 0x23
     d1e:	dc a2       	std	Y+36, r13	; 0x24
     d20:	da 2c       	mov	r13, r10
     d22:	d0 94       	com	r13
     d24:	d7 01       	movw	r26, r14
     d26:	7c 91       	ld	r23, X
     d28:	7d 21       	and	r23, r13
     d2a:	7c 93       	st	X, r23
     d2c:	81 50       	subi	r24, 0x01	; 1
     d2e:	01 50       	subi	r16, 0x01	; 1
     d30:	11 09       	sbc	r17, r1
     d32:	c7 cf       	rjmp	.-114    	; 0xcc2 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0xb8>
     d34:	41 50       	subi	r20, 0x01	; 1
     d36:	51 09       	sbc	r21, r1
     d38:	08 f0       	brcs	.+2      	; 0xd3c <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x132>
     d3a:	ad cf       	rjmp	.-166    	; 0xc96 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x8c>
     d3c:	28 5f       	subi	r18, 0xF8	; 248
     d3e:	3f 4f       	sbci	r19, 0xFF	; 255
     d40:	20 32       	cpi	r18, 0x20	; 32
     d42:	31 05       	cpc	r19, r1
     d44:	09 f0       	breq	.+2      	; 0xd48 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x13e>
     d46:	9e cf       	rjmp	.-196    	; 0xc84 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x7a>
     d48:	80 e2       	ldi	r24, 0x20	; 32
     d4a:	91 11       	cpse	r25, r1
     d4c:	05 c0       	rjmp	.+10     	; 0xd58 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x14e>
     d4e:	62 30       	cpi	r22, 0x02	; 2
     d50:	09 f0       	breq	.+2      	; 0xd54 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x14a>
     d52:	68 c0       	rjmp	.+208    	; 0xe24 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x21a>
     d54:	0b c0       	rjmp	.+22     	; 0xd6c <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x162>
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	91 30       	cpi	r25, 0x01	; 1
     d5a:	21 f4       	brne	.+8      	; 0xd64 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x15a>
     d5c:	63 30       	cpi	r22, 0x03	; 3
     d5e:	09 f0       	breq	.+2      	; 0xd62 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x158>
     d60:	67 c0       	rjmp	.+206    	; 0xe30 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x226>
     d62:	04 c0       	rjmp	.+8      	; 0xd6c <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x162>
     d64:	92 30       	cpi	r25, 0x02	; 2
     d66:	59 f4       	brne	.+22     	; 0xd7e <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x174>
     d68:	61 11       	cpse	r22, r1
     d6a:	67 c0       	rjmp	.+206    	; 0xe3a <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x230>
     d6c:	27 e0       	ldi	r18, 0x07	; 7
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	17 e0       	ldi	r17, 0x07	; 7
     d72:	31 2e       	mov	r3, r17
     d74:	41 2c       	mov	r4, r1
     d76:	51 2c       	mov	r5, r1
     d78:	32 01       	movw	r6, r4
     d7a:	43 94       	inc	r4
     d7c:	0d c0       	rjmp	.+26     	; 0xd98 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x18e>
     d7e:	93 30       	cpi	r25, 0x03	; 3
     d80:	09 f0       	breq	.+2      	; 0xd84 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x17a>
     d82:	4e c0       	rjmp	.+156    	; 0xe20 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x216>
     d84:	61 30       	cpi	r22, 0x01	; 1
     d86:	09 f0       	breq	.+2      	; 0xd8a <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x180>
     d88:	65 c0       	rjmp	.+202    	; 0xe54 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x24a>
     d8a:	f0 cf       	rjmp	.-32     	; 0xd6c <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x162>
     d8c:	28 5f       	subi	r18, 0xF8	; 248
     d8e:	3f 4f       	sbci	r19, 0xFF	; 255
     d90:	27 32       	cpi	r18, 0x27	; 39
     d92:	31 05       	cpc	r19, r1
     d94:	09 f4       	brne	.+2      	; 0xd98 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x18e>
     d96:	44 c0       	rjmp	.+136    	; 0xe20 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x216>
     d98:	89 01       	movw	r16, r18
     d9a:	69 01       	movw	r12, r18
     d9c:	57 e0       	ldi	r21, 0x07	; 7
     d9e:	c5 1a       	sub	r12, r21
     da0:	d1 08       	sbc	r13, r1
     da2:	0c 15       	cp	r16, r12
     da4:	1d 05       	cpc	r17, r13
     da6:	94 f3       	brlt	.-28     	; 0xd8c <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x182>
     da8:	df 01       	movw	r26, r30
     daa:	a0 0f       	add	r26, r16
     dac:	b1 1f       	adc	r27, r17
     dae:	15 96       	adiw	r26, 0x05	; 5
     db0:	ec 90       	ld	r14, X
     db2:	f1 2c       	mov	r15, r1
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	50 e0       	ldi	r21, 0x00	; 0
     db8:	a1 e0       	ldi	r26, 0x01	; 1
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	ac 0f       	add	r26, r28
     dbe:	bd 1f       	adc	r27, r29
     dc0:	a8 0f       	add	r26, r24
     dc2:	b1 1d       	adc	r27, r1
     dc4:	73 2d       	mov	r23, r3
     dc6:	74 1b       	sub	r23, r20
     dc8:	57 01       	movw	r10, r14
     dca:	04 2e       	mov	r0, r20
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x1c8>
     dce:	b5 94       	asr	r11
     dd0:	a7 94       	ror	r10
     dd2:	0a 94       	dec	r0
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x1c4>
     dd6:	a0 fe       	sbrs	r10, 0
     dd8:	0c c0       	rjmp	.+24     	; 0xdf2 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x1e8>
     dda:	53 01       	movw	r10, r6
     ddc:	42 01       	movw	r8, r4
     dde:	04 c0       	rjmp	.+8      	; 0xde8 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x1de>
     de0:	88 0c       	add	r8, r8
     de2:	99 1c       	adc	r9, r9
     de4:	aa 1c       	adc	r10, r10
     de6:	bb 1c       	adc	r11, r11
     de8:	7a 95       	dec	r23
     dea:	d2 f7       	brpl	.-12     	; 0xde0 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x1d6>
     dec:	7c 91       	ld	r23, X
     dee:	78 29       	or	r23, r8
     df0:	0d c0       	rjmp	.+26     	; 0xe0c <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x202>
     df2:	53 01       	movw	r10, r6
     df4:	42 01       	movw	r8, r4
     df6:	04 c0       	rjmp	.+8      	; 0xe00 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x1f6>
     df8:	88 0c       	add	r8, r8
     dfa:	99 1c       	adc	r9, r9
     dfc:	aa 1c       	adc	r10, r10
     dfe:	bb 1c       	adc	r11, r11
     e00:	7a 95       	dec	r23
     e02:	d2 f7       	brpl	.-12     	; 0xdf8 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x1ee>
     e04:	78 2d       	mov	r23, r8
     e06:	70 95       	com	r23
     e08:	bc 90       	ld	r11, X
     e0a:	7b 21       	and	r23, r11
     e0c:	7c 93       	st	X, r23
     e0e:	4f 5f       	subi	r20, 0xFF	; 255
     e10:	5f 4f       	sbci	r21, 0xFF	; 255
     e12:	48 30       	cpi	r20, 0x08	; 8
     e14:	51 05       	cpc	r21, r1
     e16:	b1 f6       	brne	.-84     	; 0xdc4 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x1ba>
     e18:	8f 5f       	subi	r24, 0xFF	; 255
     e1a:	01 50       	subi	r16, 0x01	; 1
     e1c:	11 09       	sbc	r17, r1
     e1e:	c1 cf       	rjmp	.-126    	; 0xda2 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x198>
     e20:	91 11       	cpse	r25, r1
     e22:	04 c0       	rjmp	.+8      	; 0xe2c <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x222>
     e24:	63 30       	cpi	r22, 0x03	; 3
     e26:	09 f0       	breq	.+2      	; 0xe2a <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x220>
     e28:	72 c0       	rjmp	.+228    	; 0xf0e <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x304>
     e2a:	0a c0       	rjmp	.+20     	; 0xe40 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x236>
     e2c:	91 30       	cpi	r25, 0x01	; 1
     e2e:	19 f4       	brne	.+6      	; 0xe36 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x22c>
     e30:	66 23       	and	r22, r22
     e32:	31 f0       	breq	.+12     	; 0xe40 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x236>
     e34:	6c c0       	rjmp	.+216    	; 0xf0e <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x304>
     e36:	92 30       	cpi	r25, 0x02	; 2
     e38:	51 f4       	brne	.+20     	; 0xe4e <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x244>
     e3a:	61 30       	cpi	r22, 0x01	; 1
     e3c:	09 f0       	breq	.+2      	; 0xe40 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x236>
     e3e:	67 c0       	rjmp	.+206    	; 0xf0e <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x304>
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	41 2c       	mov	r4, r1
     e46:	51 2c       	mov	r5, r1
     e48:	32 01       	movw	r6, r4
     e4a:	43 94       	inc	r4
     e4c:	2d c0       	rjmp	.+90     	; 0xea8 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x29e>
     e4e:	93 30       	cpi	r25, 0x03	; 3
     e50:	09 f0       	breq	.+2      	; 0xe54 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x24a>
     e52:	5d c0       	rjmp	.+186    	; 0xf0e <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x304>
     e54:	62 30       	cpi	r22, 0x02	; 2
     e56:	09 f0       	breq	.+2      	; 0xe5a <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x250>
     e58:	5a c0       	rjmp	.+180    	; 0xf0e <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x304>
     e5a:	f2 cf       	rjmp	.-28     	; 0xe40 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x236>
     e5c:	a1 e0       	ldi	r26, 0x01	; 1
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	0f a0       	ldd	r0, Y+39	; 0x27
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x25e>
     e64:	aa 0f       	add	r26, r26
     e66:	bb 1f       	adc	r27, r27
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x25a>
     e6c:	be a3       	std	Y+38, r27	; 0x26
     e6e:	ad a3       	std	Y+37, r26	; 0x25
     e70:	49 2d       	mov	r20, r9
     e72:	58 2d       	mov	r21, r8
     e74:	9f a1       	ldd	r25, Y+39	; 0x27
     e76:	97 0f       	add	r25, r23
     e78:	ee 24       	eor	r14, r14
     e7a:	e3 94       	inc	r14
     e7c:	f1 2c       	mov	r15, r1
     e7e:	ec 0e       	add	r14, r28
     e80:	fd 1e       	adc	r15, r29
     e82:	e9 0e       	add	r14, r25
     e84:	f1 1c       	adc	r15, r1
     e86:	93 2d       	mov	r25, r3
     e88:	94 1b       	sub	r25, r20
     e8a:	42 17       	cp	r20, r18
     e8c:	53 07       	cpc	r21, r19
     e8e:	c4 f0       	brlt	.+48     	; 0xec0 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x2b6>
     e90:	4f a1       	ldd	r20, Y+39	; 0x27
     e92:	58 a5       	ldd	r21, Y+40	; 0x28
     e94:	4f 5f       	subi	r20, 0xFF	; 255
     e96:	5f 4f       	sbci	r21, 0xFF	; 255
     e98:	58 a7       	std	Y+40, r21	; 0x28
     e9a:	4f a3       	std	Y+39, r20	; 0x27
     e9c:	48 30       	cpi	r20, 0x08	; 8
     e9e:	51 05       	cpc	r21, r1
     ea0:	e9 f6       	brne	.-70     	; 0xe5c <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x252>
     ea2:	20 32       	cpi	r18, 0x20	; 32
     ea4:	31 05       	cpc	r19, r1
     ea6:	99 f1       	breq	.+102    	; 0xf0e <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x304>
     ea8:	78 2f       	mov	r23, r24
     eaa:	72 0f       	add	r23, r18
     eac:	92 2e       	mov	r9, r18
     eae:	83 2e       	mov	r8, r19
     eb0:	18 a6       	std	Y+40, r1	; 0x28
     eb2:	1f a2       	std	Y+39, r1	; 0x27
     eb4:	47 e0       	ldi	r20, 0x07	; 7
     eb6:	34 2e       	mov	r3, r20
     eb8:	32 0e       	add	r3, r18
     eba:	28 5f       	subi	r18, 0xF8	; 248
     ebc:	3f 4f       	sbci	r19, 0xFF	; 255
     ebe:	ce cf       	rjmp	.-100    	; 0xe5c <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x252>
     ec0:	8f 01       	movw	r16, r30
     ec2:	04 0f       	add	r16, r20
     ec4:	15 1f       	adc	r17, r21
     ec6:	d8 01       	movw	r26, r16
     ec8:	15 96       	adiw	r26, 0x05	; 5
     eca:	0c 91       	ld	r16, X
     ecc:	10 e0       	ldi	r17, 0x00	; 0
     ece:	ad a0       	ldd	r10, Y+37	; 0x25
     ed0:	be a0       	ldd	r11, Y+38	; 0x26
     ed2:	0a 21       	and	r16, r10
     ed4:	1b 21       	and	r17, r11
     ed6:	63 01       	movw	r12, r6
     ed8:	52 01       	movw	r10, r4
     eda:	04 c0       	rjmp	.+8      	; 0xee4 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x2da>
     edc:	aa 0c       	add	r10, r10
     ede:	bb 1c       	adc	r11, r11
     ee0:	cc 1c       	adc	r12, r12
     ee2:	dd 1c       	adc	r13, r13
     ee4:	9a 95       	dec	r25
     ee6:	d2 f7       	brpl	.-12     	; 0xedc <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x2d2>
     ee8:	a9 a2       	std	Y+33, r10	; 0x21
     eea:	ba a2       	std	Y+34, r11	; 0x22
     eec:	cb a2       	std	Y+35, r12	; 0x23
     eee:	dc a2       	std	Y+36, r13	; 0x24
     ef0:	01 2b       	or	r16, r17
     ef2:	21 f0       	breq	.+8      	; 0xefc <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x2f2>
     ef4:	d7 01       	movw	r26, r14
     ef6:	9c 91       	ld	r25, X
     ef8:	9a 29       	or	r25, r10
     efa:	05 c0       	rjmp	.+10     	; 0xf06 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x2fc>
     efc:	1a 2d       	mov	r17, r10
     efe:	10 95       	com	r17
     f00:	d7 01       	movw	r26, r14
     f02:	9c 91       	ld	r25, X
     f04:	91 23       	and	r25, r17
     f06:	9c 93       	st	X, r25
     f08:	4f 5f       	subi	r20, 0xFF	; 255
     f0a:	5f 4f       	sbci	r21, 0xFF	; 255
     f0c:	bc cf       	rjmp	.-136    	; 0xe86 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x27c>
     f0e:	64 83       	std	Z+4, r22	; 0x04
     f10:	be 01       	movw	r22, r28
     f12:	6f 5f       	subi	r22, 0xFF	; 255
     f14:	7f 4f       	sbci	r23, 0xFF	; 255
     f16:	cf 01       	movw	r24, r30
     f18:	05 96       	adiw	r24, 0x05	; 5
     f1a:	9e 01       	movw	r18, r28
     f1c:	2f 5d       	subi	r18, 0xDF	; 223
     f1e:	3f 4f       	sbci	r19, 0xFF	; 255
     f20:	db 01       	movw	r26, r22
     f22:	4d 91       	ld	r20, X+
     f24:	bd 01       	movw	r22, r26
     f26:	dc 01       	movw	r26, r24
     f28:	4d 93       	st	X+, r20
     f2a:	cd 01       	movw	r24, r26
     f2c:	62 17       	cp	r22, r18
     f2e:	73 07       	cpc	r23, r19
     f30:	b9 f7       	brne	.-18     	; 0xf20 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x316>
     f32:	cf 01       	movw	r24, r30
     f34:	a8 96       	adiw	r28, 0x28	; 40
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	ff 90       	pop	r15
     f4a:	ef 90       	pop	r14
     f4c:	df 90       	pop	r13
     f4e:	cf 90       	pop	r12
     f50:	bf 90       	pop	r11
     f52:	af 90       	pop	r10
     f54:	9f 90       	pop	r9
     f56:	8f 90       	pop	r8
     f58:	7f 90       	pop	r7
     f5a:	6f 90       	pop	r6
     f5c:	5f 90       	pop	r5
     f5e:	4f 90       	pop	r4
     f60:	3f 90       	pop	r3
     f62:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <_ZN9MaxMatrix6reloadEv>
     f66:	a8 96       	adiw	r28, 0x28	; 40
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	1f 91       	pop	r17
     f78:	0f 91       	pop	r16
     f7a:	ff 90       	pop	r15
     f7c:	ef 90       	pop	r14
     f7e:	df 90       	pop	r13
     f80:	cf 90       	pop	r12
     f82:	bf 90       	pop	r11
     f84:	af 90       	pop	r10
     f86:	9f 90       	pop	r9
     f88:	8f 90       	pop	r8
     f8a:	7f 90       	pop	r7
     f8c:	6f 90       	pop	r6
     f8e:	5f 90       	pop	r5
     f90:	4f 90       	pop	r4
     f92:	3f 90       	pop	r3
     f94:	08 95       	ret

00000f96 <_ZN9MaxMatrix19convertCharToSpriteEcPh>:
     f96:	fa 01       	movw	r30, r20
     f98:	64 3c       	cpi	r22, 0xC4	; 196
     f9a:	11 f4       	brne	.+4      	; 0xfa0 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0xa>
     f9c:	8f e5       	ldi	r24, 0x5F	; 95
     f9e:	13 c0       	rjmp	.+38     	; 0xfc6 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     fa0:	66 3d       	cpi	r22, 0xD6	; 214
     fa2:	11 f4       	brne	.+4      	; 0xfa8 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x12>
     fa4:	80 e6       	ldi	r24, 0x60	; 96
     fa6:	0f c0       	rjmp	.+30     	; 0xfc6 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     fa8:	6c 3d       	cpi	r22, 0xDC	; 220
     faa:	11 f4       	brne	.+4      	; 0xfb0 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x1a>
     fac:	81 e6       	ldi	r24, 0x61	; 97
     fae:	0b c0       	rjmp	.+22     	; 0xfc6 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     fb0:	64 3e       	cpi	r22, 0xE4	; 228
     fb2:	11 f4       	brne	.+4      	; 0xfb8 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x22>
     fb4:	82 e6       	ldi	r24, 0x62	; 98
     fb6:	07 c0       	rjmp	.+14     	; 0xfc6 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     fb8:	66 3f       	cpi	r22, 0xF6	; 246
     fba:	11 f4       	brne	.+4      	; 0xfc0 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x2a>
     fbc:	83 e6       	ldi	r24, 0x63	; 99
     fbe:	03 c0       	rjmp	.+6      	; 0xfc6 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     fc0:	6c 3f       	cpi	r22, 0xFC	; 252
     fc2:	19 f4       	brne	.+6      	; 0xfca <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x34>
     fc4:	84 e6       	ldi	r24, 0x64	; 100
     fc6:	80 83       	st	Z, r24
     fc8:	04 c0       	rjmp	.+8      	; 0xfd2 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x3c>
     fca:	60 52       	subi	r22, 0x20	; 32
     fcc:	6f 35       	cpi	r22, 0x5F	; 95
     fce:	18 f4       	brcc	.+6      	; 0xfd6 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x40>
     fd0:	60 83       	st	Z, r22
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	08 95       	ret
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	08 95       	ret

00000fda <_ZN9MaxMatrix8getRowLLEhhPh>:
     fda:	bf 92       	push	r11
     fdc:	cf 92       	push	r12
     fde:	df 92       	push	r13
     fe0:	ef 92       	push	r14
     fe2:	ff 92       	push	r15
     fe4:	0f 93       	push	r16
     fe6:	1f 93       	push	r17
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	e9 01       	movw	r28, r18
     fee:	64 30       	cpi	r22, 0x04	; 4
     ff0:	d8 f5       	brcc	.+118    	; 0x1068 <_ZN9MaxMatrix8getRowLLEhhPh+0x8e>
     ff2:	48 30       	cpi	r20, 0x08	; 8
     ff4:	c8 f5       	brcc	.+114    	; 0x1068 <_ZN9MaxMatrix8getRowLLEhhPh+0x8e>
     ff6:	a1 e0       	ldi	r26, 0x01	; 1
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <_ZN9MaxMatrix8getRowLLEhhPh+0x26>
     ffc:	aa 0f       	add	r26, r26
     ffe:	bb 1f       	adc	r27, r27
    1000:	4a 95       	dec	r20
    1002:	e2 f7       	brpl	.-8      	; 0xffc <_ZN9MaxMatrix8getRowLLEhhPh+0x22>
    1004:	28 e0       	ldi	r18, 0x08	; 8
    1006:	62 9f       	mul	r22, r18
    1008:	80 0d       	add	r24, r0
    100a:	91 1d       	adc	r25, r1
    100c:	11 24       	eor	r1, r1
    100e:	fc 01       	movw	r30, r24
    1010:	35 96       	adiw	r30, 0x05	; 5
    1012:	87 e0       	ldi	r24, 0x07	; 7
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	01 e0       	ldi	r16, 0x01	; 1
    1018:	10 e0       	ldi	r17, 0x00	; 0
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	61 91       	ld	r22, Z+
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	6a 23       	and	r22, r26
    1024:	7b 23       	and	r23, r27
    1026:	b8 80       	ld	r11, Y
    1028:	67 2b       	or	r22, r23
    102a:	69 f0       	breq	.+26     	; 0x1046 <_ZN9MaxMatrix8getRowLLEhhPh+0x6c>
    102c:	68 01       	movw	r12, r16
    102e:	79 01       	movw	r14, r18
    1030:	08 2e       	mov	r0, r24
    1032:	04 c0       	rjmp	.+8      	; 0x103c <_ZN9MaxMatrix8getRowLLEhhPh+0x62>
    1034:	cc 0c       	add	r12, r12
    1036:	dd 1c       	adc	r13, r13
    1038:	ee 1c       	adc	r14, r14
    103a:	ff 1c       	adc	r15, r15
    103c:	0a 94       	dec	r0
    103e:	d2 f7       	brpl	.-12     	; 0x1034 <_ZN9MaxMatrix8getRowLLEhhPh+0x5a>
    1040:	cb 28       	or	r12, r11
    1042:	c8 82       	st	Y, r12
    1044:	0d c0       	rjmp	.+26     	; 0x1060 <_ZN9MaxMatrix8getRowLLEhhPh+0x86>
    1046:	b9 01       	movw	r22, r18
    1048:	a8 01       	movw	r20, r16
    104a:	08 2e       	mov	r0, r24
    104c:	04 c0       	rjmp	.+8      	; 0x1056 <_ZN9MaxMatrix8getRowLLEhhPh+0x7c>
    104e:	44 0f       	add	r20, r20
    1050:	55 1f       	adc	r21, r21
    1052:	66 1f       	adc	r22, r22
    1054:	77 1f       	adc	r23, r23
    1056:	0a 94       	dec	r0
    1058:	d2 f7       	brpl	.-12     	; 0x104e <_ZN9MaxMatrix8getRowLLEhhPh+0x74>
    105a:	40 95       	com	r20
    105c:	4b 21       	and	r20, r11
    105e:	48 83       	st	Y, r20
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	e8 f6       	brcc	.-70     	; 0x101e <_ZN9MaxMatrix8getRowLLEhhPh+0x44>
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	01 c0       	rjmp	.+2      	; 0x106a <_ZN9MaxMatrix8getRowLLEhhPh+0x90>
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	0f 91       	pop	r16
    1072:	ff 90       	pop	r15
    1074:	ef 90       	pop	r14
    1076:	df 90       	pop	r13
    1078:	cf 90       	pop	r12
    107a:	bf 90       	pop	r11
    107c:	08 95       	ret

0000107e <_ZN9MaxMatrix9getColumnEhPh>:
    107e:	cf 92       	push	r12
    1080:	df 92       	push	r13
    1082:	ff 92       	push	r15
    1084:	0f 93       	push	r16
    1086:	1f 93       	push	r17
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	1f 92       	push	r1
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	fc 01       	movw	r30, r24
    1094:	84 81       	ldd	r24, Z+4	; 0x04
    1096:	81 11       	cpse	r24, r1
    1098:	0a c0       	rjmp	.+20     	; 0x10ae <_ZN9MaxMatrix9getColumnEhPh+0x30>
    109a:	60 32       	cpi	r22, 0x20	; 32
    109c:	18 f0       	brcs	.+6      	; 0x10a4 <_ZN9MaxMatrix9getColumnEhPh+0x26>
    109e:	ff 24       	eor	r15, r15
    10a0:	f3 94       	inc	r15
    10a2:	39 c0       	rjmp	.+114    	; 0x1116 <_ZN9MaxMatrix9getColumnEhPh+0x98>
    10a4:	e6 0f       	add	r30, r22
    10a6:	f1 1d       	adc	r31, r1
    10a8:	85 81       	ldd	r24, Z+5	; 0x05
    10aa:	fa 01       	movw	r30, r20
    10ac:	1d c0       	rjmp	.+58     	; 0x10e8 <_ZN9MaxMatrix9getColumnEhPh+0x6a>
    10ae:	6a 01       	movw	r12, r20
    10b0:	96 2f       	mov	r25, r22
    10b2:	8f 01       	movw	r16, r30
    10b4:	66 95       	lsr	r22
    10b6:	66 95       	lsr	r22
    10b8:	66 95       	lsr	r22
    10ba:	49 2f       	mov	r20, r25
    10bc:	47 70       	andi	r20, 0x07	; 7
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	31 f4       	brne	.+12     	; 0x10ce <_ZN9MaxMatrix9getColumnEhPh+0x50>
    10c2:	96 01       	movw	r18, r12
    10c4:	cf 01       	movw	r24, r30
    10c6:	0e 94 ed 07 	call	0xfda	; 0xfda <_ZN9MaxMatrix8getRowLLEhhPh>
    10ca:	f8 2e       	mov	r15, r24
    10cc:	24 c0       	rjmp	.+72     	; 0x1116 <_ZN9MaxMatrix9getColumnEhPh+0x98>
    10ce:	82 30       	cpi	r24, 0x02	; 2
    10d0:	71 f4       	brne	.+28     	; 0x10ee <_ZN9MaxMatrix9getColumnEhPh+0x70>
    10d2:	8f e1       	ldi	r24, 0x1F	; 31
    10d4:	89 1b       	sub	r24, r25
    10d6:	80 32       	cpi	r24, 0x20	; 32
    10d8:	10 f7       	brcc	.-60     	; 0x109e <_ZN9MaxMatrix9getColumnEhPh+0x20>
    10da:	e8 0f       	add	r30, r24
    10dc:	f1 1d       	adc	r31, r1
    10de:	65 81       	ldd	r22, Z+5	; 0x05
    10e0:	c8 01       	movw	r24, r16
    10e2:	0e 94 b3 05 	call	0xb66	; 0xb66 <_ZN9MaxMatrix11reverseByteEh>
    10e6:	f6 01       	movw	r30, r12
    10e8:	80 83       	st	Z, r24
    10ea:	f1 2c       	mov	r15, r1
    10ec:	14 c0       	rjmp	.+40     	; 0x1116 <_ZN9MaxMatrix9getColumnEhPh+0x98>
    10ee:	83 30       	cpi	r24, 0x03	; 3
    10f0:	b1 f6       	brne	.-84     	; 0x109e <_ZN9MaxMatrix9getColumnEhPh+0x20>
    10f2:	87 e0       	ldi	r24, 0x07	; 7
    10f4:	84 1b       	sub	r24, r20
    10f6:	48 2f       	mov	r20, r24
    10f8:	9e 01       	movw	r18, r28
    10fa:	2f 5f       	subi	r18, 0xFF	; 255
    10fc:	3f 4f       	sbci	r19, 0xFF	; 255
    10fe:	cf 01       	movw	r24, r30
    1100:	0e 94 ed 07 	call	0xfda	; 0xfda <_ZN9MaxMatrix8getRowLLEhhPh>
    1104:	f8 2e       	mov	r15, r24
    1106:	81 11       	cpse	r24, r1
    1108:	ca cf       	rjmp	.-108    	; 0x109e <_ZN9MaxMatrix9getColumnEhPh+0x20>
    110a:	69 81       	ldd	r22, Y+1	; 0x01
    110c:	c8 01       	movw	r24, r16
    110e:	0e 94 b3 05 	call	0xb66	; 0xb66 <_ZN9MaxMatrix11reverseByteEh>
    1112:	f6 01       	movw	r30, r12
    1114:	80 83       	st	Z, r24
    1116:	8f 2d       	mov	r24, r15
    1118:	0f 90       	pop	r0
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	ff 90       	pop	r15
    1124:	df 90       	pop	r13
    1126:	cf 90       	pop	r12
    1128:	08 95       	ret

0000112a <_ZN9MaxMatrix11setColumnLLEhh>:
    112a:	bf 92       	push	r11
    112c:	cf 92       	push	r12
    112e:	df 92       	push	r13
    1130:	ef 92       	push	r14
    1132:	ff 92       	push	r15
    1134:	0f 93       	push	r16
    1136:	1f 93       	push	r17
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	60 32       	cpi	r22, 0x20	; 32
    113e:	e8 f5       	brcc	.+122    	; 0x11ba <_ZN9MaxMatrix11setColumnLLEhh+0x90>
    1140:	04 2f       	mov	r16, r20
    1142:	16 2f       	mov	r17, r22
    1144:	ec 01       	movw	r28, r24
    1146:	c6 2e       	mov	r12, r22
    1148:	c6 94       	lsr	r12
    114a:	c6 94       	lsr	r12
    114c:	c6 94       	lsr	r12
    114e:	d1 2c       	mov	r13, r1
    1150:	86 2f       	mov	r24, r22
    1152:	87 70       	andi	r24, 0x07	; 7
    1154:	b8 2e       	mov	r11, r24
    1156:	60 e0       	ldi	r22, 0x00	; 0
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	0e 94 b9 11 	call	0x2372	; 0x2372 <digitalWrite>
    115e:	e1 2c       	mov	r14, r1
    1160:	f1 2c       	mov	r15, r1
    1162:	b3 94       	inc	r11
    1164:	ec 14       	cp	r14, r12
    1166:	fd 04       	cpc	r15, r13
    1168:	41 f4       	brne	.+16     	; 0x117a <_ZN9MaxMatrix11setColumnLLEhh+0x50>
    116a:	2b 2d       	mov	r18, r11
    116c:	41 e0       	ldi	r20, 0x01	; 1
    116e:	6a 81       	ldd	r22, Y+2	; 0x02
    1170:	88 81       	ld	r24, Y
    1172:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <shiftOut>
    1176:	20 2f       	mov	r18, r16
    1178:	07 c0       	rjmp	.+14     	; 0x1188 <_ZN9MaxMatrix11setColumnLLEhh+0x5e>
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	41 e0       	ldi	r20, 0x01	; 1
    117e:	6a 81       	ldd	r22, Y+2	; 0x02
    1180:	88 81       	ld	r24, Y
    1182:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <shiftOut>
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	41 e0       	ldi	r20, 0x01	; 1
    118a:	6a 81       	ldd	r22, Y+2	; 0x02
    118c:	88 81       	ld	r24, Y
    118e:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <shiftOut>
    1192:	8f ef       	ldi	r24, 0xFF	; 255
    1194:	e8 1a       	sub	r14, r24
    1196:	f8 0a       	sbc	r15, r24
    1198:	84 e0       	ldi	r24, 0x04	; 4
    119a:	e8 16       	cp	r14, r24
    119c:	f1 04       	cpc	r15, r1
    119e:	11 f7       	brne	.-60     	; 0x1164 <_ZN9MaxMatrix11setColumnLLEhh+0x3a>
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	0e 94 b9 11 	call	0x2372	; 0x2372 <digitalWrite>
    11a8:	61 e0       	ldi	r22, 0x01	; 1
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	0e 94 b9 11 	call	0x2372	; 0x2372 <digitalWrite>
    11b0:	c1 0f       	add	r28, r17
    11b2:	d1 1d       	adc	r29, r1
    11b4:	0d 83       	std	Y+5, r16	; 0x05
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	01 c0       	rjmp	.+2      	; 0x11bc <_ZN9MaxMatrix11setColumnLLEhh+0x92>
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	ff 90       	pop	r15
    11c6:	ef 90       	pop	r14
    11c8:	df 90       	pop	r13
    11ca:	cf 90       	pop	r12
    11cc:	bf 90       	pop	r11
    11ce:	08 95       	ret

000011d0 <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh>:
    11d0:	af 92       	push	r10
    11d2:	bf 92       	push	r11
    11d4:	cf 92       	push	r12
    11d6:	df 92       	push	r13
    11d8:	ef 92       	push	r14
    11da:	ff 92       	push	r15
    11dc:	0f 93       	push	r16
    11de:	1f 93       	push	r17
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	68 30       	cpi	r22, 0x08	; 8
    11e6:	88 f5       	brcc	.+98     	; 0x124a <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh+0x7a>
    11e8:	04 2f       	mov	r16, r20
    11ea:	16 2f       	mov	r17, r22
    11ec:	ec 01       	movw	r28, r24
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	0e 94 b9 11 	call	0x2372	; 0x2372 <digitalWrite>
    11f6:	a1 2e       	mov	r10, r17
    11f8:	b1 2c       	mov	r11, r1
    11fa:	6e 01       	movw	r12, r28
    11fc:	85 e0       	ldi	r24, 0x05	; 5
    11fe:	c8 0e       	add	r12, r24
    1200:	d1 1c       	adc	r13, r1
    1202:	84 e0       	ldi	r24, 0x04	; 4
    1204:	e8 2e       	mov	r14, r24
    1206:	f1 2c       	mov	r15, r1
    1208:	1f 5f       	subi	r17, 0xFF	; 255
    120a:	21 2f       	mov	r18, r17
    120c:	41 e0       	ldi	r20, 0x01	; 1
    120e:	6a 81       	ldd	r22, Y+2	; 0x02
    1210:	88 81       	ld	r24, Y
    1212:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <shiftOut>
    1216:	20 2f       	mov	r18, r16
    1218:	41 e0       	ldi	r20, 0x01	; 1
    121a:	6a 81       	ldd	r22, Y+2	; 0x02
    121c:	88 81       	ld	r24, Y
    121e:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <shiftOut>
    1222:	f6 01       	movw	r30, r12
    1224:	00 83       	st	Z, r16
    1226:	f1 e0       	ldi	r31, 0x01	; 1
    1228:	ef 1a       	sub	r14, r31
    122a:	f1 08       	sbc	r15, r1
    122c:	ca 0c       	add	r12, r10
    122e:	db 1c       	adc	r13, r11
    1230:	e1 14       	cp	r14, r1
    1232:	f1 04       	cpc	r15, r1
    1234:	51 f7       	brne	.-44     	; 0x120a <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh+0x3a>
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	0e 94 b9 11 	call	0x2372	; 0x2372 <digitalWrite>
    123e:	61 e0       	ldi	r22, 0x01	; 1
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	0e 94 b9 11 	call	0x2372	; 0x2372 <digitalWrite>
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	01 c0       	rjmp	.+2      	; 0x124c <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh+0x7c>
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	df 91       	pop	r29
    124e:	cf 91       	pop	r28
    1250:	1f 91       	pop	r17
    1252:	0f 91       	pop	r16
    1254:	ff 90       	pop	r15
    1256:	ef 90       	pop	r14
    1258:	df 90       	pop	r13
    125a:	cf 90       	pop	r12
    125c:	bf 90       	pop	r11
    125e:	af 90       	pop	r10
    1260:	08 95       	ret

00001262 <_ZN9MaxMatrix5clearEv>:
    1262:	1f 93       	push	r17
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	ec 01       	movw	r28, r24
    126a:	10 e0       	ldi	r17, 0x00	; 0
    126c:	40 e0       	ldi	r20, 0x00	; 0
    126e:	61 2f       	mov	r22, r17
    1270:	ce 01       	movw	r24, r28
    1272:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh>
    1276:	1f 5f       	subi	r17, 0xFF	; 255
    1278:	18 30       	cpi	r17, 0x08	; 8
    127a:	c1 f7       	brne	.-16     	; 0x126c <_ZN9MaxMatrix5clearEv+0xa>
    127c:	fe 01       	movw	r30, r28
    127e:	35 96       	adiw	r30, 0x05	; 5
    1280:	a5 96       	adiw	r28, 0x25	; 37
    1282:	11 92       	st	Z+, r1
    1284:	ec 17       	cp	r30, r28
    1286:	fd 07       	cpc	r31, r29
    1288:	e1 f7       	brne	.-8      	; 0x1282 <_ZN9MaxMatrix5clearEv+0x20>
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	1f 91       	pop	r17
    1290:	08 95       	ret

00001292 <_ZN9MaxMatrix4initEv>:
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
    1296:	ec 01       	movw	r28, r24
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	8b 83       	std	Y+3, r24	; 0x03
    129c:	61 e0       	ldi	r22, 0x01	; 1
    129e:	88 81       	ld	r24, Y
    12a0:	0e 94 7d 11 	call	0x22fa	; 0x22fa <pinMode>
    12a4:	61 e0       	ldi	r22, 0x01	; 1
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	0e 94 7d 11 	call	0x22fa	; 0x22fa <pinMode>
    12ac:	61 e0       	ldi	r22, 0x01	; 1
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	0e 94 7d 11 	call	0x22fa	; 0x22fa <pinMode>
    12b4:	61 e0       	ldi	r22, 0x01	; 1
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	0e 94 b9 11 	call	0x2372	; 0x2372 <digitalWrite>
    12bc:	47 e0       	ldi	r20, 0x07	; 7
    12be:	6b e0       	ldi	r22, 0x0B	; 11
    12c0:	ce 01       	movw	r24, r28
    12c2:	0e 94 57 05 	call	0xaae	; 0xaae <_ZN9MaxMatrix13RegisterWriteEhh>
    12c6:	40 e0       	ldi	r20, 0x00	; 0
    12c8:	69 e0       	ldi	r22, 0x09	; 9
    12ca:	ce 01       	movw	r24, r28
    12cc:	0e 94 57 05 	call	0xaae	; 0xaae <_ZN9MaxMatrix13RegisterWriteEhh>
    12d0:	41 e0       	ldi	r20, 0x01	; 1
    12d2:	6c e0       	ldi	r22, 0x0C	; 12
    12d4:	ce 01       	movw	r24, r28
    12d6:	0e 94 57 05 	call	0xaae	; 0xaae <_ZN9MaxMatrix13RegisterWriteEhh>
    12da:	40 e0       	ldi	r20, 0x00	; 0
    12dc:	6f e0       	ldi	r22, 0x0F	; 15
    12de:	ce 01       	movw	r24, r28
    12e0:	0e 94 57 05 	call	0xaae	; 0xaae <_ZN9MaxMatrix13RegisterWriteEhh>
    12e4:	ce 01       	movw	r24, r28
    12e6:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN9MaxMatrix5clearEv>
    12ea:	65 e0       	ldi	r22, 0x05	; 5
    12ec:	ce 01       	movw	r24, r28
    12ee:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZN9MaxMatrix12setIntensityEh>
    12f2:	82 e0       	ldi	r24, 0x02	; 2
    12f4:	8b 83       	std	Y+3, r24	; 0x03
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	08 95       	ret

000012fc <_ZN9MaxMatrix8setRowLLEhhh>:
    12fc:	af 92       	push	r10
    12fe:	bf 92       	push	r11
    1300:	cf 92       	push	r12
    1302:	df 92       	push	r13
    1304:	ef 92       	push	r14
    1306:	ff 92       	push	r15
    1308:	0f 93       	push	r16
    130a:	1f 93       	push	r17
    130c:	cf 93       	push	r28
    130e:	df 93       	push	r29
    1310:	64 30       	cpi	r22, 0x04	; 4
    1312:	08 f0       	brcs	.+2      	; 0x1316 <_ZN9MaxMatrix8setRowLLEhhh+0x1a>
    1314:	42 c0       	rjmp	.+132    	; 0x139a <_ZN9MaxMatrix8setRowLLEhhh+0x9e>
    1316:	48 30       	cpi	r20, 0x08	; 8
    1318:	08 f0       	brcs	.+2      	; 0x131c <_ZN9MaxMatrix8setRowLLEhhh+0x20>
    131a:	3f c0       	rjmp	.+126    	; 0x139a <_ZN9MaxMatrix8setRowLLEhhh+0x9e>
    131c:	c6 2f       	mov	r28, r22
    131e:	8c 01       	movw	r16, r24
    1320:	f6 2e       	mov	r15, r22
    1322:	ff 0c       	add	r15, r15
    1324:	ff 0c       	add	r15, r15
    1326:	ff 0c       	add	r15, r15
    1328:	d0 e0       	ldi	r29, 0x00	; 0
    132a:	21 96       	adiw	r28, 0x01	; 1
    132c:	83 e0       	ldi	r24, 0x03	; 3
    132e:	cc 0f       	add	r28, r28
    1330:	dd 1f       	adc	r29, r29
    1332:	8a 95       	dec	r24
    1334:	e1 f7       	brne	.-8      	; 0x132e <_ZN9MaxMatrix8setRowLLEhhh+0x32>
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	a0 e0       	ldi	r26, 0x00	; 0
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	04 c0       	rjmp	.+8      	; 0x1348 <_ZN9MaxMatrix8setRowLLEhhh+0x4c>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	aa 1f       	adc	r26, r26
    1346:	bb 1f       	adc	r27, r27
    1348:	4a 95       	dec	r20
    134a:	d2 f7       	brpl	.-12     	; 0x1340 <_ZN9MaxMatrix8setRowLLEhhh+0x44>
    134c:	a8 2e       	mov	r10, r24
    134e:	e8 2e       	mov	r14, r24
    1350:	e0 94       	com	r14
    1352:	97 e0       	ldi	r25, 0x07	; 7
    1354:	b9 2e       	mov	r11, r25
    1356:	c2 2e       	mov	r12, r18
    1358:	d1 2c       	mov	r13, r1
    135a:	ef 2d       	mov	r30, r15
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	ec 17       	cp	r30, r28
    1360:	fd 07       	cpc	r31, r29
    1362:	cc f4       	brge	.+50     	; 0x1396 <_ZN9MaxMatrix8setRowLLEhhh+0x9a>
    1364:	e0 0f       	add	r30, r16
    1366:	f1 1f       	adc	r31, r17
    1368:	c6 01       	movw	r24, r12
    136a:	0b 2c       	mov	r0, r11
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <_ZN9MaxMatrix8setRowLLEhhh+0x76>
    136e:	95 95       	asr	r25
    1370:	87 95       	ror	r24
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <_ZN9MaxMatrix8setRowLLEhhh+0x72>
    1376:	80 ff       	sbrs	r24, 0
    1378:	03 c0       	rjmp	.+6      	; 0x1380 <_ZN9MaxMatrix8setRowLLEhhh+0x84>
    137a:	85 81       	ldd	r24, Z+5	; 0x05
    137c:	8a 29       	or	r24, r10
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <_ZN9MaxMatrix8setRowLLEhhh+0x88>
    1380:	85 81       	ldd	r24, Z+5	; 0x05
    1382:	8e 21       	and	r24, r14
    1384:	85 83       	std	Z+5, r24	; 0x05
    1386:	45 81       	ldd	r20, Z+5	; 0x05
    1388:	6f 2d       	mov	r22, r15
    138a:	c8 01       	movw	r24, r16
    138c:	0e 94 95 08 	call	0x112a	; 0x112a <_ZN9MaxMatrix11setColumnLLEhh>
    1390:	ba 94       	dec	r11
    1392:	f3 94       	inc	r15
    1394:	e2 cf       	rjmp	.-60     	; 0x135a <_ZN9MaxMatrix8setRowLLEhhh+0x5e>
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	01 c0       	rjmp	.+2      	; 0x139c <_ZN9MaxMatrix8setRowLLEhhh+0xa0>
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	1f 91       	pop	r17
    13a2:	0f 91       	pop	r16
    13a4:	ff 90       	pop	r15
    13a6:	ef 90       	pop	r14
    13a8:	df 90       	pop	r13
    13aa:	cf 90       	pop	r12
    13ac:	bf 90       	pop	r11
    13ae:	af 90       	pop	r10
    13b0:	08 95       	ret

000013b2 <_ZN9MaxMatrix9setColumnEhh>:
    13b2:	ef 92       	push	r14
    13b4:	ff 92       	push	r15
    13b6:	0f 93       	push	r16
    13b8:	1f 93       	push	r17
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	1f 92       	push	r1
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	fc 01       	movw	r30, r24
    13c6:	24 2f       	mov	r18, r20
    13c8:	06 2f       	mov	r16, r22
    13ca:	06 95       	lsr	r16
    13cc:	06 95       	lsr	r16
    13ce:	06 95       	lsr	r16
    13d0:	46 2f       	mov	r20, r22
    13d2:	47 70       	andi	r20, 0x07	; 7
    13d4:	94 81       	ldd	r25, Z+4	; 0x04
    13d6:	91 11       	cpse	r25, r1
    13d8:	03 c0       	rjmp	.+6      	; 0x13e0 <_ZN9MaxMatrix9setColumnEhh+0x2e>
    13da:	42 2f       	mov	r20, r18
    13dc:	cf 01       	movw	r24, r30
    13de:	11 c0       	rjmp	.+34     	; 0x1402 <_ZN9MaxMatrix9setColumnEhh+0x50>
    13e0:	91 30       	cpi	r25, 0x01	; 1
    13e2:	19 f4       	brne	.+6      	; 0x13ea <_ZN9MaxMatrix9setColumnEhh+0x38>
    13e4:	60 2f       	mov	r22, r16
    13e6:	cf 01       	movw	r24, r30
    13e8:	23 c0       	rjmp	.+70     	; 0x1430 <_ZN9MaxMatrix9setColumnEhh+0x7e>
    13ea:	16 2f       	mov	r17, r22
    13ec:	7f 01       	movw	r14, r30
    13ee:	92 30       	cpi	r25, 0x02	; 2
    13f0:	89 f4       	brne	.+34     	; 0x1414 <_ZN9MaxMatrix9setColumnEhh+0x62>
    13f2:	62 2f       	mov	r22, r18
    13f4:	cf 01       	movw	r24, r30
    13f6:	0e 94 b3 05 	call	0xb66	; 0xb66 <_ZN9MaxMatrix11reverseByteEh>
    13fa:	6f e1       	ldi	r22, 0x1F	; 31
    13fc:	61 1b       	sub	r22, r17
    13fe:	48 2f       	mov	r20, r24
    1400:	c7 01       	movw	r24, r14
    1402:	0f 90       	pop	r0
    1404:	df 91       	pop	r29
    1406:	cf 91       	pop	r28
    1408:	1f 91       	pop	r17
    140a:	0f 91       	pop	r16
    140c:	ff 90       	pop	r15
    140e:	ef 90       	pop	r14
    1410:	0c 94 95 08 	jmp	0x112a	; 0x112a <_ZN9MaxMatrix11setColumnLLEhh>
    1414:	93 30       	cpi	r25, 0x03	; 3
    1416:	a9 f4       	brne	.+42     	; 0x1442 <_ZN9MaxMatrix9setColumnEhh+0x90>
    1418:	62 2f       	mov	r22, r18
    141a:	cf 01       	movw	r24, r30
    141c:	49 83       	std	Y+1, r20	; 0x01
    141e:	0e 94 b3 05 	call	0xb66	; 0xb66 <_ZN9MaxMatrix11reverseByteEh>
    1422:	97 e0       	ldi	r25, 0x07	; 7
    1424:	49 81       	ldd	r20, Y+1	; 0x01
    1426:	94 1b       	sub	r25, r20
    1428:	49 2f       	mov	r20, r25
    142a:	28 2f       	mov	r18, r24
    142c:	60 2f       	mov	r22, r16
    142e:	c7 01       	movw	r24, r14
    1430:	0f 90       	pop	r0
    1432:	df 91       	pop	r29
    1434:	cf 91       	pop	r28
    1436:	1f 91       	pop	r17
    1438:	0f 91       	pop	r16
    143a:	ff 90       	pop	r15
    143c:	ef 90       	pop	r14
    143e:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <_ZN9MaxMatrix8setRowLLEhhh>
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	0f 90       	pop	r0
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	1f 91       	pop	r17
    144c:	0f 91       	pop	r16
    144e:	ff 90       	pop	r15
    1450:	ef 90       	pop	r14
    1452:	08 95       	ret

00001454 <_ZN9MaxMatrix6setDotEhhb>:
    1454:	df 92       	push	r13
    1456:	ef 92       	push	r14
    1458:	ff 92       	push	r15
    145a:	0f 93       	push	r16
    145c:	1f 93       	push	r17
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	1f 92       	push	r1
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	60 32       	cpi	r22, 0x20	; 32
    146a:	80 f5       	brcc	.+96     	; 0x14cc <_ZN9MaxMatrix6setDotEhhb+0x78>
    146c:	48 30       	cpi	r20, 0x08	; 8
    146e:	70 f5       	brcc	.+92     	; 0x14cc <_ZN9MaxMatrix6setDotEhhb+0x78>
    1470:	d2 2e       	mov	r13, r18
    1472:	e4 2e       	mov	r14, r20
    1474:	f6 2e       	mov	r15, r22
    1476:	8c 01       	movw	r16, r24
    1478:	ae 01       	movw	r20, r28
    147a:	4f 5f       	subi	r20, 0xFF	; 255
    147c:	5f 4f       	sbci	r21, 0xFF	; 255
    147e:	0e 94 3f 08 	call	0x107e	; 0x107e <_ZN9MaxMatrix9getColumnEhPh>
    1482:	29 81       	ldd	r18, Y+1	; 0x01
    1484:	dd 20       	and	r13, r13
    1486:	71 f0       	breq	.+28     	; 0x14a4 <_ZN9MaxMatrix6setDotEhhb+0x50>
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	a0 e0       	ldi	r26, 0x00	; 0
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	04 c0       	rjmp	.+8      	; 0x149a <_ZN9MaxMatrix6setDotEhhb+0x46>
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	aa 1f       	adc	r26, r26
    1498:	bb 1f       	adc	r27, r27
    149a:	ea 94       	dec	r14
    149c:	d2 f7       	brpl	.-12     	; 0x1492 <_ZN9MaxMatrix6setDotEhhb+0x3e>
    149e:	82 2b       	or	r24, r18
    14a0:	89 83       	std	Y+1, r24	; 0x01
    14a2:	0e c0       	rjmp	.+28     	; 0x14c0 <_ZN9MaxMatrix6setDotEhhb+0x6c>
    14a4:	41 e0       	ldi	r20, 0x01	; 1
    14a6:	50 e0       	ldi	r21, 0x00	; 0
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	70 e0       	ldi	r23, 0x00	; 0
    14ac:	04 c0       	rjmp	.+8      	; 0x14b6 <_ZN9MaxMatrix6setDotEhhb+0x62>
    14ae:	44 0f       	add	r20, r20
    14b0:	55 1f       	adc	r21, r21
    14b2:	66 1f       	adc	r22, r22
    14b4:	77 1f       	adc	r23, r23
    14b6:	ea 94       	dec	r14
    14b8:	d2 f7       	brpl	.-12     	; 0x14ae <_ZN9MaxMatrix6setDotEhhb+0x5a>
    14ba:	40 95       	com	r20
    14bc:	42 23       	and	r20, r18
    14be:	49 83       	std	Y+1, r20	; 0x01
    14c0:	49 81       	ldd	r20, Y+1	; 0x01
    14c2:	6f 2d       	mov	r22, r15
    14c4:	c8 01       	movw	r24, r16
    14c6:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <_ZN9MaxMatrix9setColumnEhh>
    14ca:	01 c0       	rjmp	.+2      	; 0x14ce <_ZN9MaxMatrix6setDotEhhb+0x7a>
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	0f 90       	pop	r0
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	1f 91       	pop	r17
    14d6:	0f 91       	pop	r16
    14d8:	ff 90       	pop	r15
    14da:	ef 90       	pop	r14
    14dc:	df 90       	pop	r13
    14de:	08 95       	ret

000014e0 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh>:
    14e0:	2f 92       	push	r2
    14e2:	3f 92       	push	r3
    14e4:	4f 92       	push	r4
    14e6:	5f 92       	push	r5
    14e8:	6f 92       	push	r6
    14ea:	7f 92       	push	r7
    14ec:	8f 92       	push	r8
    14ee:	9f 92       	push	r9
    14f0:	af 92       	push	r10
    14f2:	bf 92       	push	r11
    14f4:	cf 92       	push	r12
    14f6:	df 92       	push	r13
    14f8:	ef 92       	push	r14
    14fa:	ff 92       	push	r15
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	00 d0       	rcall	.+0      	; 0x1506 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x26>
    1506:	00 d0       	rcall	.+0      	; 0x1508 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x28>
    1508:	1f 92       	push	r1
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	4c 01       	movw	r8, r24
    1510:	6b 01       	movw	r12, r22
    1512:	3a 01       	movw	r6, r20
    1514:	59 01       	movw	r10, r18
    1516:	f9 01       	movw	r30, r18
    1518:	40 80       	ld	r4, Z
    151a:	51 2c       	mov	r5, r1
    151c:	e1 80       	ldd	r14, Z+1	; 0x01
    151e:	f1 2c       	mov	r15, r1
    1520:	f8 e0       	ldi	r31, 0x08	; 8
    1522:	ef 16       	cp	r14, r31
    1524:	f1 04       	cpc	r15, r1
    1526:	c9 f4       	brne	.+50     	; 0x155a <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x7a>
    1528:	45 2b       	or	r20, r21
    152a:	b9 f4       	brne	.+46     	; 0x155a <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x7a>
    152c:	00 e0       	ldi	r16, 0x00	; 0
    152e:	10 e0       	ldi	r17, 0x00	; 0
    1530:	04 15       	cp	r16, r4
    1532:	15 05       	cpc	r17, r5
    1534:	0c f0       	brlt	.+2      	; 0x1538 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x58>
    1536:	4f c0       	rjmp	.+158    	; 0x15d6 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xf6>
    1538:	c8 01       	movw	r24, r16
    153a:	8c 0d       	add	r24, r12
    153c:	9d 1d       	adc	r25, r13
    153e:	80 97       	sbiw	r24, 0x20	; 32
    1540:	48 f4       	brcc	.+18     	; 0x1554 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x74>
    1542:	f5 01       	movw	r30, r10
    1544:	e0 0f       	add	r30, r16
    1546:	f1 1f       	adc	r31, r17
    1548:	42 81       	ldd	r20, Z+2	; 0x02
    154a:	60 2f       	mov	r22, r16
    154c:	6c 0d       	add	r22, r12
    154e:	c4 01       	movw	r24, r8
    1550:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <_ZN9MaxMatrix9setColumnEhh>
    1554:	0f 5f       	subi	r16, 0xFF	; 255
    1556:	1f 4f       	sbci	r17, 0xFF	; 255
    1558:	eb cf       	rjmp	.-42     	; 0x1530 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x50>
    155a:	1d 82       	std	Y+5, r1	; 0x05
    155c:	1c 82       	std	Y+4, r1	; 0x04
    155e:	8c 81       	ldd	r24, Y+4	; 0x04
    1560:	9d 81       	ldd	r25, Y+5	; 0x05
    1562:	84 15       	cp	r24, r4
    1564:	95 05       	cpc	r25, r5
    1566:	bc f5       	brge	.+110    	; 0x15d6 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xf6>
    1568:	00 e0       	ldi	r16, 0x00	; 0
    156a:	10 e0       	ldi	r17, 0x00	; 0
    156c:	2c 80       	ldd	r2, Y+4	; 0x04
    156e:	3d 80       	ldd	r3, Y+5	; 0x05
    1570:	2c 0c       	add	r2, r12
    1572:	3d 1c       	adc	r3, r13
    1574:	8c 81       	ldd	r24, Y+4	; 0x04
    1576:	9d 81       	ldd	r25, Y+5	; 0x05
    1578:	8a 0d       	add	r24, r10
    157a:	9b 1d       	adc	r25, r11
    157c:	9a 83       	std	Y+2, r25	; 0x02
    157e:	89 83       	std	Y+1, r24	; 0x01
    1580:	3c 81       	ldd	r19, Y+4	; 0x04
    1582:	3c 0d       	add	r19, r12
    1584:	0e 15       	cp	r16, r14
    1586:	1f 05       	cpc	r17, r15
    1588:	04 f5       	brge	.+64     	; 0x15ca <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xea>
    158a:	80 e2       	ldi	r24, 0x20	; 32
    158c:	28 16       	cp	r2, r24
    158e:	31 04       	cpc	r3, r1
    1590:	c8 f4       	brcc	.+50     	; 0x15c4 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xe4>
    1592:	c8 01       	movw	r24, r16
    1594:	86 0d       	add	r24, r6
    1596:	97 1d       	adc	r25, r7
    1598:	08 97       	sbiw	r24, 0x08	; 8
    159a:	a0 f4       	brcc	.+40     	; 0x15c4 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xe4>
    159c:	e9 81       	ldd	r30, Y+1	; 0x01
    159e:	fa 81       	ldd	r31, Y+2	; 0x02
    15a0:	82 81       	ldd	r24, Z+2	; 0x02
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	00 2e       	mov	r0, r16
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xcc>
    15a8:	95 95       	asr	r25
    15aa:	87 95       	ror	r24
    15ac:	0a 94       	dec	r0
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xc8>
    15b0:	28 2f       	mov	r18, r24
    15b2:	21 70       	andi	r18, 0x01	; 1
    15b4:	40 2f       	mov	r20, r16
    15b6:	46 0d       	add	r20, r6
    15b8:	63 2f       	mov	r22, r19
    15ba:	c4 01       	movw	r24, r8
    15bc:	3b 83       	std	Y+3, r19	; 0x03
    15be:	0e 94 2a 0a 	call	0x1454	; 0x1454 <_ZN9MaxMatrix6setDotEhhb>
    15c2:	3b 81       	ldd	r19, Y+3	; 0x03
    15c4:	0f 5f       	subi	r16, 0xFF	; 255
    15c6:	1f 4f       	sbci	r17, 0xFF	; 255
    15c8:	dd cf       	rjmp	.-70     	; 0x1584 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xa4>
    15ca:	ec 81       	ldd	r30, Y+4	; 0x04
    15cc:	fd 81       	ldd	r31, Y+5	; 0x05
    15ce:	31 96       	adiw	r30, 0x01	; 1
    15d0:	fd 83       	std	Y+5, r31	; 0x05
    15d2:	ec 83       	std	Y+4, r30	; 0x04
    15d4:	c4 cf       	rjmp	.-120    	; 0x155e <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x7e>
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	df 91       	pop	r29
    15e2:	cf 91       	pop	r28
    15e4:	1f 91       	pop	r17
    15e6:	0f 91       	pop	r16
    15e8:	ff 90       	pop	r15
    15ea:	ef 90       	pop	r14
    15ec:	df 90       	pop	r13
    15ee:	cf 90       	pop	r12
    15f0:	bf 90       	pop	r11
    15f2:	af 90       	pop	r10
    15f4:	9f 90       	pop	r9
    15f6:	8f 90       	pop	r8
    15f8:	7f 90       	pop	r7
    15fa:	6f 90       	pop	r6
    15fc:	5f 90       	pop	r5
    15fe:	4f 90       	pop	r4
    1600:	3f 90       	pop	r3
    1602:	2f 90       	pop	r2
    1604:	08 95       	ret

00001606 <_ZN9MaxMatrix7setTextEPKc>:
    1606:	cf 92       	push	r12
    1608:	df 92       	push	r13
    160a:	ef 92       	push	r14
    160c:	ff 92       	push	r15
    160e:	0f 93       	push	r16
    1610:	1f 93       	push	r17
    1612:	cf 93       	push	r28
    1614:	df 93       	push	r29
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	28 97       	sbiw	r28, 0x08	; 8
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	61 15       	cp	r22, r1
    1628:	71 05       	cpc	r23, r1
    162a:	11 f4       	brne	.+4      	; 0x1630 <_ZN9MaxMatrix7setTextEPKc+0x2a>
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	2e c0       	rjmp	.+92     	; 0x168c <_ZN9MaxMatrix7setTextEPKc+0x86>
    1630:	7c 01       	movw	r14, r24
    1632:	8b 01       	movw	r16, r22
    1634:	c1 2c       	mov	r12, r1
    1636:	d1 2c       	mov	r13, r1
    1638:	f8 01       	movw	r30, r16
    163a:	61 91       	ld	r22, Z+
    163c:	8f 01       	movw	r16, r30
    163e:	66 23       	and	r22, r22
    1640:	21 f1       	breq	.+72     	; 0x168a <_ZN9MaxMatrix7setTextEPKc+0x84>
    1642:	ae 01       	movw	r20, r28
    1644:	48 5f       	subi	r20, 0xF8	; 248
    1646:	5f 4f       	sbci	r21, 0xFF	; 255
    1648:	c7 01       	movw	r24, r14
    164a:	0e 94 cb 07 	call	0xf96	; 0xf96 <_ZN9MaxMatrix19convertCharToSpriteEcPh>
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	69 f3       	breq	.-38     	; 0x162c <_ZN9MaxMatrix7setTextEPKc+0x26>
    1652:	ae 01       	movw	r20, r28
    1654:	4f 5f       	subi	r20, 0xFF	; 255
    1656:	5f 4f       	sbci	r21, 0xFF	; 255
    1658:	68 85       	ldd	r22, Y+8	; 0x08
    165a:	c7 01       	movw	r24, r14
    165c:	0e 94 9a 05 	call	0xb34	; 0xb34 <_ZN9MaxMatrix9getSpriteEhPA7_h>
    1660:	81 30       	cpi	r24, 0x01	; 1
    1662:	21 f3       	breq	.-56     	; 0x162c <_ZN9MaxMatrix7setTextEPKc+0x26>
    1664:	9e 01       	movw	r18, r28
    1666:	2f 5f       	subi	r18, 0xFF	; 255
    1668:	3f 4f       	sbci	r19, 0xFF	; 255
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	b6 01       	movw	r22, r12
    1670:	c7 01       	movw	r24, r14
    1672:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh>
    1676:	29 81       	ldd	r18, Y+1	; 0x01
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	2f 5f       	subi	r18, 0xFF	; 255
    167c:	3f 4f       	sbci	r19, 0xFF	; 255
    167e:	c2 0e       	add	r12, r18
    1680:	d3 1e       	adc	r13, r19
    1682:	81 e2       	ldi	r24, 0x21	; 33
    1684:	c8 16       	cp	r12, r24
    1686:	d1 04       	cpc	r13, r1
    1688:	bc f2       	brlt	.-82     	; 0x1638 <_ZN9MaxMatrix7setTextEPKc+0x32>
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	28 96       	adiw	r28, 0x08	; 8
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	f8 94       	cli
    1692:	de bf       	out	0x3e, r29	; 62
    1694:	0f be       	out	0x3f, r0	; 63
    1696:	cd bf       	out	0x3d, r28	; 61
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	1f 91       	pop	r17
    169e:	0f 91       	pop	r16
    16a0:	ff 90       	pop	r15
    16a2:	ef 90       	pop	r14
    16a4:	df 90       	pop	r13
    16a6:	cf 90       	pop	r12
    16a8:	08 95       	ret

000016aa <_ZN9MaxMatrix11shiftLeftLLEbbb>:
 *  \param[in]      FillWithZero                initialize the column on the right side with zero.
 *  \param[in]      ShiftToNeighbourModule      shift led states to neighbour module
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftLeftLL(bool Rotate, bool FillWithZero, bool ShiftToNeighbourModule)
{
    16aa:	ef 92       	push	r14
    16ac:	ff 92       	push	r15
    16ae:	0f 93       	push	r16
    16b0:	1f 93       	push	r17
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
	/* should we shift the state to the next module? */
    if(ShiftToNeighbourModule) {
    16b6:	22 23       	and	r18, r18
    16b8:	b9 f0       	breq	.+46     	; 0x16e8 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x3e>
		/* save left column will be wrapped around later if rotation is active */
        byte ColumnLeft = MatrixBuffer[0];
    16ba:	ec 01       	movw	r28, r24
    16bc:	2d 81       	ldd	r18, Y+5	; 0x05
    16be:	fc 01       	movw	r30, r24
    16c0:	36 96       	adiw	r30, 0x06	; 6
    16c2:	dc 01       	movw	r26, r24
    16c4:	95 96       	adiw	r26, 0x25	; 37
		/* shift every column one step left */
        for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS - 1; Column++) {
            MatrixBuffer[Column] = MatrixBuffer[Column + 1];
    16c6:	31 91       	ld	r19, Z+
    16c8:	ef 01       	movw	r28, r30
    16ca:	22 97       	sbiw	r28, 0x02	; 2
    16cc:	38 83       	st	Y, r19
	/* should we shift the state to the next module? */
    if(ShiftToNeighbourModule) {
		/* save left column will be wrapped around later if rotation is active */
        byte ColumnLeft = MatrixBuffer[0];
		/* shift every column one step left */
        for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS - 1; Column++) {
    16ce:	ea 17       	cp	r30, r26
    16d0:	fb 07       	cpc	r31, r27
    16d2:	c9 f7       	brne	.-14     	; 0x16c6 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x1c>
            MatrixBuffer[Column] = MatrixBuffer[Column + 1];
        }
		/* wrap around saved left column to the right */
        if(Rotate) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = ColumnLeft;
    16d4:	66 23       	and	r22, r22
    16d6:	19 f0       	breq	.+6      	; 0x16de <_ZN9MaxMatrix11shiftLeftLLEbbb+0x34>
    16d8:	fc 01       	movw	r30, r24
    16da:	24 a3       	std	Z+36, r18	; 0x24
    16dc:	26 c0       	rjmp	.+76     	; 0x172a <_ZN9MaxMatrix11shiftLeftLLEbbb+0x80>
		/* otherwise initialize right column */
        else if(FillWithZero) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = 0;
    16de:	44 23       	and	r20, r20
    16e0:	21 f1       	breq	.+72     	; 0x172a <_ZN9MaxMatrix11shiftLeftLLEbbb+0x80>
    16e2:	ec 01       	movw	r28, r24
    16e4:	1c a2       	std	Y+36, r1	; 0x24
    16e6:	21 c0       	rjmp	.+66     	; 0x172a <_ZN9MaxMatrix11shiftLeftLLEbbb+0x80>
    16e8:	fc 01       	movw	r30, r24
    16ea:	3c 96       	adiw	r30, 0x0c	; 12
    16ec:	7c 01       	movw	r14, r24
    16ee:	dc e2       	ldi	r29, 0x2C	; 44
    16f0:	ed 0e       	add	r14, r29
    16f2:	f1 1c       	adc	r15, r1
    16f4:	df 01       	movw	r26, r30
    16f6:	17 97       	sbiw	r26, 0x07	; 7
    } else {
		/* no shift to neighbor module is more complicated, we have to iterate over every module */
        for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
			/* save left column on module will be wrapped around later if rotation is active */
            byte ModuleColumnLeft = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module];
    16f8:	5c 91       	ld	r21, X
    16fa:	11 96       	adiw	r26, 0x01	; 1
			/* shift every column of the module one step left */
            for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; Column++) {
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
                MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] = 
                MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module) + 1];
    1700:	7d 91       	ld	r23, X+
    1702:	8d 01       	movw	r16, r26
    1704:	02 50       	subi	r16, 0x02	; 2
    1706:	11 09       	sbc	r17, r1
    1708:	e8 01       	movw	r28, r16
    170a:	78 83       	st	Y, r23
		/* no shift to neighbor module is more complicated, we have to iterate over every module */
        for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
			/* save left column on module will be wrapped around later if rotation is active */
            byte ModuleColumnLeft = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module];
			/* shift every column of the module one step left */
            for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; Column++) {
    170c:	2f 5f       	subi	r18, 0xFF	; 255
    170e:	3f 4f       	sbci	r19, 0xFF	; 255
    1710:	27 30       	cpi	r18, 0x07	; 7
    1712:	31 05       	cpc	r19, r1
    1714:	a9 f7       	brne	.-22     	; 0x1700 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x56>
                MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] = 
                MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module) + 1];
            }
			/* wrap around saved left module column to the right */
            if(Rotate) MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * (Module + 1) - 1] = ModuleColumnLeft;
    1716:	66 23       	and	r22, r22
    1718:	11 f0       	breq	.+4      	; 0x171e <_ZN9MaxMatrix11shiftLeftLLEbbb+0x74>
    171a:	50 83       	st	Z, r21
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x78>
			/* otherwise initialize right module column */
            else if(FillWithZero) MatrixBuffer[(Module + 1) * MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1] = 0;
    171e:	41 11       	cpse	r20, r1
    1720:	10 82       	st	Z, r1
    1722:	38 96       	adiw	r30, 0x08	; 8
        if(Rotate) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = ColumnLeft;
		/* otherwise initialize right column */
        else if(FillWithZero) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = 0;
    } else {
		/* no shift to neighbor module is more complicated, we have to iterate over every module */
        for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
    1724:	ee 15       	cp	r30, r14
    1726:	ff 05       	cpc	r31, r15
    1728:	29 f7       	brne	.-54     	; 0x16f4 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x4a>
			/* otherwise initialize right module column */
            else if(FillWithZero) MatrixBuffer[(Module + 1) * MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1] = 0;
        }
    }
    reload();
} /* shiftLeftLL */
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	1f 91       	pop	r17
    1730:	0f 91       	pop	r16
    1732:	ff 90       	pop	r15
    1734:	ef 90       	pop	r14
            if(Rotate) MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * (Module + 1) - 1] = ModuleColumnLeft;
			/* otherwise initialize right module column */
            else if(FillWithZero) MatrixBuffer[(Module + 1) * MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1] = 0;
        }
    }
    reload();
    1736:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <_ZN9MaxMatrix6reloadEv>

0000173a <_ZN9MaxMatrix12shiftRightLLEbbb>:
 *  \param[in]      FillWithZero                initialize the column on the left side with zero.
 *  \param[in]      ShiftToNeighbourModule      shift led states to neighbour module
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftRightLL(bool Rotate, bool FillWithZero, bool ShiftToNeighbourModule)
{
    173a:	cf 92       	push	r12
    173c:	df 92       	push	r13
    173e:	ef 92       	push	r14
    1740:	ff 92       	push	r15
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	dc 01       	movw	r26, r24
    174c:	95 96       	adiw	r26, 0x25	; 37
    174e:	6d 01       	movw	r12, r26
	/* should we shift the state to the next module? */
    if(ShiftToNeighbourModule) {
		/* save right column will be wrapped around later if rotation is active */
        byte ColumnRight = MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1];
    1750:	fc 01       	movw	r30, r24
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftRightLL(bool Rotate, bool FillWithZero, bool ShiftToNeighbourModule)
{
	/* should we shift the state to the next module? */
    if(ShiftToNeighbourModule) {
    1752:	22 23       	and	r18, r18
    1754:	a9 f0       	breq	.+42     	; 0x1780 <_ZN9MaxMatrix12shiftRightLLEbbb+0x46>
		/* save right column will be wrapped around later if rotation is active */
        byte ColumnRight = MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1];
    1756:	24 a1       	ldd	r18, Z+36	; 0x24
    1758:	fd 01       	movw	r30, r26
    175a:	5f 97       	sbiw	r26, 0x1f	; 31
    175c:	ef 01       	movw	r28, r30
    175e:	22 97       	sbiw	r28, 0x02	; 2
        for(int Column = MAXMATRIX_NUMBER_OF_COLUMNS - 1; Column > 0; Column--) { 
            MatrixBuffer[Column] = MatrixBuffer[Column - 1]; 
    1760:	38 81       	ld	r19, Y
    1762:	32 93       	st	-Z, r19
{
	/* should we shift the state to the next module? */
    if(ShiftToNeighbourModule) {
		/* save right column will be wrapped around later if rotation is active */
        byte ColumnRight = MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1];
        for(int Column = MAXMATRIX_NUMBER_OF_COLUMNS - 1; Column > 0; Column--) { 
    1764:	ea 17       	cp	r30, r26
    1766:	fb 07       	cpc	r31, r27
    1768:	c9 f7       	brne	.-14     	; 0x175c <_ZN9MaxMatrix12shiftRightLLEbbb+0x22>
            MatrixBuffer[Column] = MatrixBuffer[Column - 1]; 
        }
		/* wrap around saved right column to the left */
        if(Rotate) MatrixBuffer[0] = ColumnRight;
    176a:	66 23       	and	r22, r22
    176c:	21 f0       	breq	.+8      	; 0x1776 <_ZN9MaxMatrix12shiftRightLLEbbb+0x3c>
    176e:	dc 01       	movw	r26, r24
    1770:	15 96       	adiw	r26, 0x05	; 5
    1772:	2c 93       	st	X, r18
    1774:	22 c0       	rjmp	.+68     	; 0x17ba <_ZN9MaxMatrix12shiftRightLLEbbb+0x80>
		/* otherwise initialize right column */
        else if(FillWithZero) MatrixBuffer[0] = 0;
    1776:	44 23       	and	r20, r20
    1778:	01 f1       	breq	.+64     	; 0x17ba <_ZN9MaxMatrix12shiftRightLLEbbb+0x80>
    177a:	fc 01       	movw	r30, r24
    177c:	15 82       	std	Z+5, r1	; 0x05
    177e:	1d c0       	rjmp	.+58     	; 0x17ba <_ZN9MaxMatrix12shiftRightLLEbbb+0x80>
    1780:	35 96       	adiw	r30, 0x05	; 5
    1782:	8f 01       	movw	r16, r30
    } else {
		/* no shift to neighbor module is more complicated, we have to iterate over every module */
        for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
            byte ModuleColumnRight = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * (Module + 1) - 1];
    1784:	57 81       	ldd	r21, Z+7	; 0x07
    1786:	38 96       	adiw	r30, 0x08	; 8
    1788:	ef 01       	movw	r28, r30
			/* shift every column of the module one step right */
            for(int Column = MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; Column > 0; Column--) {
    178a:	27 e0       	ldi	r18, 0x07	; 7
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	7e 01       	movw	r14, r28
    1790:	72 e0       	ldi	r23, 0x02	; 2
    1792:	e7 1a       	sub	r14, r23
    1794:	f1 08       	sbc	r15, r1
                MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] = 
                MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module) - 1];
    1796:	d7 01       	movw	r26, r14
    1798:	7c 91       	ld	r23, X
    179a:	7a 93       	st	-Y, r23
    } else {
		/* no shift to neighbor module is more complicated, we have to iterate over every module */
        for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
            byte ModuleColumnRight = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * (Module + 1) - 1];
			/* shift every column of the module one step right */
            for(int Column = MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; Column > 0; Column--) {
    179c:	21 50       	subi	r18, 0x01	; 1
    179e:	31 09       	sbc	r19, r1
    17a0:	b1 f7       	brne	.-20     	; 0x178e <_ZN9MaxMatrix12shiftRightLLEbbb+0x54>
                MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] = 
                MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module) - 1];
            }
			/* wrap around saved left module column to the left */
            if(Rotate) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = ModuleColumnRight;
    17a2:	66 23       	and	r22, r22
    17a4:	19 f0       	breq	.+6      	; 0x17ac <_ZN9MaxMatrix12shiftRightLLEbbb+0x72>
    17a6:	d8 01       	movw	r26, r16
    17a8:	5c 93       	st	X, r21
    17aa:	04 c0       	rjmp	.+8      	; 0x17b4 <_ZN9MaxMatrix12shiftRightLLEbbb+0x7a>
			/* otherwise initialize left module column */
            else if(FillWithZero) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = 0;
    17ac:	44 23       	and	r20, r20
    17ae:	11 f0       	breq	.+4      	; 0x17b4 <_ZN9MaxMatrix12shiftRightLLEbbb+0x7a>
    17b0:	d8 01       	movw	r26, r16
    17b2:	1c 92       	st	X, r1
        if(Rotate) MatrixBuffer[0] = ColumnRight;
		/* otherwise initialize right column */
        else if(FillWithZero) MatrixBuffer[0] = 0;
    } else {
		/* no shift to neighbor module is more complicated, we have to iterate over every module */
        for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
    17b4:	ec 15       	cp	r30, r12
    17b6:	fd 05       	cpc	r31, r13
    17b8:	21 f7       	brne	.-56     	; 0x1782 <_ZN9MaxMatrix12shiftRightLLEbbb+0x48>
			/* otherwise initialize left module column */
            else if(FillWithZero) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = 0;
        }
    }
    reload();
} /* shiftRightLL */
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	1f 91       	pop	r17
    17c0:	0f 91       	pop	r16
    17c2:	ff 90       	pop	r15
    17c4:	ef 90       	pop	r14
    17c6:	df 90       	pop	r13
    17c8:	cf 90       	pop	r12
            if(Rotate) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = ModuleColumnRight;
			/* otherwise initialize left module column */
            else if(FillWithZero) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = 0;
        }
    }
    reload();
    17ca:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <_ZN9MaxMatrix6reloadEv>

000017ce <_ZN9MaxMatrix9shiftUpLLEbb>:
 *  \param[in]      Rotate                      activate rotation of the matrix LED states
 *  \param[in]      ShiftToNeighbourModule      shift led states to neighbour module
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftUpLL(bool Rotate, bool ShiftToNeighbourModule)
{   
    17ce:	bf 92       	push	r11
    17d0:	cf 92       	push	r12
    17d2:	df 92       	push	r13
    17d4:	ef 92       	push	r14
    17d6:	ff 92       	push	r15
    17d8:	0f 93       	push	r16
    17da:	1f 93       	push	r17
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
    17e0:	00 d0       	rcall	.+0      	; 0x17e2 <_ZN9MaxMatrix9shiftUpLLEbb+0x14>
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	7c 01       	movw	r14, r24
    17e8:	c6 2e       	mov	r12, r22
    byte ModuleTopRow = 0;
    17ea:	1a 82       	std	Y+2, r1	; 0x02
    byte MatrixTopRow = 0;
    17ec:	19 82       	std	Y+1, r1	; 0x01
    17ee:	fc 01       	movw	r30, r24
    17f0:	35 96       	adiw	r30, 0x05	; 5

    if(ShiftToNeighbourModule) {
    17f2:	44 23       	and	r20, r20
    17f4:	e1 f1       	breq	.+120    	; 0x186e <_ZN9MaxMatrix9shiftUpLLEbb+0xa0>
    17f6:	8f 01       	movw	r16, r30
    17f8:	d1 2c       	mov	r13, r1
        for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++)
        {
            if(Module == 0 && Rotate) getRowLL(0, 0, &MatrixTopRow);
    17fa:	d1 10       	cpse	r13, r1
    17fc:	0a c0       	rjmp	.+20     	; 0x1812 <_ZN9MaxMatrix9shiftUpLLEbb+0x44>
    17fe:	cc 20       	and	r12, r12
    1800:	41 f0       	breq	.+16     	; 0x1812 <_ZN9MaxMatrix9shiftUpLLEbb+0x44>
    1802:	9e 01       	movw	r18, r28
    1804:	2f 5f       	subi	r18, 0xFF	; 255
    1806:	3f 4f       	sbci	r19, 0xFF	; 255
    1808:	40 e0       	ldi	r20, 0x00	; 0
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	c7 01       	movw	r24, r14
    180e:	0e 94 ed 07 	call	0xfda	; 0xfda <_ZN9MaxMatrix8getRowLLEhhPh>
            getRowLL(Module + 1, 0, &ModuleTopRow);
    1812:	bb 24       	eor	r11, r11
    1814:	b3 94       	inc	r11
    1816:	bd 0c       	add	r11, r13
    1818:	9e 01       	movw	r18, r28
    181a:	2e 5f       	subi	r18, 0xFE	; 254
    181c:	3f 4f       	sbci	r19, 0xFF	; 255
    181e:	40 e0       	ldi	r20, 0x00	; 0
    1820:	6b 2d       	mov	r22, r11
    1822:	c7 01       	movw	r24, r14
    1824:	0e 94 ed 07 	call	0xfda	; 0xfda <_ZN9MaxMatrix8getRowLLEhhPh>
    1828:	f8 01       	movw	r30, r16
            
            for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; Column++) 
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
                MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] >>= 1;
    182e:	80 81       	ld	r24, Z
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	95 95       	asr	r25
    1834:	87 95       	ror	r24
    1836:	81 93       	st	Z+, r24
        for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++)
        {
            if(Module == 0 && Rotate) getRowLL(0, 0, &MatrixTopRow);
            getRowLL(Module + 1, 0, &ModuleTopRow);
            
            for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; Column++) 
    1838:	2f 5f       	subi	r18, 0xFF	; 255
    183a:	3f 4f       	sbci	r19, 0xFF	; 255
    183c:	28 30       	cpi	r18, 0x08	; 8
    183e:	31 05       	cpc	r19, r1
    1840:	b1 f7       	brne	.-20     	; 0x182e <_ZN9MaxMatrix9shiftUpLLEbb+0x60>
                MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] >>= 1;
            
            if(Module == MAXMATRIX_NUMBER_OF_MODULES - 1) {
    1842:	83 e0       	ldi	r24, 0x03	; 3
    1844:	d8 12       	cpse	r13, r24
    1846:	06 c0       	rjmp	.+12     	; 0x1854 <_ZN9MaxMatrix9shiftUpLLEbb+0x86>
                if(Rotate) setRowLL(Module, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, MatrixTopRow);
    1848:	cc 20       	and	r12, r12
    184a:	51 f0       	breq	.+20     	; 0x1860 <_ZN9MaxMatrix9shiftUpLLEbb+0x92>
    184c:	29 81       	ldd	r18, Y+1	; 0x01
    184e:	47 e0       	ldi	r20, 0x07	; 7
    1850:	63 e0       	ldi	r22, 0x03	; 3
    1852:	03 c0       	rjmp	.+6      	; 0x185a <_ZN9MaxMatrix9shiftUpLLEbb+0x8c>
            } else {
                setRowLL(Module, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, ModuleTopRow);
    1854:	2a 81       	ldd	r18, Y+2	; 0x02
    1856:	47 e0       	ldi	r20, 0x07	; 7
    1858:	6d 2d       	mov	r22, r13
    185a:	c7 01       	movw	r24, r14
    185c:	0e 94 7e 09 	call	0x12fc	; 0x12fc <_ZN9MaxMatrix8setRowLLEhhh>
    1860:	08 5f       	subi	r16, 0xF8	; 248
    1862:	1f 4f       	sbci	r17, 0xFF	; 255
{   
    byte ModuleTopRow = 0;
    byte MatrixTopRow = 0;

    if(ShiftToNeighbourModule) {
        for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++)
    1864:	84 e0       	ldi	r24, 0x04	; 4
    1866:	b8 16       	cp	r11, r24
    1868:	89 f0       	breq	.+34     	; 0x188c <_ZN9MaxMatrix9shiftUpLLEbb+0xbe>
    186a:	db 2c       	mov	r13, r11
    186c:	c6 cf       	rjmp	.-116    	; 0x17fa <_ZN9MaxMatrix9shiftUpLLEbb+0x2c>
    186e:	ac 01       	movw	r20, r24
    1870:	4b 5d       	subi	r20, 0xDB	; 219
    1872:	5f 4f       	sbci	r21, 0xFF	; 255
            }
        }
    } else {
        for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS; Column++) 
        {
            bool TopBit = bitRead(MatrixBuffer[Column], 0);
    1874:	20 81       	ld	r18, Z
            MatrixBuffer[Column] >>= 1;
    1876:	82 2f       	mov	r24, r18
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	95 95       	asr	r25
    187c:	87 95       	ror	r24
            if(Rotate) bitWrite(MatrixBuffer[Column], MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, TopBit);
    187e:	c1 10       	cpse	r12, r1
    1880:	14 c0       	rjmp	.+40     	; 0x18aa <_ZN9MaxMatrix9shiftUpLLEbb+0xdc>
    1882:	80 83       	st	Z, r24
    1884:	31 96       	adiw	r30, 0x01	; 1
            } else {
                setRowLL(Module, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, ModuleTopRow);
            }
        }
    } else {
        for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS; Column++) 
    1886:	e4 17       	cp	r30, r20
    1888:	f5 07       	cpc	r31, r21
    188a:	a1 f7       	brne	.-24     	; 0x1874 <_ZN9MaxMatrix9shiftUpLLEbb+0xa6>
            bool TopBit = bitRead(MatrixBuffer[Column], 0);
            MatrixBuffer[Column] >>= 1;
            if(Rotate) bitWrite(MatrixBuffer[Column], MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, TopBit);
        }       
    }
    reload();
    188c:	c7 01       	movw	r24, r14
    188e:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN9MaxMatrix6reloadEv>
} /* shiftModuleUpLL */
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	ff 90       	pop	r15
    18a0:	ef 90       	pop	r14
    18a2:	df 90       	pop	r13
    18a4:	cf 90       	pop	r12
    18a6:	bf 90       	pop	r11
    18a8:	08 95       	ret
    } else {
        for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS; Column++) 
        {
            bool TopBit = bitRead(MatrixBuffer[Column], 0);
            MatrixBuffer[Column] >>= 1;
            if(Rotate) bitWrite(MatrixBuffer[Column], MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, TopBit);
    18aa:	20 ff       	sbrs	r18, 0
    18ac:	ea cf       	rjmp	.-44     	; 0x1882 <_ZN9MaxMatrix9shiftUpLLEbb+0xb4>
    18ae:	80 68       	ori	r24, 0x80	; 128
    18b0:	e8 cf       	rjmp	.-48     	; 0x1882 <_ZN9MaxMatrix9shiftUpLLEbb+0xb4>

000018b2 <_ZN9MaxMatrix11shiftDownLLEbb>:
 *  \param[in]      Rotate                      activate rotation of the matrix LED states
 *  \param[in]      ShiftToNeighbourModule      shift led states to neighbour module
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftDownLL(bool Rotate, bool ShiftToNeighbourModule)
{
    18b2:	bf 92       	push	r11
    18b4:	cf 92       	push	r12
    18b6:	df 92       	push	r13
    18b8:	ef 92       	push	r14
    18ba:	ff 92       	push	r15
    18bc:	0f 93       	push	r16
    18be:	1f 93       	push	r17
    18c0:	cf 93       	push	r28
    18c2:	df 93       	push	r29
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <_ZN9MaxMatrix11shiftDownLLEbb+0x14>
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	7c 01       	movw	r14, r24
    18cc:	c6 2e       	mov	r12, r22
    byte ModuleBottomRow = 0;
    18ce:	1a 82       	std	Y+2, r1	; 0x02
    byte MatrixBottomRow = 0;
    18d0:	19 82       	std	Y+1, r1	; 0x01
    18d2:	fc 01       	movw	r30, r24
    18d4:	35 96       	adiw	r30, 0x05	; 5

    if(ShiftToNeighbourModule) {
    18d6:	44 23       	and	r20, r20
    18d8:	c9 f1       	breq	.+114    	; 0x194c <_ZN9MaxMatrix11shiftDownLLEbb+0x9a>
    18da:	8f 01       	movw	r16, r30
    18dc:	d1 2c       	mov	r13, r1
        for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++)
        {
            if(Module == 0 && Rotate) getRowLL(0, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, &MatrixBottomRow);
    18de:	d1 10       	cpse	r13, r1
    18e0:	0a c0       	rjmp	.+20     	; 0x18f6 <_ZN9MaxMatrix11shiftDownLLEbb+0x44>
    18e2:	cc 20       	and	r12, r12
    18e4:	41 f0       	breq	.+16     	; 0x18f6 <_ZN9MaxMatrix11shiftDownLLEbb+0x44>
    18e6:	9e 01       	movw	r18, r28
    18e8:	2f 5f       	subi	r18, 0xFF	; 255
    18ea:	3f 4f       	sbci	r19, 0xFF	; 255
    18ec:	47 e0       	ldi	r20, 0x07	; 7
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	c7 01       	movw	r24, r14
    18f2:	0e 94 ed 07 	call	0xfda	; 0xfda <_ZN9MaxMatrix8getRowLLEhhPh>
            getRowLL(Module + 1, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, &ModuleBottomRow);
    18f6:	bb 24       	eor	r11, r11
    18f8:	b3 94       	inc	r11
    18fa:	bd 0c       	add	r11, r13
    18fc:	9e 01       	movw	r18, r28
    18fe:	2e 5f       	subi	r18, 0xFE	; 254
    1900:	3f 4f       	sbci	r19, 0xFF	; 255
    1902:	47 e0       	ldi	r20, 0x07	; 7
    1904:	6b 2d       	mov	r22, r11
    1906:	c7 01       	movw	r24, r14
    1908:	0e 94 ed 07 	call	0xfda	; 0xfda <_ZN9MaxMatrix8getRowLLEhhPh>
    190c:	f8 01       	movw	r30, r16
            
            for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; Column++)
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	90 e0       	ldi	r25, 0x00	; 0
            MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] <<= 1;
    1912:	20 81       	ld	r18, Z
    1914:	22 0f       	add	r18, r18
    1916:	21 93       	st	Z+, r18
        for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++)
        {
            if(Module == 0 && Rotate) getRowLL(0, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, &MatrixBottomRow);
            getRowLL(Module + 1, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, &ModuleBottomRow);
            
            for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; Column++)
    1918:	01 96       	adiw	r24, 0x01	; 1
    191a:	88 30       	cpi	r24, 0x08	; 8
    191c:	91 05       	cpc	r25, r1
    191e:	c9 f7       	brne	.-14     	; 0x1912 <_ZN9MaxMatrix11shiftDownLLEbb+0x60>
            MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] <<= 1;
            
            if(Module == MAXMATRIX_NUMBER_OF_MODULES - 1) {
    1920:	83 e0       	ldi	r24, 0x03	; 3
    1922:	d8 12       	cpse	r13, r24
    1924:	06 c0       	rjmp	.+12     	; 0x1932 <_ZN9MaxMatrix11shiftDownLLEbb+0x80>
                if(Rotate) setRowLL(Module, 0, MatrixBottomRow);
    1926:	cc 20       	and	r12, r12
    1928:	51 f0       	breq	.+20     	; 0x193e <_ZN9MaxMatrix11shiftDownLLEbb+0x8c>
    192a:	29 81       	ldd	r18, Y+1	; 0x01
    192c:	40 e0       	ldi	r20, 0x00	; 0
    192e:	63 e0       	ldi	r22, 0x03	; 3
    1930:	03 c0       	rjmp	.+6      	; 0x1938 <_ZN9MaxMatrix11shiftDownLLEbb+0x86>
            } else {
                setRowLL(Module, 0, ModuleBottomRow);
    1932:	2a 81       	ldd	r18, Y+2	; 0x02
    1934:	40 e0       	ldi	r20, 0x00	; 0
    1936:	6d 2d       	mov	r22, r13
    1938:	c7 01       	movw	r24, r14
    193a:	0e 94 7e 09 	call	0x12fc	; 0x12fc <_ZN9MaxMatrix8setRowLLEhhh>
    193e:	08 5f       	subi	r16, 0xF8	; 248
    1940:	1f 4f       	sbci	r17, 0xFF	; 255
{
    byte ModuleBottomRow = 0;
    byte MatrixBottomRow = 0;

    if(ShiftToNeighbourModule) {
        for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++)
    1942:	84 e0       	ldi	r24, 0x04	; 4
    1944:	b8 16       	cp	r11, r24
    1946:	79 f0       	breq	.+30     	; 0x1966 <_ZN9MaxMatrix11shiftDownLLEbb+0xb4>
    1948:	db 2c       	mov	r13, r11
    194a:	c9 cf       	rjmp	.-110    	; 0x18de <_ZN9MaxMatrix11shiftDownLLEbb+0x2c>
    194c:	9c 01       	movw	r18, r24
    194e:	2b 5d       	subi	r18, 0xDB	; 219
    1950:	3f 4f       	sbci	r19, 0xFF	; 255
            }
        }
    } else {
        for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS; Column++) 
        {
            bool BottomBit = bitRead(MatrixBuffer[Column], MAXMATRIX_ROW_NUMBER_OF_MODULE - 1);
    1952:	90 81       	ld	r25, Z
            MatrixBuffer[Column] <<= 1;
    1954:	89 2f       	mov	r24, r25
    1956:	88 0f       	add	r24, r24
            if(Rotate) bitWrite(MatrixBuffer[Column], 0, BottomBit);
    1958:	c1 10       	cpse	r12, r1
    195a:	14 c0       	rjmp	.+40     	; 0x1984 <_ZN9MaxMatrix11shiftDownLLEbb+0xd2>
    195c:	80 83       	st	Z, r24
    195e:	31 96       	adiw	r30, 0x01	; 1
            } else {
                setRowLL(Module, 0, ModuleBottomRow);
            }
        }
    } else {
        for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS; Column++) 
    1960:	e2 17       	cp	r30, r18
    1962:	f3 07       	cpc	r31, r19
    1964:	b1 f7       	brne	.-20     	; 0x1952 <_ZN9MaxMatrix11shiftDownLLEbb+0xa0>
            bool BottomBit = bitRead(MatrixBuffer[Column], MAXMATRIX_ROW_NUMBER_OF_MODULE - 1);
            MatrixBuffer[Column] <<= 1;
            if(Rotate) bitWrite(MatrixBuffer[Column], 0, BottomBit);
        }
    }
    reload();
    1966:	c7 01       	movw	r24, r14
    1968:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN9MaxMatrix6reloadEv>
} /* shiftDownLL */
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	df 91       	pop	r29
    1972:	cf 91       	pop	r28
    1974:	1f 91       	pop	r17
    1976:	0f 91       	pop	r16
    1978:	ff 90       	pop	r15
    197a:	ef 90       	pop	r14
    197c:	df 90       	pop	r13
    197e:	cf 90       	pop	r12
    1980:	bf 90       	pop	r11
    1982:	08 95       	ret
    } else {
        for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS; Column++) 
        {
            bool BottomBit = bitRead(MatrixBuffer[Column], MAXMATRIX_ROW_NUMBER_OF_MODULE - 1);
            MatrixBuffer[Column] <<= 1;
            if(Rotate) bitWrite(MatrixBuffer[Column], 0, BottomBit);
    1984:	97 ff       	sbrs	r25, 7
    1986:	ea cf       	rjmp	.-44     	; 0x195c <_ZN9MaxMatrix11shiftDownLLEbb+0xaa>
    1988:	81 60       	ori	r24, 0x01	; 1
    198a:	e8 cf       	rjmp	.-48     	; 0x195c <_ZN9MaxMatrix11shiftDownLLEbb+0xaa>

0000198c <_ZN9MaxMatrix9shiftLeftEbb>:
 *  \param[in]      Rotate          activate rotation of the matrix LED states
 *  \param[in]      FillWithZero    initialize the column on the right side with zero.
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftLeft(bool Rotate, bool FillWithZero)
{
    198c:	0f 93       	push	r16
    198e:	1f 93       	push	r17
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	ec 01       	movw	r28, r24
    1996:	16 2f       	mov	r17, r22
    1998:	04 2f       	mov	r16, r20
    if(Orientation == MAXMATRIX_MODULE_ORIENTATION_0) shiftLeftLL(Rotate, FillWithZero, true);
    199a:	8c 81       	ldd	r24, Y+4	; 0x04
    199c:	81 11       	cpse	r24, r1
    199e:	04 c0       	rjmp	.+8      	; 0x19a8 <_ZN9MaxMatrix9shiftLeftEbb+0x1c>
    19a0:	21 e0       	ldi	r18, 0x01	; 1
    19a2:	ce 01       	movw	r24, r28
    19a4:	0e 94 55 0b 	call	0x16aa	; 0x16aa <_ZN9MaxMatrix11shiftLeftLLEbbb>
    if(Orientation == MAXMATRIX_MODULE_ORIENTATION_90) shiftUpLL(Rotate, true);
    19a8:	8c 81       	ldd	r24, Y+4	; 0x04
    19aa:	81 30       	cpi	r24, 0x01	; 1
    19ac:	29 f4       	brne	.+10     	; 0x19b8 <_ZN9MaxMatrix9shiftLeftEbb+0x2c>
    19ae:	41 e0       	ldi	r20, 0x01	; 1
    19b0:	61 2f       	mov	r22, r17
    19b2:	ce 01       	movw	r24, r28
    19b4:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN9MaxMatrix9shiftUpLLEbb>
    if(Orientation == MAXMATRIX_MODULE_ORIENTATION_180) shiftRightLL(Rotate, FillWithZero, true);
    19b8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ba:	82 30       	cpi	r24, 0x02	; 2
    19bc:	31 f4       	brne	.+12     	; 0x19ca <_ZN9MaxMatrix9shiftLeftEbb+0x3e>
    19be:	21 e0       	ldi	r18, 0x01	; 1
    19c0:	40 2f       	mov	r20, r16
    19c2:	61 2f       	mov	r22, r17
    19c4:	ce 01       	movw	r24, r28
    19c6:	0e 94 9d 0b 	call	0x173a	; 0x173a <_ZN9MaxMatrix12shiftRightLLEbbb>
    if(Orientation == MAXMATRIX_MODULE_ORIENTATION_270) shiftDownLL(Rotate, true);
    19ca:	8c 81       	ldd	r24, Y+4	; 0x04
    19cc:	83 30       	cpi	r24, 0x03	; 3
    19ce:	49 f4       	brne	.+18     	; 0x19e2 <_ZN9MaxMatrix9shiftLeftEbb+0x56>
    19d0:	41 e0       	ldi	r20, 0x01	; 1
    19d2:	61 2f       	mov	r22, r17
    19d4:	ce 01       	movw	r24, r28
} /* shiftLeft */
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	1f 91       	pop	r17
    19dc:	0f 91       	pop	r16
void MaxMatrix::shiftLeft(bool Rotate, bool FillWithZero)
{
    if(Orientation == MAXMATRIX_MODULE_ORIENTATION_0) shiftLeftLL(Rotate, FillWithZero, true);
    if(Orientation == MAXMATRIX_MODULE_ORIENTATION_90) shiftUpLL(Rotate, true);
    if(Orientation == MAXMATRIX_MODULE_ORIENTATION_180) shiftRightLL(Rotate, FillWithZero, true);
    if(Orientation == MAXMATRIX_MODULE_ORIENTATION_270) shiftDownLL(Rotate, true);
    19de:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <_ZN9MaxMatrix11shiftDownLLEbb>
} /* shiftLeft */
    19e2:	df 91       	pop	r29
    19e4:	cf 91       	pop	r28
    19e6:	1f 91       	pop	r17
    19e8:	0f 91       	pop	r16
    19ea:	08 95       	ret

000019ec <_ZN9MaxMatrix13charShiftTaskEv>:
 *                  MAXMATRIX_STATE_CHAR_SHIFT or MAXMATRIX_STATE_STRING_SHIFT to MAXMATRIX_STATE_READY
 *  \return         -
 *  \pre            has to be called from shiftTask()
 *****************************************************************************************************************************************************/
void MaxMatrix::charShiftTask()
{
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	ec 01       	movw	r28, r24
    shiftLeft(false, true);
    19f2:	41 e0       	ldi	r20, 0x01	; 1
    19f4:	60 e0       	ldi	r22, 0x00	; 0
    19f6:	0e 94 c6 0c 	call	0x198c	; 0x198c <_ZN9MaxMatrix9shiftLeftEbb>
    SpriteShiftCounter++;
    19fa:	8c a5       	ldd	r24, Y+44	; 0x2c
    19fc:	8f 5f       	subi	r24, 0xFF	; 255
    19fe:	8c a7       	std	Y+44, r24	; 0x2c
    
    /* if sprite is completed set only spaces */
    if(SpriteShiftCounter <= SpriteBuffer[ASCII_TABLE_SPRITE_WIDTH]) {
    1a00:	2d a1       	ldd	r18, Y+37	; 0x25
    1a02:	48 2f       	mov	r20, r24
    1a04:	50 e0       	ldi	r21, 0x00	; 0
    1a06:	28 17       	cp	r18, r24
    1a08:	70 f0       	brcs	.+28     	; 0x1a26 <_ZN9MaxMatrix13charShiftTaskEv+0x3a>
        setSprite(MAXMATRIX_NUMBER_OF_COLUMNS - SpriteShiftCounter, 0, &SpriteBuffer);
    1a0a:	9e 01       	movw	r18, r28
    1a0c:	2b 5d       	subi	r18, 0xDB	; 219
    1a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a10:	60 e2       	ldi	r22, 0x20	; 32
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	64 1b       	sub	r22, r20
    1a16:	75 0b       	sbc	r23, r21
    1a18:	40 e0       	ldi	r20, 0x00	; 0
    1a1a:	50 e0       	ldi	r21, 0x00	; 0
    1a1c:	ce 01       	movw	r24, r28
    /* if sprite and spaces are completed task has finished */
    else if(SpriteShiftCounter == SpriteBuffer[ASCII_TABLE_SPRITE_WIDTH] + SpaceBetweenChars + 1) {
        if(MAXMATRIX_STATE_CHAR_SHIFT == State) State = MAXMATRIX_STATE_READY;
        SpriteShiftCounter = MAXMATRIX_SPRITE_SHIFT_STATE_READY;
    }
} /* charShiftTask */
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    shiftLeft(false, true);
    SpriteShiftCounter++;
    
    /* if sprite is completed set only spaces */
    if(SpriteShiftCounter <= SpriteBuffer[ASCII_TABLE_SPRITE_WIDTH]) {
        setSprite(MAXMATRIX_NUMBER_OF_COLUMNS - SpriteShiftCounter, 0, &SpriteBuffer);
    1a22:	0c 94 70 0a 	jmp	0x14e0	; 0x14e0 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh>
    }
    /* if sprite and spaces are completed task has finished */
    else if(SpriteShiftCounter == SpriteBuffer[ASCII_TABLE_SPRITE_WIDTH] + SpaceBetweenChars + 1) {
    1a26:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	82 0f       	add	r24, r18
    1a2c:	91 1d       	adc	r25, r1
    1a2e:	01 96       	adiw	r24, 0x01	; 1
    1a30:	48 17       	cp	r20, r24
    1a32:	59 07       	cpc	r21, r25
    1a34:	31 f4       	brne	.+12     	; 0x1a42 <_ZN9MaxMatrix13charShiftTaskEv+0x56>
        if(MAXMATRIX_STATE_CHAR_SHIFT == State) State = MAXMATRIX_STATE_READY;
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	84 30       	cpi	r24, 0x04	; 4
    1a3a:	11 f4       	brne	.+4      	; 0x1a40 <_ZN9MaxMatrix13charShiftTaskEv+0x54>
    1a3c:	82 e0       	ldi	r24, 0x02	; 2
    1a3e:	8b 83       	std	Y+3, r24	; 0x03
        SpriteShiftCounter = MAXMATRIX_SPRITE_SHIFT_STATE_READY;
    1a40:	1c a6       	std	Y+44, r1	; 0x2c
    }
} /* charShiftTask */
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	08 95       	ret

00001a48 <_ZN9MaxMatrix15stringShiftTaskEv>:
 *                  MAXMATRIX_STATE_CHAR_SHIFT or MAXMATRIX_STATE_STRING_SHIFT to MAXMATRIX_STATE_READY
 *  \return         -
 *  \pre            has to be called from shiftTask()
 *****************************************************************************************************************************************************/
void MaxMatrix::stringShiftTask()
{
    1a48:	0f 93       	push	r16
    1a4a:	1f 93       	push	r17
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
    1a50:	1f 92       	push	r1
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	8c 01       	movw	r16, r24
    spriteIndexType SpriteIndex;
    
    /* has char shift task finished shifting sprite or char */
    if(SpriteShiftCounter == MAXMATRIX_SPRITE_SHIFT_STATE_READY)
    1a58:	dc 01       	movw	r26, r24
    1a5a:	9c 96       	adiw	r26, 0x2c	; 44
    1a5c:	8c 91       	ld	r24, X
    1a5e:	9c 97       	sbiw	r26, 0x2c	; 44
    1a60:	81 11       	cpse	r24, r1
    1a62:	2e c0       	rjmp	.+92     	; 0x1ac0 <_ZN9MaxMatrix15stringShiftTaskEv+0x78>
    {
        /* If end of string is not reached, load next char */
        if(*String != STD_NULL_CHARACTER) {
    1a64:	9e 96       	adiw	r26, 0x2e	; 46
    1a66:	ed 91       	ld	r30, X+
    1a68:	fc 91       	ld	r31, X
    1a6a:	9f 97       	sbiw	r26, 0x2f	; 47
    1a6c:	60 81       	ld	r22, Z
    1a6e:	66 23       	and	r22, r22
    1a70:	f1 f0       	breq	.+60     	; 0x1aae <_ZN9MaxMatrix15stringShiftTaskEv+0x66>
            convertCharToSprite(*String, &SpriteIndex);
    1a72:	ae 01       	movw	r20, r28
    1a74:	4f 5f       	subi	r20, 0xFF	; 255
    1a76:	5f 4f       	sbci	r21, 0xFF	; 255
    1a78:	c8 01       	movw	r24, r16
    1a7a:	0e 94 cb 07 	call	0xf96	; 0xf96 <_ZN9MaxMatrix19convertCharToSpriteEcPh>
            getSprite(SpriteIndex, &SpriteBuffer);
    1a7e:	a8 01       	movw	r20, r16
    1a80:	4b 5d       	subi	r20, 0xDB	; 219
    1a82:	5f 4f       	sbci	r21, 0xFF	; 255
    1a84:	69 81       	ldd	r22, Y+1	; 0x01
    1a86:	c8 01       	movw	r24, r16
    1a88:	0e 94 9a 05 	call	0xb34	; 0xb34 <_ZN9MaxMatrix9getSpriteEhPA7_h>
            SpriteShiftCounter = MAXMATRIX_SPRITE_SHIFT_STATE_RUNNING;
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	f8 01       	movw	r30, r16
    1a90:	84 a7       	std	Z+44, r24	; 0x2c
            charShiftTask();
    1a92:	c8 01       	movw	r24, r16
    1a94:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <_ZN9MaxMatrix13charShiftTaskEv>
            String++;
    1a98:	d8 01       	movw	r26, r16
    1a9a:	9e 96       	adiw	r26, 0x2e	; 46
    1a9c:	8d 91       	ld	r24, X+
    1a9e:	9c 91       	ld	r25, X
    1aa0:	9f 97       	sbiw	r26, 0x2f	; 47
    1aa2:	01 96       	adiw	r24, 0x01	; 1
    1aa4:	9f 96       	adiw	r26, 0x2f	; 47
    1aa6:	9c 93       	st	X, r25
    1aa8:	8e 93       	st	-X, r24
    1aaa:	9e 97       	sbiw	r26, 0x2e	; 46
    1aac:	0c c0       	rjmp	.+24     	; 0x1ac6 <_ZN9MaxMatrix15stringShiftTaskEv+0x7e>
        } else { /* otherwise task has finished */
            State = MAXMATRIX_STATE_READY;
    1aae:	82 e0       	ldi	r24, 0x02	; 2
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	83 83       	std	Z+3, r24	; 0x03
            shiftLeft(false, true);
    1ab4:	41 e0       	ldi	r20, 0x01	; 1
    1ab6:	60 e0       	ldi	r22, 0x00	; 0
    1ab8:	c8 01       	movw	r24, r16
    1aba:	0e 94 c6 0c 	call	0x198c	; 0x198c <_ZN9MaxMatrix9shiftLeftEbb>
    1abe:	03 c0       	rjmp	.+6      	; 0x1ac6 <_ZN9MaxMatrix15stringShiftTaskEv+0x7e>
        }
    } else {
        /* go on shifting Sprite */
        charShiftTask();
    1ac0:	c8 01       	movw	r24, r16
    1ac2:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <_ZN9MaxMatrix13charShiftTaskEv>
    }
} /* stringShiftTask */
    1ac6:	0f 90       	pop	r0
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	1f 91       	pop	r17
    1ace:	0f 91       	pop	r16
    1ad0:	08 95       	ret

00001ad2 <_ZN9MaxMatrix9shiftTaskEv>:
 *                  MAXMATRIX_STATE_CHAR_SHIFT or MAXMATRIX_STATE_STRING_SHIFT to MAXMATRIX_STATE_READY
 *  \return         -
 *  \pre            setCharWithShift or setTextWithShift must be called first
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftTask()
{
    1ad2:	cf 93       	push	r28
    1ad4:	df 93       	push	r29
    1ad6:	ec 01       	movw	r28, r24
    if(MAXMATRIX_STATE_STRING_SHIFT == State) stringShiftTask();
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	83 30       	cpi	r24, 0x03	; 3
    1adc:	19 f4       	brne	.+6      	; 0x1ae4 <_ZN9MaxMatrix9shiftTaskEv+0x12>
    1ade:	ce 01       	movw	r24, r28
    1ae0:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <_ZN9MaxMatrix15stringShiftTaskEv>
    if(MAXMATRIX_STATE_CHAR_SHIFT == State) charShiftTask();
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	84 30       	cpi	r24, 0x04	; 4
    1ae8:	29 f4       	brne	.+10     	; 0x1af4 <_ZN9MaxMatrix9shiftTaskEv+0x22>
    1aea:	ce 01       	movw	r24, r28
} /* shiftTask */
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
 *  \pre            setCharWithShift or setTextWithShift must be called first
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftTask()
{
    if(MAXMATRIX_STATE_STRING_SHIFT == State) stringShiftTask();
    if(MAXMATRIX_STATE_CHAR_SHIFT == State) charShiftTask();
    1af0:	0c 94 f6 0c 	jmp	0x19ec	; 0x19ec <_ZN9MaxMatrix13charShiftTaskEv>
} /* shiftTask */
    1af4:	df 91       	pop	r29
    1af6:	cf 91       	pop	r28
    1af8:	08 95       	ret

00001afa <__vector_13>:
  else if(pin == 2 || pin == 10) {
    DDRB |= _BV(PORTB2);
    TCCR1A |= _BV(COM1B1);
  }
  setPwmDuty(pin, duty);
  resume();			// Lex - make sure the clock is running.  We don't want to restart the count, in case we are starting the second WGM
    1afa:	1f 92       	push	r1
    1afc:	0f 92       	push	r0
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	0f 92       	push	r0
    1b02:	11 24       	eor	r1, r1
    1b04:	2f 93       	push	r18
    1b06:	3f 93       	push	r19
    1b08:	4f 93       	push	r20
    1b0a:	5f 93       	push	r21
    1b0c:	6f 93       	push	r22
    1b0e:	7f 93       	push	r23
    1b10:	8f 93       	push	r24
    1b12:	9f 93       	push	r25
    1b14:	af 93       	push	r26
    1b16:	bf 93       	push	r27
    1b18:	ef 93       	push	r30
    1b1a:	ff 93       	push	r31
    1b1c:	e0 91 59 02 	lds	r30, 0x0259	; 0x800259 <Timer1+0x4>
    1b20:	f0 91 5a 02 	lds	r31, 0x025A	; 0x80025a <Timer1+0x5>
    1b24:	09 95       	icall
    1b26:	ff 91       	pop	r31
    1b28:	ef 91       	pop	r30
    1b2a:	bf 91       	pop	r27
    1b2c:	af 91       	pop	r26
    1b2e:	9f 91       	pop	r25
    1b30:	8f 91       	pop	r24
    1b32:	7f 91       	pop	r23
    1b34:	6f 91       	pop	r22
    1b36:	5f 91       	pop	r21
    1b38:	4f 91       	pop	r20
    1b3a:	3f 91       	pop	r19
    1b3c:	2f 91       	pop	r18
    1b3e:	0f 90       	pop	r0
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	0f 90       	pop	r0
    1b44:	1f 90       	pop	r1
    1b46:	18 95       	reti

00001b48 <_ZN8TimerOne9setPeriodEl>:
    1b48:	fc 01       	movw	r30, r24
    1b4a:	a3 e0       	ldi	r26, 0x03	; 3
    1b4c:	44 0f       	add	r20, r20
    1b4e:	55 1f       	adc	r21, r21
    1b50:	66 1f       	adc	r22, r22
    1b52:	77 1f       	adc	r23, r23
    1b54:	aa 95       	dec	r26
    1b56:	d1 f7       	brne	.-12     	; 0x1b4c <_ZN8TimerOne9setPeriodEl+0x4>
    1b58:	41 15       	cp	r20, r1
    1b5a:	51 05       	cpc	r21, r1
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	68 07       	cpc	r22, r24
    1b60:	71 05       	cpc	r23, r1
    1b62:	14 f4       	brge	.+4      	; 0x1b68 <_ZN8TimerOne9setPeriodEl+0x20>
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	0e c0       	rjmp	.+28     	; 0x1b84 <_ZN8TimerOne9setPeriodEl+0x3c>
    1b68:	33 e0       	ldi	r19, 0x03	; 3
    1b6a:	75 95       	asr	r23
    1b6c:	67 95       	ror	r22
    1b6e:	57 95       	ror	r21
    1b70:	47 95       	ror	r20
    1b72:	3a 95       	dec	r19
    1b74:	d1 f7       	brne	.-12     	; 0x1b6a <_ZN8TimerOne9setPeriodEl+0x22>
    1b76:	41 15       	cp	r20, r1
    1b78:	51 05       	cpc	r21, r1
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	68 07       	cpc	r22, r24
    1b7e:	71 05       	cpc	r23, r1
    1b80:	1c f4       	brge	.+6      	; 0x1b88 <_ZN8TimerOne9setPeriodEl+0x40>
    1b82:	82 e0       	ldi	r24, 0x02	; 2
    1b84:	82 83       	std	Z+2, r24	; 0x02
    1b86:	31 c0       	rjmp	.+98     	; 0x1bea <_ZN8TimerOne9setPeriodEl+0xa2>
    1b88:	23 e0       	ldi	r18, 0x03	; 3
    1b8a:	75 95       	asr	r23
    1b8c:	67 95       	ror	r22
    1b8e:	57 95       	ror	r21
    1b90:	47 95       	ror	r20
    1b92:	2a 95       	dec	r18
    1b94:	d1 f7       	brne	.-12     	; 0x1b8a <_ZN8TimerOne9setPeriodEl+0x42>
    1b96:	41 15       	cp	r20, r1
    1b98:	51 05       	cpc	r21, r1
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	68 07       	cpc	r22, r24
    1b9e:	71 05       	cpc	r23, r1
    1ba0:	14 f4       	brge	.+4      	; 0x1ba6 <_ZN8TimerOne9setPeriodEl+0x5e>
    1ba2:	83 e0       	ldi	r24, 0x03	; 3
    1ba4:	ef cf       	rjmp	.-34     	; 0x1b84 <_ZN8TimerOne9setPeriodEl+0x3c>
    1ba6:	92 e0       	ldi	r25, 0x02	; 2
    1ba8:	75 95       	asr	r23
    1baa:	67 95       	ror	r22
    1bac:	57 95       	ror	r21
    1bae:	47 95       	ror	r20
    1bb0:	9a 95       	dec	r25
    1bb2:	d1 f7       	brne	.-12     	; 0x1ba8 <_ZN8TimerOne9setPeriodEl+0x60>
    1bb4:	41 15       	cp	r20, r1
    1bb6:	51 05       	cpc	r21, r1
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	68 07       	cpc	r22, r24
    1bbc:	71 05       	cpc	r23, r1
    1bbe:	14 f4       	brge	.+4      	; 0x1bc4 <_ZN8TimerOne9setPeriodEl+0x7c>
    1bc0:	84 e0       	ldi	r24, 0x04	; 4
    1bc2:	e0 cf       	rjmp	.-64     	; 0x1b84 <_ZN8TimerOne9setPeriodEl+0x3c>
    1bc4:	82 e0       	ldi	r24, 0x02	; 2
    1bc6:	75 95       	asr	r23
    1bc8:	67 95       	ror	r22
    1bca:	57 95       	ror	r21
    1bcc:	47 95       	ror	r20
    1bce:	8a 95       	dec	r24
    1bd0:	d1 f7       	brne	.-12     	; 0x1bc6 <_ZN8TimerOne9setPeriodEl+0x7e>
    1bd2:	85 e0       	ldi	r24, 0x05	; 5
    1bd4:	82 83       	std	Z+2, r24	; 0x02
    1bd6:	41 15       	cp	r20, r1
    1bd8:	51 05       	cpc	r21, r1
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	68 07       	cpc	r22, r24
    1bde:	71 05       	cpc	r23, r1
    1be0:	24 f0       	brlt	.+8      	; 0x1bea <_ZN8TimerOne9setPeriodEl+0xa2>
    1be2:	4f ef       	ldi	r20, 0xFF	; 255
    1be4:	5f ef       	ldi	r21, 0xFF	; 255
    1be6:	60 e0       	ldi	r22, 0x00	; 0
    1be8:	70 e0       	ldi	r23, 0x00	; 0
    1bea:	8f b7       	in	r24, 0x3f	; 63
    1bec:	83 83       	std	Z+3, r24	; 0x03
    1bee:	f8 94       	cli
    1bf0:	51 83       	std	Z+1, r21	; 0x01
    1bf2:	40 83       	st	Z, r20
    1bf4:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1bf8:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    1bfc:	83 81       	ldd	r24, Z+3	; 0x03
    1bfe:	8f bf       	out	0x3f, r24	; 63
    1c00:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1c04:	88 7f       	andi	r24, 0xF8	; 248
    1c06:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1c0a:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1c0e:	82 81       	ldd	r24, Z+2	; 0x02
    1c10:	89 2b       	or	r24, r25
    1c12:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1c16:	08 95       	ret

00001c18 <_ZN8TimerOne10initializeEl>:
    1c18:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1c1c:	20 e1       	ldi	r18, 0x10	; 16
    1c1e:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1c22:	0c 94 a4 0d 	jmp	0x1b48	; 0x1b48 <_ZN8TimerOne9setPeriodEl>

00001c26 <_ZN8TimerOne6resumeEv>:
    1c26:	e1 e8       	ldi	r30, 0x81	; 129
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	20 81       	ld	r18, Z
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	12 96       	adiw	r26, 0x02	; 2
    1c30:	8c 91       	ld	r24, X
    1c32:	82 2b       	or	r24, r18
    1c34:	80 83       	st	Z, r24
    1c36:	08 95       	ret

00001c38 <_ZN8TimerOne15attachInterruptEPFvvEl>:
  if(pin == 1 || pin == 9)       TCCR1A &= ~_BV(COM1A1);   // clear the bit that enables pwm on PB1
  else if(pin == 2 || pin == 10) TCCR1A &= ~_BV(COM1B1);   // clear the bit that enables pwm on PB2
}

void TimerOne::attachInterrupt(void (*isr)(), long microseconds)
{
    1c38:	0f 93       	push	r16
    1c3a:	1f 93       	push	r17
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
    1c40:	ec 01       	movw	r28, r24
    1c42:	8b 01       	movw	r16, r22
    1c44:	ba 01       	movw	r22, r20
    1c46:	a9 01       	movw	r20, r18
  if(microseconds > 0) setPeriod(microseconds);
    1c48:	14 16       	cp	r1, r20
    1c4a:	15 06       	cpc	r1, r21
    1c4c:	16 06       	cpc	r1, r22
    1c4e:	17 06       	cpc	r1, r23
    1c50:	14 f4       	brge	.+4      	; 0x1c56 <_ZN8TimerOne15attachInterruptEPFvvEl+0x1e>
    1c52:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <_ZN8TimerOne9setPeriodEl>
  isrCallback = isr;                                       // register the user's callback with the real ISR
    1c56:	1d 83       	std	Y+5, r17	; 0x05
    1c58:	0c 83       	std	Y+4, r16	; 0x04
  TIMSK1 = _BV(TOIE1);                                     // sets the timer overflow interrupt enable bit
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	// might be running with interrupts disabled (eg inside an ISR), so don't touch the global state
//  sei();
  resume();												
    1c60:	ce 01       	movw	r24, r28
}
    1c62:	df 91       	pop	r29
    1c64:	cf 91       	pop	r28
    1c66:	1f 91       	pop	r17
    1c68:	0f 91       	pop	r16
  if(microseconds > 0) setPeriod(microseconds);
  isrCallback = isr;                                       // register the user's callback with the real ISR
  TIMSK1 = _BV(TOIE1);                                     // sets the timer overflow interrupt enable bit
	// might be running with interrupts disabled (eg inside an ISR), so don't touch the global state
//  sei();
  resume();												
    1c6a:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <_ZN8TimerOne6resumeEv>

00001c6e <__vector_9>:
    1c6e:	1f 92       	push	r1
    1c70:	0f 92       	push	r0
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	0f 92       	push	r0
    1c76:	11 24       	eor	r1, r1
    1c78:	2f 93       	push	r18
    1c7a:	3f 93       	push	r19
    1c7c:	4f 93       	push	r20
    1c7e:	5f 93       	push	r21
    1c80:	6f 93       	push	r22
    1c82:	7f 93       	push	r23
    1c84:	8f 93       	push	r24
    1c86:	9f 93       	push	r25
    1c88:	af 93       	push	r26
    1c8a:	bf 93       	push	r27
    1c8c:	ef 93       	push	r30
    1c8e:	ff 93       	push	r31
    1c90:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <Timer2+0x4>
    1c94:	f0 91 60 02 	lds	r31, 0x0260	; 0x800260 <Timer2+0x5>
    1c98:	09 95       	icall
    1c9a:	ff 91       	pop	r31
    1c9c:	ef 91       	pop	r30
    1c9e:	bf 91       	pop	r27
    1ca0:	af 91       	pop	r26
    1ca2:	9f 91       	pop	r25
    1ca4:	8f 91       	pop	r24
    1ca6:	7f 91       	pop	r23
    1ca8:	6f 91       	pop	r22
    1caa:	5f 91       	pop	r21
    1cac:	4f 91       	pop	r20
    1cae:	3f 91       	pop	r19
    1cb0:	2f 91       	pop	r18
    1cb2:	0f 90       	pop	r0
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	0f 90       	pop	r0
    1cb8:	1f 90       	pop	r1
    1cba:	18 95       	reti

00001cbc <_GLOBAL__sub_I_Timer2>:
    1cbc:	eb e5       	ldi	r30, 0x5B	; 91
    1cbe:	f2 e0       	ldi	r31, 0x02	; 2
    1cc0:	10 82       	st	Z, r1
    1cc2:	15 82       	std	Z+5, r1	; 0x05
    1cc4:	14 82       	std	Z+4, r1	; 0x04
    1cc6:	11 82       	std	Z+1, r1	; 0x01
    1cc8:	08 95       	ret

00001cca <_ZN14HardwareSerial9availableEv>:
    1cca:	fc 01       	movw	r30, r24
    1ccc:	91 8d       	ldd	r25, Z+25	; 0x19
    1cce:	22 8d       	ldd	r18, Z+26	; 0x1a
    1cd0:	89 2f       	mov	r24, r25
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	80 5c       	subi	r24, 0xC0	; 192
    1cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd8:	82 1b       	sub	r24, r18
    1cda:	91 09       	sbc	r25, r1
    1cdc:	8f 73       	andi	r24, 0x3F	; 63
    1cde:	99 27       	eor	r25, r25
    1ce0:	08 95       	ret

00001ce2 <_ZN14HardwareSerial4peekEv>:
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	91 8d       	ldd	r25, Z+25	; 0x19
    1ce6:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ce8:	98 17       	cp	r25, r24
    1cea:	31 f0       	breq	.+12     	; 0x1cf8 <_ZN14HardwareSerial4peekEv+0x16>
    1cec:	82 8d       	ldd	r24, Z+26	; 0x1a
    1cee:	e8 0f       	add	r30, r24
    1cf0:	f1 1d       	adc	r31, r1
    1cf2:	85 8d       	ldd	r24, Z+29	; 0x1d
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	08 95       	ret
    1cf8:	8f ef       	ldi	r24, 0xFF	; 255
    1cfa:	9f ef       	ldi	r25, 0xFF	; 255
    1cfc:	08 95       	ret

00001cfe <_ZN14HardwareSerial4readEv>:
    1cfe:	fc 01       	movw	r30, r24
    1d00:	91 8d       	ldd	r25, Z+25	; 0x19
    1d02:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d04:	98 17       	cp	r25, r24
    1d06:	61 f0       	breq	.+24     	; 0x1d20 <_ZN14HardwareSerial4readEv+0x22>
    1d08:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d0a:	df 01       	movw	r26, r30
    1d0c:	a8 0f       	add	r26, r24
    1d0e:	b1 1d       	adc	r27, r1
    1d10:	5d 96       	adiw	r26, 0x1d	; 29
    1d12:	8c 91       	ld	r24, X
    1d14:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d16:	9f 5f       	subi	r25, 0xFF	; 255
    1d18:	9f 73       	andi	r25, 0x3F	; 63
    1d1a:	92 8f       	std	Z+26, r25	; 0x1a
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	08 95       	ret
    1d20:	8f ef       	ldi	r24, 0xFF	; 255
    1d22:	9f ef       	ldi	r25, 0xFF	; 255
    1d24:	08 95       	ret

00001d26 <_Z14serialEventRunv>:
    1d26:	89 ee       	ldi	r24, 0xE9	; 233
    1d28:	9f e0       	ldi	r25, 0x0F	; 15
    1d2a:	89 2b       	or	r24, r25
    1d2c:	49 f0       	breq	.+18     	; 0x1d40 <_Z14serialEventRunv+0x1a>
    1d2e:	81 e1       	ldi	r24, 0x11	; 17
    1d30:	95 e0       	ldi	r25, 0x05	; 5
    1d32:	89 2b       	or	r24, r25
    1d34:	29 f0       	breq	.+10     	; 0x1d40 <_Z14serialEventRunv+0x1a>
    1d36:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_Z17Serial0_availablev>
    1d3a:	81 11       	cpse	r24, r1
    1d3c:	0c 94 11 05 	jmp	0xa22	; 0xa22 <_Z11serialEventv>
    1d40:	08 95       	ret

00001d42 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
    1d42:	fc 01       	movw	r30, r24
    1d44:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d46:	df 01       	movw	r26, r30
    1d48:	a8 0f       	add	r26, r24
    1d4a:	b1 1d       	adc	r27, r1
    1d4c:	a3 5a       	subi	r26, 0xA3	; 163
    1d4e:	bf 4f       	sbci	r27, 0xFF	; 255
    1d50:	2c 91       	ld	r18, X
    1d52:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	01 96       	adiw	r24, 0x01	; 1
    1d58:	8f 73       	andi	r24, 0x3F	; 63
    1d5a:	99 27       	eor	r25, r25
    1d5c:	84 8f       	std	Z+28, r24	; 0x1c
    1d5e:	a6 89       	ldd	r26, Z+22	; 0x16
    1d60:	b7 89       	ldd	r27, Z+23	; 0x17
    1d62:	2c 93       	st	X, r18
    1d64:	a0 89       	ldd	r26, Z+16	; 0x10
    1d66:	b1 89       	ldd	r27, Z+17	; 0x11
    1d68:	8c 91       	ld	r24, X
    1d6a:	80 64       	ori	r24, 0x40	; 64
    1d6c:	8c 93       	st	X, r24
    1d6e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1d70:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d72:	98 13       	cpse	r25, r24
    1d74:	06 c0       	rjmp	.+12     	; 0x1d82 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    1d76:	02 88       	ldd	r0, Z+18	; 0x12
    1d78:	f3 89       	ldd	r31, Z+19	; 0x13
    1d7a:	e0 2d       	mov	r30, r0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	8f 7d       	andi	r24, 0xDF	; 223
    1d80:	80 83       	st	Z, r24
    1d82:	08 95       	ret

00001d84 <_ZN14HardwareSerial5flushEv>:
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	ec 01       	movw	r28, r24
    1d8a:	88 8d       	ldd	r24, Y+24	; 0x18
    1d8c:	88 23       	and	r24, r24
    1d8e:	c9 f0       	breq	.+50     	; 0x1dc2 <_ZN14HardwareSerial5flushEv+0x3e>
    1d90:	ea 89       	ldd	r30, Y+18	; 0x12
    1d92:	fb 89       	ldd	r31, Y+19	; 0x13
    1d94:	80 81       	ld	r24, Z
    1d96:	85 fd       	sbrc	r24, 5
    1d98:	05 c0       	rjmp	.+10     	; 0x1da4 <_ZN14HardwareSerial5flushEv+0x20>
    1d9a:	a8 89       	ldd	r26, Y+16	; 0x10
    1d9c:	b9 89       	ldd	r27, Y+17	; 0x11
    1d9e:	8c 91       	ld	r24, X
    1da0:	86 fd       	sbrc	r24, 6
    1da2:	0f c0       	rjmp	.+30     	; 0x1dc2 <_ZN14HardwareSerial5flushEv+0x3e>
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	07 fc       	sbrc	r0, 7
    1da8:	f5 cf       	rjmp	.-22     	; 0x1d94 <_ZN14HardwareSerial5flushEv+0x10>
    1daa:	80 81       	ld	r24, Z
    1dac:	85 ff       	sbrs	r24, 5
    1dae:	f2 cf       	rjmp	.-28     	; 0x1d94 <_ZN14HardwareSerial5flushEv+0x10>
    1db0:	a8 89       	ldd	r26, Y+16	; 0x10
    1db2:	b9 89       	ldd	r27, Y+17	; 0x11
    1db4:	8c 91       	ld	r24, X
    1db6:	85 ff       	sbrs	r24, 5
    1db8:	ed cf       	rjmp	.-38     	; 0x1d94 <_ZN14HardwareSerial5flushEv+0x10>
    1dba:	ce 01       	movw	r24, r28
    1dbc:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1dc0:	e7 cf       	rjmp	.-50     	; 0x1d90 <_ZN14HardwareSerial5flushEv+0xc>
    1dc2:	df 91       	pop	r29
    1dc4:	cf 91       	pop	r28
    1dc6:	08 95       	ret

00001dc8 <_ZN14HardwareSerial5writeEh>:
    1dc8:	ef 92       	push	r14
    1dca:	ff 92       	push	r15
    1dcc:	0f 93       	push	r16
    1dce:	1f 93       	push	r17
    1dd0:	cf 93       	push	r28
    1dd2:	df 93       	push	r29
    1dd4:	ec 01       	movw	r28, r24
    1dd6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1dd8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1dda:	98 13       	cpse	r25, r24
    1ddc:	05 c0       	rjmp	.+10     	; 0x1de8 <_ZN14HardwareSerial5writeEh+0x20>
    1dde:	e8 89       	ldd	r30, Y+16	; 0x10
    1de0:	f9 89       	ldd	r31, Y+17	; 0x11
    1de2:	80 81       	ld	r24, Z
    1de4:	85 fd       	sbrc	r24, 5
    1de6:	27 c0       	rjmp	.+78     	; 0x1e36 <_ZN14HardwareSerial5writeEh+0x6e>
    1de8:	f6 2e       	mov	r15, r22
    1dea:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1dec:	10 e0       	ldi	r17, 0x00	; 0
    1dee:	0f 5f       	subi	r16, 0xFF	; 255
    1df0:	1f 4f       	sbci	r17, 0xFF	; 255
    1df2:	0f 73       	andi	r16, 0x3F	; 63
    1df4:	11 27       	eor	r17, r17
    1df6:	e0 2e       	mov	r14, r16
    1df8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1dfa:	e8 12       	cpse	r14, r24
    1dfc:	0c c0       	rjmp	.+24     	; 0x1e16 <_ZN14HardwareSerial5writeEh+0x4e>
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	07 fc       	sbrc	r0, 7
    1e02:	fa cf       	rjmp	.-12     	; 0x1df8 <_ZN14HardwareSerial5writeEh+0x30>
    1e04:	e8 89       	ldd	r30, Y+16	; 0x10
    1e06:	f9 89       	ldd	r31, Y+17	; 0x11
    1e08:	80 81       	ld	r24, Z
    1e0a:	85 ff       	sbrs	r24, 5
    1e0c:	f5 cf       	rjmp	.-22     	; 0x1df8 <_ZN14HardwareSerial5writeEh+0x30>
    1e0e:	ce 01       	movw	r24, r28
    1e10:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1e14:	f1 cf       	rjmp	.-30     	; 0x1df8 <_ZN14HardwareSerial5writeEh+0x30>
    1e16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e18:	fe 01       	movw	r30, r28
    1e1a:	e8 0f       	add	r30, r24
    1e1c:	f1 1d       	adc	r31, r1
    1e1e:	e3 5a       	subi	r30, 0xA3	; 163
    1e20:	ff 4f       	sbci	r31, 0xFF	; 255
    1e22:	f0 82       	st	Z, r15
    1e24:	0b 8f       	std	Y+27, r16	; 0x1b
    1e26:	ea 89       	ldd	r30, Y+18	; 0x12
    1e28:	fb 89       	ldd	r31, Y+19	; 0x13
    1e2a:	80 81       	ld	r24, Z
    1e2c:	80 62       	ori	r24, 0x20	; 32
    1e2e:	80 83       	st	Z, r24
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	88 8f       	std	Y+24, r24	; 0x18
    1e34:	08 c0       	rjmp	.+16     	; 0x1e46 <_ZN14HardwareSerial5writeEh+0x7e>
    1e36:	ee 89       	ldd	r30, Y+22	; 0x16
    1e38:	ff 89       	ldd	r31, Y+23	; 0x17
    1e3a:	60 83       	st	Z, r22
    1e3c:	e8 89       	ldd	r30, Y+16	; 0x10
    1e3e:	f9 89       	ldd	r31, Y+17	; 0x11
    1e40:	80 81       	ld	r24, Z
    1e42:	80 64       	ori	r24, 0x40	; 64
    1e44:	80 83       	st	Z, r24
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
    1e4e:	1f 91       	pop	r17
    1e50:	0f 91       	pop	r16
    1e52:	ff 90       	pop	r15
    1e54:	ef 90       	pop	r14
    1e56:	08 95       	ret

00001e58 <_ZN14HardwareSerial5beginEmh>:
    1e58:	cf 92       	push	r12
    1e5a:	df 92       	push	r13
    1e5c:	ef 92       	push	r14
    1e5e:	ff 92       	push	r15
    1e60:	1f 93       	push	r17
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
    1e66:	ec 01       	movw	r28, r24
    1e68:	6a 01       	movw	r12, r20
    1e6a:	7b 01       	movw	r14, r22
    1e6c:	12 2f       	mov	r17, r18
    1e6e:	e8 89       	ldd	r30, Y+16	; 0x10
    1e70:	f9 89       	ldd	r31, Y+17	; 0x11
    1e72:	82 e0       	ldi	r24, 0x02	; 2
    1e74:	80 83       	st	Z, r24
    1e76:	41 15       	cp	r20, r1
    1e78:	51 4e       	sbci	r21, 0xE1	; 225
    1e7a:	61 05       	cpc	r22, r1
    1e7c:	71 05       	cpc	r23, r1
    1e7e:	b1 f0       	breq	.+44     	; 0x1eac <_ZN14HardwareSerial5beginEmh+0x54>
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	79 e0       	ldi	r23, 0x09	; 9
    1e84:	8d e3       	ldi	r24, 0x3D	; 61
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	a7 01       	movw	r20, r14
    1e8a:	96 01       	movw	r18, r12
    1e8c:	0e 94 24 12 	call	0x2448	; 0x2448 <__udivmodsi4>
    1e90:	da 01       	movw	r26, r20
    1e92:	c9 01       	movw	r24, r18
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	a1 09       	sbc	r26, r1
    1e98:	b1 09       	sbc	r27, r1
    1e9a:	b6 95       	lsr	r27
    1e9c:	a7 95       	ror	r26
    1e9e:	97 95       	ror	r25
    1ea0:	87 95       	ror	r24
    1ea2:	ac 01       	movw	r20, r24
    1ea4:	41 15       	cp	r20, r1
    1ea6:	80 e1       	ldi	r24, 0x10	; 16
    1ea8:	58 07       	cpc	r21, r24
    1eaa:	a8 f0       	brcs	.+42     	; 0x1ed6 <_ZN14HardwareSerial5beginEmh+0x7e>
    1eac:	e8 89       	ldd	r30, Y+16	; 0x10
    1eae:	f9 89       	ldd	r31, Y+17	; 0x11
    1eb0:	10 82       	st	Z, r1
    1eb2:	60 e8       	ldi	r22, 0x80	; 128
    1eb4:	74 e8       	ldi	r23, 0x84	; 132
    1eb6:	8e e1       	ldi	r24, 0x1E	; 30
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	a7 01       	movw	r20, r14
    1ebc:	96 01       	movw	r18, r12
    1ebe:	0e 94 24 12 	call	0x2448	; 0x2448 <__udivmodsi4>
    1ec2:	ba 01       	movw	r22, r20
    1ec4:	a9 01       	movw	r20, r18
    1ec6:	41 50       	subi	r20, 0x01	; 1
    1ec8:	51 09       	sbc	r21, r1
    1eca:	61 09       	sbc	r22, r1
    1ecc:	71 09       	sbc	r23, r1
    1ece:	76 95       	lsr	r23
    1ed0:	67 95       	ror	r22
    1ed2:	57 95       	ror	r21
    1ed4:	47 95       	ror	r20
    1ed6:	ec 85       	ldd	r30, Y+12	; 0x0c
    1ed8:	fd 85       	ldd	r31, Y+13	; 0x0d
    1eda:	50 83       	st	Z, r21
    1edc:	ee 85       	ldd	r30, Y+14	; 0x0e
    1ede:	ff 85       	ldd	r31, Y+15	; 0x0f
    1ee0:	40 83       	st	Z, r20
    1ee2:	18 8e       	std	Y+24, r1	; 0x18
    1ee4:	ec 89       	ldd	r30, Y+20	; 0x14
    1ee6:	fd 89       	ldd	r31, Y+21	; 0x15
    1ee8:	10 83       	st	Z, r17
    1eea:	ea 89       	ldd	r30, Y+18	; 0x12
    1eec:	fb 89       	ldd	r31, Y+19	; 0x13
    1eee:	80 81       	ld	r24, Z
    1ef0:	80 61       	ori	r24, 0x10	; 16
    1ef2:	80 83       	st	Z, r24
    1ef4:	ea 89       	ldd	r30, Y+18	; 0x12
    1ef6:	fb 89       	ldd	r31, Y+19	; 0x13
    1ef8:	80 81       	ld	r24, Z
    1efa:	88 60       	ori	r24, 0x08	; 8
    1efc:	80 83       	st	Z, r24
    1efe:	ea 89       	ldd	r30, Y+18	; 0x12
    1f00:	fb 89       	ldd	r31, Y+19	; 0x13
    1f02:	80 81       	ld	r24, Z
    1f04:	80 68       	ori	r24, 0x80	; 128
    1f06:	80 83       	st	Z, r24
    1f08:	ea 89       	ldd	r30, Y+18	; 0x12
    1f0a:	fb 89       	ldd	r31, Y+19	; 0x13
    1f0c:	80 81       	ld	r24, Z
    1f0e:	8f 7d       	andi	r24, 0xDF	; 223
    1f10:	80 83       	st	Z, r24
    1f12:	df 91       	pop	r29
    1f14:	cf 91       	pop	r28
    1f16:	1f 91       	pop	r17
    1f18:	ff 90       	pop	r15
    1f1a:	ef 90       	pop	r14
    1f1c:	df 90       	pop	r13
    1f1e:	cf 90       	pop	r12
    1f20:	08 95       	ret

00001f22 <__vector_18>:
    1f22:	1f 92       	push	r1
    1f24:	0f 92       	push	r0
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	0f 92       	push	r0
    1f2a:	11 24       	eor	r1, r1
    1f2c:	2f 93       	push	r18
    1f2e:	8f 93       	push	r24
    1f30:	9f 93       	push	r25
    1f32:	ef 93       	push	r30
    1f34:	ff 93       	push	r31
    1f36:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <Serial+0x10>
    1f3a:	f0 91 72 02 	lds	r31, 0x0272	; 0x800272 <Serial+0x11>
    1f3e:	80 81       	ld	r24, Z
    1f40:	e0 91 77 02 	lds	r30, 0x0277	; 0x800277 <Serial+0x16>
    1f44:	f0 91 78 02 	lds	r31, 0x0278	; 0x800278 <Serial+0x17>
    1f48:	82 fd       	sbrc	r24, 2
    1f4a:	12 c0       	rjmp	.+36     	; 0x1f70 <__vector_18+0x4e>
    1f4c:	90 81       	ld	r25, Z
    1f4e:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <Serial+0x19>
    1f52:	8f 5f       	subi	r24, 0xFF	; 255
    1f54:	8f 73       	andi	r24, 0x3F	; 63
    1f56:	20 91 7b 02 	lds	r18, 0x027B	; 0x80027b <Serial+0x1a>
    1f5a:	82 17       	cp	r24, r18
    1f5c:	51 f0       	breq	.+20     	; 0x1f72 <__vector_18+0x50>
    1f5e:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <Serial+0x19>
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	ef 59       	subi	r30, 0x9F	; 159
    1f66:	fd 4f       	sbci	r31, 0xFD	; 253
    1f68:	95 8f       	std	Z+29, r25	; 0x1d
    1f6a:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <Serial+0x19>
    1f6e:	01 c0       	rjmp	.+2      	; 0x1f72 <__vector_18+0x50>
    1f70:	80 81       	ld	r24, Z
    1f72:	ff 91       	pop	r31
    1f74:	ef 91       	pop	r30
    1f76:	9f 91       	pop	r25
    1f78:	8f 91       	pop	r24
    1f7a:	2f 91       	pop	r18
    1f7c:	0f 90       	pop	r0
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	0f 90       	pop	r0
    1f82:	1f 90       	pop	r1
    1f84:	18 95       	reti

00001f86 <__vector_19>:
    1f86:	1f 92       	push	r1
    1f88:	0f 92       	push	r0
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	0f 92       	push	r0
    1f8e:	11 24       	eor	r1, r1
    1f90:	2f 93       	push	r18
    1f92:	3f 93       	push	r19
    1f94:	4f 93       	push	r20
    1f96:	5f 93       	push	r21
    1f98:	6f 93       	push	r22
    1f9a:	7f 93       	push	r23
    1f9c:	8f 93       	push	r24
    1f9e:	9f 93       	push	r25
    1fa0:	af 93       	push	r26
    1fa2:	bf 93       	push	r27
    1fa4:	ef 93       	push	r30
    1fa6:	ff 93       	push	r31
    1fa8:	81 e6       	ldi	r24, 0x61	; 97
    1faa:	92 e0       	ldi	r25, 0x02	; 2
    1fac:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1fb0:	ff 91       	pop	r31
    1fb2:	ef 91       	pop	r30
    1fb4:	bf 91       	pop	r27
    1fb6:	af 91       	pop	r26
    1fb8:	9f 91       	pop	r25
    1fba:	8f 91       	pop	r24
    1fbc:	7f 91       	pop	r23
    1fbe:	6f 91       	pop	r22
    1fc0:	5f 91       	pop	r21
    1fc2:	4f 91       	pop	r20
    1fc4:	3f 91       	pop	r19
    1fc6:	2f 91       	pop	r18
    1fc8:	0f 90       	pop	r0
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	0f 90       	pop	r0
    1fce:	1f 90       	pop	r1
    1fd0:	18 95       	reti

00001fd2 <_Z17Serial0_availablev>:
    1fd2:	81 e6       	ldi	r24, 0x61	; 97
    1fd4:	92 e0       	ldi	r25, 0x02	; 2
    1fd6:	0e 94 65 0e 	call	0x1cca	; 0x1cca <_ZN14HardwareSerial9availableEv>
    1fda:	21 e0       	ldi	r18, 0x01	; 1
    1fdc:	89 2b       	or	r24, r25
    1fde:	09 f4       	brne	.+2      	; 0x1fe2 <_Z17Serial0_availablev+0x10>
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	82 2f       	mov	r24, r18
    1fe4:	08 95       	ret

00001fe6 <_GLOBAL__sub_I___vector_18>:
    1fe6:	e1 e6       	ldi	r30, 0x61	; 97
    1fe8:	f2 e0       	ldi	r31, 0x02	; 2
    1fea:	13 82       	std	Z+3, r1	; 0x03
    1fec:	12 82       	std	Z+2, r1	; 0x02
    1fee:	88 ee       	ldi	r24, 0xE8	; 232
    1ff0:	93 e0       	ldi	r25, 0x03	; 3
    1ff2:	a0 e0       	ldi	r26, 0x00	; 0
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	84 83       	std	Z+4, r24	; 0x04
    1ff8:	95 83       	std	Z+5, r25	; 0x05
    1ffa:	a6 83       	std	Z+6, r26	; 0x06
    1ffc:	b7 83       	std	Z+7, r27	; 0x07
    1ffe:	85 e5       	ldi	r24, 0x55	; 85
    2000:	91 e0       	ldi	r25, 0x01	; 1
    2002:	91 83       	std	Z+1, r25	; 0x01
    2004:	80 83       	st	Z, r24
    2006:	85 ec       	ldi	r24, 0xC5	; 197
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	95 87       	std	Z+13, r25	; 0x0d
    200c:	84 87       	std	Z+12, r24	; 0x0c
    200e:	84 ec       	ldi	r24, 0xC4	; 196
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	97 87       	std	Z+15, r25	; 0x0f
    2014:	86 87       	std	Z+14, r24	; 0x0e
    2016:	80 ec       	ldi	r24, 0xC0	; 192
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	91 8b       	std	Z+17, r25	; 0x11
    201c:	80 8b       	std	Z+16, r24	; 0x10
    201e:	81 ec       	ldi	r24, 0xC1	; 193
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	93 8b       	std	Z+19, r25	; 0x13
    2024:	82 8b       	std	Z+18, r24	; 0x12
    2026:	82 ec       	ldi	r24, 0xC2	; 194
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	95 8b       	std	Z+21, r25	; 0x15
    202c:	84 8b       	std	Z+20, r24	; 0x14
    202e:	86 ec       	ldi	r24, 0xC6	; 198
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	97 8b       	std	Z+23, r25	; 0x17
    2034:	86 8b       	std	Z+22, r24	; 0x16
    2036:	11 8e       	std	Z+25, r1	; 0x19
    2038:	12 8e       	std	Z+26, r1	; 0x1a
    203a:	13 8e       	std	Z+27, r1	; 0x1b
    203c:	14 8e       	std	Z+28, r1	; 0x1c
    203e:	08 95       	ret

00002040 <initVariant>:
    2040:	08 95       	ret

00002042 <main>:
    2042:	0e 94 19 11 	call	0x2232	; 0x2232 <init>
    2046:	0e 94 20 10 	call	0x2040	; 0x2040 <initVariant>
    204a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <setup>
    204e:	c3 e9       	ldi	r28, 0x93	; 147
    2050:	de e0       	ldi	r29, 0x0E	; 14
    2052:	0e 94 df 04 	call	0x9be	; 0x9be <loop>
    2056:	20 97       	sbiw	r28, 0x00	; 0
    2058:	e1 f3       	breq	.-8      	; 0x2052 <main+0x10>
    205a:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_Z14serialEventRunv>
    205e:	f9 cf       	rjmp	.-14     	; 0x2052 <main+0x10>

00002060 <_ZN5Print5writeEPKhj>:
    2060:	cf 92       	push	r12
    2062:	df 92       	push	r13
    2064:	ef 92       	push	r14
    2066:	ff 92       	push	r15
    2068:	0f 93       	push	r16
    206a:	1f 93       	push	r17
    206c:	cf 93       	push	r28
    206e:	df 93       	push	r29
    2070:	6c 01       	movw	r12, r24
    2072:	eb 01       	movw	r28, r22
    2074:	7b 01       	movw	r14, r22
    2076:	e4 0e       	add	r14, r20
    2078:	f5 1e       	adc	r15, r21
    207a:	00 e0       	ldi	r16, 0x00	; 0
    207c:	10 e0       	ldi	r17, 0x00	; 0
    207e:	ce 15       	cp	r28, r14
    2080:	df 05       	cpc	r29, r15
    2082:	61 f0       	breq	.+24     	; 0x209c <_ZN5Print5writeEPKhj+0x3c>
    2084:	69 91       	ld	r22, Y+
    2086:	d6 01       	movw	r26, r12
    2088:	ed 91       	ld	r30, X+
    208a:	fc 91       	ld	r31, X
    208c:	01 90       	ld	r0, Z+
    208e:	f0 81       	ld	r31, Z
    2090:	e0 2d       	mov	r30, r0
    2092:	c6 01       	movw	r24, r12
    2094:	09 95       	icall
    2096:	08 0f       	add	r16, r24
    2098:	19 1f       	adc	r17, r25
    209a:	f1 cf       	rjmp	.-30     	; 0x207e <_ZN5Print5writeEPKhj+0x1e>
    209c:	c8 01       	movw	r24, r16
    209e:	df 91       	pop	r29
    20a0:	cf 91       	pop	r28
    20a2:	1f 91       	pop	r17
    20a4:	0f 91       	pop	r16
    20a6:	ff 90       	pop	r15
    20a8:	ef 90       	pop	r14
    20aa:	df 90       	pop	r13
    20ac:	cf 90       	pop	r12
    20ae:	08 95       	ret

000020b0 <_ZN5Print5writeEPKc>:
    20b0:	61 15       	cp	r22, r1
    20b2:	71 05       	cpc	r23, r1
    20b4:	79 f0       	breq	.+30     	; 0x20d4 <_ZN5Print5writeEPKc+0x24>
    20b6:	fb 01       	movw	r30, r22
    20b8:	01 90       	ld	r0, Z+
    20ba:	00 20       	and	r0, r0
    20bc:	e9 f7       	brne	.-6      	; 0x20b8 <_ZN5Print5writeEPKc+0x8>
    20be:	31 97       	sbiw	r30, 0x01	; 1
    20c0:	af 01       	movw	r20, r30
    20c2:	46 1b       	sub	r20, r22
    20c4:	57 0b       	sbc	r21, r23
    20c6:	dc 01       	movw	r26, r24
    20c8:	ed 91       	ld	r30, X+
    20ca:	fc 91       	ld	r31, X
    20cc:	02 80       	ldd	r0, Z+2	; 0x02
    20ce:	f3 81       	ldd	r31, Z+3	; 0x03
    20d0:	e0 2d       	mov	r30, r0
    20d2:	09 94       	ijmp
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	08 95       	ret

000020da <_ZN5Print5printEPK19__FlashStringHelper>:
    20da:	ef 92       	push	r14
    20dc:	ff 92       	push	r15
    20de:	0f 93       	push	r16
    20e0:	1f 93       	push	r17
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	7c 01       	movw	r14, r24
    20e8:	fb 01       	movw	r30, r22
    20ea:	00 e0       	ldi	r16, 0x00	; 0
    20ec:	10 e0       	ldi	r17, 0x00	; 0
    20ee:	64 91       	lpm	r22, Z
    20f0:	ef 01       	movw	r28, r30
    20f2:	21 96       	adiw	r28, 0x01	; 1
    20f4:	66 23       	and	r22, r22
    20f6:	61 f0       	breq	.+24     	; 0x2110 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    20f8:	d7 01       	movw	r26, r14
    20fa:	ed 91       	ld	r30, X+
    20fc:	fc 91       	ld	r31, X
    20fe:	01 90       	ld	r0, Z+
    2100:	f0 81       	ld	r31, Z
    2102:	e0 2d       	mov	r30, r0
    2104:	c7 01       	movw	r24, r14
    2106:	09 95       	icall
    2108:	08 0f       	add	r16, r24
    210a:	19 1f       	adc	r17, r25
    210c:	fe 01       	movw	r30, r28
    210e:	ef cf       	rjmp	.-34     	; 0x20ee <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    2110:	c8 01       	movw	r24, r16
    2112:	df 91       	pop	r29
    2114:	cf 91       	pop	r28
    2116:	1f 91       	pop	r17
    2118:	0f 91       	pop	r16
    211a:	ff 90       	pop	r15
    211c:	ef 90       	pop	r14
    211e:	08 95       	ret

00002120 <_ZN5Print5printEc>:
    2120:	dc 01       	movw	r26, r24
    2122:	ed 91       	ld	r30, X+
    2124:	fc 91       	ld	r31, X
    2126:	01 90       	ld	r0, Z+
    2128:	f0 81       	ld	r31, Z
    212a:	e0 2d       	mov	r30, r0
    212c:	09 94       	ijmp

0000212e <_ZN5Print7printlnEv>:
    212e:	0f 93       	push	r16
    2130:	1f 93       	push	r17
    2132:	cf 93       	push	r28
    2134:	df 93       	push	r29
    2136:	ec 01       	movw	r28, r24
    2138:	6d e0       	ldi	r22, 0x0D	; 13
    213a:	0e 94 90 10 	call	0x2120	; 0x2120 <_ZN5Print5printEc>
    213e:	8c 01       	movw	r16, r24
    2140:	6a e0       	ldi	r22, 0x0A	; 10
    2142:	ce 01       	movw	r24, r28
    2144:	0e 94 90 10 	call	0x2120	; 0x2120 <_ZN5Print5printEc>
    2148:	80 0f       	add	r24, r16
    214a:	91 1f       	adc	r25, r17
    214c:	df 91       	pop	r29
    214e:	cf 91       	pop	r28
    2150:	1f 91       	pop	r17
    2152:	0f 91       	pop	r16
    2154:	08 95       	ret

00002156 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    2156:	0f 93       	push	r16
    2158:	1f 93       	push	r17
    215a:	cf 93       	push	r28
    215c:	df 93       	push	r29
    215e:	ec 01       	movw	r28, r24
    2160:	0e 94 6d 10 	call	0x20da	; 0x20da <_ZN5Print5printEPK19__FlashStringHelper>
    2164:	8c 01       	movw	r16, r24
    2166:	ce 01       	movw	r24, r28
    2168:	0e 94 97 10 	call	0x212e	; 0x212e <_ZN5Print7printlnEv>
    216c:	80 0f       	add	r24, r16
    216e:	91 1f       	adc	r25, r17
    2170:	df 91       	pop	r29
    2172:	cf 91       	pop	r28
    2174:	1f 91       	pop	r17
    2176:	0f 91       	pop	r16
    2178:	08 95       	ret

0000217a <_ZN5Print7printlnEPKc>:
    217a:	0f 93       	push	r16
    217c:	1f 93       	push	r17
    217e:	cf 93       	push	r28
    2180:	df 93       	push	r29
    2182:	ec 01       	movw	r28, r24
    2184:	0e 94 58 10 	call	0x20b0	; 0x20b0 <_ZN5Print5writeEPKc>
    2188:	8c 01       	movw	r16, r24
    218a:	ce 01       	movw	r24, r28
    218c:	0e 94 97 10 	call	0x212e	; 0x212e <_ZN5Print7printlnEv>
    2190:	80 0f       	add	r24, r16
    2192:	91 1f       	adc	r25, r17
    2194:	df 91       	pop	r29
    2196:	cf 91       	pop	r28
    2198:	1f 91       	pop	r17
    219a:	0f 91       	pop	r16
    219c:	08 95       	ret

0000219e <__vector_16>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    219e:	1f 92       	push	r1
    21a0:	0f 92       	push	r0
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	0f 92       	push	r0
    21a6:	11 24       	eor	r1, r1
    21a8:	2f 93       	push	r18
    21aa:	3f 93       	push	r19
    21ac:	8f 93       	push	r24
    21ae:	9f 93       	push	r25
    21b0:	af 93       	push	r26
    21b2:	bf 93       	push	r27
    21b4:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <timer0_millis>
    21b8:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <timer0_millis+0x1>
    21bc:	a0 91 01 03 	lds	r26, 0x0301	; 0x800301 <timer0_millis+0x2>
    21c0:	b0 91 02 03 	lds	r27, 0x0302	; 0x800302 <timer0_millis+0x3>
    21c4:	30 91 fe 02 	lds	r19, 0x02FE	; 0x8002fe <timer0_fract>
    21c8:	23 e0       	ldi	r18, 0x03	; 3
    21ca:	23 0f       	add	r18, r19
    21cc:	2d 37       	cpi	r18, 0x7D	; 125
    21ce:	20 f4       	brcc	.+8      	; 0x21d8 <__vector_16+0x3a>
    21d0:	01 96       	adiw	r24, 0x01	; 1
    21d2:	a1 1d       	adc	r26, r1
    21d4:	b1 1d       	adc	r27, r1
    21d6:	05 c0       	rjmp	.+10     	; 0x21e2 <__vector_16+0x44>
    21d8:	26 e8       	ldi	r18, 0x86	; 134
    21da:	23 0f       	add	r18, r19
    21dc:	02 96       	adiw	r24, 0x02	; 2
    21de:	a1 1d       	adc	r26, r1
    21e0:	b1 1d       	adc	r27, r1
    21e2:	20 93 fe 02 	sts	0x02FE, r18	; 0x8002fe <timer0_fract>
    21e6:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <timer0_millis>
    21ea:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <timer0_millis+0x1>
    21ee:	a0 93 01 03 	sts	0x0301, r26	; 0x800301 <timer0_millis+0x2>
    21f2:	b0 93 02 03 	sts	0x0302, r27	; 0x800302 <timer0_millis+0x3>
    21f6:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <timer0_overflow_count>
    21fa:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <timer0_overflow_count+0x1>
    21fe:	a0 91 05 03 	lds	r26, 0x0305	; 0x800305 <timer0_overflow_count+0x2>
    2202:	b0 91 06 03 	lds	r27, 0x0306	; 0x800306 <timer0_overflow_count+0x3>
    2206:	01 96       	adiw	r24, 0x01	; 1
    2208:	a1 1d       	adc	r26, r1
    220a:	b1 1d       	adc	r27, r1
    220c:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <timer0_overflow_count>
    2210:	90 93 04 03 	sts	0x0304, r25	; 0x800304 <timer0_overflow_count+0x1>
    2214:	a0 93 05 03 	sts	0x0305, r26	; 0x800305 <timer0_overflow_count+0x2>
    2218:	b0 93 06 03 	sts	0x0306, r27	; 0x800306 <timer0_overflow_count+0x3>
    221c:	bf 91       	pop	r27
    221e:	af 91       	pop	r26
    2220:	9f 91       	pop	r25
    2222:	8f 91       	pop	r24
    2224:	3f 91       	pop	r19
    2226:	2f 91       	pop	r18
    2228:	0f 90       	pop	r0
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	0f 90       	pop	r0
    222e:	1f 90       	pop	r1
    2230:	18 95       	reti

00002232 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2232:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2234:	84 b5       	in	r24, 0x24	; 36
    2236:	82 60       	ori	r24, 0x02	; 2
    2238:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    223a:	84 b5       	in	r24, 0x24	; 36
    223c:	81 60       	ori	r24, 0x01	; 1
    223e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2240:	85 b5       	in	r24, 0x25	; 37
    2242:	82 60       	ori	r24, 0x02	; 2
    2244:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2246:	85 b5       	in	r24, 0x25	; 37
    2248:	81 60       	ori	r24, 0x01	; 1
    224a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    224c:	ee e6       	ldi	r30, 0x6E	; 110
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	80 81       	ld	r24, Z
    2252:	81 60       	ori	r24, 0x01	; 1
    2254:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2256:	e1 e8       	ldi	r30, 0x81	; 129
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    225c:	80 81       	ld	r24, Z
    225e:	82 60       	ori	r24, 0x02	; 2
    2260:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2262:	80 81       	ld	r24, Z
    2264:	81 60       	ori	r24, 0x01	; 1
    2266:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2268:	e0 e8       	ldi	r30, 0x80	; 128
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	81 60       	ori	r24, 0x01	; 1
    2270:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2272:	e1 eb       	ldi	r30, 0xB1	; 177
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	84 60       	ori	r24, 0x04	; 4
    227a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    227c:	e0 eb       	ldi	r30, 0xB0	; 176
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	81 60       	ori	r24, 0x01	; 1
    2284:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    2286:	ea e7       	ldi	r30, 0x7A	; 122
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	84 60       	ori	r24, 0x04	; 4
    228e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    2290:	80 81       	ld	r24, Z
    2292:	82 60       	ori	r24, 0x02	; 2
    2294:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    2296:	80 81       	ld	r24, Z
    2298:	81 60       	ori	r24, 0x01	; 1
    229a:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    229c:	80 81       	ld	r24, Z
    229e:	80 68       	ori	r24, 0x80	; 128
    22a0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    22a2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    22a6:	08 95       	ret

000022a8 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    22a8:	83 30       	cpi	r24, 0x03	; 3
    22aa:	81 f0       	breq	.+32     	; 0x22cc <turnOffPWM+0x24>
    22ac:	28 f4       	brcc	.+10     	; 0x22b8 <turnOffPWM+0x10>
    22ae:	81 30       	cpi	r24, 0x01	; 1
    22b0:	99 f0       	breq	.+38     	; 0x22d8 <turnOffPWM+0x30>
    22b2:	82 30       	cpi	r24, 0x02	; 2
    22b4:	a1 f0       	breq	.+40     	; 0x22de <turnOffPWM+0x36>
    22b6:	08 95       	ret
    22b8:	87 30       	cpi	r24, 0x07	; 7
    22ba:	a9 f0       	breq	.+42     	; 0x22e6 <turnOffPWM+0x3e>
    22bc:	88 30       	cpi	r24, 0x08	; 8
    22be:	b9 f0       	breq	.+46     	; 0x22ee <turnOffPWM+0x46>
    22c0:	84 30       	cpi	r24, 0x04	; 4
    22c2:	d1 f4       	brne	.+52     	; 0x22f8 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    22c4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    22c8:	8f 7d       	andi	r24, 0xDF	; 223
    22ca:	03 c0       	rjmp	.+6      	; 0x22d2 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    22cc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    22d0:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    22d2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    22d6:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    22d8:	84 b5       	in	r24, 0x24	; 36
    22da:	8f 77       	andi	r24, 0x7F	; 127
    22dc:	02 c0       	rjmp	.+4      	; 0x22e2 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    22de:	84 b5       	in	r24, 0x24	; 36
    22e0:	8f 7d       	andi	r24, 0xDF	; 223
    22e2:	84 bd       	out	0x24, r24	; 36
    22e4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    22e6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    22ea:	8f 77       	andi	r24, 0x7F	; 127
    22ec:	03 c0       	rjmp	.+6      	; 0x22f4 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    22ee:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    22f2:	8f 7d       	andi	r24, 0xDF	; 223
    22f4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    22f8:	08 95       	ret

000022fa <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	fc 01       	movw	r30, r24
    2302:	e1 5f       	subi	r30, 0xF1	; 241
    2304:	fa 4f       	sbci	r31, 0xFA	; 250
    2306:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2308:	fc 01       	movw	r30, r24
    230a:	ed 5d       	subi	r30, 0xDD	; 221
    230c:	fa 4f       	sbci	r31, 0xFA	; 250
    230e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2310:	88 23       	and	r24, r24
    2312:	61 f1       	breq	.+88     	; 0x236c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	88 0f       	add	r24, r24
    2318:	99 1f       	adc	r25, r25
    231a:	fc 01       	movw	r30, r24
    231c:	ef 5b       	subi	r30, 0xBF	; 191
    231e:	fa 4f       	sbci	r31, 0xFA	; 250
    2320:	c5 91       	lpm	r28, Z+
    2322:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2324:	fc 01       	movw	r30, r24
    2326:	e9 5c       	subi	r30, 0xC9	; 201
    2328:	fa 4f       	sbci	r31, 0xFA	; 250
    232a:	a5 91       	lpm	r26, Z+
    232c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    232e:	61 11       	cpse	r22, r1
    2330:	09 c0       	rjmp	.+18     	; 0x2344 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2332:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2334:	f8 94       	cli
		*reg &= ~bit;
    2336:	88 81       	ld	r24, Y
    2338:	20 95       	com	r18
    233a:	82 23       	and	r24, r18
    233c:	88 83       	st	Y, r24
		*out &= ~bit;
    233e:	ec 91       	ld	r30, X
    2340:	2e 23       	and	r18, r30
    2342:	0b c0       	rjmp	.+22     	; 0x235a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2344:	62 30       	cpi	r22, 0x02	; 2
    2346:	61 f4       	brne	.+24     	; 0x2360 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2348:	9f b7       	in	r25, 0x3f	; 63
                cli();
    234a:	f8 94       	cli
		*reg &= ~bit;
    234c:	38 81       	ld	r19, Y
    234e:	82 2f       	mov	r24, r18
    2350:	80 95       	com	r24
    2352:	83 23       	and	r24, r19
    2354:	88 83       	st	Y, r24
		*out |= bit;
    2356:	ec 91       	ld	r30, X
    2358:	2e 2b       	or	r18, r30
    235a:	2c 93       	st	X, r18
		SREG = oldSREG;
    235c:	9f bf       	out	0x3f, r25	; 63
    235e:	06 c0       	rjmp	.+12     	; 0x236c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2360:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2362:	f8 94       	cli
		*reg |= bit;
    2364:	e8 81       	ld	r30, Y
    2366:	2e 2b       	or	r18, r30
    2368:	28 83       	st	Y, r18
		SREG = oldSREG;
    236a:	8f bf       	out	0x3f, r24	; 63
	}
}
    236c:	df 91       	pop	r29
    236e:	cf 91       	pop	r28
    2370:	08 95       	ret

00002372 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2372:	1f 93       	push	r17
    2374:	cf 93       	push	r28
    2376:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	f9 01       	movw	r30, r18
    237e:	e5 50       	subi	r30, 0x05	; 5
    2380:	fb 4f       	sbci	r31, 0xFB	; 251
    2382:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2384:	f9 01       	movw	r30, r18
    2386:	e1 5f       	subi	r30, 0xF1	; 241
    2388:	fa 4f       	sbci	r31, 0xFA	; 250
    238a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    238c:	f9 01       	movw	r30, r18
    238e:	ed 5d       	subi	r30, 0xDD	; 221
    2390:	fa 4f       	sbci	r31, 0xFA	; 250
    2392:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2394:	cc 23       	and	r28, r28
    2396:	c9 f0       	breq	.+50     	; 0x23ca <digitalWrite+0x58>
    2398:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    239a:	81 11       	cpse	r24, r1
    239c:	0e 94 54 11 	call	0x22a8	; 0x22a8 <turnOffPWM>

	out = portOutputRegister(port);
    23a0:	ec 2f       	mov	r30, r28
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	ee 0f       	add	r30, r30
    23a6:	ff 1f       	adc	r31, r31
    23a8:	e9 5c       	subi	r30, 0xC9	; 201
    23aa:	fa 4f       	sbci	r31, 0xFA	; 250
    23ac:	a5 91       	lpm	r26, Z+
    23ae:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    23b0:	8f b7       	in	r24, 0x3f	; 63
	cli();
    23b2:	f8 94       	cli

	if (val == LOW) {
    23b4:	11 11       	cpse	r17, r1
    23b6:	05 c0       	rjmp	.+10     	; 0x23c2 <digitalWrite+0x50>
		*out &= ~bit;
    23b8:	9c 91       	ld	r25, X
    23ba:	ed 2f       	mov	r30, r29
    23bc:	e0 95       	com	r30
    23be:	e9 23       	and	r30, r25
    23c0:	02 c0       	rjmp	.+4      	; 0x23c6 <digitalWrite+0x54>
	} else {
		*out |= bit;
    23c2:	ec 91       	ld	r30, X
    23c4:	ed 2b       	or	r30, r29
    23c6:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    23c8:	8f bf       	out	0x3f, r24	; 63
}
    23ca:	df 91       	pop	r29
    23cc:	cf 91       	pop	r28
    23ce:	1f 91       	pop	r17
    23d0:	08 95       	ret

000023d2 <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    23d2:	bf 92       	push	r11
    23d4:	cf 92       	push	r12
    23d6:	df 92       	push	r13
    23d8:	ef 92       	push	r14
    23da:	ff 92       	push	r15
    23dc:	0f 93       	push	r16
    23de:	1f 93       	push	r17
    23e0:	cf 93       	push	r28
    23e2:	df 93       	push	r29
    23e4:	c8 2e       	mov	r12, r24
    23e6:	d6 2e       	mov	r13, r22
    23e8:	b4 2e       	mov	r11, r20
    23ea:	c7 e0       	ldi	r28, 0x07	; 7
    23ec:	d0 e0       	ldi	r29, 0x00	; 0
    23ee:	02 2f       	mov	r16, r18
    23f0:	10 e0       	ldi	r17, 0x00	; 0
    23f2:	87 e0       	ldi	r24, 0x07	; 7
    23f4:	e8 2e       	mov	r14, r24
    23f6:	f1 2c       	mov	r15, r1
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    23f8:	b1 10       	cpse	r11, r1
    23fa:	05 c0       	rjmp	.+10     	; 0x2406 <shiftOut+0x34>
    23fc:	c7 01       	movw	r24, r14
    23fe:	8c 1b       	sub	r24, r28
    2400:	9d 0b       	sbc	r25, r29
			digitalWrite(dataPin, !!(val & (1 << i)));
    2402:	98 01       	movw	r18, r16
    2404:	02 c0       	rjmp	.+4      	; 0x240a <shiftOut+0x38>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    2406:	98 01       	movw	r18, r16
    2408:	8c 2f       	mov	r24, r28
    240a:	02 c0       	rjmp	.+4      	; 0x2410 <shiftOut+0x3e>
    240c:	35 95       	asr	r19
    240e:	27 95       	ror	r18
    2410:	8a 95       	dec	r24
    2412:	e2 f7       	brpl	.-8      	; 0x240c <shiftOut+0x3a>
    2414:	b9 01       	movw	r22, r18
    2416:	61 70       	andi	r22, 0x01	; 1
    2418:	77 27       	eor	r23, r23
    241a:	8c 2d       	mov	r24, r12
    241c:	0e 94 b9 11 	call	0x2372	; 0x2372 <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    2420:	61 e0       	ldi	r22, 0x01	; 1
    2422:	8d 2d       	mov	r24, r13
    2424:	0e 94 b9 11 	call	0x2372	; 0x2372 <digitalWrite>
		digitalWrite(clockPin, LOW);		
    2428:	60 e0       	ldi	r22, 0x00	; 0
    242a:	8d 2d       	mov	r24, r13
    242c:	0e 94 b9 11 	call	0x2372	; 0x2372 <digitalWrite>
    2430:	21 97       	sbiw	r28, 0x01	; 1
    2432:	10 f7       	brcc	.-60     	; 0x23f8 <shiftOut+0x26>
	}
}
    2434:	df 91       	pop	r29
    2436:	cf 91       	pop	r28
    2438:	1f 91       	pop	r17
    243a:	0f 91       	pop	r16
    243c:	ff 90       	pop	r15
    243e:	ef 90       	pop	r14
    2440:	df 90       	pop	r13
    2442:	cf 90       	pop	r12
    2444:	bf 90       	pop	r11
    2446:	08 95       	ret

00002448 <__udivmodsi4>:
    2448:	a1 e2       	ldi	r26, 0x21	; 33
    244a:	1a 2e       	mov	r1, r26
    244c:	aa 1b       	sub	r26, r26
    244e:	bb 1b       	sub	r27, r27
    2450:	fd 01       	movw	r30, r26
    2452:	0d c0       	rjmp	.+26     	; 0x246e <__udivmodsi4_ep>

00002454 <__udivmodsi4_loop>:
    2454:	aa 1f       	adc	r26, r26
    2456:	bb 1f       	adc	r27, r27
    2458:	ee 1f       	adc	r30, r30
    245a:	ff 1f       	adc	r31, r31
    245c:	a2 17       	cp	r26, r18
    245e:	b3 07       	cpc	r27, r19
    2460:	e4 07       	cpc	r30, r20
    2462:	f5 07       	cpc	r31, r21
    2464:	20 f0       	brcs	.+8      	; 0x246e <__udivmodsi4_ep>
    2466:	a2 1b       	sub	r26, r18
    2468:	b3 0b       	sbc	r27, r19
    246a:	e4 0b       	sbc	r30, r20
    246c:	f5 0b       	sbc	r31, r21

0000246e <__udivmodsi4_ep>:
    246e:	66 1f       	adc	r22, r22
    2470:	77 1f       	adc	r23, r23
    2472:	88 1f       	adc	r24, r24
    2474:	99 1f       	adc	r25, r25
    2476:	1a 94       	dec	r1
    2478:	69 f7       	brne	.-38     	; 0x2454 <__udivmodsi4_loop>
    247a:	60 95       	com	r22
    247c:	70 95       	com	r23
    247e:	80 95       	com	r24
    2480:	90 95       	com	r25
    2482:	9b 01       	movw	r18, r22
    2484:	ac 01       	movw	r20, r24
    2486:	bd 01       	movw	r22, r26
    2488:	cf 01       	movw	r24, r30
    248a:	08 95       	ret

0000248c <__usmulhisi3>:
    248c:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__umulhisi3>

00002490 <__usmulhisi3_tail>:
    2490:	b7 ff       	sbrs	r27, 7
    2492:	08 95       	ret
    2494:	82 1b       	sub	r24, r18
    2496:	93 0b       	sbc	r25, r19
    2498:	08 95       	ret

0000249a <__tablejump2__>:
    249a:	ee 0f       	add	r30, r30
    249c:	ff 1f       	adc	r31, r31
    249e:	05 90       	lpm	r0, Z+
    24a0:	f4 91       	lpm	r31, Z
    24a2:	e0 2d       	mov	r30, r0
    24a4:	09 94       	ijmp

000024a6 <__umulhisi3>:
    24a6:	a2 9f       	mul	r26, r18
    24a8:	b0 01       	movw	r22, r0
    24aa:	b3 9f       	mul	r27, r19
    24ac:	c0 01       	movw	r24, r0
    24ae:	a3 9f       	mul	r26, r19
    24b0:	70 0d       	add	r23, r0
    24b2:	81 1d       	adc	r24, r1
    24b4:	11 24       	eor	r1, r1
    24b6:	91 1d       	adc	r25, r1
    24b8:	b2 9f       	mul	r27, r18
    24ba:	70 0d       	add	r23, r0
    24bc:	81 1d       	adc	r24, r1
    24be:	11 24       	eor	r1, r1
    24c0:	91 1d       	adc	r25, r1
    24c2:	08 95       	ret

000024c4 <atoi>:
    24c4:	fc 01       	movw	r30, r24
    24c6:	88 27       	eor	r24, r24
    24c8:	99 27       	eor	r25, r25
    24ca:	e8 94       	clt
    24cc:	21 91       	ld	r18, Z+
    24ce:	20 32       	cpi	r18, 0x20	; 32
    24d0:	e9 f3       	breq	.-6      	; 0x24cc <atoi+0x8>
    24d2:	29 30       	cpi	r18, 0x09	; 9
    24d4:	10 f0       	brcs	.+4      	; 0x24da <atoi+0x16>
    24d6:	2e 30       	cpi	r18, 0x0E	; 14
    24d8:	c8 f3       	brcs	.-14     	; 0x24cc <atoi+0x8>
    24da:	2b 32       	cpi	r18, 0x2B	; 43
    24dc:	41 f0       	breq	.+16     	; 0x24ee <atoi+0x2a>
    24de:	2d 32       	cpi	r18, 0x2D	; 45
    24e0:	39 f4       	brne	.+14     	; 0x24f0 <atoi+0x2c>
    24e2:	68 94       	set
    24e4:	04 c0       	rjmp	.+8      	; 0x24ee <atoi+0x2a>
    24e6:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <__mulhi_const_10>
    24ea:	82 0f       	add	r24, r18
    24ec:	91 1d       	adc	r25, r1
    24ee:	21 91       	ld	r18, Z+
    24f0:	20 53       	subi	r18, 0x30	; 48
    24f2:	2a 30       	cpi	r18, 0x0A	; 10
    24f4:	c0 f3       	brcs	.-16     	; 0x24e6 <atoi+0x22>
    24f6:	1e f4       	brtc	.+6      	; 0x24fe <atoi+0x3a>
    24f8:	90 95       	com	r25
    24fa:	81 95       	neg	r24
    24fc:	9f 4f       	sbci	r25, 0xFF	; 255
    24fe:	08 95       	ret

00002500 <memcpy_P>:
    2500:	fb 01       	movw	r30, r22
    2502:	dc 01       	movw	r26, r24
    2504:	02 c0       	rjmp	.+4      	; 0x250a <memcpy_P+0xa>
    2506:	05 90       	lpm	r0, Z+
    2508:	0d 92       	st	X+, r0
    250a:	41 50       	subi	r20, 0x01	; 1
    250c:	50 40       	sbci	r21, 0x00	; 0
    250e:	d8 f7       	brcc	.-10     	; 0x2506 <memcpy_P+0x6>
    2510:	08 95       	ret

00002512 <strtok>:
    2512:	42 e6       	ldi	r20, 0x62	; 98
    2514:	51 e0       	ldi	r21, 0x01	; 1
    2516:	0e 94 b1 12 	call	0x2562	; 0x2562 <strtok_r>
    251a:	08 95       	ret

0000251c <strchr>:
    251c:	fc 01       	movw	r30, r24
    251e:	81 91       	ld	r24, Z+
    2520:	86 17       	cp	r24, r22
    2522:	21 f0       	breq	.+8      	; 0x252c <strchr+0x10>
    2524:	88 23       	and	r24, r24
    2526:	d9 f7       	brne	.-10     	; 0x251e <strchr+0x2>
    2528:	99 27       	eor	r25, r25
    252a:	08 95       	ret
    252c:	31 97       	sbiw	r30, 0x01	; 1
    252e:	cf 01       	movw	r24, r30
    2530:	08 95       	ret

00002532 <strcmp>:
    2532:	fb 01       	movw	r30, r22
    2534:	dc 01       	movw	r26, r24
    2536:	8d 91       	ld	r24, X+
    2538:	01 90       	ld	r0, Z+
    253a:	80 19       	sub	r24, r0
    253c:	01 10       	cpse	r0, r1
    253e:	d9 f3       	breq	.-10     	; 0x2536 <strcmp+0x4>
    2540:	99 0b       	sbc	r25, r25
    2542:	08 95       	ret

00002544 <strncpy>:
    2544:	fb 01       	movw	r30, r22
    2546:	dc 01       	movw	r26, r24
    2548:	41 50       	subi	r20, 0x01	; 1
    254a:	50 40       	sbci	r21, 0x00	; 0
    254c:	48 f0       	brcs	.+18     	; 0x2560 <strncpy+0x1c>
    254e:	01 90       	ld	r0, Z+
    2550:	0d 92       	st	X+, r0
    2552:	00 20       	and	r0, r0
    2554:	c9 f7       	brne	.-14     	; 0x2548 <strncpy+0x4>
    2556:	01 c0       	rjmp	.+2      	; 0x255a <strncpy+0x16>
    2558:	1d 92       	st	X+, r1
    255a:	41 50       	subi	r20, 0x01	; 1
    255c:	50 40       	sbci	r21, 0x00	; 0
    255e:	e0 f7       	brcc	.-8      	; 0x2558 <strncpy+0x14>
    2560:	08 95       	ret

00002562 <strtok_r>:
    2562:	fa 01       	movw	r30, r20
    2564:	a1 91       	ld	r26, Z+
    2566:	b0 81       	ld	r27, Z
    2568:	00 97       	sbiw	r24, 0x00	; 0
    256a:	19 f4       	brne	.+6      	; 0x2572 <strtok_r+0x10>
    256c:	10 97       	sbiw	r26, 0x00	; 0
    256e:	e1 f0       	breq	.+56     	; 0x25a8 <strtok_r+0x46>
    2570:	cd 01       	movw	r24, r26
    2572:	dc 01       	movw	r26, r24
    2574:	cd 01       	movw	r24, r26
    2576:	0d 90       	ld	r0, X+
    2578:	00 20       	and	r0, r0
    257a:	11 f4       	brne	.+4      	; 0x2580 <strtok_r+0x1e>
    257c:	c0 01       	movw	r24, r0
    257e:	13 c0       	rjmp	.+38     	; 0x25a6 <strtok_r+0x44>
    2580:	fb 01       	movw	r30, r22
    2582:	21 91       	ld	r18, Z+
    2584:	22 23       	and	r18, r18
    2586:	19 f0       	breq	.+6      	; 0x258e <strtok_r+0x2c>
    2588:	20 15       	cp	r18, r0
    258a:	d9 f7       	brne	.-10     	; 0x2582 <strtok_r+0x20>
    258c:	f3 cf       	rjmp	.-26     	; 0x2574 <strtok_r+0x12>
    258e:	fb 01       	movw	r30, r22
    2590:	21 91       	ld	r18, Z+
    2592:	20 15       	cp	r18, r0
    2594:	19 f4       	brne	.+6      	; 0x259c <strtok_r+0x3a>
    2596:	1e 92       	st	-X, r1
    2598:	11 96       	adiw	r26, 0x01	; 1
    259a:	06 c0       	rjmp	.+12     	; 0x25a8 <strtok_r+0x46>
    259c:	22 23       	and	r18, r18
    259e:	c1 f7       	brne	.-16     	; 0x2590 <strtok_r+0x2e>
    25a0:	0d 90       	ld	r0, X+
    25a2:	00 20       	and	r0, r0
    25a4:	a1 f7       	brne	.-24     	; 0x258e <strtok_r+0x2c>
    25a6:	d0 01       	movw	r26, r0
    25a8:	fa 01       	movw	r30, r20
    25aa:	a1 93       	st	Z+, r26
    25ac:	b0 83       	st	Z, r27
    25ae:	08 95       	ret

000025b0 <__mulhi_const_10>:
    25b0:	7a e0       	ldi	r23, 0x0A	; 10
    25b2:	97 9f       	mul	r25, r23
    25b4:	90 2d       	mov	r25, r0
    25b6:	87 9f       	mul	r24, r23
    25b8:	80 2d       	mov	r24, r0
    25ba:	91 0d       	add	r25, r1
    25bc:	11 24       	eor	r1, r1
    25be:	08 95       	ret

000025c0 <__do_global_dtors>:
    25c0:	12 e0       	ldi	r17, 0x02	; 2
    25c2:	c9 ea       	ldi	r28, 0xA9	; 169
    25c4:	d2 e0       	ldi	r29, 0x02	; 2
    25c6:	04 c0       	rjmp	.+8      	; 0x25d0 <__do_global_dtors+0x10>
    25c8:	fe 01       	movw	r30, r28
    25ca:	0e 94 4d 12 	call	0x249a	; 0x249a <__tablejump2__>
    25ce:	21 96       	adiw	r28, 0x01	; 1
    25d0:	ca 3a       	cpi	r28, 0xAA	; 170
    25d2:	d1 07       	cpc	r29, r17
    25d4:	c9 f7       	brne	.-14     	; 0x25c8 <__do_global_dtors+0x8>
    25d6:	f8 94       	cli

000025d8 <__stop_program>:
    25d8:	ff cf       	rjmp	.-2      	; 0x25d8 <__stop_program>
