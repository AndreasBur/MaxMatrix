
Led_Anzeige.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00002526  000025ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002526  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011c  00800150  00800150  0000260a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000260a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000263c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000558  00000000  00000000  0000267c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c93a  00000000  00000000  00002bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d96  00000000  00000000  0000f50e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000035db  00000000  00000000  000112a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000135c  00000000  00000000  00014880  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002c10  00000000  00000000  00015bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000088e7  00000000  00000000  000187ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007c8  00000000  00000000  000210d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__dtors_end>
       4:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
       8:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
       c:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      10:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      14:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      18:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      1c:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      20:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      24:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__vector_9>
      28:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      2c:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      30:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      34:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__vector_13>
      38:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      3c:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      40:	0c 94 75 10 	jmp	0x20ea	; 0x20ea <__vector_16>
      44:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      48:	0c 94 37 0f 	jmp	0x1e6e	; 0x1e6e <__vector_18>
      4c:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__vector_19>
      50:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      54:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      58:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      5c:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      60:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      64:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	45 78       	andi	r20, 0x85	; 133
      6a:	61 6d       	ori	r22, 0xD1	; 209
      6c:	70 6c       	ori	r23, 0xC0	; 192
      6e:	65 3a       	cpi	r22, 0xA5	; 165
      70:	20 74       	andi	r18, 0x40	; 64
      72:	65 78       	andi	r22, 0x85	; 133
      74:	74 3d       	cpi	r23, 0xD4	; 212
      76:	65 78       	andi	r22, 0x85	; 133
      78:	61 6d       	ori	r22, 0xD1	; 209
      7a:	70 6c       	ori	r23, 0xC0	; 192
      7c:	65 20       	and	r6, r5
      7e:	74 65       	ori	r23, 0x54	; 84
      80:	78 74       	andi	r23, 0x48	; 72
	...

00000083 <_ZZ9printHelpvE3__c_1>:
      83:	63 6f 6d 6d 61 6e 64 20 61 6e 64 20 76 61 6c 75     command and valu
      93:	65 20 68 61 73 20 74 6f 20 62 65 20 73 65 70 61     e has to be sepa
      a3:	72 61 74 65 64 20 62 79 20 61 6e 20 65 71 75 61     rated by an equa
      b3:	6c 20 73 69 67 6e 00                                l sign.

000000ba <_ZZ9printHelpvE3__c_0>:
      ba:	6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 73 20 61     known commands a
      ca:	72 65 3a 20 74 65 78 74 2c 20 69 6e 74 65 6e 73     re: text, intens
      da:	69 74 79 20 61 6e 64 20 73 70 65 65 64 00           ity and speed.

000000e8 <_ZZ9printHelpvE3__c>:
      e8:	63 6f 6d 6d 61 6e 64 20 64 6f 65 73 20 6e 6f 74     command does not
      f8:	20 6d 61 74 63 68 00                                 match.

000000ff <_ZZ15uartInputHandlevE3__c_2>:
      ff:	73 70 65 65 64 20 72 61 6e 67 65 20 4d 41 58 4d     speed range MAXM
     10f:	41 54 52 49 58 5f 53 50 45 45 44 5f 4d 49 4e 5f     ATRIX_SPEED_MIN_
     11f:	56 41 4c 55 45 20 2e 2e 2e 20 4d 41 58 4d 41 54     VALUE ... MAXMAT
     12f:	52 49 58 5f 53 50 45 45 44 5f 4d 41 58 5f 56 41     RIX_SPEED_MAX_VA
     13f:	4c 55 45 00                                         LUE.

00000143 <_ZZ15uartInputHandlevE3__c_1>:
     143:	76 61 6c 75 65 20 6f 75 74 20 6f 66 20 72 61 6e     value out of ran
     153:	67 65 00                                            ge.

00000156 <_ZZ15uartInputHandlevE3__c_0>:
     156:	69 6e 74 65 6e 73 69 74 79 20 72 61 6e 67 65 20     intensity range 
     166:	4d 41 58 4d 41 54 52 49 58 5f 49 4e 54 45 4e 53     MAXMATRIX_INTENS
     176:	49 54 59 5f 4d 49 4e 5f 56 41 4c 55 45 20 2e 2e     ITY_MIN_VALUE ..
     186:	2e 20 4d 41 58 4d 41 54 52 49 58 5f 49 4e 54 45     . MAXMATRIX_INTE
     196:	4e 53 49 54 59 5f 4d 41 58 5f 56 41 4c 55 45 00     NSITY_MAX_VALUE.

000001a6 <_ZZ15uartInputHandlevE3__c>:
     1a6:	76 61 6c 75 65 20 6f 75 74 20 6f 66 20 72 61 6e     value out of ran
     1b6:	67 65 00                                            ge.

000001b9 <_ZL11SpriteTable>:
     1b9:	03 08 00 00 00 00 00 01 08 5f 00 00 00 00 03 08     ........._......
     1c9:	03 00 03 00 00 05 08 14 3e 14 3e 14 04 08 24 6a     ........>.>...$j
     1d9:	2b 12 00 05 08 63 13 08 64 63 05 08 36 49 56 20     +....c..dc..6IV 
     1e9:	50 01 08 03 00 00 00 00 03 08 1c 22 41 00 00 03     P.........."A...
     1f9:	08 41 22 1c 00 00 05 08 28 18 0e 18 28 05 08 08     .A".....(...(...
     209:	08 3e 08 08 02 08 b0 70 00 00 00 04 08 08 08 08     .>.....p........
     219:	08 00 02 08 60 60 00 00 00 04 08 60 18 06 01 00     ....``.....`....
     229:	04 08 3e 41 41 3e 00 03 08 42 7f 40 00 00 04 08     ..>AA>...B.@....
     239:	62 51 49 46 00 04 08 22 41 49 36 00 04 08 18 14     bQIF..."AI6.....
     249:	12 7f 00 04 08 27 45 45 39 00 04 08 3e 49 49 30     .....'EE9...>II0
     259:	00 04 08 61 11 09 07 00 04 08 36 49 49 36 00 04     ...a......6II6..
     269:	08 06 49 49 3e 00 02 08 50 00 00 00 00 02 08 80     ..II>...P.......
     279:	50 00 00 00 03 08 10 28 44 00 00 03 08 14 14 14     P......(D.......
     289:	00 00 03 08 44 28 10 00 00 04 08 02 59 09 06 00     ....D(......Y...
     299:	05 08 3e 49 55 5d 0e 04 08 7e 11 11 7e 00 04 08     ..>IU]...~..~...
     2a9:	7f 49 49 36 00 04 08 3e 41 41 22 00 04 08 7f 41     .II6...>AA"....A
     2b9:	41 3e 00 04 08 7f 49 49 41 00 04 08 7f 09 09 01     A>....IIA.......
     2c9:	00 04 08 3e 41 49 7a 00 04 08 7f 08 08 7f 00 03     ...>AIz.........
     2d9:	08 41 7f 41 00 00 04 08 30 40 41 3f 00 04 08 7f     .A.A....0@A?....
     2e9:	08 14 63 00 04 08 7f 40 40 40 00 05 08 7f 02 0c     ..c....@@@......
     2f9:	02 7f 05 08 7f 04 08 10 7f 04 08 3e 41 41 3e 00     ...........>AA>.
     309:	04 08 7f 09 09 06 00 04 08 3e 41 41 be 00 04 08     .........>AA....
     319:	7f 09 09 76 00 04 08 46 49 49 32 00 05 08 01 01     ...v...FII2.....
     329:	7f 01 01 04 08 3f 40 40 3f 00 05 08 0f 30 40 30     .....?@@?....0@0
     339:	0f 05 08 3f 40 38 40 3f 05 08 63 14 08 14 63 05     ...?@8@?..c...c.
     349:	08 07 08 70 08 07 04 08 61 51 49 47 00 02 08 7f     ...p....aQIG....
     359:	41 00 00 00 04 08 01 06 18 60 00 02 08 41 7f 00     A........`...A..
     369:	00 00 03 08 02 01 02 00 00 04 08 40 40 40 40 00     ...........@@@@.
     379:	02 08 01 02 00 00 00 04 08 20 54 54 78 00 04 08     ......... TTx...
     389:	7f 44 44 38 00 04 08 38 44 44 28 00 04 08 38 44     .DD8...8DD(...8D
     399:	44 7f 00 04 08 38 54 54 18 00 03 08 04 7e 05 00     D....8TT.....~..
     3a9:	00 04 08 98 a4 a4 78 00 04 08 7f 04 04 78 00 03     ......x......x..
     3b9:	08 44 7d 40 00 00 04 08 40 80 84 7d 00 04 08 7f     .D}@....@..}....
     3c9:	10 28 44 00 03 08 41 7f 40 00 00 05 08 7c 04 7c     .(D...A.@....|.|
     3d9:	04 78 04 08 7c 04 04 78 00 04 08 38 44 44 38 00     .x..|..x...8DD8.
     3e9:	04 08 fc 24 24 18 00 04 08 18 24 24 fc 00 04 08     ...$$.....$$....
     3f9:	7c 08 04 04 00 04 08 48 54 54 24 00 03 08 04 3f     |......HTT$....?
     409:	44 00 00 04 08 3c 40 40 7c 00 05 08 1c 20 40 20     D....<@@|.... @ 
     419:	1c 05 08 3c 40 3c 40 3c 05 08 44 28 10 28 44 04     ...<@<@<..D(.(D.
     429:	08 9c a0 a0 7c 00 03 08 64 54 4c 00 00 03 08 08     ....|...dTL.....
     439:	36 41 00 00 01 08 7f 00 00 00 00 03 08 41 36 08     6A...........A6.
     449:	00 00 04 08 08 04 08 04 00 04 08 7c 13 13 7c 00     ...........|..|.
     459:	04 08 3c 43 43 3c 00 04 08 3e 41 41 3e 00 04 08     ..<CC<...>AA>...
     469:	20 56 56 78 00 04 08 38 46 46 38 00 04 08 3c 42      VVx...8FF8...<B
     479:	42 7c 00                                            B|.

0000047c <digital_pin_to_timer_PGM>:
     47c:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     48c:	00 00 00 00                                         ....

00000490 <digital_pin_to_bit_mask_PGM>:
     490:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     4a0:	04 08 10 20                                         ... 

000004a4 <digital_pin_to_port_PGM>:
     4a4:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     4b4:	03 03 03 03                                         ....

000004b8 <port_to_output_PGM>:
     4b8:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000004c2 <port_to_mode_PGM>:
     4c2:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000004cc <__ctors_start>:
     4cc:	7e 04       	cpc	r7, r14
     4ce:	04 0e       	add	r0, r20
     4d0:	99 0f       	add	r25, r25

000004d2 <__ctors_end>:
     4d2:	85 04       	cpc	r8, r5

000004d4 <__dtors_end>:
     4d4:	11 24       	eor	r1, r1
     4d6:	1f be       	out	0x3f, r1	; 63
     4d8:	cf ef       	ldi	r28, 0xFF	; 255
     4da:	d8 e0       	ldi	r29, 0x08	; 8
     4dc:	de bf       	out	0x3e, r29	; 62
     4de:	cd bf       	out	0x3d, r28	; 61

000004e0 <__do_copy_data>:
     4e0:	11 e0       	ldi	r17, 0x01	; 1
     4e2:	a0 e0       	ldi	r26, 0x00	; 0
     4e4:	b1 e0       	ldi	r27, 0x01	; 1
     4e6:	e6 e2       	ldi	r30, 0x26	; 38
     4e8:	f5 e2       	ldi	r31, 0x25	; 37
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <__do_copy_data+0x10>
     4ec:	05 90       	lpm	r0, Z+
     4ee:	0d 92       	st	X+, r0
     4f0:	a0 35       	cpi	r26, 0x50	; 80
     4f2:	b1 07       	cpc	r27, r17
     4f4:	d9 f7       	brne	.-10     	; 0x4ec <__do_copy_data+0xc>

000004f6 <__do_clear_bss>:
     4f6:	22 e0       	ldi	r18, 0x02	; 2
     4f8:	a0 e5       	ldi	r26, 0x50	; 80
     4fa:	b1 e0       	ldi	r27, 0x01	; 1
     4fc:	01 c0       	rjmp	.+2      	; 0x500 <.do_clear_bss_start>

000004fe <.do_clear_bss_loop>:
     4fe:	1d 92       	st	X+, r1

00000500 <.do_clear_bss_start>:
     500:	ac 36       	cpi	r26, 0x6C	; 108
     502:	b2 07       	cpc	r27, r18
     504:	e1 f7       	brne	.-8      	; 0x4fe <.do_clear_bss_loop>

00000506 <__do_global_ctors>:
     506:	12 e0       	ldi	r17, 0x02	; 2
     508:	c9 e6       	ldi	r28, 0x69	; 105
     50a:	d2 e0       	ldi	r29, 0x02	; 2
     50c:	04 c0       	rjmp	.+8      	; 0x516 <__do_global_ctors+0x10>
     50e:	21 97       	sbiw	r28, 0x01	; 1
     510:	fe 01       	movw	r30, r28
     512:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <__tablejump2__>
     516:	c6 36       	cpi	r28, 0x66	; 102
     518:	d1 07       	cpc	r29, r17
     51a:	c9 f7       	brne	.-14     	; 0x50e <__do_global_ctors+0x8>
     51c:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <main>
     520:	0c 94 86 12 	jmp	0x250c	; 0x250c <__do_global_dtors>

00000524 <__bad_interrupt>:
     524:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000528 <_Z8systTickv>:
 *                  Will be called from interrupt context
 *                  
 *****************************************************************************************************************************************************/
void systTick()
{
    Timer1Overflow = true;
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <Timer1Overflow>
     52e:	08 95       	ret

00000530 <setup>:
/******************************************************************************************************************************************************
 *  ARDUINO setup
 *****************************************************************************************************************************************************/
void setup()
{
    Timer1.initialize(200000);
     530:	40 e4       	ldi	r20, 0x40	; 64
     532:	5d e0       	ldi	r21, 0x0D	; 13
     534:	63 e0       	ldi	r22, 0x03	; 3
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	8a eb       	ldi	r24, 0xBA	; 186
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN8TimerOne10initializeEl>
    Timer1.attachInterrupt(systTick);
     540:	2f ef       	ldi	r18, 0xFF	; 255
     542:	3f ef       	ldi	r19, 0xFF	; 255
     544:	a9 01       	movw	r20, r18
     546:	64 e9       	ldi	r22, 0x94	; 148
     548:	72 e0       	ldi	r23, 0x02	; 2
     54a:	8a eb       	ldi	r24, 0xBA	; 186
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <_ZN8TimerOne15attachInterruptEPFvvEl>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     552:	26 e0       	ldi	r18, 0x06	; 6
     554:	40 e8       	ldi	r20, 0x80	; 128
     556:	55 e2       	ldi	r21, 0x25	; 37
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	86 ec       	ldi	r24, 0xC6	; 198
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <_ZN14HardwareSerial5beginEmh>
    Serial.begin(9600);
    Matrix.init();
     564:	83 e5       	ldi	r24, 0x53	; 83
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN9MaxMatrix4initEv>
    
    Matrix.setOrientation(MAXMATRIX_MODULE_ORIENTATION_90);
     56c:	61 e0       	ldi	r22, 0x01	; 1
     56e:	83 e5       	ldi	r24, 0x53	; 83
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	0e 94 76 05 	call	0xaec	; 0xaec <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType>
    Matrix.setText("Andreas");
     576:	60 e0       	ldi	r22, 0x00	; 0
     578:	71 e0       	ldi	r23, 0x01	; 1
     57a:	83 e5       	ldi	r24, 0x53	; 83
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <_ZN9MaxMatrix7setTextEPKc>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *****************************************************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     582:	4d e1       	ldi	r20, 0x1D	; 29
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	68 e0       	ldi	r22, 0x08	; 8
     588:	71 e0       	ldi	r23, 0x01	; 1
     58a:	83 e7       	ldi	r24, 0x73	; 115
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	0e 94 48 12 	call	0x2490	; 0x2490 <strncpy>
    Destination[Length-1] = '\0';
     592:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <MaxMatrixText+0x1d>
    Matrix.init();
    
    Matrix.setOrientation(MAXMATRIX_MODULE_ORIENTATION_90);
    Matrix.setText("Andreas");
    stringCopy(MaxMatrixText, "Andreas Burnickl", sizeof(MaxMatrixText));
    UartInputComplete = false;
     596:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <UartInputComplete>
    Timer1Overflow = false;
     59a:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <Timer1Overflow>
    
    State = LEDMATRIX_STATE_READY;
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <State>
     5a4:	08 95       	ret

000005a6 <_Z9printHelpv>:
 *  \details        this function prints usage of Led Matrix over UART
 *                  
 *****************************************************************************************************************************************************/
void printHelp()
{
    Serial.println(F("command does not match"));
     5a6:	68 ee       	ldi	r22, 0xE8	; 232
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	86 ec       	ldi	r24, 0xC6	; 198
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(F("known commands are: text, intensity and speed"));
     5b2:	6a eb       	ldi	r22, 0xBA	; 186
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	86 ec       	ldi	r24, 0xC6	; 198
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(F("command and value has to be separated by an equal sign"));
     5be:	63 e8       	ldi	r22, 0x83	; 131
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	86 ec       	ldi	r24, 0xC6	; 198
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(F("Example: text=example text"));
     5ca:	68 e6       	ldi	r22, 0x68	; 104
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	86 ec       	ldi	r24, 0xC6	; 198
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <_ZN5Print7printlnEPK19__FlashStringHelper>

000005d6 <_Z15uartInputHandlev>:
 *  \details        this function handles and validates the incoming data. After splitting the data into
 *                  command and value a specific action will be called.
 *                 
 *****************************************************************************************************************************************************/
void uartInputHandle()
{
     5d6:	0f 93       	push	r16
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	cd b7       	in	r28, 0x3d	; 61
     5e0:	de b7       	in	r29, 0x3e	; 62
     5e2:	e6 97       	sbiw	r28, 0x36	; 54
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	f8 94       	cli
     5e8:	de bf       	out	0x3e, r29	; 62
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	cd bf       	out	0x3d, r28	; 61
    char command[COMMAND_MAX_LENGTH] = "";
     5ee:	1f 8e       	std	Y+31, r1	; 0x1f
     5f0:	18 a2       	std	Y+32, r1	; 0x20
     5f2:	19 a2       	std	Y+33, r1	; 0x21
     5f4:	1a a2       	std	Y+34, r1	; 0x22
     5f6:	fe 01       	movw	r30, r28
     5f8:	b3 96       	adiw	r30, 0x23	; 35
     5fa:	86 e0       	ldi	r24, 0x06	; 6
     5fc:	df 01       	movw	r26, r30
     5fe:	1d 92       	st	X+, r1
     600:	8a 95       	dec	r24
     602:	e9 f7       	brne	.-6      	; 0x5fe <_Z15uartInputHandlev+0x28>
    char valueASCII[MAXMATRIX_MAX_TEXT_LENGTH] = "";
     604:	19 82       	std	Y+1, r1	; 0x01
     606:	1a 82       	std	Y+2, r1	; 0x02
     608:	1b 82       	std	Y+3, r1	; 0x03
     60a:	1c 82       	std	Y+4, r1	; 0x04
     60c:	7e 97       	sbiw	r30, 0x1e	; 30
     60e:	8a e1       	ldi	r24, 0x1A	; 26
     610:	df 01       	movw	r26, r30
     612:	1d 92       	st	X+, r1
     614:	8a 95       	dec	r24
     616:	e9 f7       	brne	.-6      	; 0x612 <_Z15uartInputHandlev+0x3c>
    int value = 0;
    const char delimiterCommand[] = "=";
     618:	8d e3       	ldi	r24, 0x3D	; 61
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	9d ab       	std	Y+53, r25	; 0x35
     61e:	8c ab       	std	Y+52, r24	; 0x34
    const char delimiterValue[] = ",";
     620:	8c e2       	ldi	r24, 0x2C	; 44
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	9b ab       	std	Y+51, r25	; 0x33
     626:	8a ab       	std	Y+50, r24	; 0x32
    char *token = NULL;

    if(strchr(UartInput, delimiterCommand[0]))
     628:	6d e3       	ldi	r22, 0x3D	; 61
     62a:	70 e0       	ldi	r23, 0x00	; 0
     62c:	82 e9       	ldi	r24, 0x92	; 146
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	0e 94 34 12 	call	0x2468	; 0x2468 <strchr>
     634:	89 2b       	or	r24, r25
     636:	09 f4       	brne	.+2      	; 0x63a <_Z15uartInputHandlev+0x64>
     638:	26 c1       	rjmp	.+588    	; 0x886 <_Z15uartInputHandlev+0x2b0>
    {
        token = strtok(UartInput, delimiterCommand);
     63a:	be 01       	movw	r22, r28
     63c:	6c 5c       	subi	r22, 0xCC	; 204
     63e:	7f 4f       	sbci	r23, 0xFF	; 255
     640:	82 e9       	ldi	r24, 0x92	; 146
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	0e 94 2f 12 	call	0x245e	; 0x245e <strtok>
        if(token != NULL) stringCopy(command, token, sizeof(command));
     648:	00 97       	sbiw	r24, 0x00	; 0
     64a:	41 f0       	breq	.+16     	; 0x65c <_Z15uartInputHandlev+0x86>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *****************************************************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     64c:	49 e0       	ldi	r20, 0x09	; 9
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	bc 01       	movw	r22, r24
     652:	ce 01       	movw	r24, r28
     654:	4f 96       	adiw	r24, 0x1f	; 31
     656:	0e 94 48 12 	call	0x2490	; 0x2490 <strncpy>
    Destination[Length-1] = '\0';
     65a:	18 a6       	std	Y+40, r1	; 0x28

    if(strchr(UartInput, delimiterCommand[0]))
    {
        token = strtok(UartInput, delimiterCommand);
        if(token != NULL) stringCopy(command, token, sizeof(command));
        token = strtok(NULL, delimiterCommand);
     65c:	be 01       	movw	r22, r28
     65e:	6c 5c       	subi	r22, 0xCC	; 204
     660:	7f 4f       	sbci	r23, 0xFF	; 255
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 2f 12 	call	0x245e	; 0x245e <strtok>
        if(token != NULL) stringCopy(valueASCII, token, sizeof(valueASCII));
     66a:	00 97       	sbiw	r24, 0x00	; 0
     66c:	41 f0       	breq	.+16     	; 0x67e <_Z15uartInputHandlev+0xa8>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *****************************************************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     66e:	4d e1       	ldi	r20, 0x1D	; 29
     670:	50 e0       	ldi	r21, 0x00	; 0
     672:	bc 01       	movw	r22, r24
     674:	ce 01       	movw	r24, r28
     676:	01 96       	adiw	r24, 0x01	; 1
     678:	0e 94 48 12 	call	0x2490	; 0x2490 <strncpy>
    Destination[Length-1] = '\0';
     67c:	1e 8e       	std	Y+30, r1	; 0x1e
        token = strtok(UartInput, delimiterCommand);
        if(token != NULL) stringCopy(command, token, sizeof(command));
        token = strtok(NULL, delimiterCommand);
        if(token != NULL) stringCopy(valueASCII, token, sizeof(valueASCII));

        if(strcmp(command, "textShift") == 0) {
     67e:	69 e1       	ldi	r22, 0x19	; 25
     680:	71 e0       	ldi	r23, 0x01	; 1
     682:	ce 01       	movw	r24, r28
     684:	4f 96       	adiw	r24, 0x1f	; 31
     686:	0e 94 3f 12 	call	0x247e	; 0x247e <strcmp>
     68a:	89 2b       	or	r24, r25
     68c:	e9 f4       	brne	.+58     	; 0x6c8 <_Z15uartInputHandlev+0xf2>
            if(LEDMATRIX_STATE_STRING_SHIFT != State) State = LEDMATRIX_STATE_STRING_SHIFT;
     68e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <State>
     692:	82 30       	cpi	r24, 0x02	; 2
     694:	19 f0       	breq	.+6      	; 0x69c <_Z15uartInputHandlev+0xc6>
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <State>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *****************************************************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     69c:	4d e1       	ldi	r20, 0x1D	; 29
     69e:	50 e0       	ldi	r21, 0x00	; 0
     6a0:	be 01       	movw	r22, r28
     6a2:	6f 5f       	subi	r22, 0xFF	; 255
     6a4:	7f 4f       	sbci	r23, 0xFF	; 255
     6a6:	83 e7       	ldi	r24, 0x73	; 115
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	0e 94 48 12 	call	0x2490	; 0x2490 <strncpy>
    Destination[Length-1] = '\0';
     6ae:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <MaxMatrixText+0x1d>
        if(token != NULL) stringCopy(valueASCII, token, sizeof(valueASCII));

        if(strcmp(command, "textShift") == 0) {
            if(LEDMATRIX_STATE_STRING_SHIFT != State) State = LEDMATRIX_STATE_STRING_SHIFT;
            stringCopy(MaxMatrixText, valueASCII, sizeof(MaxMatrixText));
            Matrix.clear();
     6b2:	83 e5       	ldi	r24, 0x53	; 83
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_ZN9MaxMatrix5clearEv>
            Matrix.setTextWithShift(MaxMatrixText);
     6ba:	63 e7       	ldi	r22, 0x73	; 115
     6bc:	71 e0       	ldi	r23, 0x01	; 1
     6be:	83 e5       	ldi	r24, 0x53	; 83
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	0e 94 06 05 	call	0xa0c	; 0xa0c <_ZN9MaxMatrix16setTextWithShiftEPc>
     6c6:	e8 c0       	rjmp	.+464    	; 0x898 <_Z15uartInputHandlev+0x2c2>
        }
        else if(strcmp(command, "text") == 0) {
     6c8:	63 e2       	ldi	r22, 0x23	; 35
     6ca:	71 e0       	ldi	r23, 0x01	; 1
     6cc:	ce 01       	movw	r24, r28
     6ce:	4f 96       	adiw	r24, 0x1f	; 31
     6d0:	0e 94 3f 12 	call	0x247e	; 0x247e <strcmp>
     6d4:	89 2b       	or	r24, r25
     6d6:	e9 f4       	brne	.+58     	; 0x712 <_Z15uartInputHandlev+0x13c>
            if(LEDMATRIX_STATE_READY != State) State = LEDMATRIX_STATE_READY;
     6d8:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <State>
     6dc:	81 30       	cpi	r24, 0x01	; 1
     6de:	19 f0       	breq	.+6      	; 0x6e6 <_Z15uartInputHandlev+0x110>
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <State>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *****************************************************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     6e6:	4d e1       	ldi	r20, 0x1D	; 29
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	be 01       	movw	r22, r28
     6ec:	6f 5f       	subi	r22, 0xFF	; 255
     6ee:	7f 4f       	sbci	r23, 0xFF	; 255
     6f0:	83 e7       	ldi	r24, 0x73	; 115
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	0e 94 48 12 	call	0x2490	; 0x2490 <strncpy>
    Destination[Length-1] = '\0';
     6f8:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <MaxMatrixText+0x1d>
            Matrix.setTextWithShift(MaxMatrixText);
        }
        else if(strcmp(command, "text") == 0) {
            if(LEDMATRIX_STATE_READY != State) State = LEDMATRIX_STATE_READY;
            stringCopy(MaxMatrixText, valueASCII, sizeof(MaxMatrixText));
            Matrix.clear();
     6fc:	83 e5       	ldi	r24, 0x53	; 83
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_ZN9MaxMatrix5clearEv>
            Matrix.setText(MaxMatrixText);
     704:	63 e7       	ldi	r22, 0x73	; 115
     706:	71 e0       	ldi	r23, 0x01	; 1
     708:	83 e5       	ldi	r24, 0x53	; 83
     70a:	91 e0       	ldi	r25, 0x01	; 1
     70c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <_ZN9MaxMatrix7setTextEPKc>
     710:	c3 c0       	rjmp	.+390    	; 0x898 <_Z15uartInputHandlev+0x2c2>
        }
        else if(strcmp(command, "intensity") == 0) {
     712:	68 e2       	ldi	r22, 0x28	; 40
     714:	71 e0       	ldi	r23, 0x01	; 1
     716:	ce 01       	movw	r24, r28
     718:	4f 96       	adiw	r24, 0x1f	; 31
     71a:	0e 94 3f 12 	call	0x247e	; 0x247e <strcmp>
     71e:	89 2b       	or	r24, r25
     720:	d1 f4       	brne	.+52     	; 0x756 <_Z15uartInputHandlev+0x180>
            value = atoi(valueASCII);
     722:	ce 01       	movw	r24, r28
     724:	01 96       	adiw	r24, 0x01	; 1
     726:	0e 94 08 12 	call	0x2410	; 0x2410 <atoi>
            if(value >= MAXMATRIX_INTENSITY_MIN_VALUE && value <= MAXMATRIX_INTENSITY_MAX_VALUE) {
     72a:	9c 01       	movw	r18, r24
     72c:	21 50       	subi	r18, 0x01	; 1
     72e:	31 09       	sbc	r19, r1
     730:	20 31       	cpi	r18, 0x10	; 16
     732:	31 05       	cpc	r19, r1
     734:	38 f4       	brcc	.+14     	; 0x744 <_Z15uartInputHandlev+0x16e>
                Matrix.setIntensity(value-1);
     736:	6f ef       	ldi	r22, 0xFF	; 255
     738:	68 0f       	add	r22, r24
     73a:	83 e5       	ldi	r24, 0x53	; 83
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <_ZN9MaxMatrix12setIntensityEh>
     742:	aa c0       	rjmp	.+340    	; 0x898 <_Z15uartInputHandlev+0x2c2>
            } else {
                Serial.println(F("value out of range"));
     744:	66 ea       	ldi	r22, 0xA6	; 166
     746:	71 e0       	ldi	r23, 0x01	; 1
     748:	86 ec       	ldi	r24, 0xC6	; 198
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN5Print7printlnEPK19__FlashStringHelper>
                Serial.println(F("intensity range "TOSTRING(MAXMATRIX_INTENSITY_MIN_VALUE)" ... "TOSTRING(MAXMATRIX_INTENSITY_MAX_VALUE)));
     750:	66 e5       	ldi	r22, 0x56	; 86
     752:	71 e0       	ldi	r23, 0x01	; 1
     754:	29 c0       	rjmp	.+82     	; 0x7a8 <_Z15uartInputHandlev+0x1d2>
            }
        }
        else if(strcmp(command, "speed") == 0) {
     756:	62 e3       	ldi	r22, 0x32	; 50
     758:	71 e0       	ldi	r23, 0x01	; 1
     75a:	ce 01       	movw	r24, r28
     75c:	4f 96       	adiw	r24, 0x1f	; 31
     75e:	0e 94 3f 12 	call	0x247e	; 0x247e <strcmp>
     762:	89 2b       	or	r24, r25
     764:	31 f5       	brne	.+76     	; 0x7b2 <_Z15uartInputHandlev+0x1dc>
            value = atoi(valueASCII);
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	0e 94 08 12 	call	0x2410	; 0x2410 <atoi>
            if(value >= MAXMATRIX_SPEED_MIN_VALUE && value <= MAXMATRIX_SPEED_MAX_VALUE) {
     76e:	9c 01       	movw	r18, r24
     770:	21 50       	subi	r18, 0x01	; 1
     772:	31 09       	sbc	r19, r1
     774:	24 31       	cpi	r18, 0x14	; 20
     776:	31 05       	cpc	r19, r1
     778:	78 f4       	brcc	.+30     	; 0x798 <_Z15uartInputHandlev+0x1c2>
                Timer1.setPeriod(((long)(MAXMATRIX_SPEED_MAX_VALUE-value+1)*5) * 10000);
     77a:	a5 e1       	ldi	r26, 0x15	; 21
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	a8 1b       	sub	r26, r24
     780:	b9 0b       	sbc	r27, r25
     782:	20 e5       	ldi	r18, 0x50	; 80
     784:	33 ec       	ldi	r19, 0xC3	; 195
     786:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__usmulhisi3>
     78a:	ab 01       	movw	r20, r22
     78c:	bc 01       	movw	r22, r24
     78e:	8a eb       	ldi	r24, 0xBA	; 186
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <_ZN8TimerOne9setPeriodEl>
     796:	80 c0       	rjmp	.+256    	; 0x898 <_Z15uartInputHandlev+0x2c2>
            } else {
                Serial.println(F("value out of range"));
     798:	63 e4       	ldi	r22, 0x43	; 67
     79a:	71 e0       	ldi	r23, 0x01	; 1
     79c:	86 ec       	ldi	r24, 0xC6	; 198
     79e:	91 e0       	ldi	r25, 0x01	; 1
     7a0:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN5Print7printlnEPK19__FlashStringHelper>
                Serial.println(F("speed range "TOSTRING(MAXMATRIX_SPEED_MIN_VALUE)" ... "TOSTRING(MAXMATRIX_SPEED_MAX_VALUE)));
     7a4:	6f ef       	ldi	r22, 0xFF	; 255
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	86 ec       	ldi	r24, 0xC6	; 198
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     7b0:	73 c0       	rjmp	.+230    	; 0x898 <_Z15uartInputHandlev+0x2c2>
            }
        }
        else if(strcmp(command, "setDot") == 0) {
     7b2:	68 e3       	ldi	r22, 0x38	; 56
     7b4:	71 e0       	ldi	r23, 0x01	; 1
     7b6:	ce 01       	movw	r24, r28
     7b8:	4f 96       	adiw	r24, 0x1f	; 31
     7ba:	0e 94 3f 12 	call	0x247e	; 0x247e <strcmp>
     7be:	89 2b       	or	r24, r25
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <_Z15uartInputHandlev+0x1ee>
     7c2:	61 c0       	rjmp	.+194    	; 0x886 <_Z15uartInputHandlev+0x2b0>
            if(LEDMATRIX_STATE_READY != State) {
     7c4:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <State>
     7c8:	81 30       	cpi	r24, 0x01	; 1
     7ca:	39 f0       	breq	.+14     	; 0x7da <_Z15uartInputHandlev+0x204>
                State = LEDMATRIX_STATE_READY;
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <State>
                Matrix.clear();
     7d2:	83 e5       	ldi	r24, 0x53	; 83
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_ZN9MaxMatrix5clearEv>
            }
            char columnASCII[3] = "", rowASCII[3] = "", valueDotASCII[3] = "";
     7da:	1f a6       	std	Y+47, r1	; 0x2f
     7dc:	18 aa       	std	Y+48, r1	; 0x30
     7de:	19 aa       	std	Y+49, r1	; 0x31
     7e0:	1c a6       	std	Y+44, r1	; 0x2c
     7e2:	1d a6       	std	Y+45, r1	; 0x2d
     7e4:	1e a6       	std	Y+46, r1	; 0x2e
     7e6:	19 a6       	std	Y+41, r1	; 0x29
     7e8:	1a a6       	std	Y+42, r1	; 0x2a
     7ea:	1b a6       	std	Y+43, r1	; 0x2b
            token = strtok(valueASCII, delimiterValue);
     7ec:	be 01       	movw	r22, r28
     7ee:	6e 5c       	subi	r22, 0xCE	; 206
     7f0:	7f 4f       	sbci	r23, 0xFF	; 255
     7f2:	ce 01       	movw	r24, r28
     7f4:	01 96       	adiw	r24, 0x01	; 1
     7f6:	0e 94 2f 12 	call	0x245e	; 0x245e <strtok>
            if(token != NULL) stringCopy(columnASCII, token, sizeof(columnASCII));
     7fa:	00 97       	sbiw	r24, 0x00	; 0
     7fc:	41 f0       	breq	.+16     	; 0x80e <_Z15uartInputHandlev+0x238>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *****************************************************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     7fe:	42 e0       	ldi	r20, 0x02	; 2
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	bc 01       	movw	r22, r24
     804:	ce 01       	movw	r24, r28
     806:	8f 96       	adiw	r24, 0x2f	; 47
     808:	0e 94 48 12 	call	0x2490	; 0x2490 <strncpy>
    Destination[Length-1] = '\0';
     80c:	19 aa       	std	Y+49, r1	; 0x31
                Matrix.clear();
            }
            char columnASCII[3] = "", rowASCII[3] = "", valueDotASCII[3] = "";
            token = strtok(valueASCII, delimiterValue);
            if(token != NULL) stringCopy(columnASCII, token, sizeof(columnASCII));
            token = strtok(NULL, delimiterValue);
     80e:	be 01       	movw	r22, r28
     810:	6e 5c       	subi	r22, 0xCE	; 206
     812:	7f 4f       	sbci	r23, 0xFF	; 255
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 2f 12 	call	0x245e	; 0x245e <strtok>
            if(token != NULL) stringCopy(rowASCII, token, sizeof(rowASCII));
     81c:	00 97       	sbiw	r24, 0x00	; 0
     81e:	41 f0       	breq	.+16     	; 0x830 <_Z15uartInputHandlev+0x25a>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *****************************************************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     820:	42 e0       	ldi	r20, 0x02	; 2
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	bc 01       	movw	r22, r24
     826:	ce 01       	movw	r24, r28
     828:	8c 96       	adiw	r24, 0x2c	; 44
     82a:	0e 94 48 12 	call	0x2490	; 0x2490 <strncpy>
    Destination[Length-1] = '\0';
     82e:	1e a6       	std	Y+46, r1	; 0x2e
            char columnASCII[3] = "", rowASCII[3] = "", valueDotASCII[3] = "";
            token = strtok(valueASCII, delimiterValue);
            if(token != NULL) stringCopy(columnASCII, token, sizeof(columnASCII));
            token = strtok(NULL, delimiterValue);
            if(token != NULL) stringCopy(rowASCII, token, sizeof(rowASCII));
            token = strtok(NULL, delimiterValue);
     830:	be 01       	movw	r22, r28
     832:	6e 5c       	subi	r22, 0xCE	; 206
     834:	7f 4f       	sbci	r23, 0xFF	; 255
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	0e 94 2f 12 	call	0x245e	; 0x245e <strtok>
            if(token != NULL) stringCopy(valueDotASCII, token, sizeof(valueDotASCII));
     83e:	00 97       	sbiw	r24, 0x00	; 0
     840:	41 f0       	breq	.+16     	; 0x852 <_Z15uartInputHandlev+0x27c>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *****************************************************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     842:	42 e0       	ldi	r20, 0x02	; 2
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	bc 01       	movw	r22, r24
     848:	ce 01       	movw	r24, r28
     84a:	89 96       	adiw	r24, 0x29	; 41
     84c:	0e 94 48 12 	call	0x2490	; 0x2490 <strncpy>
    Destination[Length-1] = '\0';
     850:	1b a6       	std	Y+43, r1	; 0x2b
            if(token != NULL) stringCopy(columnASCII, token, sizeof(columnASCII));
            token = strtok(NULL, delimiterValue);
            if(token != NULL) stringCopy(rowASCII, token, sizeof(rowASCII));
            token = strtok(NULL, delimiterValue);
            if(token != NULL) stringCopy(valueDotASCII, token, sizeof(valueDotASCII));
            Matrix.setDot(atoi(columnASCII), atoi(rowASCII), atoi(valueDotASCII));
     852:	ce 01       	movw	r24, r28
     854:	89 96       	adiw	r24, 0x29	; 41
     856:	0e 94 08 12 	call	0x2410	; 0x2410 <atoi>
     85a:	8c 01       	movw	r16, r24
     85c:	ce 01       	movw	r24, r28
     85e:	8c 96       	adiw	r24, 0x2c	; 44
     860:	0e 94 08 12 	call	0x2410	; 0x2410 <atoi>
     864:	48 2f       	mov	r20, r24
     866:	ce 01       	movw	r24, r28
     868:	8f 96       	adiw	r24, 0x2f	; 47
     86a:	4e ab       	std	Y+54, r20	; 0x36
     86c:	0e 94 08 12 	call	0x2410	; 0x2410 <atoi>
     870:	68 2f       	mov	r22, r24
     872:	21 e0       	ldi	r18, 0x01	; 1
     874:	4e a9       	ldd	r20, Y+54	; 0x36
     876:	01 2b       	or	r16, r17
     878:	09 f4       	brne	.+2      	; 0x87c <_Z15uartInputHandlev+0x2a6>
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	83 e5       	ldi	r24, 0x53	; 83
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <_ZN9MaxMatrix6setDotEhhb>
     884:	09 c0       	rjmp	.+18     	; 0x898 <_Z15uartInputHandlev+0x2c2>
        }
        else {
            Serial.println(command);
     886:	be 01       	movw	r22, r28
     888:	61 5e       	subi	r22, 0xE1	; 225
     88a:	7f 4f       	sbci	r23, 0xFF	; 255
     88c:	86 ec       	ldi	r24, 0xC6	; 198
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	0e 94 63 10 	call	0x20c6	; 0x20c6 <_ZN5Print7printlnEPKc>
            printHelp(); 
     894:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_Z9printHelpv>
        }
    } else {
        Serial.println(command);
        printHelp(); 
    }
}
     898:	e6 96       	adiw	r28, 0x36	; 54
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	f8 94       	cli
     89e:	de bf       	out	0x3e, r29	; 62
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	cd bf       	out	0x3d, r28	; 61
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	08 95       	ret

000008ae <loop>:
/******************************************************************************************************************************************************
 *  ARDUINO loop
 *****************************************************************************************************************************************************/
void loop()
{ 
    if (UartInputComplete)
     8ae:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <UartInputComplete>
     8b2:	88 23       	and	r24, r24
     8b4:	31 f0       	breq	.+12     	; 0x8c2 <loop+0x14>
    {
        uartInputHandle();
     8b6:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <_Z15uartInputHandlev>
        // clear the string:
        UartInput[0] = '\0';
     8ba:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <UartInput>
        UartInputComplete = false;
     8be:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <UartInputComplete>
    }

    if(Timer1Overflow && State == LEDMATRIX_STATE_STRING_SHIFT)
     8c2:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <Timer1Overflow>
     8c6:	88 23       	and	r24, r24
     8c8:	c1 f0       	breq	.+48     	; 0x8fa <loop+0x4c>
     8ca:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <State>
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	a1 f4       	brne	.+40     	; 0x8fa <loop+0x4c>
    {
        if(Matrix.getState() == MAXMATRIX_STATE_STRING_SHIFT)
     8d2:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <Matrix+0x3>
     8d6:	83 30       	cpi	r24, 0x03	; 3
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <loop+0x34>
            Matrix.shiftTask();
     8da:	83 e5       	ldi	r24, 0x53	; 83
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <_ZN9MaxMatrix9shiftTaskEv>
        if(Matrix.getState() == MAXMATRIX_STATE_READY)
     8e2:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <Matrix+0x3>
     8e6:	82 30       	cpi	r24, 0x02	; 2
     8e8:	31 f4       	brne	.+12     	; 0x8f6 <loop+0x48>
        {
            Matrix.setTextWithShift(MaxMatrixText);
     8ea:	63 e7       	ldi	r22, 0x73	; 115
     8ec:	71 e0       	ldi	r23, 0x01	; 1
     8ee:	83 e5       	ldi	r24, 0x53	; 83
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	0e 94 06 05 	call	0xa0c	; 0xa0c <_ZN9MaxMatrix16setTextWithShiftEPc>
        }
        Timer1Overflow = false;
     8f6:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <Timer1Overflow>
     8fa:	08 95       	ret

000008fc <_GLOBAL__sub_I_UartInput>:
 *****************************************************************************************************************************************************/
char UartInput[UART_INPUT_LENGTH];                  // buffer for incoming UART data
boolean UartInputComplete;                          // flag UART string is complete
char MaxMatrixText[MAXMATRIX_MAX_TEXT_LENGTH];      // current Matrix Text
bool Timer1Overflow;                                // flag Timer1 overflow
MaxMatrix Matrix(MAXMATRIX_DATA_PIN, MAXMATRIX_CS_PIN, MAXMATRIX_CLOCK_PIN);
     8fc:	2b e0       	ldi	r18, 0x0B	; 11
     8fe:	4a e0       	ldi	r20, 0x0A	; 10
     900:	6c e0       	ldi	r22, 0x0C	; 12
     902:	83 e5       	ldi	r24, 0x53	; 83
     904:	91 e0       	ldi	r25, 0x01	; 1
     906:	0c 94 b1 04 	jmp	0x962	; 0x962 <_ZN9MaxMatrixC1Ehhh>

0000090a <_GLOBAL__sub_D_UartInput>:
     90a:	83 e5       	ldi	r24, 0x53	; 83
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	0c 94 cc 04 	jmp	0x998	; 0x998 <_ZN9MaxMatrixD1Ev>

00000912 <_Z11serialEventv>:
 *  \details        this function saves incoming UART signs into UART buffer.
 *                  After receiving new line, string is complete and flag will be set.
 *  \pre            will be called at the end of the main function             
 *****************************************************************************************************************************************************/
void serialEvent() 
{
     912:	1f 93       	push	r17
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
        // if the incoming character is a newline, set a flag
        if (inChar == '\n') {
            UartInputComplete = true;
        } else {
            // check for free space in buffer
            int UartInputLength = strlen(UartInput);
     918:	c2 e9       	ldi	r28, 0x92	; 146
     91a:	d1 e0       	ldi	r29, 0x01	; 1
    {
        // get the new byte from UART
        char inChar = (char) Serial.read();
        // if the incoming character is a newline, set a flag
        if (inChar == '\n') {
            UartInputComplete = true;
     91c:	11 e0       	ldi	r17, 0x01	; 1
 *                  After receiving new line, string is complete and flag will be set.
 *  \pre            will be called at the end of the main function             
 *****************************************************************************************************************************************************/
void serialEvent() 
{
    while (Serial.available()) 
     91e:	86 ec       	ldi	r24, 0xC6	; 198
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <_ZN14HardwareSerial9availableEv>
     926:	89 2b       	or	r24, r25
     928:	c1 f0       	breq	.+48     	; 0x95a <_Z11serialEventv+0x48>
    {
        // get the new byte from UART
        char inChar = (char) Serial.read();
     92a:	86 ec       	ldi	r24, 0xC6	; 198
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <_ZN14HardwareSerial4readEv>
        // if the incoming character is a newline, set a flag
        if (inChar == '\n') {
     932:	8a 30       	cpi	r24, 0x0A	; 10
     934:	19 f4       	brne	.+6      	; 0x93c <_Z11serialEventv+0x2a>
            UartInputComplete = true;
     936:	10 93 91 01 	sts	0x0191, r17	; 0x800191 <UartInputComplete>
     93a:	f1 cf       	rjmp	.-30     	; 0x91e <_Z11serialEventv+0xc>
        } else {
            // check for free space in buffer
            int UartInputLength = strlen(UartInput);
     93c:	fe 01       	movw	r30, r28
     93e:	01 90       	ld	r0, Z+
     940:	00 20       	and	r0, r0
     942:	e9 f7       	brne	.-6      	; 0x93e <_Z11serialEventv+0x2c>
     944:	31 97       	sbiw	r30, 0x01	; 1
     946:	e2 59       	subi	r30, 0x92	; 146
     948:	f1 40       	sbci	r31, 0x01	; 1
            if(UartInputLength < UART_INPUT_LENGTH-1)
     94a:	e7 32       	cpi	r30, 0x27	; 39
     94c:	f1 05       	cpc	r31, r1
     94e:	3c f7       	brge	.-50     	; 0x91e <_Z11serialEventv+0xc>
            {
                // save new char
                UartInput[UartInputLength] = inChar;
     950:	ee 56       	subi	r30, 0x6E	; 110
     952:	fe 4f       	sbci	r31, 0xFE	; 254
     954:	80 83       	st	Z, r24
                UartInput[UartInputLength+1] = '\0';
     956:	11 82       	std	Z+1, r1	; 0x01
     958:	e2 cf       	rjmp	.-60     	; 0x91e <_Z11serialEventv+0xc>
            }
        }
    }
} /* serialEvent */
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	1f 91       	pop	r17
     960:	08 95       	ret

00000962 <_ZN9MaxMatrixC1Ehhh>:
		}
		return E_OK;
	} else {
		return E_NOT_OK;
	}
} /* setRowOnAllModulesLL */
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	fc 01       	movw	r30, r24
     968:	60 83       	st	Z, r22
     96a:	41 83       	std	Z+1, r20	; 0x01
     96c:	22 83       	std	Z+2, r18	; 0x02
     96e:	16 8e       	std	Z+30, r1	; 0x1e
     970:	15 8e       	std	Z+29, r1	; 0x1d
     972:	14 8e       	std	Z+28, r1	; 0x1c
     974:	14 82       	std	Z+4, r1	; 0x04
     976:	13 82       	std	Z+3, r1	; 0x03
     978:	ec 01       	movw	r28, r24
     97a:	25 96       	adiw	r28, 0x05	; 5
     97c:	dc 01       	movw	r26, r24
     97e:	55 96       	adiw	r26, 0x15	; 21
     980:	19 92       	st	Y+, r1
     982:	ca 17       	cp	r28, r26
     984:	db 07       	cpc	r29, r27
     986:	e1 f7       	brne	.-8      	; 0x980 <_ZN9MaxMatrixC1Ehhh+0x1e>
     988:	7c 96       	adiw	r30, 0x1c	; 28
     98a:	1d 92       	st	X+, r1
     98c:	ae 17       	cp	r26, r30
     98e:	bf 07       	cpc	r27, r31
     990:	e1 f7       	brne	.-8      	; 0x98a <_ZN9MaxMatrixC1Ehhh+0x28>
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	08 95       	ret

00000998 <_ZN9MaxMatrixD1Ev>:
     998:	08 95       	ret

0000099a <_ZN9MaxMatrix13RegisterWriteEhh>:
     99a:	ef 92       	push	r14
     99c:	ff 92       	push	r15
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	ec 01       	movw	r28, r24
     9a8:	e6 2e       	mov	r14, r22
     9aa:	f4 2e       	mov	r15, r20
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	89 81       	ldd	r24, Y+1	; 0x01
     9b0:	0e 94 5f 11 	call	0x22be	; 0x22be <digitalWrite>
     9b4:	02 e0       	ldi	r16, 0x02	; 2
     9b6:	10 e0       	ldi	r17, 0x00	; 0
     9b8:	2e 2d       	mov	r18, r14
     9ba:	41 e0       	ldi	r20, 0x01	; 1
     9bc:	6a 81       	ldd	r22, Y+2	; 0x02
     9be:	88 81       	ld	r24, Y
     9c0:	0e 94 8f 11 	call	0x231e	; 0x231e <shiftOut>
     9c4:	2f 2d       	mov	r18, r15
     9c6:	41 e0       	ldi	r20, 0x01	; 1
     9c8:	6a 81       	ldd	r22, Y+2	; 0x02
     9ca:	88 81       	ld	r24, Y
     9cc:	0e 94 8f 11 	call	0x231e	; 0x231e <shiftOut>
     9d0:	01 30       	cpi	r16, 0x01	; 1
     9d2:	11 05       	cpc	r17, r1
     9d4:	19 f0       	breq	.+6      	; 0x9dc <_ZN9MaxMatrix13RegisterWriteEhh+0x42>
     9d6:	01 e0       	ldi	r16, 0x01	; 1
     9d8:	10 e0       	ldi	r17, 0x00	; 0
     9da:	ee cf       	rjmp	.-36     	; 0x9b8 <_ZN9MaxMatrix13RegisterWriteEhh+0x1e>
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	89 81       	ldd	r24, Y+1	; 0x01
     9e0:	0e 94 5f 11 	call	0x22be	; 0x22be <digitalWrite>
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	1f 91       	pop	r17
     9ee:	0f 91       	pop	r16
     9f0:	ff 90       	pop	r15
     9f2:	ef 90       	pop	r14
     9f4:	0c 94 5f 11 	jmp	0x22be	; 0x22be <digitalWrite>

000009f8 <_ZN9MaxMatrix12setIntensityEh>:
     9f8:	60 31       	cpi	r22, 0x10	; 16
     9fa:	30 f4       	brcc	.+12     	; 0xa08 <_ZN9MaxMatrix12setIntensityEh+0x10>
     9fc:	46 2f       	mov	r20, r22
     9fe:	6a e0       	ldi	r22, 0x0A	; 10
     a00:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN9MaxMatrix13RegisterWriteEhh>
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	08 95       	ret
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	08 95       	ret

00000a0c <_ZN9MaxMatrix16setTextWithShiftEPc>:
     a0c:	fc 01       	movw	r30, r24
     a0e:	61 15       	cp	r22, r1
     a10:	71 05       	cpc	r23, r1
     a12:	39 f0       	breq	.+14     	; 0xa22 <_ZN9MaxMatrix16setTextWithShiftEPc+0x16>
     a14:	14 8e       	std	Z+28, r1	; 0x1c
     a16:	76 8f       	std	Z+30, r23	; 0x1e
     a18:	65 8f       	std	Z+29, r22	; 0x1d
     a1a:	83 e0       	ldi	r24, 0x03	; 3
     a1c:	83 83       	std	Z+3, r24	; 0x03
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	08 95       	ret
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 95       	ret

00000a26 <_ZN9MaxMatrix9getSpriteEhPA7_h>:
     a26:	65 36       	cpi	r22, 0x65	; 101
     a28:	68 f4       	brcc	.+26     	; 0xa44 <_ZN9MaxMatrix9getSpriteEhPA7_h+0x1e>
     a2a:	ca 01       	movw	r24, r20
     a2c:	27 e0       	ldi	r18, 0x07	; 7
     a2e:	62 9f       	mul	r22, r18
     a30:	b0 01       	movw	r22, r0
     a32:	11 24       	eor	r1, r1
     a34:	67 54       	subi	r22, 0x47	; 71
     a36:	7e 4f       	sbci	r23, 0xFE	; 254
     a38:	47 e0       	ldi	r20, 0x07	; 7
     a3a:	50 e0       	ldi	r21, 0x00	; 0
     a3c:	0e 94 26 12 	call	0x244c	; 0x244c <memcpy_P>
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	08 95       	ret
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	08 95       	ret

00000a48 <_ZN9MaxMatrix11reverseByteEh>:
     a48:	62 95       	swap	r22
     a4a:	96 2f       	mov	r25, r22
     a4c:	93 73       	andi	r25, 0x33	; 51
     a4e:	84 e0       	ldi	r24, 0x04	; 4
     a50:	98 9f       	mul	r25, r24
     a52:	90 01       	movw	r18, r0
     a54:	11 24       	eor	r1, r1
     a56:	6c 7c       	andi	r22, 0xCC	; 204
     a58:	66 95       	lsr	r22
     a5a:	66 95       	lsr	r22
     a5c:	26 2b       	or	r18, r22
     a5e:	82 2f       	mov	r24, r18
     a60:	85 75       	andi	r24, 0x55	; 85
     a62:	88 0f       	add	r24, r24
     a64:	2a 7a       	andi	r18, 0xAA	; 170
     a66:	26 95       	lsr	r18
     a68:	82 2b       	or	r24, r18
     a6a:	08 95       	ret

00000a6c <_ZN9MaxMatrix6reloadEv>:
     a6c:	df 92       	push	r13
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	ec 01       	movw	r28, r24
     a7c:	00 e0       	ldi	r16, 0x00	; 0
     a7e:	10 e0       	ldi	r17, 0x00	; 0
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	89 81       	ldd	r24, Y+1	; 0x01
     a84:	0e 94 5f 11 	call	0x22be	; 0x22be <digitalWrite>
     a88:	e1 2c       	mov	r14, r1
     a8a:	f1 2c       	mov	r15, r1
     a8c:	dd 24       	eor	r13, r13
     a8e:	d3 94       	inc	r13
     a90:	d0 0e       	add	r13, r16
     a92:	2d 2d       	mov	r18, r13
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	6a 81       	ldd	r22, Y+2	; 0x02
     a98:	88 81       	ld	r24, Y
     a9a:	0e 94 8f 11 	call	0x231e	; 0x231e <shiftOut>
     a9e:	f7 01       	movw	r30, r14
     aa0:	e0 0f       	add	r30, r16
     aa2:	f1 1f       	adc	r31, r17
     aa4:	ec 0f       	add	r30, r28
     aa6:	fd 1f       	adc	r31, r29
     aa8:	25 81       	ldd	r18, Z+5	; 0x05
     aaa:	41 e0       	ldi	r20, 0x01	; 1
     aac:	6a 81       	ldd	r22, Y+2	; 0x02
     aae:	88 81       	ld	r24, Y
     ab0:	0e 94 8f 11 	call	0x231e	; 0x231e <shiftOut>
     ab4:	88 e0       	ldi	r24, 0x08	; 8
     ab6:	e8 0e       	add	r14, r24
     ab8:	f1 1c       	adc	r15, r1
     aba:	80 e1       	ldi	r24, 0x10	; 16
     abc:	e8 16       	cp	r14, r24
     abe:	f1 04       	cpc	r15, r1
     ac0:	41 f7       	brne	.-48     	; 0xa92 <_ZN9MaxMatrix6reloadEv+0x26>
     ac2:	60 e0       	ldi	r22, 0x00	; 0
     ac4:	89 81       	ldd	r24, Y+1	; 0x01
     ac6:	0e 94 5f 11 	call	0x22be	; 0x22be <digitalWrite>
     aca:	61 e0       	ldi	r22, 0x01	; 1
     acc:	89 81       	ldd	r24, Y+1	; 0x01
     ace:	0e 94 5f 11 	call	0x22be	; 0x22be <digitalWrite>
     ad2:	0f 5f       	subi	r16, 0xFF	; 255
     ad4:	1f 4f       	sbci	r17, 0xFF	; 255
     ad6:	08 30       	cpi	r16, 0x08	; 8
     ad8:	11 05       	cpc	r17, r1
     ada:	91 f6       	brne	.-92     	; 0xa80 <_ZN9MaxMatrix6reloadEv+0x14>
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType>:
     aec:	2f 92       	push	r2
     aee:	3f 92       	push	r3
     af0:	4f 92       	push	r4
     af2:	5f 92       	push	r5
     af4:	6f 92       	push	r6
     af6:	7f 92       	push	r7
     af8:	8f 92       	push	r8
     afa:	9f 92       	push	r9
     afc:	af 92       	push	r10
     afe:	bf 92       	push	r11
     b00:	cf 92       	push	r12
     b02:	df 92       	push	r13
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	68 97       	sbiw	r28, 0x18	; 24
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	de bf       	out	0x3e, r29	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	cd bf       	out	0x3d, r28	; 61
     b20:	fc 01       	movw	r30, r24
     b22:	84 81       	ldd	r24, Z+4	; 0x04
     b24:	68 17       	cp	r22, r24
     b26:	09 f4       	brne	.+2      	; 0xb2a <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x3e>
     b28:	07 c2       	rjmp	.+1038   	; 0xf38 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x44c>
     b2a:	81 11       	cpse	r24, r1
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x4a>
     b2e:	61 30       	cpi	r22, 0x01	; 1
     b30:	99 f0       	breq	.+38     	; 0xb58 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x6c>
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	aa c0       	rjmp	.+340    	; 0xc8a <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x19e>
     b36:	81 30       	cpi	r24, 0x01	; 1
     b38:	21 f4       	brne	.+8      	; 0xb42 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x56>
     b3a:	62 30       	cpi	r22, 0x02	; 2
     b3c:	69 f0       	breq	.+26     	; 0xb58 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x6c>
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	ab c0       	rjmp	.+342    	; 0xc98 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1ac>
     b42:	82 30       	cpi	r24, 0x02	; 2
     b44:	21 f4       	brne	.+8      	; 0xb4e <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x62>
     b46:	63 30       	cpi	r22, 0x03	; 3
     b48:	39 f0       	breq	.+14     	; 0xb58 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x6c>
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	ac c0       	rjmp	.+344    	; 0xca6 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1ba>
     b4e:	83 30       	cpi	r24, 0x03	; 3
     b50:	09 f0       	breq	.+2      	; 0xb54 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x68>
     b52:	9f c0       	rjmp	.+318    	; 0xc92 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1a6>
     b54:	61 11       	cpse	r22, r1
     b56:	04 c1       	rjmp	.+520    	; 0xd60 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x274>
     b58:	9e 01       	movw	r18, r28
     b5a:	2f 5f       	subi	r18, 0xFF	; 255
     b5c:	3f 4f       	sbci	r19, 0xFF	; 255
     b5e:	3a 8b       	std	Y+18, r19	; 0x12
     b60:	29 8b       	std	Y+17, r18	; 0x11
     b62:	07 e0       	ldi	r16, 0x07	; 7
     b64:	10 e0       	ldi	r17, 0x00	; 0
     b66:	79 01       	movw	r14, r18
     b68:	cc 24       	eor	r12, r12
     b6a:	c3 94       	inc	r12
     b6c:	d1 2c       	mov	r13, r1
     b6e:	41 2c       	mov	r4, r1
     b70:	51 2c       	mov	r5, r1
     b72:	32 01       	movw	r6, r4
     b74:	43 94       	inc	r4
     b76:	16 01       	movw	r2, r12
     b78:	00 2e       	mov	r0, r16
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x94>
     b7c:	22 0c       	add	r2, r2
     b7e:	33 1c       	adc	r3, r3
     b80:	0a 94       	dec	r0
     b82:	e2 f7       	brpl	.-8      	; 0xb7c <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x90>
     b84:	28 e0       	ldi	r18, 0x08	; 8
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	9f ef       	ldi	r25, 0xFF	; 255
     b8a:	92 0f       	add	r25, r18
     b8c:	21 15       	cp	r18, r1
     b8e:	31 05       	cpc	r19, r1
     b90:	61 f1       	breq	.+88     	; 0xbea <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0xfe>
     b92:	af 01       	movw	r20, r30
     b94:	42 0f       	add	r20, r18
     b96:	53 1f       	adc	r21, r19
     b98:	da 01       	movw	r26, r20
     b9a:	14 96       	adiw	r26, 0x04	; 4
     b9c:	4c 91       	ld	r20, X
     b9e:	50 e0       	ldi	r21, 0x00	; 0
     ba0:	42 21       	and	r20, r2
     ba2:	53 21       	and	r21, r3
     ba4:	45 2b       	or	r20, r21
     ba6:	81 f4       	brne	.+32     	; 0xbc8 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0xdc>
     ba8:	53 01       	movw	r10, r6
     baa:	42 01       	movw	r8, r4
     bac:	04 c0       	rjmp	.+8      	; 0xbb6 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0xca>
     bae:	88 0c       	add	r8, r8
     bb0:	99 1c       	adc	r9, r9
     bb2:	aa 1c       	adc	r10, r10
     bb4:	bb 1c       	adc	r11, r11
     bb6:	9a 95       	dec	r25
     bb8:	d2 f7       	brpl	.-12     	; 0xbae <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0xc2>
     bba:	98 2d       	mov	r25, r8
     bbc:	90 95       	com	r25
     bbe:	a9 89       	ldd	r26, Y+17	; 0x11
     bc0:	ba 89       	ldd	r27, Y+18	; 0x12
     bc2:	4c 91       	ld	r20, X
     bc4:	94 23       	and	r25, r20
     bc6:	0d c0       	rjmp	.+26     	; 0xbe2 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0xf6>
     bc8:	53 01       	movw	r10, r6
     bca:	42 01       	movw	r8, r4
     bcc:	04 c0       	rjmp	.+8      	; 0xbd6 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0xea>
     bce:	88 0c       	add	r8, r8
     bd0:	99 1c       	adc	r9, r9
     bd2:	aa 1c       	adc	r10, r10
     bd4:	bb 1c       	adc	r11, r11
     bd6:	9a 95       	dec	r25
     bd8:	d2 f7       	brpl	.-12     	; 0xbce <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0xe2>
     bda:	a9 89       	ldd	r26, Y+17	; 0x11
     bdc:	ba 89       	ldd	r27, Y+18	; 0x12
     bde:	9c 91       	ld	r25, X
     be0:	98 29       	or	r25, r8
     be2:	9c 93       	st	X, r25
     be4:	21 50       	subi	r18, 0x01	; 1
     be6:	31 09       	sbc	r19, r1
     be8:	cf cf       	rjmp	.-98     	; 0xb88 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x9c>
     bea:	01 50       	subi	r16, 0x01	; 1
     bec:	11 09       	sbc	r17, r1
     bee:	29 89       	ldd	r18, Y+17	; 0x11
     bf0:	3a 89       	ldd	r19, Y+18	; 0x12
     bf2:	2f 5f       	subi	r18, 0xFF	; 255
     bf4:	3f 4f       	sbci	r19, 0xFF	; 255
     bf6:	3a 8b       	std	Y+18, r19	; 0x12
     bf8:	29 8b       	std	Y+17, r18	; 0x11
     bfa:	0f 3f       	cpi	r16, 0xFF	; 255
     bfc:	3f ef       	ldi	r19, 0xFF	; 255
     bfe:	13 07       	cpc	r17, r19
     c00:	09 f0       	breq	.+2      	; 0xc04 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x118>
     c02:	b9 cf       	rjmp	.-142    	; 0xb76 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x8a>
     c04:	27 e0       	ldi	r18, 0x07	; 7
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	7f e0       	ldi	r23, 0x0F	; 15
     c0a:	cc 24       	eor	r12, r12
     c0c:	c3 94       	inc	r12
     c0e:	d1 2c       	mov	r13, r1
     c10:	41 2c       	mov	r4, r1
     c12:	51 2c       	mov	r5, r1
     c14:	32 01       	movw	r6, r4
     c16:	43 94       	inc	r4
     c18:	16 01       	movw	r2, r12
     c1a:	02 2e       	mov	r0, r18
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x136>
     c1e:	22 0c       	add	r2, r2
     c20:	33 1c       	adc	r3, r3
     c22:	0a 94       	dec	r0
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x132>
     c26:	40 e1       	ldi	r20, 0x10	; 16
     c28:	50 e0       	ldi	r21, 0x00	; 0
     c2a:	97 2f       	mov	r25, r23
     c2c:	92 1b       	sub	r25, r18
     c2e:	87 01       	movw	r16, r14
     c30:	09 0f       	add	r16, r25
     c32:	11 1d       	adc	r17, r1
     c34:	97 ef       	ldi	r25, 0xF7	; 247
     c36:	94 0f       	add	r25, r20
     c38:	48 30       	cpi	r20, 0x08	; 8
     c3a:	51 05       	cpc	r21, r1
     c3c:	01 f1       	breq	.+64     	; 0xc7e <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x192>
     c3e:	df 01       	movw	r26, r30
     c40:	a4 0f       	add	r26, r20
     c42:	b5 1f       	adc	r27, r21
     c44:	14 96       	adiw	r26, 0x04	; 4
     c46:	ac 91       	ld	r26, X
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	a2 21       	and	r26, r2
     c4c:	b3 21       	and	r27, r3
     c4e:	53 01       	movw	r10, r6
     c50:	42 01       	movw	r8, r4
     c52:	04 c0       	rjmp	.+8      	; 0xc5c <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x170>
     c54:	88 0c       	add	r8, r8
     c56:	99 1c       	adc	r9, r9
     c58:	aa 1c       	adc	r10, r10
     c5a:	bb 1c       	adc	r11, r11
     c5c:	9a 95       	dec	r25
     c5e:	d2 f7       	brpl	.-12     	; 0xc54 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x168>
     c60:	ab 2b       	or	r26, r27
     c62:	21 f0       	breq	.+8      	; 0xc6c <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x180>
     c64:	d8 01       	movw	r26, r16
     c66:	9c 91       	ld	r25, X
     c68:	98 29       	or	r25, r8
     c6a:	05 c0       	rjmp	.+10     	; 0xc76 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x18a>
     c6c:	98 2d       	mov	r25, r8
     c6e:	90 95       	com	r25
     c70:	d8 01       	movw	r26, r16
     c72:	bc 90       	ld	r11, X
     c74:	9b 21       	and	r25, r11
     c76:	9c 93       	st	X, r25
     c78:	41 50       	subi	r20, 0x01	; 1
     c7a:	51 09       	sbc	r21, r1
     c7c:	db cf       	rjmp	.-74     	; 0xc34 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x148>
     c7e:	21 50       	subi	r18, 0x01	; 1
     c80:	31 09       	sbc	r19, r1
     c82:	50 f6       	brcc	.-108    	; 0xc18 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x12c>
     c84:	90 e1       	ldi	r25, 0x10	; 16
     c86:	81 11       	cpse	r24, r1
     c88:	05 c0       	rjmp	.+10     	; 0xc94 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1a8>
     c8a:	62 30       	cpi	r22, 0x02	; 2
     c8c:	09 f0       	breq	.+2      	; 0xc90 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1a4>
     c8e:	b1 c0       	rjmp	.+354    	; 0xdf2 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x306>
     c90:	0c c0       	rjmp	.+24     	; 0xcaa <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1be>
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	81 30       	cpi	r24, 0x01	; 1
     c96:	21 f4       	brne	.+8      	; 0xca0 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1b4>
     c98:	63 30       	cpi	r22, 0x03	; 3
     c9a:	09 f0       	breq	.+2      	; 0xc9e <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1b2>
     c9c:	b0 c0       	rjmp	.+352    	; 0xdfe <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x312>
     c9e:	05 c0       	rjmp	.+10     	; 0xcaa <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1be>
     ca0:	82 30       	cpi	r24, 0x02	; 2
     ca2:	09 f0       	breq	.+2      	; 0xca6 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1ba>
     ca4:	5f c0       	rjmp	.+190    	; 0xd64 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x278>
     ca6:	61 11       	cpse	r22, r1
     ca8:	af c0       	rjmp	.+350    	; 0xe08 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x31c>
     caa:	48 e0       	ldi	r20, 0x08	; 8
     cac:	50 e0       	ldi	r21, 0x00	; 0
     cae:	78 e0       	ldi	r23, 0x08	; 8
     cb0:	79 0f       	add	r23, r25
     cb2:	27 e0       	ldi	r18, 0x07	; 7
     cb4:	72 2e       	mov	r7, r18
     cb6:	81 2c       	mov	r8, r1
     cb8:	91 2c       	mov	r9, r1
     cba:	54 01       	movw	r10, r8
     cbc:	83 94       	inc	r8
     cbe:	d7 2e       	mov	r13, r23
     cc0:	d4 1a       	sub	r13, r20
     cc2:	41 15       	cp	r20, r1
     cc4:	51 05       	cpc	r21, r1
     cc6:	09 f4       	brne	.+2      	; 0xcca <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1de>
     cc8:	41 c0       	rjmp	.+130    	; 0xd4c <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x260>
     cca:	9f 01       	movw	r18, r30
     ccc:	24 0f       	add	r18, r20
     cce:	35 1f       	adc	r19, r21
     cd0:	d9 01       	movw	r26, r18
     cd2:	14 96       	adiw	r26, 0x04	; 4
     cd4:	0c 91       	ld	r16, X
     cd6:	10 e0       	ldi	r17, 0x00	; 0
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	a1 e0       	ldi	r26, 0x01	; 1
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	ac 0f       	add	r26, r28
     ce2:	bd 1f       	adc	r27, r29
     ce4:	ad 0d       	add	r26, r13
     ce6:	b1 1d       	adc	r27, r1
     ce8:	d7 2c       	mov	r13, r7
     cea:	d2 1a       	sub	r13, r18
     cec:	78 01       	movw	r14, r16
     cee:	02 2e       	mov	r0, r18
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x20a>
     cf2:	f5 94       	asr	r15
     cf4:	e7 94       	ror	r14
     cf6:	0a 94       	dec	r0
     cf8:	e2 f7       	brpl	.-8      	; 0xcf2 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x206>
     cfa:	e0 fc       	sbrc	r14, 0
     cfc:	18 c0       	rjmp	.+48     	; 0xd2e <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x242>
     cfe:	14 01       	movw	r2, r8
     d00:	25 01       	movw	r4, r10
     d02:	04 c0       	rjmp	.+8      	; 0xd0c <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x220>
     d04:	22 0c       	add	r2, r2
     d06:	33 1c       	adc	r3, r3
     d08:	44 1c       	adc	r4, r4
     d0a:	55 1c       	adc	r5, r5
     d0c:	da 94       	dec	r13
     d0e:	d2 f7       	brpl	.-12     	; 0xd04 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x218>
     d10:	72 01       	movw	r14, r4
     d12:	61 01       	movw	r12, r2
     d14:	c0 94       	com	r12
     d16:	ec 90       	ld	r14, X
     d18:	fc 2c       	mov	r15, r12
     d1a:	fe 20       	and	r15, r14
     d1c:	fc 92       	st	X, r15
     d1e:	2f 5f       	subi	r18, 0xFF	; 255
     d20:	3f 4f       	sbci	r19, 0xFF	; 255
     d22:	28 30       	cpi	r18, 0x08	; 8
     d24:	31 05       	cpc	r19, r1
     d26:	01 f7       	brne	.-64     	; 0xce8 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1fc>
     d28:	41 50       	subi	r20, 0x01	; 1
     d2a:	51 09       	sbc	r21, r1
     d2c:	c8 cf       	rjmp	.-112    	; 0xcbe <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1d2>
     d2e:	14 01       	movw	r2, r8
     d30:	25 01       	movw	r4, r10
     d32:	04 c0       	rjmp	.+8      	; 0xd3c <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x250>
     d34:	22 0c       	add	r2, r2
     d36:	33 1c       	adc	r3, r3
     d38:	44 1c       	adc	r4, r4
     d3a:	55 1c       	adc	r5, r5
     d3c:	da 94       	dec	r13
     d3e:	d2 f7       	brpl	.-12     	; 0xd34 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x248>
     d40:	72 01       	movw	r14, r4
     d42:	61 01       	movw	r12, r2
     d44:	6c 90       	ld	r6, X
     d46:	c6 28       	or	r12, r6
     d48:	cc 92       	st	X, r12
     d4a:	e9 cf       	rjmp	.-46     	; 0xd1e <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x232>
     d4c:	40 e1       	ldi	r20, 0x10	; 16
     d4e:	50 e0       	ldi	r21, 0x00	; 0
     d50:	70 5f       	subi	r23, 0xF0	; 240
     d52:	17 e0       	ldi	r17, 0x07	; 7
     d54:	71 2e       	mov	r7, r17
     d56:	81 2c       	mov	r8, r1
     d58:	91 2c       	mov	r9, r1
     d5a:	54 01       	movw	r10, r8
     d5c:	83 94       	inc	r8
     d5e:	29 c0       	rjmp	.+82     	; 0xdb2 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x2c6>
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	03 c0       	rjmp	.+6      	; 0xd6a <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x27e>
     d64:	83 30       	cpi	r24, 0x03	; 3
     d66:	09 f0       	breq	.+2      	; 0xd6a <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x27e>
     d68:	42 c0       	rjmp	.+132    	; 0xdee <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x302>
     d6a:	61 30       	cpi	r22, 0x01	; 1
     d6c:	09 f0       	breq	.+2      	; 0xd70 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x284>
     d6e:	59 c0       	rjmp	.+178    	; 0xe22 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x336>
     d70:	9c cf       	rjmp	.-200    	; 0xcaa <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1be>
     d72:	d7 2c       	mov	r13, r7
     d74:	d2 1a       	sub	r13, r18
     d76:	78 01       	movw	r14, r16
     d78:	02 2e       	mov	r0, r18
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x294>
     d7c:	f5 94       	asr	r15
     d7e:	e7 94       	ror	r14
     d80:	0a 94       	dec	r0
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x290>
     d84:	14 01       	movw	r2, r8
     d86:	25 01       	movw	r4, r10
     d88:	04 c0       	rjmp	.+8      	; 0xd92 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x2a6>
     d8a:	22 0c       	add	r2, r2
     d8c:	33 1c       	adc	r3, r3
     d8e:	44 1c       	adc	r4, r4
     d90:	55 1c       	adc	r5, r5
     d92:	da 94       	dec	r13
     d94:	d2 f7       	brpl	.-12     	; 0xd8a <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x29e>
     d96:	e0 fe       	sbrs	r14, 0
     d98:	21 c0       	rjmp	.+66     	; 0xddc <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x2f0>
     d9a:	72 01       	movw	r14, r4
     d9c:	61 01       	movw	r12, r2
     d9e:	6c 90       	ld	r6, X
     da0:	c6 28       	or	r12, r6
     da2:	cc 92       	st	X, r12
     da4:	2f 5f       	subi	r18, 0xFF	; 255
     da6:	3f 4f       	sbci	r19, 0xFF	; 255
     da8:	28 30       	cpi	r18, 0x08	; 8
     daa:	31 05       	cpc	r19, r1
     dac:	11 f7       	brne	.-60     	; 0xd72 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x286>
     dae:	41 50       	subi	r20, 0x01	; 1
     db0:	51 09       	sbc	r21, r1
     db2:	d7 2e       	mov	r13, r23
     db4:	d4 1a       	sub	r13, r20
     db6:	48 30       	cpi	r20, 0x08	; 8
     db8:	51 05       	cpc	r21, r1
     dba:	c1 f0       	breq	.+48     	; 0xdec <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x300>
     dbc:	9f 01       	movw	r18, r30
     dbe:	24 0f       	add	r18, r20
     dc0:	35 1f       	adc	r19, r21
     dc2:	d9 01       	movw	r26, r18
     dc4:	14 96       	adiw	r26, 0x04	; 4
     dc6:	0c 91       	ld	r16, X
     dc8:	10 e0       	ldi	r17, 0x00	; 0
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	a1 e0       	ldi	r26, 0x01	; 1
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	ac 0f       	add	r26, r28
     dd4:	bd 1f       	adc	r27, r29
     dd6:	ad 0d       	add	r26, r13
     dd8:	b1 1d       	adc	r27, r1
     dda:	cb cf       	rjmp	.-106    	; 0xd72 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x286>
     ddc:	72 01       	movw	r14, r4
     dde:	61 01       	movw	r12, r2
     de0:	c0 94       	com	r12
     de2:	ec 90       	ld	r14, X
     de4:	fc 2c       	mov	r15, r12
     de6:	fe 20       	and	r15, r14
     de8:	fc 92       	st	X, r15
     dea:	dc cf       	rjmp	.-72     	; 0xda4 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x2b8>
     dec:	90 5f       	subi	r25, 0xF0	; 240
     dee:	81 11       	cpse	r24, r1
     df0:	04 c0       	rjmp	.+8      	; 0xdfa <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x30e>
     df2:	63 30       	cpi	r22, 0x03	; 3
     df4:	09 f0       	breq	.+2      	; 0xdf8 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x30c>
     df6:	73 c0       	rjmp	.+230    	; 0xede <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x3f2>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x322>
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	19 f4       	brne	.+6      	; 0xe04 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x318>
     dfe:	66 23       	and	r22, r22
     e00:	31 f0       	breq	.+12     	; 0xe0e <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x322>
     e02:	6d c0       	rjmp	.+218    	; 0xede <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x3f2>
     e04:	82 30       	cpi	r24, 0x02	; 2
     e06:	51 f4       	brne	.+20     	; 0xe1c <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x330>
     e08:	61 30       	cpi	r22, 0x01	; 1
     e0a:	09 f0       	breq	.+2      	; 0xe0e <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x322>
     e0c:	68 c0       	rjmp	.+208    	; 0xede <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x3f2>
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	41 2c       	mov	r4, r1
     e14:	51 2c       	mov	r5, r1
     e16:	32 01       	movw	r6, r4
     e18:	43 94       	inc	r4
     e1a:	2e c0       	rjmp	.+92     	; 0xe78 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x38c>
     e1c:	83 30       	cpi	r24, 0x03	; 3
     e1e:	09 f0       	breq	.+2      	; 0xe22 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x336>
     e20:	5e c0       	rjmp	.+188    	; 0xede <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x3f2>
     e22:	62 30       	cpi	r22, 0x02	; 2
     e24:	09 f0       	breq	.+2      	; 0xe28 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x33c>
     e26:	5b c0       	rjmp	.+182    	; 0xede <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x3f2>
     e28:	f2 cf       	rjmp	.-28     	; 0xe0e <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x322>
     e2a:	aa 24       	eor	r10, r10
     e2c:	a3 94       	inc	r10
     e2e:	b1 2c       	mov	r11, r1
     e30:	0f 88       	ldd	r0, Y+23	; 0x17
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x34c>
     e34:	aa 0c       	add	r10, r10
     e36:	bb 1c       	adc	r11, r11
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x348>
     e3c:	be 8a       	std	Y+22, r11	; 0x16
     e3e:	ad 8a       	std	Y+21, r10	; 0x15
     e40:	49 2d       	mov	r20, r9
     e42:	58 2d       	mov	r21, r8
     e44:	8f 89       	ldd	r24, Y+23	; 0x17
     e46:	87 0f       	add	r24, r23
     e48:	ee 24       	eor	r14, r14
     e4a:	e3 94       	inc	r14
     e4c:	f1 2c       	mov	r15, r1
     e4e:	ec 0e       	add	r14, r28
     e50:	fd 1e       	adc	r15, r29
     e52:	e8 0e       	add	r14, r24
     e54:	f1 1c       	adc	r15, r1
     e56:	83 2d       	mov	r24, r3
     e58:	84 1b       	sub	r24, r20
     e5a:	42 17       	cp	r20, r18
     e5c:	53 07       	cpc	r21, r19
     e5e:	c1 f4       	brne	.+48     	; 0xe90 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x3a4>
     e60:	4f 89       	ldd	r20, Y+23	; 0x17
     e62:	58 8d       	ldd	r21, Y+24	; 0x18
     e64:	4f 5f       	subi	r20, 0xFF	; 255
     e66:	5f 4f       	sbci	r21, 0xFF	; 255
     e68:	58 8f       	std	Y+24, r21	; 0x18
     e6a:	4f 8b       	std	Y+23, r20	; 0x17
     e6c:	48 30       	cpi	r20, 0x08	; 8
     e6e:	51 05       	cpc	r21, r1
     e70:	e1 f6       	brne	.-72     	; 0xe2a <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x33e>
     e72:	20 31       	cpi	r18, 0x10	; 16
     e74:	31 05       	cpc	r19, r1
     e76:	99 f1       	breq	.+102    	; 0xede <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x3f2>
     e78:	79 2f       	mov	r23, r25
     e7a:	72 0f       	add	r23, r18
     e7c:	92 2e       	mov	r9, r18
     e7e:	83 2e       	mov	r8, r19
     e80:	18 8e       	std	Y+24, r1	; 0x18
     e82:	1f 8a       	std	Y+23, r1	; 0x17
     e84:	47 e0       	ldi	r20, 0x07	; 7
     e86:	34 2e       	mov	r3, r20
     e88:	32 0e       	add	r3, r18
     e8a:	28 5f       	subi	r18, 0xF8	; 248
     e8c:	3f 4f       	sbci	r19, 0xFF	; 255
     e8e:	cd cf       	rjmp	.-102    	; 0xe2a <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x33e>
     e90:	8f 01       	movw	r16, r30
     e92:	04 0f       	add	r16, r20
     e94:	15 1f       	adc	r17, r21
     e96:	d8 01       	movw	r26, r16
     e98:	15 96       	adiw	r26, 0x05	; 5
     e9a:	0c 91       	ld	r16, X
     e9c:	10 e0       	ldi	r17, 0x00	; 0
     e9e:	ad 88       	ldd	r10, Y+21	; 0x15
     ea0:	be 88       	ldd	r11, Y+22	; 0x16
     ea2:	0a 21       	and	r16, r10
     ea4:	1b 21       	and	r17, r11
     ea6:	63 01       	movw	r12, r6
     ea8:	52 01       	movw	r10, r4
     eaa:	04 c0       	rjmp	.+8      	; 0xeb4 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x3c8>
     eac:	aa 0c       	add	r10, r10
     eae:	bb 1c       	adc	r11, r11
     eb0:	cc 1c       	adc	r12, r12
     eb2:	dd 1c       	adc	r13, r13
     eb4:	8a 95       	dec	r24
     eb6:	d2 f7       	brpl	.-12     	; 0xeac <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x3c0>
     eb8:	a9 8a       	std	Y+17, r10	; 0x11
     eba:	ba 8a       	std	Y+18, r11	; 0x12
     ebc:	cb 8a       	std	Y+19, r12	; 0x13
     ebe:	dc 8a       	std	Y+20, r13	; 0x14
     ec0:	01 2b       	or	r16, r17
     ec2:	21 f0       	breq	.+8      	; 0xecc <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x3e0>
     ec4:	d7 01       	movw	r26, r14
     ec6:	8c 91       	ld	r24, X
     ec8:	8a 29       	or	r24, r10
     eca:	05 c0       	rjmp	.+10     	; 0xed6 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x3ea>
     ecc:	1a 2d       	mov	r17, r10
     ece:	10 95       	com	r17
     ed0:	d7 01       	movw	r26, r14
     ed2:	8c 91       	ld	r24, X
     ed4:	81 23       	and	r24, r17
     ed6:	8c 93       	st	X, r24
     ed8:	4f 5f       	subi	r20, 0xFF	; 255
     eda:	5f 4f       	sbci	r21, 0xFF	; 255
     edc:	bc cf       	rjmp	.-136    	; 0xe56 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x36a>
     ede:	64 83       	std	Z+4, r22	; 0x04
     ee0:	be 01       	movw	r22, r28
     ee2:	6f 5f       	subi	r22, 0xFF	; 255
     ee4:	7f 4f       	sbci	r23, 0xFF	; 255
     ee6:	cf 01       	movw	r24, r30
     ee8:	05 96       	adiw	r24, 0x05	; 5
     eea:	9e 01       	movw	r18, r28
     eec:	2f 5e       	subi	r18, 0xEF	; 239
     eee:	3f 4f       	sbci	r19, 0xFF	; 255
     ef0:	db 01       	movw	r26, r22
     ef2:	4d 91       	ld	r20, X+
     ef4:	bd 01       	movw	r22, r26
     ef6:	dc 01       	movw	r26, r24
     ef8:	4d 93       	st	X+, r20
     efa:	cd 01       	movw	r24, r26
     efc:	62 17       	cp	r22, r18
     efe:	73 07       	cpc	r23, r19
     f00:	b9 f7       	brne	.-18     	; 0xef0 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x404>
     f02:	cf 01       	movw	r24, r30
     f04:	68 96       	adiw	r28, 0x18	; 24
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	cd bf       	out	0x3d, r28	; 61
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	1f 91       	pop	r17
     f16:	0f 91       	pop	r16
     f18:	ff 90       	pop	r15
     f1a:	ef 90       	pop	r14
     f1c:	df 90       	pop	r13
     f1e:	cf 90       	pop	r12
     f20:	bf 90       	pop	r11
     f22:	af 90       	pop	r10
     f24:	9f 90       	pop	r9
     f26:	8f 90       	pop	r8
     f28:	7f 90       	pop	r7
     f2a:	6f 90       	pop	r6
     f2c:	5f 90       	pop	r5
     f2e:	4f 90       	pop	r4
     f30:	3f 90       	pop	r3
     f32:	2f 90       	pop	r2
     f34:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <_ZN9MaxMatrix6reloadEv>
     f38:	68 96       	adiw	r28, 0x18	; 24
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	1f 91       	pop	r17
     f4a:	0f 91       	pop	r16
     f4c:	ff 90       	pop	r15
     f4e:	ef 90       	pop	r14
     f50:	df 90       	pop	r13
     f52:	cf 90       	pop	r12
     f54:	bf 90       	pop	r11
     f56:	af 90       	pop	r10
     f58:	9f 90       	pop	r9
     f5a:	8f 90       	pop	r8
     f5c:	7f 90       	pop	r7
     f5e:	6f 90       	pop	r6
     f60:	5f 90       	pop	r5
     f62:	4f 90       	pop	r4
     f64:	3f 90       	pop	r3
     f66:	2f 90       	pop	r2
     f68:	08 95       	ret

00000f6a <_ZN9MaxMatrix19convertCharToSpriteEcPh>:
     f6a:	fa 01       	movw	r30, r20
     f6c:	64 3c       	cpi	r22, 0xC4	; 196
     f6e:	11 f4       	brne	.+4      	; 0xf74 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0xa>
     f70:	8f e5       	ldi	r24, 0x5F	; 95
     f72:	13 c0       	rjmp	.+38     	; 0xf9a <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     f74:	66 3d       	cpi	r22, 0xD6	; 214
     f76:	11 f4       	brne	.+4      	; 0xf7c <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x12>
     f78:	80 e6       	ldi	r24, 0x60	; 96
     f7a:	0f c0       	rjmp	.+30     	; 0xf9a <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     f7c:	6c 3d       	cpi	r22, 0xDC	; 220
     f7e:	11 f4       	brne	.+4      	; 0xf84 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x1a>
     f80:	81 e6       	ldi	r24, 0x61	; 97
     f82:	0b c0       	rjmp	.+22     	; 0xf9a <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     f84:	64 3e       	cpi	r22, 0xE4	; 228
     f86:	11 f4       	brne	.+4      	; 0xf8c <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x22>
     f88:	82 e6       	ldi	r24, 0x62	; 98
     f8a:	07 c0       	rjmp	.+14     	; 0xf9a <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     f8c:	66 3f       	cpi	r22, 0xF6	; 246
     f8e:	11 f4       	brne	.+4      	; 0xf94 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x2a>
     f90:	83 e6       	ldi	r24, 0x63	; 99
     f92:	03 c0       	rjmp	.+6      	; 0xf9a <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     f94:	6c 3f       	cpi	r22, 0xFC	; 252
     f96:	19 f4       	brne	.+6      	; 0xf9e <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x34>
     f98:	84 e6       	ldi	r24, 0x64	; 100
     f9a:	80 83       	st	Z, r24
     f9c:	04 c0       	rjmp	.+8      	; 0xfa6 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x3c>
     f9e:	60 52       	subi	r22, 0x20	; 32
     fa0:	6f 35       	cpi	r22, 0x5F	; 95
     fa2:	18 f4       	brcc	.+6      	; 0xfaa <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x40>
     fa4:	60 83       	st	Z, r22
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	08 95       	ret
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	08 95       	ret

00000fae <_ZN9MaxMatrix8getRowLLEhhPh>:
     fae:	bf 92       	push	r11
     fb0:	cf 92       	push	r12
     fb2:	df 92       	push	r13
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	e9 01       	movw	r28, r18
     fc2:	62 30       	cpi	r22, 0x02	; 2
     fc4:	d8 f5       	brcc	.+118    	; 0x103c <_ZN9MaxMatrix8getRowLLEhhPh+0x8e>
     fc6:	48 30       	cpi	r20, 0x08	; 8
     fc8:	c8 f5       	brcc	.+114    	; 0x103c <_ZN9MaxMatrix8getRowLLEhhPh+0x8e>
     fca:	a1 e0       	ldi	r26, 0x01	; 1
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <_ZN9MaxMatrix8getRowLLEhhPh+0x26>
     fd0:	aa 0f       	add	r26, r26
     fd2:	bb 1f       	adc	r27, r27
     fd4:	4a 95       	dec	r20
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <_ZN9MaxMatrix8getRowLLEhhPh+0x22>
     fd8:	28 e0       	ldi	r18, 0x08	; 8
     fda:	62 9f       	mul	r22, r18
     fdc:	80 0d       	add	r24, r0
     fde:	91 1d       	adc	r25, r1
     fe0:	11 24       	eor	r1, r1
     fe2:	fc 01       	movw	r30, r24
     fe4:	35 96       	adiw	r30, 0x05	; 5
     fe6:	87 e0       	ldi	r24, 0x07	; 7
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	01 e0       	ldi	r16, 0x01	; 1
     fec:	10 e0       	ldi	r17, 0x00	; 0
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	61 91       	ld	r22, Z+
     ff4:	70 e0       	ldi	r23, 0x00	; 0
     ff6:	6a 23       	and	r22, r26
     ff8:	7b 23       	and	r23, r27
     ffa:	b8 80       	ld	r11, Y
     ffc:	67 2b       	or	r22, r23
     ffe:	69 f0       	breq	.+26     	; 0x101a <_ZN9MaxMatrix8getRowLLEhhPh+0x6c>
    1000:	68 01       	movw	r12, r16
    1002:	79 01       	movw	r14, r18
    1004:	08 2e       	mov	r0, r24
    1006:	04 c0       	rjmp	.+8      	; 0x1010 <_ZN9MaxMatrix8getRowLLEhhPh+0x62>
    1008:	cc 0c       	add	r12, r12
    100a:	dd 1c       	adc	r13, r13
    100c:	ee 1c       	adc	r14, r14
    100e:	ff 1c       	adc	r15, r15
    1010:	0a 94       	dec	r0
    1012:	d2 f7       	brpl	.-12     	; 0x1008 <_ZN9MaxMatrix8getRowLLEhhPh+0x5a>
    1014:	cb 28       	or	r12, r11
    1016:	c8 82       	st	Y, r12
    1018:	0d c0       	rjmp	.+26     	; 0x1034 <_ZN9MaxMatrix8getRowLLEhhPh+0x86>
    101a:	b9 01       	movw	r22, r18
    101c:	a8 01       	movw	r20, r16
    101e:	08 2e       	mov	r0, r24
    1020:	04 c0       	rjmp	.+8      	; 0x102a <_ZN9MaxMatrix8getRowLLEhhPh+0x7c>
    1022:	44 0f       	add	r20, r20
    1024:	55 1f       	adc	r21, r21
    1026:	66 1f       	adc	r22, r22
    1028:	77 1f       	adc	r23, r23
    102a:	0a 94       	dec	r0
    102c:	d2 f7       	brpl	.-12     	; 0x1022 <_ZN9MaxMatrix8getRowLLEhhPh+0x74>
    102e:	40 95       	com	r20
    1030:	4b 21       	and	r20, r11
    1032:	48 83       	st	Y, r20
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	e8 f6       	brcc	.-70     	; 0xff2 <_ZN9MaxMatrix8getRowLLEhhPh+0x44>
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	01 c0       	rjmp	.+2      	; 0x103e <_ZN9MaxMatrix8getRowLLEhhPh+0x90>
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	1f 91       	pop	r17
    1044:	0f 91       	pop	r16
    1046:	ff 90       	pop	r15
    1048:	ef 90       	pop	r14
    104a:	df 90       	pop	r13
    104c:	cf 90       	pop	r12
    104e:	bf 90       	pop	r11
    1050:	08 95       	ret

00001052 <_ZN9MaxMatrix9getColumnEhPh>:
    1052:	36 2f       	mov	r19, r22
    1054:	fa 01       	movw	r30, r20
    1056:	dc 01       	movw	r26, r24
    1058:	14 96       	adiw	r26, 0x04	; 4
    105a:	2c 91       	ld	r18, X
    105c:	14 97       	sbiw	r26, 0x04	; 4
    105e:	21 11       	cpse	r18, r1
    1060:	05 c0       	rjmp	.+10     	; 0x106c <_ZN9MaxMatrix9getColumnEhPh+0x1a>
    1062:	60 31       	cpi	r22, 0x10	; 16
    1064:	00 f5       	brcc	.+64     	; 0x10a6 <_ZN9MaxMatrix9getColumnEhPh+0x54>
    1066:	a6 0f       	add	r26, r22
    1068:	b1 1d       	adc	r27, r1
    106a:	10 c0       	rjmp	.+32     	; 0x108c <_ZN9MaxMatrix9getColumnEhPh+0x3a>
    106c:	66 95       	lsr	r22
    106e:	66 95       	lsr	r22
    1070:	66 95       	lsr	r22
    1072:	43 2f       	mov	r20, r19
    1074:	47 70       	andi	r20, 0x07	; 7
    1076:	21 30       	cpi	r18, 0x01	; 1
    1078:	99 f0       	breq	.+38     	; 0x10a0 <_ZN9MaxMatrix9getColumnEhPh+0x4e>
    107a:	22 30       	cpi	r18, 0x02	; 2
    107c:	61 f4       	brne	.+24     	; 0x1096 <_ZN9MaxMatrix9getColumnEhPh+0x44>
    107e:	2f e0       	ldi	r18, 0x0F	; 15
    1080:	23 1b       	sub	r18, r19
    1082:	20 31       	cpi	r18, 0x10	; 16
    1084:	80 f4       	brcc	.+32     	; 0x10a6 <_ZN9MaxMatrix9getColumnEhPh+0x54>
    1086:	dc 01       	movw	r26, r24
    1088:	a2 0f       	add	r26, r18
    108a:	b1 1d       	adc	r27, r1
    108c:	15 96       	adiw	r26, 0x05	; 5
    108e:	8c 91       	ld	r24, X
    1090:	80 83       	st	Z, r24
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	08 95       	ret
    1096:	23 30       	cpi	r18, 0x03	; 3
    1098:	31 f4       	brne	.+12     	; 0x10a6 <_ZN9MaxMatrix9getColumnEhPh+0x54>
    109a:	27 e0       	ldi	r18, 0x07	; 7
    109c:	24 1b       	sub	r18, r20
    109e:	42 2f       	mov	r20, r18
    10a0:	9f 01       	movw	r18, r30
    10a2:	0c 94 d7 07 	jmp	0xfae	; 0xfae <_ZN9MaxMatrix8getRowLLEhhPh>
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	08 95       	ret

000010aa <_ZN9MaxMatrix11setColumnLLEhh>:
    10aa:	bf 92       	push	r11
    10ac:	cf 92       	push	r12
    10ae:	df 92       	push	r13
    10b0:	ef 92       	push	r14
    10b2:	ff 92       	push	r15
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	60 31       	cpi	r22, 0x10	; 16
    10be:	e8 f5       	brcc	.+122    	; 0x113a <_ZN9MaxMatrix11setColumnLLEhh+0x90>
    10c0:	04 2f       	mov	r16, r20
    10c2:	16 2f       	mov	r17, r22
    10c4:	ec 01       	movw	r28, r24
    10c6:	c6 2e       	mov	r12, r22
    10c8:	c6 94       	lsr	r12
    10ca:	c6 94       	lsr	r12
    10cc:	c6 94       	lsr	r12
    10ce:	d1 2c       	mov	r13, r1
    10d0:	86 2f       	mov	r24, r22
    10d2:	87 70       	andi	r24, 0x07	; 7
    10d4:	b8 2e       	mov	r11, r24
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	0e 94 5f 11 	call	0x22be	; 0x22be <digitalWrite>
    10de:	e1 2c       	mov	r14, r1
    10e0:	f1 2c       	mov	r15, r1
    10e2:	b3 94       	inc	r11
    10e4:	ec 14       	cp	r14, r12
    10e6:	fd 04       	cpc	r15, r13
    10e8:	41 f4       	brne	.+16     	; 0x10fa <_ZN9MaxMatrix11setColumnLLEhh+0x50>
    10ea:	2b 2d       	mov	r18, r11
    10ec:	41 e0       	ldi	r20, 0x01	; 1
    10ee:	6a 81       	ldd	r22, Y+2	; 0x02
    10f0:	88 81       	ld	r24, Y
    10f2:	0e 94 8f 11 	call	0x231e	; 0x231e <shiftOut>
    10f6:	20 2f       	mov	r18, r16
    10f8:	07 c0       	rjmp	.+14     	; 0x1108 <_ZN9MaxMatrix11setColumnLLEhh+0x5e>
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	41 e0       	ldi	r20, 0x01	; 1
    10fe:	6a 81       	ldd	r22, Y+2	; 0x02
    1100:	88 81       	ld	r24, Y
    1102:	0e 94 8f 11 	call	0x231e	; 0x231e <shiftOut>
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	41 e0       	ldi	r20, 0x01	; 1
    110a:	6a 81       	ldd	r22, Y+2	; 0x02
    110c:	88 81       	ld	r24, Y
    110e:	0e 94 8f 11 	call	0x231e	; 0x231e <shiftOut>
    1112:	ea 94       	dec	r14
    1114:	ef 28       	or	r14, r15
    1116:	21 f0       	breq	.+8      	; 0x1120 <_ZN9MaxMatrix11setColumnLLEhh+0x76>
    1118:	ee 24       	eor	r14, r14
    111a:	e3 94       	inc	r14
    111c:	f1 2c       	mov	r15, r1
    111e:	e2 cf       	rjmp	.-60     	; 0x10e4 <_ZN9MaxMatrix11setColumnLLEhh+0x3a>
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	0e 94 5f 11 	call	0x22be	; 0x22be <digitalWrite>
    1128:	61 e0       	ldi	r22, 0x01	; 1
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	0e 94 5f 11 	call	0x22be	; 0x22be <digitalWrite>
    1130:	c1 0f       	add	r28, r17
    1132:	d1 1d       	adc	r29, r1
    1134:	0d 83       	std	Y+5, r16	; 0x05
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	01 c0       	rjmp	.+2      	; 0x113c <_ZN9MaxMatrix11setColumnLLEhh+0x92>
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	1f 91       	pop	r17
    1142:	0f 91       	pop	r16
    1144:	ff 90       	pop	r15
    1146:	ef 90       	pop	r14
    1148:	df 90       	pop	r13
    114a:	cf 90       	pop	r12
    114c:	bf 90       	pop	r11
    114e:	08 95       	ret

00001150 <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh>:
    1150:	af 92       	push	r10
    1152:	bf 92       	push	r11
    1154:	cf 92       	push	r12
    1156:	df 92       	push	r13
    1158:	ef 92       	push	r14
    115a:	ff 92       	push	r15
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	68 30       	cpi	r22, 0x08	; 8
    1166:	90 f5       	brcc	.+100    	; 0x11cc <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh+0x7c>
    1168:	04 2f       	mov	r16, r20
    116a:	16 2f       	mov	r17, r22
    116c:	ec 01       	movw	r28, r24
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	0e 94 5f 11 	call	0x22be	; 0x22be <digitalWrite>
    1176:	a1 2e       	mov	r10, r17
    1178:	b1 2c       	mov	r11, r1
    117a:	7e 01       	movw	r14, r28
    117c:	85 e0       	ldi	r24, 0x05	; 5
    117e:	e8 0e       	add	r14, r24
    1180:	f1 1c       	adc	r15, r1
    1182:	92 e0       	ldi	r25, 0x02	; 2
    1184:	c9 2e       	mov	r12, r25
    1186:	d1 2c       	mov	r13, r1
    1188:	1f 5f       	subi	r17, 0xFF	; 255
    118a:	21 2f       	mov	r18, r17
    118c:	41 e0       	ldi	r20, 0x01	; 1
    118e:	6a 81       	ldd	r22, Y+2	; 0x02
    1190:	88 81       	ld	r24, Y
    1192:	0e 94 8f 11 	call	0x231e	; 0x231e <shiftOut>
    1196:	20 2f       	mov	r18, r16
    1198:	41 e0       	ldi	r20, 0x01	; 1
    119a:	6a 81       	ldd	r22, Y+2	; 0x02
    119c:	88 81       	ld	r24, Y
    119e:	0e 94 8f 11 	call	0x231e	; 0x231e <shiftOut>
    11a2:	f7 01       	movw	r30, r14
    11a4:	00 83       	st	Z, r16
    11a6:	ea 0c       	add	r14, r10
    11a8:	fb 1c       	adc	r15, r11
    11aa:	ca 94       	dec	r12
    11ac:	cd 28       	or	r12, r13
    11ae:	21 f0       	breq	.+8      	; 0x11b8 <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh+0x68>
    11b0:	cc 24       	eor	r12, r12
    11b2:	c3 94       	inc	r12
    11b4:	d1 2c       	mov	r13, r1
    11b6:	e9 cf       	rjmp	.-46     	; 0x118a <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh+0x3a>
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	0e 94 5f 11 	call	0x22be	; 0x22be <digitalWrite>
    11c0:	61 e0       	ldi	r22, 0x01	; 1
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	0e 94 5f 11 	call	0x22be	; 0x22be <digitalWrite>
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	01 c0       	rjmp	.+2      	; 0x11ce <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh+0x7e>
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	1f 91       	pop	r17
    11d4:	0f 91       	pop	r16
    11d6:	ff 90       	pop	r15
    11d8:	ef 90       	pop	r14
    11da:	df 90       	pop	r13
    11dc:	cf 90       	pop	r12
    11de:	bf 90       	pop	r11
    11e0:	af 90       	pop	r10
    11e2:	08 95       	ret

000011e4 <_ZN9MaxMatrix5clearEv>:
    11e4:	1f 93       	push	r17
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	ec 01       	movw	r28, r24
    11ec:	10 e0       	ldi	r17, 0x00	; 0
    11ee:	40 e0       	ldi	r20, 0x00	; 0
    11f0:	61 2f       	mov	r22, r17
    11f2:	ce 01       	movw	r24, r28
    11f4:	0e 94 a8 08 	call	0x1150	; 0x1150 <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh>
    11f8:	1f 5f       	subi	r17, 0xFF	; 255
    11fa:	18 30       	cpi	r17, 0x08	; 8
    11fc:	c1 f7       	brne	.-16     	; 0x11ee <_ZN9MaxMatrix5clearEv+0xa>
    11fe:	fe 01       	movw	r30, r28
    1200:	35 96       	adiw	r30, 0x05	; 5
    1202:	65 96       	adiw	r28, 0x15	; 21
    1204:	11 92       	st	Z+, r1
    1206:	ec 17       	cp	r30, r28
    1208:	fd 07       	cpc	r31, r29
    120a:	e1 f7       	brne	.-8      	; 0x1204 <_ZN9MaxMatrix5clearEv+0x20>
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	1f 91       	pop	r17
    1212:	08 95       	ret

00001214 <_ZN9MaxMatrix4initEv>:
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	ec 01       	movw	r28, r24
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	8b 83       	std	Y+3, r24	; 0x03
    121e:	61 e0       	ldi	r22, 0x01	; 1
    1220:	88 81       	ld	r24, Y
    1222:	0e 94 23 11 	call	0x2246	; 0x2246 <pinMode>
    1226:	61 e0       	ldi	r22, 0x01	; 1
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	0e 94 23 11 	call	0x2246	; 0x2246 <pinMode>
    122e:	61 e0       	ldi	r22, 0x01	; 1
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	0e 94 23 11 	call	0x2246	; 0x2246 <pinMode>
    1236:	61 e0       	ldi	r22, 0x01	; 1
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	0e 94 5f 11 	call	0x22be	; 0x22be <digitalWrite>
    123e:	47 e0       	ldi	r20, 0x07	; 7
    1240:	6b e0       	ldi	r22, 0x0B	; 11
    1242:	ce 01       	movw	r24, r28
    1244:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN9MaxMatrix13RegisterWriteEhh>
    1248:	40 e0       	ldi	r20, 0x00	; 0
    124a:	69 e0       	ldi	r22, 0x09	; 9
    124c:	ce 01       	movw	r24, r28
    124e:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN9MaxMatrix13RegisterWriteEhh>
    1252:	41 e0       	ldi	r20, 0x01	; 1
    1254:	6c e0       	ldi	r22, 0x0C	; 12
    1256:	ce 01       	movw	r24, r28
    1258:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN9MaxMatrix13RegisterWriteEhh>
    125c:	40 e0       	ldi	r20, 0x00	; 0
    125e:	6f e0       	ldi	r22, 0x0F	; 15
    1260:	ce 01       	movw	r24, r28
    1262:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN9MaxMatrix13RegisterWriteEhh>
    1266:	ce 01       	movw	r24, r28
    1268:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_ZN9MaxMatrix5clearEv>
    126c:	64 e0       	ldi	r22, 0x04	; 4
    126e:	ce 01       	movw	r24, r28
    1270:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <_ZN9MaxMatrix12setIntensityEh>
    1274:	82 e0       	ldi	r24, 0x02	; 2
    1276:	8b 83       	std	Y+3, r24	; 0x03
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	08 95       	ret

0000127e <_ZN9MaxMatrix8setRowLLEhhh>:
    127e:	af 92       	push	r10
    1280:	bf 92       	push	r11
    1282:	cf 92       	push	r12
    1284:	df 92       	push	r13
    1286:	ef 92       	push	r14
    1288:	ff 92       	push	r15
    128a:	0f 93       	push	r16
    128c:	1f 93       	push	r17
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	62 30       	cpi	r22, 0x02	; 2
    1294:	08 f0       	brcs	.+2      	; 0x1298 <_ZN9MaxMatrix8setRowLLEhhh+0x1a>
    1296:	42 c0       	rjmp	.+132    	; 0x131c <_ZN9MaxMatrix8setRowLLEhhh+0x9e>
    1298:	48 30       	cpi	r20, 0x08	; 8
    129a:	08 f0       	brcs	.+2      	; 0x129e <_ZN9MaxMatrix8setRowLLEhhh+0x20>
    129c:	3f c0       	rjmp	.+126    	; 0x131c <_ZN9MaxMatrix8setRowLLEhhh+0x9e>
    129e:	c6 2f       	mov	r28, r22
    12a0:	8c 01       	movw	r16, r24
    12a2:	f6 2e       	mov	r15, r22
    12a4:	ff 0c       	add	r15, r15
    12a6:	ff 0c       	add	r15, r15
    12a8:	ff 0c       	add	r15, r15
    12aa:	d0 e0       	ldi	r29, 0x00	; 0
    12ac:	21 96       	adiw	r28, 0x01	; 1
    12ae:	83 e0       	ldi	r24, 0x03	; 3
    12b0:	cc 0f       	add	r28, r28
    12b2:	dd 1f       	adc	r29, r29
    12b4:	8a 95       	dec	r24
    12b6:	e1 f7       	brne	.-8      	; 0x12b0 <_ZN9MaxMatrix8setRowLLEhhh+0x32>
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	a0 e0       	ldi	r26, 0x00	; 0
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	04 c0       	rjmp	.+8      	; 0x12ca <_ZN9MaxMatrix8setRowLLEhhh+0x4c>
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	aa 1f       	adc	r26, r26
    12c8:	bb 1f       	adc	r27, r27
    12ca:	4a 95       	dec	r20
    12cc:	d2 f7       	brpl	.-12     	; 0x12c2 <_ZN9MaxMatrix8setRowLLEhhh+0x44>
    12ce:	a8 2e       	mov	r10, r24
    12d0:	e8 2e       	mov	r14, r24
    12d2:	e0 94       	com	r14
    12d4:	97 e0       	ldi	r25, 0x07	; 7
    12d6:	b9 2e       	mov	r11, r25
    12d8:	c2 2e       	mov	r12, r18
    12da:	d1 2c       	mov	r13, r1
    12dc:	ef 2d       	mov	r30, r15
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	ec 17       	cp	r30, r28
    12e2:	fd 07       	cpc	r31, r29
    12e4:	cc f4       	brge	.+50     	; 0x1318 <_ZN9MaxMatrix8setRowLLEhhh+0x9a>
    12e6:	e0 0f       	add	r30, r16
    12e8:	f1 1f       	adc	r31, r17
    12ea:	c6 01       	movw	r24, r12
    12ec:	0b 2c       	mov	r0, r11
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <_ZN9MaxMatrix8setRowLLEhhh+0x76>
    12f0:	95 95       	asr	r25
    12f2:	87 95       	ror	r24
    12f4:	0a 94       	dec	r0
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <_ZN9MaxMatrix8setRowLLEhhh+0x72>
    12f8:	80 ff       	sbrs	r24, 0
    12fa:	03 c0       	rjmp	.+6      	; 0x1302 <_ZN9MaxMatrix8setRowLLEhhh+0x84>
    12fc:	85 81       	ldd	r24, Z+5	; 0x05
    12fe:	8a 29       	or	r24, r10
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <_ZN9MaxMatrix8setRowLLEhhh+0x88>
    1302:	85 81       	ldd	r24, Z+5	; 0x05
    1304:	8e 21       	and	r24, r14
    1306:	85 83       	std	Z+5, r24	; 0x05
    1308:	45 81       	ldd	r20, Z+5	; 0x05
    130a:	6f 2d       	mov	r22, r15
    130c:	c8 01       	movw	r24, r16
    130e:	0e 94 55 08 	call	0x10aa	; 0x10aa <_ZN9MaxMatrix11setColumnLLEhh>
    1312:	ba 94       	dec	r11
    1314:	f3 94       	inc	r15
    1316:	e2 cf       	rjmp	.-60     	; 0x12dc <_ZN9MaxMatrix8setRowLLEhhh+0x5e>
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	01 c0       	rjmp	.+2      	; 0x131e <_ZN9MaxMatrix8setRowLLEhhh+0xa0>
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	1f 91       	pop	r17
    1324:	0f 91       	pop	r16
    1326:	ff 90       	pop	r15
    1328:	ef 90       	pop	r14
    132a:	df 90       	pop	r13
    132c:	cf 90       	pop	r12
    132e:	bf 90       	pop	r11
    1330:	af 90       	pop	r10
    1332:	08 95       	ret

00001334 <_ZN9MaxMatrix9setColumnEhh>:
    1334:	ef 92       	push	r14
    1336:	ff 92       	push	r15
    1338:	0f 93       	push	r16
    133a:	1f 93       	push	r17
    133c:	cf 93       	push	r28
    133e:	df 93       	push	r29
    1340:	1f 92       	push	r1
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	fc 01       	movw	r30, r24
    1348:	24 2f       	mov	r18, r20
    134a:	06 2f       	mov	r16, r22
    134c:	06 95       	lsr	r16
    134e:	06 95       	lsr	r16
    1350:	06 95       	lsr	r16
    1352:	46 2f       	mov	r20, r22
    1354:	47 70       	andi	r20, 0x07	; 7
    1356:	94 81       	ldd	r25, Z+4	; 0x04
    1358:	91 11       	cpse	r25, r1
    135a:	03 c0       	rjmp	.+6      	; 0x1362 <_ZN9MaxMatrix9setColumnEhh+0x2e>
    135c:	42 2f       	mov	r20, r18
    135e:	cf 01       	movw	r24, r30
    1360:	11 c0       	rjmp	.+34     	; 0x1384 <_ZN9MaxMatrix9setColumnEhh+0x50>
    1362:	91 30       	cpi	r25, 0x01	; 1
    1364:	19 f4       	brne	.+6      	; 0x136c <_ZN9MaxMatrix9setColumnEhh+0x38>
    1366:	60 2f       	mov	r22, r16
    1368:	cf 01       	movw	r24, r30
    136a:	23 c0       	rjmp	.+70     	; 0x13b2 <_ZN9MaxMatrix9setColumnEhh+0x7e>
    136c:	16 2f       	mov	r17, r22
    136e:	7f 01       	movw	r14, r30
    1370:	92 30       	cpi	r25, 0x02	; 2
    1372:	89 f4       	brne	.+34     	; 0x1396 <_ZN9MaxMatrix9setColumnEhh+0x62>
    1374:	62 2f       	mov	r22, r18
    1376:	cf 01       	movw	r24, r30
    1378:	0e 94 24 05 	call	0xa48	; 0xa48 <_ZN9MaxMatrix11reverseByteEh>
    137c:	6f e0       	ldi	r22, 0x0F	; 15
    137e:	61 1b       	sub	r22, r17
    1380:	48 2f       	mov	r20, r24
    1382:	c7 01       	movw	r24, r14
    1384:	0f 90       	pop	r0
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	ff 90       	pop	r15
    1390:	ef 90       	pop	r14
    1392:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <_ZN9MaxMatrix11setColumnLLEhh>
    1396:	93 30       	cpi	r25, 0x03	; 3
    1398:	a9 f4       	brne	.+42     	; 0x13c4 <_ZN9MaxMatrix9setColumnEhh+0x90>
    139a:	62 2f       	mov	r22, r18
    139c:	cf 01       	movw	r24, r30
    139e:	49 83       	std	Y+1, r20	; 0x01
    13a0:	0e 94 24 05 	call	0xa48	; 0xa48 <_ZN9MaxMatrix11reverseByteEh>
    13a4:	97 e0       	ldi	r25, 0x07	; 7
    13a6:	49 81       	ldd	r20, Y+1	; 0x01
    13a8:	94 1b       	sub	r25, r20
    13aa:	49 2f       	mov	r20, r25
    13ac:	28 2f       	mov	r18, r24
    13ae:	60 2f       	mov	r22, r16
    13b0:	c7 01       	movw	r24, r14
    13b2:	0f 90       	pop	r0
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	1f 91       	pop	r17
    13ba:	0f 91       	pop	r16
    13bc:	ff 90       	pop	r15
    13be:	ef 90       	pop	r14
    13c0:	0c 94 3f 09 	jmp	0x127e	; 0x127e <_ZN9MaxMatrix8setRowLLEhhh>
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	0f 90       	pop	r0
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	ff 90       	pop	r15
    13d2:	ef 90       	pop	r14
    13d4:	08 95       	ret

000013d6 <_ZN9MaxMatrix6setDotEhhb>:
    13d6:	df 92       	push	r13
    13d8:	ef 92       	push	r14
    13da:	ff 92       	push	r15
    13dc:	0f 93       	push	r16
    13de:	1f 93       	push	r17
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	1f 92       	push	r1
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	60 31       	cpi	r22, 0x10	; 16
    13ec:	80 f5       	brcc	.+96     	; 0x144e <_ZN9MaxMatrix6setDotEhhb+0x78>
    13ee:	48 30       	cpi	r20, 0x08	; 8
    13f0:	70 f5       	brcc	.+92     	; 0x144e <_ZN9MaxMatrix6setDotEhhb+0x78>
    13f2:	d2 2e       	mov	r13, r18
    13f4:	e4 2e       	mov	r14, r20
    13f6:	f6 2e       	mov	r15, r22
    13f8:	8c 01       	movw	r16, r24
    13fa:	ae 01       	movw	r20, r28
    13fc:	4f 5f       	subi	r20, 0xFF	; 255
    13fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1400:	0e 94 29 08 	call	0x1052	; 0x1052 <_ZN9MaxMatrix9getColumnEhPh>
    1404:	29 81       	ldd	r18, Y+1	; 0x01
    1406:	dd 20       	and	r13, r13
    1408:	71 f0       	breq	.+28     	; 0x1426 <_ZN9MaxMatrix6setDotEhhb+0x50>
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	a0 e0       	ldi	r26, 0x00	; 0
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	04 c0       	rjmp	.+8      	; 0x141c <_ZN9MaxMatrix6setDotEhhb+0x46>
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	aa 1f       	adc	r26, r26
    141a:	bb 1f       	adc	r27, r27
    141c:	ea 94       	dec	r14
    141e:	d2 f7       	brpl	.-12     	; 0x1414 <_ZN9MaxMatrix6setDotEhhb+0x3e>
    1420:	82 2b       	or	r24, r18
    1422:	89 83       	std	Y+1, r24	; 0x01
    1424:	0e c0       	rjmp	.+28     	; 0x1442 <_ZN9MaxMatrix6setDotEhhb+0x6c>
    1426:	41 e0       	ldi	r20, 0x01	; 1
    1428:	50 e0       	ldi	r21, 0x00	; 0
    142a:	60 e0       	ldi	r22, 0x00	; 0
    142c:	70 e0       	ldi	r23, 0x00	; 0
    142e:	04 c0       	rjmp	.+8      	; 0x1438 <_ZN9MaxMatrix6setDotEhhb+0x62>
    1430:	44 0f       	add	r20, r20
    1432:	55 1f       	adc	r21, r21
    1434:	66 1f       	adc	r22, r22
    1436:	77 1f       	adc	r23, r23
    1438:	ea 94       	dec	r14
    143a:	d2 f7       	brpl	.-12     	; 0x1430 <_ZN9MaxMatrix6setDotEhhb+0x5a>
    143c:	40 95       	com	r20
    143e:	42 23       	and	r20, r18
    1440:	49 83       	std	Y+1, r20	; 0x01
    1442:	49 81       	ldd	r20, Y+1	; 0x01
    1444:	6f 2d       	mov	r22, r15
    1446:	c8 01       	movw	r24, r16
    1448:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN9MaxMatrix9setColumnEhh>
    144c:	01 c0       	rjmp	.+2      	; 0x1450 <_ZN9MaxMatrix6setDotEhhb+0x7a>
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	0f 90       	pop	r0
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	1f 91       	pop	r17
    1458:	0f 91       	pop	r16
    145a:	ff 90       	pop	r15
    145c:	ef 90       	pop	r14
    145e:	df 90       	pop	r13
    1460:	08 95       	ret

00001462 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh>:
    1462:	2f 92       	push	r2
    1464:	3f 92       	push	r3
    1466:	4f 92       	push	r4
    1468:	5f 92       	push	r5
    146a:	6f 92       	push	r6
    146c:	7f 92       	push	r7
    146e:	8f 92       	push	r8
    1470:	9f 92       	push	r9
    1472:	af 92       	push	r10
    1474:	bf 92       	push	r11
    1476:	cf 92       	push	r12
    1478:	df 92       	push	r13
    147a:	ef 92       	push	r14
    147c:	ff 92       	push	r15
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	00 d0       	rcall	.+0      	; 0x1488 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x26>
    1488:	00 d0       	rcall	.+0      	; 0x148a <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x28>
    148a:	1f 92       	push	r1
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	4c 01       	movw	r8, r24
    1492:	6b 01       	movw	r12, r22
    1494:	3a 01       	movw	r6, r20
    1496:	59 01       	movw	r10, r18
    1498:	f9 01       	movw	r30, r18
    149a:	40 80       	ld	r4, Z
    149c:	51 2c       	mov	r5, r1
    149e:	e1 80       	ldd	r14, Z+1	; 0x01
    14a0:	f1 2c       	mov	r15, r1
    14a2:	f8 e0       	ldi	r31, 0x08	; 8
    14a4:	ef 16       	cp	r14, r31
    14a6:	f1 04       	cpc	r15, r1
    14a8:	c9 f4       	brne	.+50     	; 0x14dc <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x7a>
    14aa:	45 2b       	or	r20, r21
    14ac:	b9 f4       	brne	.+46     	; 0x14dc <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x7a>
    14ae:	00 e0       	ldi	r16, 0x00	; 0
    14b0:	10 e0       	ldi	r17, 0x00	; 0
    14b2:	04 15       	cp	r16, r4
    14b4:	15 05       	cpc	r17, r5
    14b6:	0c f0       	brlt	.+2      	; 0x14ba <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x58>
    14b8:	4f c0       	rjmp	.+158    	; 0x1558 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xf6>
    14ba:	c8 01       	movw	r24, r16
    14bc:	8c 0d       	add	r24, r12
    14be:	9d 1d       	adc	r25, r13
    14c0:	40 97       	sbiw	r24, 0x10	; 16
    14c2:	48 f4       	brcc	.+18     	; 0x14d6 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x74>
    14c4:	f5 01       	movw	r30, r10
    14c6:	e0 0f       	add	r30, r16
    14c8:	f1 1f       	adc	r31, r17
    14ca:	42 81       	ldd	r20, Z+2	; 0x02
    14cc:	60 2f       	mov	r22, r16
    14ce:	6c 0d       	add	r22, r12
    14d0:	c4 01       	movw	r24, r8
    14d2:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN9MaxMatrix9setColumnEhh>
    14d6:	0f 5f       	subi	r16, 0xFF	; 255
    14d8:	1f 4f       	sbci	r17, 0xFF	; 255
    14da:	eb cf       	rjmp	.-42     	; 0x14b2 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x50>
    14dc:	1d 82       	std	Y+5, r1	; 0x05
    14de:	1c 82       	std	Y+4, r1	; 0x04
    14e0:	8c 81       	ldd	r24, Y+4	; 0x04
    14e2:	9d 81       	ldd	r25, Y+5	; 0x05
    14e4:	84 15       	cp	r24, r4
    14e6:	95 05       	cpc	r25, r5
    14e8:	bc f5       	brge	.+110    	; 0x1558 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xf6>
    14ea:	00 e0       	ldi	r16, 0x00	; 0
    14ec:	10 e0       	ldi	r17, 0x00	; 0
    14ee:	2c 80       	ldd	r2, Y+4	; 0x04
    14f0:	3d 80       	ldd	r3, Y+5	; 0x05
    14f2:	2c 0c       	add	r2, r12
    14f4:	3d 1c       	adc	r3, r13
    14f6:	8c 81       	ldd	r24, Y+4	; 0x04
    14f8:	9d 81       	ldd	r25, Y+5	; 0x05
    14fa:	8a 0d       	add	r24, r10
    14fc:	9b 1d       	adc	r25, r11
    14fe:	9a 83       	std	Y+2, r25	; 0x02
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	3c 81       	ldd	r19, Y+4	; 0x04
    1504:	3c 0d       	add	r19, r12
    1506:	0e 15       	cp	r16, r14
    1508:	1f 05       	cpc	r17, r15
    150a:	04 f5       	brge	.+64     	; 0x154c <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xea>
    150c:	80 e1       	ldi	r24, 0x10	; 16
    150e:	28 16       	cp	r2, r24
    1510:	31 04       	cpc	r3, r1
    1512:	c8 f4       	brcc	.+50     	; 0x1546 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xe4>
    1514:	c8 01       	movw	r24, r16
    1516:	86 0d       	add	r24, r6
    1518:	97 1d       	adc	r25, r7
    151a:	08 97       	sbiw	r24, 0x08	; 8
    151c:	a0 f4       	brcc	.+40     	; 0x1546 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xe4>
    151e:	e9 81       	ldd	r30, Y+1	; 0x01
    1520:	fa 81       	ldd	r31, Y+2	; 0x02
    1522:	82 81       	ldd	r24, Z+2	; 0x02
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	00 2e       	mov	r0, r16
    1528:	02 c0       	rjmp	.+4      	; 0x152e <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xcc>
    152a:	95 95       	asr	r25
    152c:	87 95       	ror	r24
    152e:	0a 94       	dec	r0
    1530:	e2 f7       	brpl	.-8      	; 0x152a <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xc8>
    1532:	28 2f       	mov	r18, r24
    1534:	21 70       	andi	r18, 0x01	; 1
    1536:	40 2f       	mov	r20, r16
    1538:	46 0d       	add	r20, r6
    153a:	63 2f       	mov	r22, r19
    153c:	c4 01       	movw	r24, r8
    153e:	3b 83       	std	Y+3, r19	; 0x03
    1540:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <_ZN9MaxMatrix6setDotEhhb>
    1544:	3b 81       	ldd	r19, Y+3	; 0x03
    1546:	0f 5f       	subi	r16, 0xFF	; 255
    1548:	1f 4f       	sbci	r17, 0xFF	; 255
    154a:	dd cf       	rjmp	.-70     	; 0x1506 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xa4>
    154c:	ec 81       	ldd	r30, Y+4	; 0x04
    154e:	fd 81       	ldd	r31, Y+5	; 0x05
    1550:	31 96       	adiw	r30, 0x01	; 1
    1552:	fd 83       	std	Y+5, r31	; 0x05
    1554:	ec 83       	std	Y+4, r30	; 0x04
    1556:	c4 cf       	rjmp	.-120    	; 0x14e0 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x7e>
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	1f 91       	pop	r17
    1568:	0f 91       	pop	r16
    156a:	ff 90       	pop	r15
    156c:	ef 90       	pop	r14
    156e:	df 90       	pop	r13
    1570:	cf 90       	pop	r12
    1572:	bf 90       	pop	r11
    1574:	af 90       	pop	r10
    1576:	9f 90       	pop	r9
    1578:	8f 90       	pop	r8
    157a:	7f 90       	pop	r7
    157c:	6f 90       	pop	r6
    157e:	5f 90       	pop	r5
    1580:	4f 90       	pop	r4
    1582:	3f 90       	pop	r3
    1584:	2f 90       	pop	r2
    1586:	08 95       	ret

00001588 <_ZN9MaxMatrix7setTextEPKc>:
    1588:	cf 92       	push	r12
    158a:	df 92       	push	r13
    158c:	ef 92       	push	r14
    158e:	ff 92       	push	r15
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	28 97       	sbiw	r28, 0x08	; 8
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	61 15       	cp	r22, r1
    15aa:	71 05       	cpc	r23, r1
    15ac:	11 f4       	brne	.+4      	; 0x15b2 <_ZN9MaxMatrix7setTextEPKc+0x2a>
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	2e c0       	rjmp	.+92     	; 0x160e <_ZN9MaxMatrix7setTextEPKc+0x86>
    15b2:	7c 01       	movw	r14, r24
    15b4:	8b 01       	movw	r16, r22
    15b6:	c1 2c       	mov	r12, r1
    15b8:	d1 2c       	mov	r13, r1
    15ba:	f8 01       	movw	r30, r16
    15bc:	61 91       	ld	r22, Z+
    15be:	8f 01       	movw	r16, r30
    15c0:	66 23       	and	r22, r22
    15c2:	21 f1       	breq	.+72     	; 0x160c <_ZN9MaxMatrix7setTextEPKc+0x84>
    15c4:	ae 01       	movw	r20, r28
    15c6:	48 5f       	subi	r20, 0xF8	; 248
    15c8:	5f 4f       	sbci	r21, 0xFF	; 255
    15ca:	c7 01       	movw	r24, r14
    15cc:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_ZN9MaxMatrix19convertCharToSpriteEcPh>
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	69 f3       	breq	.-38     	; 0x15ae <_ZN9MaxMatrix7setTextEPKc+0x26>
    15d4:	ae 01       	movw	r20, r28
    15d6:	4f 5f       	subi	r20, 0xFF	; 255
    15d8:	5f 4f       	sbci	r21, 0xFF	; 255
    15da:	68 85       	ldd	r22, Y+8	; 0x08
    15dc:	c7 01       	movw	r24, r14
    15de:	0e 94 13 05 	call	0xa26	; 0xa26 <_ZN9MaxMatrix9getSpriteEhPA7_h>
    15e2:	81 30       	cpi	r24, 0x01	; 1
    15e4:	21 f3       	breq	.-56     	; 0x15ae <_ZN9MaxMatrix7setTextEPKc+0x26>
    15e6:	9e 01       	movw	r18, r28
    15e8:	2f 5f       	subi	r18, 0xFF	; 255
    15ea:	3f 4f       	sbci	r19, 0xFF	; 255
    15ec:	40 e0       	ldi	r20, 0x00	; 0
    15ee:	50 e0       	ldi	r21, 0x00	; 0
    15f0:	b6 01       	movw	r22, r12
    15f2:	c7 01       	movw	r24, r14
    15f4:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh>
    15f8:	29 81       	ldd	r18, Y+1	; 0x01
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	2f 5f       	subi	r18, 0xFF	; 255
    15fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1600:	c2 0e       	add	r12, r18
    1602:	d3 1e       	adc	r13, r19
    1604:	81 e1       	ldi	r24, 0x11	; 17
    1606:	c8 16       	cp	r12, r24
    1608:	d1 04       	cpc	r13, r1
    160a:	bc f2       	brlt	.-82     	; 0x15ba <_ZN9MaxMatrix7setTextEPKc+0x32>
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	28 96       	adiw	r28, 0x08	; 8
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	cd bf       	out	0x3d, r28	; 61
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	1f 91       	pop	r17
    1620:	0f 91       	pop	r16
    1622:	ff 90       	pop	r15
    1624:	ef 90       	pop	r14
    1626:	df 90       	pop	r13
    1628:	cf 90       	pop	r12
    162a:	08 95       	ret

0000162c <_ZN9MaxMatrix11shiftLeftLLEbbb>:
 *  \param[in]      FillWithZero                initialize the column on the right side with zero.
 *  \param[in]      ShiftToNeighbourModule      shift led states to neighbour module
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftLeftLL(bool Rotate, bool FillWithZero, bool ShiftToNeighbourModule)
{
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	fc 01       	movw	r30, r24
    1632:	85 81       	ldd	r24, Z+5	; 0x05
    1634:	df 01       	movw	r26, r30
    1636:	16 96       	adiw	r26, 0x06	; 6
	if(ShiftToNeighbourModule) {
    1638:	21 11       	cpse	r18, r1
    163a:	24 c0       	rjmp	.+72     	; 0x1684 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x58>
    163c:	9f 01       	movw	r18, r30
    163e:	23 5f       	subi	r18, 0xF3	; 243
    1640:	3f 4f       	sbci	r19, 0xFF	; 255
	} else {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
			byte old = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module];
			for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; Column++) {
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] = 
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module) + 1];
    1642:	9d 91       	ld	r25, X+
    1644:	ed 01       	movw	r28, r26
    1646:	22 97       	sbiw	r28, 0x02	; 2
    1648:	98 83       	st	Y, r25
		if(Rotate) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = old;
		else if(FillWithZero) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = 0;
	} else {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
			byte old = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module];
			for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; Column++) {
    164a:	a2 17       	cp	r26, r18
    164c:	b3 07       	cpc	r27, r19
    164e:	c9 f7       	brne	.-14     	; 0x1642 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x16>
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] = 
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module) + 1];
			}
			if(Rotate) MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * (Module + 1) - 1] = old;
    1650:	61 11       	cpse	r22, r1
    1652:	04 c0       	rjmp	.+8      	; 0x165c <_ZN9MaxMatrix11shiftLeftLLEbbb+0x30>
			else if(FillWithZero) MatrixBuffer[(Module + 1) * MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1] = 0;
    1654:	44 23       	and	r20, r20
    1656:	19 f0       	breq	.+6      	; 0x165e <_ZN9MaxMatrix11shiftLeftLLEbbb+0x32>
    1658:	14 86       	std	Z+12, r1	; 0x0c
    165a:	01 c0       	rjmp	.+2      	; 0x165e <_ZN9MaxMatrix11shiftLeftLLEbbb+0x32>
			byte old = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module];
			for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; Column++) {
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] = 
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module) + 1];
			}
			if(Rotate) MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * (Module + 1) - 1] = old;
    165c:	84 87       	std	Z+12, r24	; 0x0c
		}
		if(Rotate) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = old;
		else if(FillWithZero) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = 0;
	} else {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
			byte old = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module];
    165e:	85 85       	ldd	r24, Z+13	; 0x0d
    1660:	df 01       	movw	r26, r30
    1662:	1e 96       	adiw	r26, 0x0e	; 14
    1664:	9f 01       	movw	r18, r30
    1666:	2b 5e       	subi	r18, 0xEB	; 235
    1668:	3f 4f       	sbci	r19, 0xFF	; 255
			for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; Column++) {
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] = 
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module) + 1];
    166a:	9d 91       	ld	r25, X+
    166c:	ed 01       	movw	r28, r26
    166e:	22 97       	sbiw	r28, 0x02	; 2
    1670:	98 83       	st	Y, r25
		if(Rotate) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = old;
		else if(FillWithZero) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = 0;
	} else {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
			byte old = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module];
			for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; Column++) {
    1672:	a2 17       	cp	r26, r18
    1674:	b3 07       	cpc	r27, r19
    1676:	c9 f7       	brne	.-14     	; 0x166a <_ZN9MaxMatrix11shiftLeftLLEbbb+0x3e>
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] = 
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module) + 1];
			}
			if(Rotate) MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * (Module + 1) - 1] = old;
    1678:	61 11       	cpse	r22, r1
    167a:	0f c0       	rjmp	.+30     	; 0x169a <_ZN9MaxMatrix11shiftLeftLLEbbb+0x6e>
			else if(FillWithZero) MatrixBuffer[(Module + 1) * MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1] = 0;
    167c:	44 23       	and	r20, r20
    167e:	71 f0       	breq	.+28     	; 0x169c <_ZN9MaxMatrix11shiftLeftLLEbbb+0x70>
    1680:	14 8a       	std	Z+20, r1	; 0x14
    1682:	0c c0       	rjmp	.+24     	; 0x169c <_ZN9MaxMatrix11shiftLeftLLEbbb+0x70>
    1684:	9f 01       	movw	r18, r30
    1686:	2b 5e       	subi	r18, 0xEB	; 235
    1688:	3f 4f       	sbci	r19, 0xFF	; 255
void MaxMatrix::shiftLeftLL(bool Rotate, bool FillWithZero, bool ShiftToNeighbourModule)
{
	if(ShiftToNeighbourModule) {
		byte old = MatrixBuffer[0];
		for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS - 1; Column++) {
			MatrixBuffer[Column] = MatrixBuffer[Column + 1]; 
    168a:	9d 91       	ld	r25, X+
    168c:	ed 01       	movw	r28, r26
    168e:	22 97       	sbiw	r28, 0x02	; 2
    1690:	98 83       	st	Y, r25
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftLeftLL(bool Rotate, bool FillWithZero, bool ShiftToNeighbourModule)
{
	if(ShiftToNeighbourModule) {
		byte old = MatrixBuffer[0];
		for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS - 1; Column++) {
    1692:	a2 17       	cp	r26, r18
    1694:	b3 07       	cpc	r27, r19
    1696:	c9 f7       	brne	.-14     	; 0x168a <_ZN9MaxMatrix11shiftLeftLLEbbb+0x5e>
    1698:	ef cf       	rjmp	.-34     	; 0x1678 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x4c>
			MatrixBuffer[Column] = MatrixBuffer[Column + 1]; 
		}
		if(Rotate) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = old;
    169a:	84 8b       	std	Z+20, r24	; 0x14
			}
			if(Rotate) MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * (Module + 1) - 1] = old;
			else if(FillWithZero) MatrixBuffer[(Module + 1) * MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1] = 0;
		}
	}
    reload();
    169c:	cf 01       	movw	r24, r30
} /* shiftLeftLL */
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
			}
			if(Rotate) MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * (Module + 1) - 1] = old;
			else if(FillWithZero) MatrixBuffer[(Module + 1) * MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1] = 0;
		}
	}
    reload();
    16a2:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <_ZN9MaxMatrix6reloadEv>

000016a6 <_ZN9MaxMatrix12shiftRightLLEbbb>:
 *  \param[in]      FillWithZero                initialize the column on the left side with zero.
 *  \param[in]      ShiftToNeighbourModule      shift led states to neighbour module
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftRightLL(bool Rotate, bool FillWithZero, bool ShiftToNeighbourModule)
{
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	fc 01       	movw	r30, r24
    16ac:	06 96       	adiw	r24, 0x06	; 6
	if(ShiftToNeighbourModule) {
    16ae:	21 11       	cpse	r18, r1
    16b0:	26 c0       	rjmp	.+76     	; 0x16fe <_ZN9MaxMatrix12shiftRightLLEbbb+0x58>
		}
	    if(Rotate) MatrixBuffer[0] = old;
	    else if(FillWithZero) MatrixBuffer[0] = 0;
	} else {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
			byte old = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * (Module + 1) - 1];
    16b2:	24 85       	ldd	r18, Z+12	; 0x0c
    16b4:	df 01       	movw	r26, r30
    16b6:	1d 96       	adiw	r26, 0x0d	; 13
    16b8:	ed 01       	movw	r28, r26
    16ba:	22 97       	sbiw	r28, 0x02	; 2
			for(int Column = MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; Column > 0; Column--) {
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] = 
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module) - 1];
    16bc:	38 81       	ld	r19, Y
    16be:	3e 93       	st	-X, r19
	    if(Rotate) MatrixBuffer[0] = old;
	    else if(FillWithZero) MatrixBuffer[0] = 0;
	} else {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
			byte old = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * (Module + 1) - 1];
			for(int Column = MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; Column > 0; Column--) {
    16c0:	a8 17       	cp	r26, r24
    16c2:	b9 07       	cpc	r27, r25
    16c4:	c9 f7       	brne	.-14     	; 0x16b8 <_ZN9MaxMatrix12shiftRightLLEbbb+0x12>
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] = 
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module) - 1];
			}
			if(Rotate) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = old;
    16c6:	61 11       	cpse	r22, r1
    16c8:	04 c0       	rjmp	.+8      	; 0x16d2 <_ZN9MaxMatrix12shiftRightLLEbbb+0x2c>
			else if(FillWithZero) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = 0;
    16ca:	44 23       	and	r20, r20
    16cc:	19 f0       	breq	.+6      	; 0x16d4 <_ZN9MaxMatrix12shiftRightLLEbbb+0x2e>
    16ce:	15 82       	std	Z+5, r1	; 0x05
    16d0:	01 c0       	rjmp	.+2      	; 0x16d4 <_ZN9MaxMatrix12shiftRightLLEbbb+0x2e>
			byte old = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * (Module + 1) - 1];
			for(int Column = MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; Column > 0; Column--) {
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] = 
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module) - 1];
			}
			if(Rotate) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = old;
    16d2:	25 83       	std	Z+5, r18	; 0x05
		}
	    if(Rotate) MatrixBuffer[0] = old;
	    else if(FillWithZero) MatrixBuffer[0] = 0;
	} else {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
			byte old = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * (Module + 1) - 1];
    16d4:	84 89       	ldd	r24, Z+20	; 0x14
    16d6:	df 01       	movw	r26, r30
    16d8:	55 96       	adiw	r26, 0x15	; 21
    16da:	9f 01       	movw	r18, r30
    16dc:	22 5f       	subi	r18, 0xF2	; 242
    16de:	3f 4f       	sbci	r19, 0xFF	; 255
    16e0:	ed 01       	movw	r28, r26
    16e2:	22 97       	sbiw	r28, 0x02	; 2
			for(int Column = MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; Column > 0; Column--) {
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] = 
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module) - 1];
    16e4:	98 81       	ld	r25, Y
    16e6:	9e 93       	st	-X, r25
	    if(Rotate) MatrixBuffer[0] = old;
	    else if(FillWithZero) MatrixBuffer[0] = 0;
	} else {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
			byte old = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * (Module + 1) - 1];
			for(int Column = MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; Column > 0; Column--) {
    16e8:	a2 17       	cp	r26, r18
    16ea:	b3 07       	cpc	r27, r19
    16ec:	c9 f7       	brne	.-14     	; 0x16e0 <_ZN9MaxMatrix12shiftRightLLEbbb+0x3a>
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] = 
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module) - 1];
			}
			if(Rotate) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = old;
    16ee:	61 11       	cpse	r22, r1
    16f0:	04 c0       	rjmp	.+8      	; 0x16fa <_ZN9MaxMatrix12shiftRightLLEbbb+0x54>
			else if(FillWithZero) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = 0;
    16f2:	44 23       	and	r20, r20
    16f4:	a1 f0       	breq	.+40     	; 0x171e <_ZN9MaxMatrix12shiftRightLLEbbb+0x78>
    16f6:	15 86       	std	Z+13, r1	; 0x0d
    16f8:	12 c0       	rjmp	.+36     	; 0x171e <_ZN9MaxMatrix12shiftRightLLEbbb+0x78>
			byte old = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * (Module + 1) - 1];
			for(int Column = MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; Column > 0; Column--) {
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] = 
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module) - 1];
			}
			if(Rotate) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = old;
    16fa:	85 87       	std	Z+13, r24	; 0x0d
    16fc:	10 c0       	rjmp	.+32     	; 0x171e <_ZN9MaxMatrix12shiftRightLLEbbb+0x78>
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftRightLL(bool Rotate, bool FillWithZero, bool ShiftToNeighbourModule)
{
	if(ShiftToNeighbourModule) {
	    byte old = MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1];
    16fe:	24 89       	ldd	r18, Z+20	; 0x14
    1700:	df 01       	movw	r26, r30
    1702:	55 96       	adiw	r26, 0x15	; 21
    1704:	ed 01       	movw	r28, r26
    1706:	22 97       	sbiw	r28, 0x02	; 2
	    for(int Column = MAXMATRIX_NUMBER_OF_COLUMNS - 1; Column > 0; Column--) { 
			MatrixBuffer[Column] = MatrixBuffer[Column - 1]; 
    1708:	38 81       	ld	r19, Y
    170a:	3e 93       	st	-X, r19
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftRightLL(bool Rotate, bool FillWithZero, bool ShiftToNeighbourModule)
{
	if(ShiftToNeighbourModule) {
	    byte old = MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1];
	    for(int Column = MAXMATRIX_NUMBER_OF_COLUMNS - 1; Column > 0; Column--) { 
    170c:	a8 17       	cp	r26, r24
    170e:	b9 07       	cpc	r27, r25
    1710:	c9 f7       	brne	.-14     	; 0x1704 <_ZN9MaxMatrix12shiftRightLLEbbb+0x5e>
			MatrixBuffer[Column] = MatrixBuffer[Column - 1]; 
		}
	    if(Rotate) MatrixBuffer[0] = old;
    1712:	66 23       	and	r22, r22
    1714:	11 f0       	breq	.+4      	; 0x171a <_ZN9MaxMatrix12shiftRightLLEbbb+0x74>
    1716:	25 83       	std	Z+5, r18	; 0x05
    1718:	02 c0       	rjmp	.+4      	; 0x171e <_ZN9MaxMatrix12shiftRightLLEbbb+0x78>
	    else if(FillWithZero) MatrixBuffer[0] = 0;
    171a:	41 11       	cpse	r20, r1
    171c:	15 82       	std	Z+5, r1	; 0x05
			}
			if(Rotate) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = old;
			else if(FillWithZero) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = 0;
		}
	}
    reload();
    171e:	cf 01       	movw	r24, r30
} /* shiftRightLL */
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
			}
			if(Rotate) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = old;
			else if(FillWithZero) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = 0;
		}
	}
    reload();
    1724:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <_ZN9MaxMatrix6reloadEv>

00001728 <_ZN9MaxMatrix9shiftUpLLEbb>:
 *  \param[in]      Rotate                      activate rotation of the matrix LED states
 *  \param[in]      ShiftToNeighbourModule      shift led states to neighbour module
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftUpLL(bool Rotate, bool ShiftToNeighbourModule)
{	
    1728:	bf 92       	push	r11
    172a:	cf 92       	push	r12
    172c:	df 92       	push	r13
    172e:	ef 92       	push	r14
    1730:	ff 92       	push	r15
    1732:	0f 93       	push	r16
    1734:	1f 93       	push	r17
    1736:	cf 93       	push	r28
    1738:	df 93       	push	r29
    173a:	00 d0       	rcall	.+0      	; 0x173c <_ZN9MaxMatrix9shiftUpLLEbb+0x14>
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	7c 01       	movw	r14, r24
    1742:	d6 2e       	mov	r13, r22
	byte ModuleTopRow = 0;
    1744:	1a 82       	std	Y+2, r1	; 0x02
	byte MatrixTopRow = 0;
    1746:	19 82       	std	Y+1, r1	; 0x01
    1748:	fc 01       	movw	r30, r24
    174a:	35 96       	adiw	r30, 0x05	; 5

	if(ShiftToNeighbourModule) {
    174c:	44 23       	and	r20, r20
    174e:	09 f4       	brne	.+2      	; 0x1752 <_ZN9MaxMatrix9shiftUpLLEbb+0x2a>
    1750:	48 c0       	rjmp	.+144    	; 0x17e2 <_ZN9MaxMatrix9shiftUpLLEbb+0xba>
    1752:	8f 01       	movw	r16, r30
    1754:	c1 2c       	mov	r12, r1
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++)
		{
			if(Module == 0 && Rotate) getRowLL(0, 0, &MatrixTopRow);
    1756:	66 23       	and	r22, r22
    1758:	39 f0       	breq	.+14     	; 0x1768 <_ZN9MaxMatrix9shiftUpLLEbb+0x40>
    175a:	9e 01       	movw	r18, r28
    175c:	2f 5f       	subi	r18, 0xFF	; 255
    175e:	3f 4f       	sbci	r19, 0xFF	; 255
    1760:	40 e0       	ldi	r20, 0x00	; 0
    1762:	60 e0       	ldi	r22, 0x00	; 0
    1764:	0e 94 d7 07 	call	0xfae	; 0xfae <_ZN9MaxMatrix8getRowLLEhhPh>
			getRowLL(Module + 1, 0, &ModuleTopRow);
    1768:	bb 24       	eor	r11, r11
    176a:	b3 94       	inc	r11
    176c:	bc 0c       	add	r11, r12
    176e:	9e 01       	movw	r18, r28
    1770:	2e 5f       	subi	r18, 0xFE	; 254
    1772:	3f 4f       	sbci	r19, 0xFF	; 255
    1774:	40 e0       	ldi	r20, 0x00	; 0
    1776:	6b 2d       	mov	r22, r11
    1778:	c7 01       	movw	r24, r14
    177a:	0e 94 d7 07 	call	0xfae	; 0xfae <_ZN9MaxMatrix8getRowLLEhhPh>
    177e:	f8 01       	movw	r30, r16
			
			for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; Column++) 
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] >>= 1;
    1784:	80 81       	ld	r24, Z
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	95 95       	asr	r25
    178a:	87 95       	ror	r24
    178c:	81 93       	st	Z+, r24
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++)
		{
			if(Module == 0 && Rotate) getRowLL(0, 0, &MatrixTopRow);
			getRowLL(Module + 1, 0, &ModuleTopRow);
			
			for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; Column++) 
    178e:	2f 5f       	subi	r18, 0xFF	; 255
    1790:	3f 4f       	sbci	r19, 0xFF	; 255
    1792:	28 30       	cpi	r18, 0x08	; 8
    1794:	31 05       	cpc	r19, r1
    1796:	b1 f7       	brne	.-20     	; 0x1784 <_ZN9MaxMatrix9shiftUpLLEbb+0x5c>
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] >>= 1;
			
			if(Module == MAXMATRIX_NUMBER_OF_MODULES - 1) {
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	c8 12       	cpse	r12, r24
    179c:	06 c0       	rjmp	.+12     	; 0x17aa <_ZN9MaxMatrix9shiftUpLLEbb+0x82>
				if(Rotate) setRowLL(Module, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, MatrixTopRow);
    179e:	dd 20       	and	r13, r13
    17a0:	51 f0       	breq	.+20     	; 0x17b6 <_ZN9MaxMatrix9shiftUpLLEbb+0x8e>
    17a2:	29 81       	ldd	r18, Y+1	; 0x01
    17a4:	47 e0       	ldi	r20, 0x07	; 7
    17a6:	61 e0       	ldi	r22, 0x01	; 1
    17a8:	03 c0       	rjmp	.+6      	; 0x17b0 <_ZN9MaxMatrix9shiftUpLLEbb+0x88>
			} else {
				setRowLL(Module, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, ModuleTopRow);
    17aa:	2a 81       	ldd	r18, Y+2	; 0x02
    17ac:	47 e0       	ldi	r20, 0x07	; 7
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	c7 01       	movw	r24, r14
    17b2:	0e 94 3f 09 	call	0x127e	; 0x127e <_ZN9MaxMatrix8setRowLLEhhh>
    17b6:	08 5f       	subi	r16, 0xF8	; 248
    17b8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ba:	cc 24       	eor	r12, r12
    17bc:	c3 94       	inc	r12
{	
	byte ModuleTopRow = 0;
	byte MatrixTopRow = 0;

	if(ShiftToNeighbourModule) {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++)
    17be:	82 e0       	ldi	r24, 0x02	; 2
    17c0:	b8 12       	cpse	r11, r24
    17c2:	d2 cf       	rjmp	.-92     	; 0x1768 <_ZN9MaxMatrix9shiftUpLLEbb+0x40>
			bool TopBit = bitRead(MatrixBuffer[Column], 0);
			MatrixBuffer[Column] >>= 1;
			if(Rotate) bitWrite(MatrixBuffer[Column], MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, TopBit);
		}		
	}
    reload();
    17c4:	c7 01       	movw	r24, r14
    17c6:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN9MaxMatrix6reloadEv>
} /* shiftModuleUpLL */
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	1f 91       	pop	r17
    17d4:	0f 91       	pop	r16
    17d6:	ff 90       	pop	r15
    17d8:	ef 90       	pop	r14
    17da:	df 90       	pop	r13
    17dc:	cf 90       	pop	r12
    17de:	bf 90       	pop	r11
    17e0:	08 95       	ret
    17e2:	ac 01       	movw	r20, r24
    17e4:	4b 5e       	subi	r20, 0xEB	; 235
    17e6:	5f 4f       	sbci	r21, 0xFF	; 255
			}
		}
	} else {
		for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS; Column++) 
		{
			bool TopBit = bitRead(MatrixBuffer[Column], 0);
    17e8:	20 81       	ld	r18, Z
			MatrixBuffer[Column] >>= 1;
    17ea:	82 2f       	mov	r24, r18
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	95 95       	asr	r25
    17f0:	87 95       	ror	r24
			if(Rotate) bitWrite(MatrixBuffer[Column], MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, TopBit);
    17f2:	dd 20       	and	r13, r13
    17f4:	11 f0       	breq	.+4      	; 0x17fa <_ZN9MaxMatrix9shiftUpLLEbb+0xd2>
    17f6:	20 fd       	sbrc	r18, 0
    17f8:	80 68       	ori	r24, 0x80	; 128
    17fa:	80 83       	st	Z, r24
    17fc:	31 96       	adiw	r30, 0x01	; 1
			} else {
				setRowLL(Module, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, ModuleTopRow);
			}
		}
	} else {
		for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS; Column++) 
    17fe:	e4 17       	cp	r30, r20
    1800:	f5 07       	cpc	r31, r21
    1802:	91 f7       	brne	.-28     	; 0x17e8 <_ZN9MaxMatrix9shiftUpLLEbb+0xc0>
    1804:	df cf       	rjmp	.-66     	; 0x17c4 <_ZN9MaxMatrix9shiftUpLLEbb+0x9c>

00001806 <_ZN9MaxMatrix11shiftDownLLEbb>:
 *  \param[in]      Rotate                      activate rotation of the matrix LED states
 *  \param[in]      ShiftToNeighbourModule      shift led states to neighbour module
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftDownLL(bool Rotate, bool ShiftToNeighbourModule)
{
    1806:	bf 92       	push	r11
    1808:	cf 92       	push	r12
    180a:	df 92       	push	r13
    180c:	ef 92       	push	r14
    180e:	ff 92       	push	r15
    1810:	0f 93       	push	r16
    1812:	1f 93       	push	r17
    1814:	cf 93       	push	r28
    1816:	df 93       	push	r29
    1818:	00 d0       	rcall	.+0      	; 0x181a <_ZN9MaxMatrix11shiftDownLLEbb+0x14>
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	7c 01       	movw	r14, r24
    1820:	d6 2e       	mov	r13, r22
	byte ModuleBottomRow = 0;
    1822:	1a 82       	std	Y+2, r1	; 0x02
	byte MatrixBottomRow = 0;
    1824:	19 82       	std	Y+1, r1	; 0x01
    1826:	fc 01       	movw	r30, r24
    1828:	35 96       	adiw	r30, 0x05	; 5

	if(ShiftToNeighbourModule) {
    182a:	44 23       	and	r20, r20
    182c:	09 f4       	brne	.+2      	; 0x1830 <_ZN9MaxMatrix11shiftDownLLEbb+0x2a>
    182e:	41 c0       	rjmp	.+130    	; 0x18b2 <_ZN9MaxMatrix11shiftDownLLEbb+0xac>
    1830:	8f 01       	movw	r16, r30
    1832:	c1 2c       	mov	r12, r1
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++)
		{
			if(Module == 0 && Rotate) getRowLL(0, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, &MatrixBottomRow);
    1834:	66 23       	and	r22, r22
    1836:	39 f0       	breq	.+14     	; 0x1846 <_ZN9MaxMatrix11shiftDownLLEbb+0x40>
    1838:	9e 01       	movw	r18, r28
    183a:	2f 5f       	subi	r18, 0xFF	; 255
    183c:	3f 4f       	sbci	r19, 0xFF	; 255
    183e:	47 e0       	ldi	r20, 0x07	; 7
    1840:	60 e0       	ldi	r22, 0x00	; 0
    1842:	0e 94 d7 07 	call	0xfae	; 0xfae <_ZN9MaxMatrix8getRowLLEhhPh>
			getRowLL(Module + 1, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, &ModuleBottomRow);
    1846:	bb 24       	eor	r11, r11
    1848:	b3 94       	inc	r11
    184a:	bc 0c       	add	r11, r12
    184c:	9e 01       	movw	r18, r28
    184e:	2e 5f       	subi	r18, 0xFE	; 254
    1850:	3f 4f       	sbci	r19, 0xFF	; 255
    1852:	47 e0       	ldi	r20, 0x07	; 7
    1854:	6b 2d       	mov	r22, r11
    1856:	c7 01       	movw	r24, r14
    1858:	0e 94 d7 07 	call	0xfae	; 0xfae <_ZN9MaxMatrix8getRowLLEhhPh>
    185c:	f8 01       	movw	r30, r16
			
			for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; Column++)
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	90 e0       	ldi	r25, 0x00	; 0
			MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] <<= 1;
    1862:	20 81       	ld	r18, Z
    1864:	22 0f       	add	r18, r18
    1866:	21 93       	st	Z+, r18
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++)
		{
			if(Module == 0 && Rotate) getRowLL(0, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, &MatrixBottomRow);
			getRowLL(Module + 1, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, &ModuleBottomRow);
			
			for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; Column++)
    1868:	01 96       	adiw	r24, 0x01	; 1
    186a:	88 30       	cpi	r24, 0x08	; 8
    186c:	91 05       	cpc	r25, r1
    186e:	c9 f7       	brne	.-14     	; 0x1862 <_ZN9MaxMatrix11shiftDownLLEbb+0x5c>
			MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] <<= 1;
			
			if(Module == MAXMATRIX_NUMBER_OF_MODULES - 1) {
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	c8 12       	cpse	r12, r24
    1874:	08 c0       	rjmp	.+16     	; 0x1886 <_ZN9MaxMatrix11shiftDownLLEbb+0x80>
				if(Rotate) setRowLL(Module, 0, MatrixBottomRow);
    1876:	dd 20       	and	r13, r13
    1878:	31 f0       	breq	.+12     	; 0x1886 <_ZN9MaxMatrix11shiftDownLLEbb+0x80>
    187a:	29 81       	ldd	r18, Y+1	; 0x01
    187c:	40 e0       	ldi	r20, 0x00	; 0
    187e:	61 e0       	ldi	r22, 0x01	; 1
    1880:	c7 01       	movw	r24, r14
    1882:	0e 94 3f 09 	call	0x127e	; 0x127e <_ZN9MaxMatrix8setRowLLEhhh>
    1886:	08 5f       	subi	r16, 0xF8	; 248
    1888:	1f 4f       	sbci	r17, 0xFF	; 255
    188a:	cc 24       	eor	r12, r12
    188c:	c3 94       	inc	r12
{
	byte ModuleBottomRow = 0;
	byte MatrixBottomRow = 0;

	if(ShiftToNeighbourModule) {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++)
    188e:	82 e0       	ldi	r24, 0x02	; 2
    1890:	b8 12       	cpse	r11, r24
    1892:	d9 cf       	rjmp	.-78     	; 0x1846 <_ZN9MaxMatrix11shiftDownLLEbb+0x40>
		    bool BottomBit = bitRead(MatrixBuffer[Column], MAXMATRIX_ROW_NUMBER_OF_MODULE - 1);
		    MatrixBuffer[Column] <<= 1;
		    if(Rotate) bitWrite(MatrixBuffer[Column], 0, BottomBit);
		}
	}
    reload();
    1894:	c7 01       	movw	r24, r14
    1896:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN9MaxMatrix6reloadEv>
} /* shiftDownLL */
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	1f 91       	pop	r17
    18a4:	0f 91       	pop	r16
    18a6:	ff 90       	pop	r15
    18a8:	ef 90       	pop	r14
    18aa:	df 90       	pop	r13
    18ac:	cf 90       	pop	r12
    18ae:	bf 90       	pop	r11
    18b0:	08 95       	ret
    18b2:	9c 01       	movw	r18, r24
    18b4:	2b 5e       	subi	r18, 0xEB	; 235
    18b6:	3f 4f       	sbci	r19, 0xFF	; 255
			}
		}
	} else {
	    for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS; Column++) 
		{
		    bool BottomBit = bitRead(MatrixBuffer[Column], MAXMATRIX_ROW_NUMBER_OF_MODULE - 1);
    18b8:	90 81       	ld	r25, Z
		    MatrixBuffer[Column] <<= 1;
    18ba:	89 2f       	mov	r24, r25
    18bc:	88 0f       	add	r24, r24
		    if(Rotate) bitWrite(MatrixBuffer[Column], 0, BottomBit);
    18be:	dd 20       	and	r13, r13
    18c0:	11 f0       	breq	.+4      	; 0x18c6 <_ZN9MaxMatrix11shiftDownLLEbb+0xc0>
    18c2:	97 fd       	sbrc	r25, 7
    18c4:	81 60       	ori	r24, 0x01	; 1
    18c6:	80 83       	st	Z, r24
    18c8:	31 96       	adiw	r30, 0x01	; 1
			} else {
				setRowLL(Module, MAXMATRIX_ROW_NUMBER_OF_MODULE, ModuleBottomRow);
			}
		}
	} else {
	    for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS; Column++) 
    18ca:	e2 17       	cp	r30, r18
    18cc:	f3 07       	cpc	r31, r19
    18ce:	a1 f7       	brne	.-24     	; 0x18b8 <_ZN9MaxMatrix11shiftDownLLEbb+0xb2>
    18d0:	e1 cf       	rjmp	.-62     	; 0x1894 <_ZN9MaxMatrix11shiftDownLLEbb+0x8e>

000018d2 <_ZN9MaxMatrix9shiftLeftEbb>:
 *  \param[in]      Rotate          activate rotation of the matrix LED states
 *  \param[in]      FillWithZero    initialize the column on the right side with zero.
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftLeft(bool Rotate, bool FillWithZero)
{
    18d2:	0f 93       	push	r16
    18d4:	1f 93       	push	r17
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	ec 01       	movw	r28, r24
    18dc:	16 2f       	mov	r17, r22
    18de:	04 2f       	mov	r16, r20
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_0) shiftLeftLL(Rotate, FillWithZero, true);
    18e0:	8c 81       	ldd	r24, Y+4	; 0x04
    18e2:	81 11       	cpse	r24, r1
    18e4:	04 c0       	rjmp	.+8      	; 0x18ee <_ZN9MaxMatrix9shiftLeftEbb+0x1c>
    18e6:	21 e0       	ldi	r18, 0x01	; 1
    18e8:	ce 01       	movw	r24, r28
    18ea:	0e 94 16 0b 	call	0x162c	; 0x162c <_ZN9MaxMatrix11shiftLeftLLEbbb>
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_90) shiftUpLL(Rotate, true);
    18ee:	8c 81       	ldd	r24, Y+4	; 0x04
    18f0:	81 30       	cpi	r24, 0x01	; 1
    18f2:	29 f4       	brne	.+10     	; 0x18fe <_ZN9MaxMatrix9shiftLeftEbb+0x2c>
    18f4:	41 e0       	ldi	r20, 0x01	; 1
    18f6:	61 2f       	mov	r22, r17
    18f8:	ce 01       	movw	r24, r28
    18fa:	0e 94 94 0b 	call	0x1728	; 0x1728 <_ZN9MaxMatrix9shiftUpLLEbb>
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_180) shiftRightLL(Rotate, FillWithZero, true);
    18fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1900:	82 30       	cpi	r24, 0x02	; 2
    1902:	31 f4       	brne	.+12     	; 0x1910 <_ZN9MaxMatrix9shiftLeftEbb+0x3e>
    1904:	21 e0       	ldi	r18, 0x01	; 1
    1906:	40 2f       	mov	r20, r16
    1908:	61 2f       	mov	r22, r17
    190a:	ce 01       	movw	r24, r28
    190c:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <_ZN9MaxMatrix12shiftRightLLEbbb>
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_270) shiftDownLL(Rotate, true);
    1910:	8c 81       	ldd	r24, Y+4	; 0x04
    1912:	83 30       	cpi	r24, 0x03	; 3
    1914:	49 f4       	brne	.+18     	; 0x1928 <_ZN9MaxMatrix9shiftLeftEbb+0x56>
    1916:	41 e0       	ldi	r20, 0x01	; 1
    1918:	61 2f       	mov	r22, r17
    191a:	ce 01       	movw	r24, r28

} /* shiftLeft */
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	1f 91       	pop	r17
    1922:	0f 91       	pop	r16
void MaxMatrix::shiftLeft(bool Rotate, bool FillWithZero)
{
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_0) shiftLeftLL(Rotate, FillWithZero, true);
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_90) shiftUpLL(Rotate, true);
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_180) shiftRightLL(Rotate, FillWithZero, true);
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_270) shiftDownLL(Rotate, true);
    1924:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <_ZN9MaxMatrix11shiftDownLLEbb>

} /* shiftLeft */
    1928:	df 91       	pop	r29
    192a:	cf 91       	pop	r28
    192c:	1f 91       	pop	r17
    192e:	0f 91       	pop	r16
    1930:	08 95       	ret

00001932 <_ZN9MaxMatrix13charShiftTaskEv>:
 *                  MAXMATRIX_STATE_CHAR_SHIFT or MAXMATRIX_STATE_STRING_SHIFT to MAXMATRIX_STATE_READY
 *  \return         -
 *  \pre            has to be called from shiftTask()
 *****************************************************************************************************************************************************/
void MaxMatrix::charShiftTask()
{
    1932:	cf 93       	push	r28
    1934:	df 93       	push	r29
    1936:	ec 01       	movw	r28, r24
    if(SpriteShiftCounter <= SpriteBuffer[ASCII_TABLE_SPRITE_WIDTH]) {
    1938:	9c 8d       	ldd	r25, Y+28	; 0x1c
    193a:	8d 89       	ldd	r24, Y+21	; 0x15
    193c:	89 17       	cp	r24, r25
    193e:	b0 f0       	brcs	.+44     	; 0x196c <_ZN9MaxMatrix13charShiftTaskEv+0x3a>
        shiftLeft(false, true);
    1940:	41 e0       	ldi	r20, 0x01	; 1
    1942:	60 e0       	ldi	r22, 0x00	; 0
    1944:	ce 01       	movw	r24, r28
    1946:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <_ZN9MaxMatrix9shiftLeftEbb>
        setSprite(MAXMATRIX_NUMBER_OF_COLUMNS-SpriteShiftCounter, 0, &SpriteBuffer);
    194a:	9e 01       	movw	r18, r28
    194c:	2b 5e       	subi	r18, 0xEB	; 235
    194e:	3f 4f       	sbci	r19, 0xFF	; 255
    1950:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1952:	60 e1       	ldi	r22, 0x10	; 16
    1954:	70 e0       	ldi	r23, 0x00	; 0
    1956:	68 1b       	sub	r22, r24
    1958:	71 09       	sbc	r23, r1
    195a:	40 e0       	ldi	r20, 0x00	; 0
    195c:	50 e0       	ldi	r21, 0x00	; 0
    195e:	ce 01       	movw	r24, r28
    1960:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh>
        SpriteShiftCounter++;
    1964:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1966:	8f 5f       	subi	r24, 0xFF	; 255
    1968:	8c 8f       	std	Y+28, r24	; 0x1c
    196a:	06 c0       	rjmp	.+12     	; 0x1978 <_ZN9MaxMatrix13charShiftTaskEv+0x46>
    } else {
        if (MAXMATRIX_STATE_CHAR_SHIFT == State) State = MAXMATRIX_STATE_READY;
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	84 30       	cpi	r24, 0x04	; 4
    1970:	11 f4       	brne	.+4      	; 0x1976 <_ZN9MaxMatrix13charShiftTaskEv+0x44>
    1972:	82 e0       	ldi	r24, 0x02	; 2
    1974:	8b 83       	std	Y+3, r24	; 0x03
        SpriteShiftCounter = 0;
    1976:	1c 8e       	std	Y+28, r1	; 0x1c
    }
} /* charShiftTask */
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	08 95       	ret

0000197e <_ZN9MaxMatrix15stringShiftTaskEv>:
 *                  MAXMATRIX_STATE_CHAR_SHIFT or MAXMATRIX_STATE_STRING_SHIFT to MAXMATRIX_STATE_READY
 *  \return         -
 *  \pre            has to be called from shiftTask()
 *****************************************************************************************************************************************************/
void MaxMatrix::stringShiftTask()
{
    197e:	0f 93       	push	r16
    1980:	1f 93       	push	r17
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	1f 92       	push	r1
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	8c 01       	movw	r16, r24
    spriteIndexType SpriteIndex;
    
    if(SpriteShiftCounter == 0)
    198e:	dc 01       	movw	r26, r24
    1990:	5c 96       	adiw	r26, 0x1c	; 28
    1992:	8c 91       	ld	r24, X
    1994:	5c 97       	sbiw	r26, 0x1c	; 28
    1996:	81 11       	cpse	r24, r1
    1998:	30 c0       	rjmp	.+96     	; 0x19fa <_ZN9MaxMatrix15stringShiftTaskEv+0x7c>
    {
        if(*String != '\0') {
    199a:	5d 96       	adiw	r26, 0x1d	; 29
    199c:	ed 91       	ld	r30, X+
    199e:	fc 91       	ld	r31, X
    19a0:	5e 97       	sbiw	r26, 0x1e	; 30
    19a2:	60 81       	ld	r22, Z
    19a4:	66 23       	and	r22, r22
    19a6:	21 f1       	breq	.+72     	; 0x19f0 <_ZN9MaxMatrix15stringShiftTaskEv+0x72>
            convertCharToSprite(*String, &SpriteIndex);
    19a8:	ae 01       	movw	r20, r28
    19aa:	4f 5f       	subi	r20, 0xFF	; 255
    19ac:	5f 4f       	sbci	r21, 0xFF	; 255
    19ae:	c8 01       	movw	r24, r16
    19b0:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_ZN9MaxMatrix19convertCharToSpriteEcPh>
            getSprite(SpriteIndex, &SpriteBuffer);
    19b4:	a8 01       	movw	r20, r16
    19b6:	4b 5e       	subi	r20, 0xEB	; 235
    19b8:	5f 4f       	sbci	r21, 0xFF	; 255
    19ba:	69 81       	ldd	r22, Y+1	; 0x01
    19bc:	c8 01       	movw	r24, r16
    19be:	0e 94 13 05 	call	0xa26	; 0xa26 <_ZN9MaxMatrix9getSpriteEhPA7_h>
            if(SpriteShiftCounter != 0) shiftLeft(false, true);
    19c2:	f8 01       	movw	r30, r16
    19c4:	84 8d       	ldd	r24, Z+28	; 0x1c
    19c6:	88 23       	and	r24, r24
    19c8:	29 f0       	breq	.+10     	; 0x19d4 <_ZN9MaxMatrix15stringShiftTaskEv+0x56>
    19ca:	41 e0       	ldi	r20, 0x01	; 1
    19cc:	60 e0       	ldi	r22, 0x00	; 0
    19ce:	c8 01       	movw	r24, r16
    19d0:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <_ZN9MaxMatrix9shiftLeftEbb>
            SpriteShiftCounter = 1;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	d8 01       	movw	r26, r16
    19d8:	5c 96       	adiw	r26, 0x1c	; 28
    19da:	8c 93       	st	X, r24
            charShiftTask();
    19dc:	c8 01       	movw	r24, r16
    19de:	0e 94 99 0c 	call	0x1932	; 0x1932 <_ZN9MaxMatrix13charShiftTaskEv>
            String++;
    19e2:	f8 01       	movw	r30, r16
    19e4:	85 8d       	ldd	r24, Z+29	; 0x1d
    19e6:	96 8d       	ldd	r25, Z+30	; 0x1e
    19e8:	01 96       	adiw	r24, 0x01	; 1
    19ea:	96 8f       	std	Z+30, r25	; 0x1e
    19ec:	85 8f       	std	Z+29, r24	; 0x1d
    19ee:	11 c0       	rjmp	.+34     	; 0x1a12 <_ZN9MaxMatrix15stringShiftTaskEv+0x94>
        } else {
            State = MAXMATRIX_STATE_READY;
    19f0:	82 e0       	ldi	r24, 0x02	; 2
    19f2:	d8 01       	movw	r26, r16
    19f4:	13 96       	adiw	r26, 0x03	; 3
    19f6:	8c 93       	st	X, r24
    19f8:	07 c0       	rjmp	.+14     	; 0x1a08 <_ZN9MaxMatrix15stringShiftTaskEv+0x8a>
            shiftLeft(false, true);
        }
    } else {
        charShiftTask();
    19fa:	c8 01       	movw	r24, r16
    19fc:	0e 94 99 0c 	call	0x1932	; 0x1932 <_ZN9MaxMatrix13charShiftTaskEv>
        if(SpriteShiftCounter == 0) shiftLeft(false, true);
    1a00:	f8 01       	movw	r30, r16
    1a02:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a04:	81 11       	cpse	r24, r1
    1a06:	05 c0       	rjmp	.+10     	; 0x1a12 <_ZN9MaxMatrix15stringShiftTaskEv+0x94>
    1a08:	41 e0       	ldi	r20, 0x01	; 1
    1a0a:	60 e0       	ldi	r22, 0x00	; 0
    1a0c:	c8 01       	movw	r24, r16
    1a0e:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <_ZN9MaxMatrix9shiftLeftEbb>
    }
} /* stringShiftTask */
    1a12:	0f 90       	pop	r0
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	08 95       	ret

00001a1e <_ZN9MaxMatrix9shiftTaskEv>:
 *                  MAXMATRIX_STATE_CHAR_SHIFT or MAXMATRIX_STATE_STRING_SHIFT to MAXMATRIX_STATE_READY
 *  \return         -
 *  \pre            setCharWithShift or setTextWithShift must be called first
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftTask()
{
    1a1e:	cf 93       	push	r28
    1a20:	df 93       	push	r29
    1a22:	ec 01       	movw	r28, r24
    if(MAXMATRIX_STATE_STRING_SHIFT == State) stringShiftTask();
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	83 30       	cpi	r24, 0x03	; 3
    1a28:	19 f4       	brne	.+6      	; 0x1a30 <_ZN9MaxMatrix9shiftTaskEv+0x12>
    1a2a:	ce 01       	movw	r24, r28
    1a2c:	0e 94 bf 0c 	call	0x197e	; 0x197e <_ZN9MaxMatrix15stringShiftTaskEv>
    if(MAXMATRIX_STATE_CHAR_SHIFT == State) charShiftTask();
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	84 30       	cpi	r24, 0x04	; 4
    1a34:	29 f4       	brne	.+10     	; 0x1a40 <_ZN9MaxMatrix9shiftTaskEv+0x22>
    1a36:	ce 01       	movw	r24, r28
} /* shiftTask */
    1a38:	df 91       	pop	r29
    1a3a:	cf 91       	pop	r28
 *  \pre            setCharWithShift or setTextWithShift must be called first
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftTask()
{
    if(MAXMATRIX_STATE_STRING_SHIFT == State) stringShiftTask();
    if(MAXMATRIX_STATE_CHAR_SHIFT == State) charShiftTask();
    1a3c:	0c 94 99 0c 	jmp	0x1932	; 0x1932 <_ZN9MaxMatrix13charShiftTaskEv>
} /* shiftTask */
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	08 95       	ret

00001a46 <__vector_13>:
  else if(pin == 2 || pin == 10) {
    DDRB |= _BV(PORTB2);
    TCCR1A |= _BV(COM1B1);
  }
  setPwmDuty(pin, duty);
  resume();			// Lex - make sure the clock is running.  We don't want to restart the count, in case we are starting the second WGM
    1a46:	1f 92       	push	r1
    1a48:	0f 92       	push	r0
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	0f 92       	push	r0
    1a4e:	11 24       	eor	r1, r1
    1a50:	2f 93       	push	r18
    1a52:	3f 93       	push	r19
    1a54:	4f 93       	push	r20
    1a56:	5f 93       	push	r21
    1a58:	6f 93       	push	r22
    1a5a:	7f 93       	push	r23
    1a5c:	8f 93       	push	r24
    1a5e:	9f 93       	push	r25
    1a60:	af 93       	push	r26
    1a62:	bf 93       	push	r27
    1a64:	ef 93       	push	r30
    1a66:	ff 93       	push	r31
    1a68:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <Timer1+0x4>
    1a6c:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <Timer1+0x5>
    1a70:	09 95       	icall
    1a72:	ff 91       	pop	r31
    1a74:	ef 91       	pop	r30
    1a76:	bf 91       	pop	r27
    1a78:	af 91       	pop	r26
    1a7a:	9f 91       	pop	r25
    1a7c:	8f 91       	pop	r24
    1a7e:	7f 91       	pop	r23
    1a80:	6f 91       	pop	r22
    1a82:	5f 91       	pop	r21
    1a84:	4f 91       	pop	r20
    1a86:	3f 91       	pop	r19
    1a88:	2f 91       	pop	r18
    1a8a:	0f 90       	pop	r0
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	0f 90       	pop	r0
    1a90:	1f 90       	pop	r1
    1a92:	18 95       	reti

00001a94 <_ZN8TimerOne9setPeriodEl>:
    1a94:	fc 01       	movw	r30, r24
    1a96:	a3 e0       	ldi	r26, 0x03	; 3
    1a98:	44 0f       	add	r20, r20
    1a9a:	55 1f       	adc	r21, r21
    1a9c:	66 1f       	adc	r22, r22
    1a9e:	77 1f       	adc	r23, r23
    1aa0:	aa 95       	dec	r26
    1aa2:	d1 f7       	brne	.-12     	; 0x1a98 <_ZN8TimerOne9setPeriodEl+0x4>
    1aa4:	41 15       	cp	r20, r1
    1aa6:	51 05       	cpc	r21, r1
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	68 07       	cpc	r22, r24
    1aac:	71 05       	cpc	r23, r1
    1aae:	14 f4       	brge	.+4      	; 0x1ab4 <_ZN8TimerOne9setPeriodEl+0x20>
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	0e c0       	rjmp	.+28     	; 0x1ad0 <_ZN8TimerOne9setPeriodEl+0x3c>
    1ab4:	33 e0       	ldi	r19, 0x03	; 3
    1ab6:	75 95       	asr	r23
    1ab8:	67 95       	ror	r22
    1aba:	57 95       	ror	r21
    1abc:	47 95       	ror	r20
    1abe:	3a 95       	dec	r19
    1ac0:	d1 f7       	brne	.-12     	; 0x1ab6 <_ZN8TimerOne9setPeriodEl+0x22>
    1ac2:	41 15       	cp	r20, r1
    1ac4:	51 05       	cpc	r21, r1
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	68 07       	cpc	r22, r24
    1aca:	71 05       	cpc	r23, r1
    1acc:	1c f4       	brge	.+6      	; 0x1ad4 <_ZN8TimerOne9setPeriodEl+0x40>
    1ace:	82 e0       	ldi	r24, 0x02	; 2
    1ad0:	82 83       	std	Z+2, r24	; 0x02
    1ad2:	31 c0       	rjmp	.+98     	; 0x1b36 <_ZN8TimerOne9setPeriodEl+0xa2>
    1ad4:	23 e0       	ldi	r18, 0x03	; 3
    1ad6:	75 95       	asr	r23
    1ad8:	67 95       	ror	r22
    1ada:	57 95       	ror	r21
    1adc:	47 95       	ror	r20
    1ade:	2a 95       	dec	r18
    1ae0:	d1 f7       	brne	.-12     	; 0x1ad6 <_ZN8TimerOne9setPeriodEl+0x42>
    1ae2:	41 15       	cp	r20, r1
    1ae4:	51 05       	cpc	r21, r1
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	68 07       	cpc	r22, r24
    1aea:	71 05       	cpc	r23, r1
    1aec:	14 f4       	brge	.+4      	; 0x1af2 <_ZN8TimerOne9setPeriodEl+0x5e>
    1aee:	83 e0       	ldi	r24, 0x03	; 3
    1af0:	ef cf       	rjmp	.-34     	; 0x1ad0 <_ZN8TimerOne9setPeriodEl+0x3c>
    1af2:	92 e0       	ldi	r25, 0x02	; 2
    1af4:	75 95       	asr	r23
    1af6:	67 95       	ror	r22
    1af8:	57 95       	ror	r21
    1afa:	47 95       	ror	r20
    1afc:	9a 95       	dec	r25
    1afe:	d1 f7       	brne	.-12     	; 0x1af4 <_ZN8TimerOne9setPeriodEl+0x60>
    1b00:	41 15       	cp	r20, r1
    1b02:	51 05       	cpc	r21, r1
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	68 07       	cpc	r22, r24
    1b08:	71 05       	cpc	r23, r1
    1b0a:	14 f4       	brge	.+4      	; 0x1b10 <_ZN8TimerOne9setPeriodEl+0x7c>
    1b0c:	84 e0       	ldi	r24, 0x04	; 4
    1b0e:	e0 cf       	rjmp	.-64     	; 0x1ad0 <_ZN8TimerOne9setPeriodEl+0x3c>
    1b10:	82 e0       	ldi	r24, 0x02	; 2
    1b12:	75 95       	asr	r23
    1b14:	67 95       	ror	r22
    1b16:	57 95       	ror	r21
    1b18:	47 95       	ror	r20
    1b1a:	8a 95       	dec	r24
    1b1c:	d1 f7       	brne	.-12     	; 0x1b12 <_ZN8TimerOne9setPeriodEl+0x7e>
    1b1e:	85 e0       	ldi	r24, 0x05	; 5
    1b20:	82 83       	std	Z+2, r24	; 0x02
    1b22:	41 15       	cp	r20, r1
    1b24:	51 05       	cpc	r21, r1
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	68 07       	cpc	r22, r24
    1b2a:	71 05       	cpc	r23, r1
    1b2c:	24 f0       	brlt	.+8      	; 0x1b36 <_ZN8TimerOne9setPeriodEl+0xa2>
    1b2e:	4f ef       	ldi	r20, 0xFF	; 255
    1b30:	5f ef       	ldi	r21, 0xFF	; 255
    1b32:	60 e0       	ldi	r22, 0x00	; 0
    1b34:	70 e0       	ldi	r23, 0x00	; 0
    1b36:	8f b7       	in	r24, 0x3f	; 63
    1b38:	83 83       	std	Z+3, r24	; 0x03
    1b3a:	f8 94       	cli
    1b3c:	51 83       	std	Z+1, r21	; 0x01
    1b3e:	40 83       	st	Z, r20
    1b40:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1b44:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    1b48:	83 81       	ldd	r24, Z+3	; 0x03
    1b4a:	8f bf       	out	0x3f, r24	; 63
    1b4c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1b50:	88 7f       	andi	r24, 0xF8	; 248
    1b52:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1b56:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1b5a:	82 81       	ldd	r24, Z+2	; 0x02
    1b5c:	89 2b       	or	r24, r25
    1b5e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1b62:	08 95       	ret

00001b64 <_ZN8TimerOne10initializeEl>:
    1b64:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1b68:	20 e1       	ldi	r18, 0x10	; 16
    1b6a:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1b6e:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <_ZN8TimerOne9setPeriodEl>

00001b72 <_ZN8TimerOne6resumeEv>:
    1b72:	e1 e8       	ldi	r30, 0x81	; 129
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	20 81       	ld	r18, Z
    1b78:	dc 01       	movw	r26, r24
    1b7a:	12 96       	adiw	r26, 0x02	; 2
    1b7c:	8c 91       	ld	r24, X
    1b7e:	82 2b       	or	r24, r18
    1b80:	80 83       	st	Z, r24
    1b82:	08 95       	ret

00001b84 <_ZN8TimerOne15attachInterruptEPFvvEl>:
  if(pin == 1 || pin == 9)       TCCR1A &= ~_BV(COM1A1);   // clear the bit that enables pwm on PB1
  else if(pin == 2 || pin == 10) TCCR1A &= ~_BV(COM1B1);   // clear the bit that enables pwm on PB2
}

void TimerOne::attachInterrupt(void (*isr)(), long microseconds)
{
    1b84:	0f 93       	push	r16
    1b86:	1f 93       	push	r17
    1b88:	cf 93       	push	r28
    1b8a:	df 93       	push	r29
    1b8c:	ec 01       	movw	r28, r24
    1b8e:	8b 01       	movw	r16, r22
    1b90:	ba 01       	movw	r22, r20
    1b92:	a9 01       	movw	r20, r18
  if(microseconds > 0) setPeriod(microseconds);
    1b94:	14 16       	cp	r1, r20
    1b96:	15 06       	cpc	r1, r21
    1b98:	16 06       	cpc	r1, r22
    1b9a:	17 06       	cpc	r1, r23
    1b9c:	14 f4       	brge	.+4      	; 0x1ba2 <_ZN8TimerOne15attachInterruptEPFvvEl+0x1e>
    1b9e:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <_ZN8TimerOne9setPeriodEl>
  isrCallback = isr;                                       // register the user's callback with the real ISR
    1ba2:	1d 83       	std	Y+5, r17	; 0x05
    1ba4:	0c 83       	std	Y+4, r16	; 0x04
  TIMSK1 = _BV(TOIE1);                                     // sets the timer overflow interrupt enable bit
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	// might be running with interrupts disabled (eg inside an ISR), so don't touch the global state
//  sei();
  resume();												
    1bac:	ce 01       	movw	r24, r28
}
    1bae:	df 91       	pop	r29
    1bb0:	cf 91       	pop	r28
    1bb2:	1f 91       	pop	r17
    1bb4:	0f 91       	pop	r16
  if(microseconds > 0) setPeriod(microseconds);
  isrCallback = isr;                                       // register the user's callback with the real ISR
  TIMSK1 = _BV(TOIE1);                                     // sets the timer overflow interrupt enable bit
	// might be running with interrupts disabled (eg inside an ISR), so don't touch the global state
//  sei();
  resume();												
    1bb6:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <_ZN8TimerOne6resumeEv>

00001bba <__vector_9>:

/******************************************************************************************************************************************************
  I S R   F U N C T I O N S
******************************************************************************************************************************************************/
ISR(TIMER2_OVF_vect)
{
    1bba:	1f 92       	push	r1
    1bbc:	0f 92       	push	r0
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	0f 92       	push	r0
    1bc2:	11 24       	eor	r1, r1
    1bc4:	2f 93       	push	r18
    1bc6:	3f 93       	push	r19
    1bc8:	4f 93       	push	r20
    1bca:	5f 93       	push	r21
    1bcc:	6f 93       	push	r22
    1bce:	7f 93       	push	r23
    1bd0:	8f 93       	push	r24
    1bd2:	9f 93       	push	r25
    1bd4:	af 93       	push	r26
    1bd6:	bf 93       	push	r27
    1bd8:	ef 93       	push	r30
    1bda:	ff 93       	push	r31
	Timer2.TimerOverflowCallback();
    1bdc:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <Timer2+0x4>
    1be0:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <Timer2+0x5>
    1be4:	09 95       	icall
}
    1be6:	ff 91       	pop	r31
    1be8:	ef 91       	pop	r30
    1bea:	bf 91       	pop	r27
    1bec:	af 91       	pop	r26
    1bee:	9f 91       	pop	r25
    1bf0:	8f 91       	pop	r24
    1bf2:	7f 91       	pop	r23
    1bf4:	6f 91       	pop	r22
    1bf6:	5f 91       	pop	r21
    1bf8:	4f 91       	pop	r20
    1bfa:	3f 91       	pop	r19
    1bfc:	2f 91       	pop	r18
    1bfe:	0f 90       	pop	r0
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	0f 90       	pop	r0
    1c04:	1f 90       	pop	r1
    1c06:	18 95       	reti

00001c08 <_GLOBAL__sub_I_Timer2>:
 *    
 *  \return         -
 *****************************************************************************************************************************************************/
TimerTwo::TimerTwo()
{
	State = TIMERTWO_STATE_NONE;
    1c08:	e0 ec       	ldi	r30, 0xC0	; 192
    1c0a:	f1 e0       	ldi	r31, 0x01	; 1
    1c0c:	10 82       	st	Z, r1
	TimerOverflowCallback = NULL;
    1c0e:	15 82       	std	Z+5, r1	; 0x05
    1c10:	14 82       	std	Z+4, r1	; 0x04
	ClockSelectBitGroup = TIMERTWO_REG_CS_NO_CLOCK;
    1c12:	11 82       	std	Z+1, r1	; 0x01
    1c14:	08 95       	ret

00001c16 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1c16:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1c18:	91 8d       	ldd	r25, Z+25	; 0x19
    1c1a:	22 8d       	ldd	r18, Z+26	; 0x1a
    1c1c:	89 2f       	mov	r24, r25
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	80 5c       	subi	r24, 0xC0	; 192
    1c22:	9f 4f       	sbci	r25, 0xFF	; 255
    1c24:	82 1b       	sub	r24, r18
    1c26:	91 09       	sbc	r25, r1
}
    1c28:	8f 73       	andi	r24, 0x3F	; 63
    1c2a:	99 27       	eor	r25, r25
    1c2c:	08 95       	ret

00001c2e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1c2e:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1c30:	91 8d       	ldd	r25, Z+25	; 0x19
    1c32:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c34:	98 17       	cp	r25, r24
    1c36:	31 f0       	breq	.+12     	; 0x1c44 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1c38:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c3a:	e8 0f       	add	r30, r24
    1c3c:	f1 1d       	adc	r31, r1
    1c3e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1c44:	8f ef       	ldi	r24, 0xFF	; 255
    1c46:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1c48:	08 95       	ret

00001c4a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1c4a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1c4c:	91 8d       	ldd	r25, Z+25	; 0x19
    1c4e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c50:	98 17       	cp	r25, r24
    1c52:	61 f0       	breq	.+24     	; 0x1c6c <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1c54:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c56:	df 01       	movw	r26, r30
    1c58:	a8 0f       	add	r26, r24
    1c5a:	b1 1d       	adc	r27, r1
    1c5c:	5d 96       	adiw	r26, 0x1d	; 29
    1c5e:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1c60:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c62:	9f 5f       	subi	r25, 0xFF	; 255
    1c64:	9f 73       	andi	r25, 0x3F	; 63
    1c66:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1c6c:	8f ef       	ldi	r24, 0xFF	; 255
    1c6e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1c70:	08 95       	ret

00001c72 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1c72:	8f e8       	ldi	r24, 0x8F	; 143
    1c74:	9f e0       	ldi	r25, 0x0F	; 15
    1c76:	89 2b       	or	r24, r25
    1c78:	49 f0       	breq	.+18     	; 0x1c8c <_Z14serialEventRunv+0x1a>
    1c7a:	89 e8       	ldi	r24, 0x89	; 137
    1c7c:	94 e0       	ldi	r25, 0x04	; 4
    1c7e:	89 2b       	or	r24, r25
    1c80:	29 f0       	breq	.+10     	; 0x1c8c <_Z14serialEventRunv+0x1a>
    1c82:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_Z17Serial0_availablev>
    1c86:	81 11       	cpse	r24, r1
    1c88:	0c 94 89 04 	jmp	0x912	; 0x912 <_Z11serialEventv>
    1c8c:	08 95       	ret

00001c8e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1c8e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1c90:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c92:	df 01       	movw	r26, r30
    1c94:	a8 0f       	add	r26, r24
    1c96:	b1 1d       	adc	r27, r1
    1c98:	a3 5a       	subi	r26, 0xA3	; 163
    1c9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c9c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1c9e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	01 96       	adiw	r24, 0x01	; 1
    1ca4:	8f 73       	andi	r24, 0x3F	; 63
    1ca6:	99 27       	eor	r25, r25
    1ca8:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1caa:	a6 89       	ldd	r26, Z+22	; 0x16
    1cac:	b7 89       	ldd	r27, Z+23	; 0x17
    1cae:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1cb0:	a0 89       	ldd	r26, Z+16	; 0x10
    1cb2:	b1 89       	ldd	r27, Z+17	; 0x11
    1cb4:	8c 91       	ld	r24, X
    1cb6:	80 64       	ori	r24, 0x40	; 64
    1cb8:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1cba:	93 8d       	ldd	r25, Z+27	; 0x1b
    1cbc:	84 8d       	ldd	r24, Z+28	; 0x1c
    1cbe:	98 13       	cpse	r25, r24
    1cc0:	06 c0       	rjmp	.+12     	; 0x1cce <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1cc2:	02 88       	ldd	r0, Z+18	; 0x12
    1cc4:	f3 89       	ldd	r31, Z+19	; 0x13
    1cc6:	e0 2d       	mov	r30, r0
    1cc8:	80 81       	ld	r24, Z
    1cca:	8f 7d       	andi	r24, 0xDF	; 223
    1ccc:	80 83       	st	Z, r24
    1cce:	08 95       	ret

00001cd0 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1cd0:	cf 93       	push	r28
    1cd2:	df 93       	push	r29
    1cd4:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1cd6:	88 8d       	ldd	r24, Y+24	; 0x18
    1cd8:	88 23       	and	r24, r24
    1cda:	c9 f0       	breq	.+50     	; 0x1d0e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1cdc:	ea 89       	ldd	r30, Y+18	; 0x12
    1cde:	fb 89       	ldd	r31, Y+19	; 0x13
    1ce0:	80 81       	ld	r24, Z
    1ce2:	85 fd       	sbrc	r24, 5
    1ce4:	05 c0       	rjmp	.+10     	; 0x1cf0 <_ZN14HardwareSerial5flushEv+0x20>
    1ce6:	a8 89       	ldd	r26, Y+16	; 0x10
    1ce8:	b9 89       	ldd	r27, Y+17	; 0x11
    1cea:	8c 91       	ld	r24, X
    1cec:	86 fd       	sbrc	r24, 6
    1cee:	0f c0       	rjmp	.+30     	; 0x1d0e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	07 fc       	sbrc	r0, 7
    1cf4:	f5 cf       	rjmp	.-22     	; 0x1ce0 <_ZN14HardwareSerial5flushEv+0x10>
    1cf6:	80 81       	ld	r24, Z
    1cf8:	85 ff       	sbrs	r24, 5
    1cfa:	f2 cf       	rjmp	.-28     	; 0x1ce0 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1cfc:	a8 89       	ldd	r26, Y+16	; 0x10
    1cfe:	b9 89       	ldd	r27, Y+17	; 0x11
    1d00:	8c 91       	ld	r24, X
    1d02:	85 ff       	sbrs	r24, 5
    1d04:	ed cf       	rjmp	.-38     	; 0x1ce0 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1d06:	ce 01       	movw	r24, r28
    1d08:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1d0c:	e7 cf       	rjmp	.-50     	; 0x1cdc <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	08 95       	ret

00001d14 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1d14:	ef 92       	push	r14
    1d16:	ff 92       	push	r15
    1d18:	0f 93       	push	r16
    1d1a:	1f 93       	push	r17
    1d1c:	cf 93       	push	r28
    1d1e:	df 93       	push	r29
    1d20:	ec 01       	movw	r28, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1d22:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d24:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d26:	98 13       	cpse	r25, r24
    1d28:	05 c0       	rjmp	.+10     	; 0x1d34 <_ZN14HardwareSerial5writeEh+0x20>
    1d2a:	e8 89       	ldd	r30, Y+16	; 0x10
    1d2c:	f9 89       	ldd	r31, Y+17	; 0x11
    1d2e:	80 81       	ld	r24, Z
    1d30:	85 fd       	sbrc	r24, 5
    1d32:	27 c0       	rjmp	.+78     	; 0x1d82 <_ZN14HardwareSerial5writeEh+0x6e>
    1d34:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1d36:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1d38:	10 e0       	ldi	r17, 0x00	; 0
    1d3a:	0f 5f       	subi	r16, 0xFF	; 255
    1d3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3e:	0f 73       	andi	r16, 0x3F	; 63
    1d40:	11 27       	eor	r17, r17
    1d42:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1d44:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d46:	e8 12       	cpse	r14, r24
    1d48:	0c c0       	rjmp	.+24     	; 0x1d62 <_ZN14HardwareSerial5writeEh+0x4e>
    if (bit_is_clear(SREG, SREG_I)) {
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	07 fc       	sbrc	r0, 7
    1d4e:	fa cf       	rjmp	.-12     	; 0x1d44 <_ZN14HardwareSerial5writeEh+0x30>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1d50:	e8 89       	ldd	r30, Y+16	; 0x10
    1d52:	f9 89       	ldd	r31, Y+17	; 0x11
    1d54:	80 81       	ld	r24, Z
    1d56:	85 ff       	sbrs	r24, 5
    1d58:	f5 cf       	rjmp	.-22     	; 0x1d44 <_ZN14HardwareSerial5writeEh+0x30>
	_tx_udr_empty_irq();
    1d5a:	ce 01       	movw	r24, r28
    1d5c:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1d60:	f1 cf       	rjmp	.-30     	; 0x1d44 <_ZN14HardwareSerial5writeEh+0x30>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1d62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d64:	fe 01       	movw	r30, r28
    1d66:	e8 0f       	add	r30, r24
    1d68:	f1 1d       	adc	r31, r1
    1d6a:	e3 5a       	subi	r30, 0xA3	; 163
    1d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6e:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1d70:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1d72:	ea 89       	ldd	r30, Y+18	; 0x12
    1d74:	fb 89       	ldd	r31, Y+19	; 0x13
    1d76:	80 81       	ld	r24, Z
    1d78:	80 62       	ori	r24, 0x20	; 32
    1d7a:	80 83       	st	Z, r24
  _written = true;
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	88 8f       	std	Y+24, r24	; 0x18
    1d80:	08 c0       	rjmp	.+16     	; 0x1d92 <_ZN14HardwareSerial5writeEh+0x7e>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1d82:	ee 89       	ldd	r30, Y+22	; 0x16
    1d84:	ff 89       	ldd	r31, Y+23	; 0x17
    1d86:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1d88:	e8 89       	ldd	r30, Y+16	; 0x10
    1d8a:	f9 89       	ldd	r31, Y+17	; 0x11
    1d8c:	80 81       	ld	r24, Z
    1d8e:	80 64       	ori	r24, 0x40	; 64
    1d90:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	df 91       	pop	r29
    1d98:	cf 91       	pop	r28
    1d9a:	1f 91       	pop	r17
    1d9c:	0f 91       	pop	r16
    1d9e:	ff 90       	pop	r15
    1da0:	ef 90       	pop	r14
    1da2:	08 95       	ret

00001da4 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1da4:	cf 92       	push	r12
    1da6:	df 92       	push	r13
    1da8:	ef 92       	push	r14
    1daa:	ff 92       	push	r15
    1dac:	1f 93       	push	r17
    1dae:	cf 93       	push	r28
    1db0:	df 93       	push	r29
    1db2:	ec 01       	movw	r28, r24
    1db4:	6a 01       	movw	r12, r20
    1db6:	7b 01       	movw	r14, r22
    1db8:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1dba:	e8 89       	ldd	r30, Y+16	; 0x10
    1dbc:	f9 89       	ldd	r31, Y+17	; 0x11
    1dbe:	82 e0       	ldi	r24, 0x02	; 2
    1dc0:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1dc2:	41 15       	cp	r20, r1
    1dc4:	51 4e       	sbci	r21, 0xE1	; 225
    1dc6:	61 05       	cpc	r22, r1
    1dc8:	71 05       	cpc	r23, r1
    1dca:	b1 f0       	breq	.+44     	; 0x1df8 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1dcc:	60 e0       	ldi	r22, 0x00	; 0
    1dce:	79 e0       	ldi	r23, 0x09	; 9
    1dd0:	8d e3       	ldi	r24, 0x3D	; 61
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	a7 01       	movw	r20, r14
    1dd6:	96 01       	movw	r18, r12
    1dd8:	0e 94 ca 11 	call	0x2394	; 0x2394 <__udivmodsi4>
    1ddc:	da 01       	movw	r26, r20
    1dde:	c9 01       	movw	r24, r18
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	a1 09       	sbc	r26, r1
    1de4:	b1 09       	sbc	r27, r1
    1de6:	b6 95       	lsr	r27
    1de8:	a7 95       	ror	r26
    1dea:	97 95       	ror	r25
    1dec:	87 95       	ror	r24
    1dee:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1df0:	41 15       	cp	r20, r1
    1df2:	80 e1       	ldi	r24, 0x10	; 16
    1df4:	58 07       	cpc	r21, r24
    1df6:	a8 f0       	brcs	.+42     	; 0x1e22 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1df8:	e8 89       	ldd	r30, Y+16	; 0x10
    1dfa:	f9 89       	ldd	r31, Y+17	; 0x11
    1dfc:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1dfe:	60 e8       	ldi	r22, 0x80	; 128
    1e00:	74 e8       	ldi	r23, 0x84	; 132
    1e02:	8e e1       	ldi	r24, 0x1E	; 30
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	a7 01       	movw	r20, r14
    1e08:	96 01       	movw	r18, r12
    1e0a:	0e 94 ca 11 	call	0x2394	; 0x2394 <__udivmodsi4>
    1e0e:	ba 01       	movw	r22, r20
    1e10:	a9 01       	movw	r20, r18
    1e12:	41 50       	subi	r20, 0x01	; 1
    1e14:	51 09       	sbc	r21, r1
    1e16:	61 09       	sbc	r22, r1
    1e18:	71 09       	sbc	r23, r1
    1e1a:	76 95       	lsr	r23
    1e1c:	67 95       	ror	r22
    1e1e:	57 95       	ror	r21
    1e20:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1e22:	ec 85       	ldd	r30, Y+12	; 0x0c
    1e24:	fd 85       	ldd	r31, Y+13	; 0x0d
    1e26:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    1e28:	ee 85       	ldd	r30, Y+14	; 0x0e
    1e2a:	ff 85       	ldd	r31, Y+15	; 0x0f
    1e2c:	40 83       	st	Z, r20

  _written = false;
    1e2e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1e30:	ec 89       	ldd	r30, Y+20	; 0x14
    1e32:	fd 89       	ldd	r31, Y+21	; 0x15
    1e34:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1e36:	ea 89       	ldd	r30, Y+18	; 0x12
    1e38:	fb 89       	ldd	r31, Y+19	; 0x13
    1e3a:	80 81       	ld	r24, Z
    1e3c:	80 61       	ori	r24, 0x10	; 16
    1e3e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1e40:	ea 89       	ldd	r30, Y+18	; 0x12
    1e42:	fb 89       	ldd	r31, Y+19	; 0x13
    1e44:	80 81       	ld	r24, Z
    1e46:	88 60       	ori	r24, 0x08	; 8
    1e48:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1e4a:	ea 89       	ldd	r30, Y+18	; 0x12
    1e4c:	fb 89       	ldd	r31, Y+19	; 0x13
    1e4e:	80 81       	ld	r24, Z
    1e50:	80 68       	ori	r24, 0x80	; 128
    1e52:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1e54:	ea 89       	ldd	r30, Y+18	; 0x12
    1e56:	fb 89       	ldd	r31, Y+19	; 0x13
    1e58:	80 81       	ld	r24, Z
    1e5a:	8f 7d       	andi	r24, 0xDF	; 223
    1e5c:	80 83       	st	Z, r24
}
    1e5e:	df 91       	pop	r29
    1e60:	cf 91       	pop	r28
    1e62:	1f 91       	pop	r17
    1e64:	ff 90       	pop	r15
    1e66:	ef 90       	pop	r14
    1e68:	df 90       	pop	r13
    1e6a:	cf 90       	pop	r12
    1e6c:	08 95       	ret

00001e6e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1e6e:	1f 92       	push	r1
    1e70:	0f 92       	push	r0
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	0f 92       	push	r0
    1e76:	11 24       	eor	r1, r1
    1e78:	2f 93       	push	r18
    1e7a:	8f 93       	push	r24
    1e7c:	9f 93       	push	r25
    1e7e:	ef 93       	push	r30
    1e80:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1e82:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <Serial+0x10>
    1e86:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <Serial+0x11>
    1e8a:	80 81       	ld	r24, Z
    1e8c:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <Serial+0x16>
    1e90:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <Serial+0x17>
    1e94:	82 fd       	sbrc	r24, 2
    1e96:	12 c0       	rjmp	.+36     	; 0x1ebc <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1e98:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1e9a:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <Serial+0x19>
    1e9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ea0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1ea2:	20 91 e0 01 	lds	r18, 0x01E0	; 0x8001e0 <Serial+0x1a>
    1ea6:	82 17       	cp	r24, r18
    1ea8:	51 f0       	breq	.+20     	; 0x1ebe <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1eaa:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <Serial+0x19>
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	ea 53       	subi	r30, 0x3A	; 58
    1eb2:	fe 4f       	sbci	r31, 0xFE	; 254
    1eb4:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1eb6:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <Serial+0x19>
    1eba:	01 c0       	rjmp	.+2      	; 0x1ebe <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1ebc:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1ebe:	ff 91       	pop	r31
    1ec0:	ef 91       	pop	r30
    1ec2:	9f 91       	pop	r25
    1ec4:	8f 91       	pop	r24
    1ec6:	2f 91       	pop	r18
    1ec8:	0f 90       	pop	r0
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	0f 90       	pop	r0
    1ece:	1f 90       	pop	r1
    1ed0:	18 95       	reti

00001ed2 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1ed2:	1f 92       	push	r1
    1ed4:	0f 92       	push	r0
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	0f 92       	push	r0
    1eda:	11 24       	eor	r1, r1
    1edc:	2f 93       	push	r18
    1ede:	3f 93       	push	r19
    1ee0:	4f 93       	push	r20
    1ee2:	5f 93       	push	r21
    1ee4:	6f 93       	push	r22
    1ee6:	7f 93       	push	r23
    1ee8:	8f 93       	push	r24
    1eea:	9f 93       	push	r25
    1eec:	af 93       	push	r26
    1eee:	bf 93       	push	r27
    1ef0:	ef 93       	push	r30
    1ef2:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1ef4:	86 ec       	ldi	r24, 0xC6	; 198
    1ef6:	91 e0       	ldi	r25, 0x01	; 1
    1ef8:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1efc:	ff 91       	pop	r31
    1efe:	ef 91       	pop	r30
    1f00:	bf 91       	pop	r27
    1f02:	af 91       	pop	r26
    1f04:	9f 91       	pop	r25
    1f06:	8f 91       	pop	r24
    1f08:	7f 91       	pop	r23
    1f0a:	6f 91       	pop	r22
    1f0c:	5f 91       	pop	r21
    1f0e:	4f 91       	pop	r20
    1f10:	3f 91       	pop	r19
    1f12:	2f 91       	pop	r18
    1f14:	0f 90       	pop	r0
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	0f 90       	pop	r0
    1f1a:	1f 90       	pop	r1
    1f1c:	18 95       	reti

00001f1e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1f1e:	86 ec       	ldi	r24, 0xC6	; 198
    1f20:	91 e0       	ldi	r25, 0x01	; 1
    1f22:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <_ZN14HardwareSerial9availableEv>
    1f26:	21 e0       	ldi	r18, 0x01	; 1
    1f28:	89 2b       	or	r24, r25
    1f2a:	09 f4       	brne	.+2      	; 0x1f2e <_Z17Serial0_availablev+0x10>
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
}
    1f2e:	82 2f       	mov	r24, r18
    1f30:	08 95       	ret

00001f32 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1f32:	e6 ec       	ldi	r30, 0xC6	; 198
    1f34:	f1 e0       	ldi	r31, 0x01	; 1
    1f36:	13 82       	std	Z+3, r1	; 0x03
    1f38:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1f3a:	88 ee       	ldi	r24, 0xE8	; 232
    1f3c:	93 e0       	ldi	r25, 0x03	; 3
    1f3e:	a0 e0       	ldi	r26, 0x00	; 0
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	84 83       	std	Z+4, r24	; 0x04
    1f44:	95 83       	std	Z+5, r25	; 0x05
    1f46:	a6 83       	std	Z+6, r26	; 0x06
    1f48:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1f4a:	83 e4       	ldi	r24, 0x43	; 67
    1f4c:	91 e0       	ldi	r25, 0x01	; 1
    1f4e:	91 83       	std	Z+1, r25	; 0x01
    1f50:	80 83       	st	Z, r24
    1f52:	85 ec       	ldi	r24, 0xC5	; 197
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	95 87       	std	Z+13, r25	; 0x0d
    1f58:	84 87       	std	Z+12, r24	; 0x0c
    1f5a:	84 ec       	ldi	r24, 0xC4	; 196
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	97 87       	std	Z+15, r25	; 0x0f
    1f60:	86 87       	std	Z+14, r24	; 0x0e
    1f62:	80 ec       	ldi	r24, 0xC0	; 192
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	91 8b       	std	Z+17, r25	; 0x11
    1f68:	80 8b       	std	Z+16, r24	; 0x10
    1f6a:	81 ec       	ldi	r24, 0xC1	; 193
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	93 8b       	std	Z+19, r25	; 0x13
    1f70:	82 8b       	std	Z+18, r24	; 0x12
    1f72:	82 ec       	ldi	r24, 0xC2	; 194
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	95 8b       	std	Z+21, r25	; 0x15
    1f78:	84 8b       	std	Z+20, r24	; 0x14
    1f7a:	86 ec       	ldi	r24, 0xC6	; 198
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	97 8b       	std	Z+23, r25	; 0x17
    1f80:	86 8b       	std	Z+22, r24	; 0x16
    1f82:	11 8e       	std	Z+25, r1	; 0x19
    1f84:	12 8e       	std	Z+26, r1	; 0x1a
    1f86:	13 8e       	std	Z+27, r1	; 0x1b
    1f88:	14 8e       	std	Z+28, r1	; 0x1c
    1f8a:	08 95       	ret

00001f8c <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1f8c:	08 95       	ret

00001f8e <main>:

int main(void)
{
	init();
    1f8e:	0e 94 bf 10 	call	0x217e	; 0x217e <init>

	initVariant();
    1f92:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1f96:	0e 94 98 02 	call	0x530	; 0x530 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1f9a:	c9 e3       	ldi	r28, 0x39	; 57
    1f9c:	de e0       	ldi	r29, 0x0E	; 14
#endif
	
	setup();
    
	for (;;) {
		loop();
    1f9e:	0e 94 57 04 	call	0x8ae	; 0x8ae <loop>
		if (serialEventRun) serialEventRun();
    1fa2:	20 97       	sbiw	r28, 0x00	; 0
    1fa4:	e1 f3       	breq	.-8      	; 0x1f9e <main+0x10>
    1fa6:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <_Z14serialEventRunv>
    1faa:	f9 cf       	rjmp	.-14     	; 0x1f9e <main+0x10>

00001fac <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
    1fac:	cf 92       	push	r12
    1fae:	df 92       	push	r13
    1fb0:	ef 92       	push	r14
    1fb2:	ff 92       	push	r15
    1fb4:	0f 93       	push	r16
    1fb6:	1f 93       	push	r17
    1fb8:	cf 93       	push	r28
    1fba:	df 93       	push	r29
    1fbc:	6c 01       	movw	r12, r24
    1fbe:	eb 01       	movw	r28, r22
    1fc0:	7b 01       	movw	r14, r22
    1fc2:	e4 0e       	add	r14, r20
    1fc4:	f5 1e       	adc	r15, r21
    1fc6:	00 e0       	ldi	r16, 0x00	; 0
    1fc8:	10 e0       	ldi	r17, 0x00	; 0
    1fca:	ce 15       	cp	r28, r14
    1fcc:	df 05       	cpc	r29, r15
    1fce:	61 f0       	breq	.+24     	; 0x1fe8 <_ZN5Print5writeEPKhj+0x3c>
    1fd0:	69 91       	ld	r22, Y+
    1fd2:	d6 01       	movw	r26, r12
    1fd4:	ed 91       	ld	r30, X+
    1fd6:	fc 91       	ld	r31, X
    1fd8:	01 90       	ld	r0, Z+
    1fda:	f0 81       	ld	r31, Z
    1fdc:	e0 2d       	mov	r30, r0
    1fde:	c6 01       	movw	r24, r12
    1fe0:	09 95       	icall
    1fe2:	08 0f       	add	r16, r24
    1fe4:	19 1f       	adc	r17, r25
    1fe6:	f1 cf       	rjmp	.-30     	; 0x1fca <_ZN5Print5writeEPKhj+0x1e>
    1fe8:	c8 01       	movw	r24, r16
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	1f 91       	pop	r17
    1ff0:	0f 91       	pop	r16
    1ff2:	ff 90       	pop	r15
    1ff4:	ef 90       	pop	r14
    1ff6:	df 90       	pop	r13
    1ff8:	cf 90       	pop	r12
    1ffa:	08 95       	ret

00001ffc <_ZN5Print5writeEPKc>:
    1ffc:	61 15       	cp	r22, r1
    1ffe:	71 05       	cpc	r23, r1
    2000:	79 f0       	breq	.+30     	; 0x2020 <_ZN5Print5writeEPKc+0x24>
    2002:	fb 01       	movw	r30, r22
    2004:	01 90       	ld	r0, Z+
    2006:	00 20       	and	r0, r0
    2008:	e9 f7       	brne	.-6      	; 0x2004 <_ZN5Print5writeEPKc+0x8>
    200a:	31 97       	sbiw	r30, 0x01	; 1
    200c:	af 01       	movw	r20, r30
    200e:	46 1b       	sub	r20, r22
    2010:	57 0b       	sbc	r21, r23
    2012:	dc 01       	movw	r26, r24
    2014:	ed 91       	ld	r30, X+
    2016:	fc 91       	ld	r31, X
    2018:	02 80       	ldd	r0, Z+2	; 0x02
    201a:	f3 81       	ldd	r31, Z+3	; 0x03
    201c:	e0 2d       	mov	r30, r0
    201e:	09 94       	ijmp
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	08 95       	ret

00002026 <_ZN5Print5printEPK19__FlashStringHelper>:
    2026:	ef 92       	push	r14
    2028:	ff 92       	push	r15
    202a:	0f 93       	push	r16
    202c:	1f 93       	push	r17
    202e:	cf 93       	push	r28
    2030:	df 93       	push	r29
    2032:	7c 01       	movw	r14, r24
    2034:	fb 01       	movw	r30, r22
    2036:	00 e0       	ldi	r16, 0x00	; 0
    2038:	10 e0       	ldi	r17, 0x00	; 0
    203a:	64 91       	lpm	r22, Z
    203c:	ef 01       	movw	r28, r30
    203e:	21 96       	adiw	r28, 0x01	; 1
    2040:	66 23       	and	r22, r22
    2042:	61 f0       	breq	.+24     	; 0x205c <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    2044:	d7 01       	movw	r26, r14
    2046:	ed 91       	ld	r30, X+
    2048:	fc 91       	ld	r31, X
    204a:	01 90       	ld	r0, Z+
    204c:	f0 81       	ld	r31, Z
    204e:	e0 2d       	mov	r30, r0
    2050:	c7 01       	movw	r24, r14
    2052:	09 95       	icall
    2054:	08 0f       	add	r16, r24
    2056:	19 1f       	adc	r17, r25
    2058:	fe 01       	movw	r30, r28
    205a:	ef cf       	rjmp	.-34     	; 0x203a <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    205c:	c8 01       	movw	r24, r16
    205e:	df 91       	pop	r29
    2060:	cf 91       	pop	r28
    2062:	1f 91       	pop	r17
    2064:	0f 91       	pop	r16
    2066:	ff 90       	pop	r15
    2068:	ef 90       	pop	r14
    206a:	08 95       	ret

0000206c <_ZN5Print5printEc>:
    206c:	dc 01       	movw	r26, r24
    206e:	ed 91       	ld	r30, X+
    2070:	fc 91       	ld	r31, X
    2072:	01 90       	ld	r0, Z+
    2074:	f0 81       	ld	r31, Z
    2076:	e0 2d       	mov	r30, r0
    2078:	09 94       	ijmp

0000207a <_ZN5Print7printlnEv>:
    207a:	0f 93       	push	r16
    207c:	1f 93       	push	r17
    207e:	cf 93       	push	r28
    2080:	df 93       	push	r29
    2082:	ec 01       	movw	r28, r24
    2084:	6d e0       	ldi	r22, 0x0D	; 13
    2086:	0e 94 36 10 	call	0x206c	; 0x206c <_ZN5Print5printEc>
    208a:	8c 01       	movw	r16, r24
    208c:	6a e0       	ldi	r22, 0x0A	; 10
    208e:	ce 01       	movw	r24, r28
    2090:	0e 94 36 10 	call	0x206c	; 0x206c <_ZN5Print5printEc>
    2094:	80 0f       	add	r24, r16
    2096:	91 1f       	adc	r25, r17
    2098:	df 91       	pop	r29
    209a:	cf 91       	pop	r28
    209c:	1f 91       	pop	r17
    209e:	0f 91       	pop	r16
    20a0:	08 95       	ret

000020a2 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    20a2:	0f 93       	push	r16
    20a4:	1f 93       	push	r17
    20a6:	cf 93       	push	r28
    20a8:	df 93       	push	r29
    20aa:	ec 01       	movw	r28, r24
    20ac:	0e 94 13 10 	call	0x2026	; 0x2026 <_ZN5Print5printEPK19__FlashStringHelper>
    20b0:	8c 01       	movw	r16, r24
    20b2:	ce 01       	movw	r24, r28
    20b4:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN5Print7printlnEv>
    20b8:	80 0f       	add	r24, r16
    20ba:	91 1f       	adc	r25, r17
    20bc:	df 91       	pop	r29
    20be:	cf 91       	pop	r28
    20c0:	1f 91       	pop	r17
    20c2:	0f 91       	pop	r16
    20c4:	08 95       	ret

000020c6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    20c6:	0f 93       	push	r16
    20c8:	1f 93       	push	r17
    20ca:	cf 93       	push	r28
    20cc:	df 93       	push	r29
    20ce:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    20d0:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <_ZN5Print5writeEPKc>
    20d4:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    20d6:	ce 01       	movw	r24, r28
    20d8:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN5Print7printlnEv>
  return n;
}
    20dc:	80 0f       	add	r24, r16
    20de:	91 1f       	adc	r25, r17
    20e0:	df 91       	pop	r29
    20e2:	cf 91       	pop	r28
    20e4:	1f 91       	pop	r17
    20e6:	0f 91       	pop	r16
    20e8:	08 95       	ret

000020ea <__vector_16>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    20ea:	1f 92       	push	r1
    20ec:	0f 92       	push	r0
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	0f 92       	push	r0
    20f2:	11 24       	eor	r1, r1
    20f4:	2f 93       	push	r18
    20f6:	3f 93       	push	r19
    20f8:	8f 93       	push	r24
    20fa:	9f 93       	push	r25
    20fc:	af 93       	push	r26
    20fe:	bf 93       	push	r27
    2100:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <timer0_millis>
    2104:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <timer0_millis+0x1>
    2108:	a0 91 66 02 	lds	r26, 0x0266	; 0x800266 <timer0_millis+0x2>
    210c:	b0 91 67 02 	lds	r27, 0x0267	; 0x800267 <timer0_millis+0x3>
    2110:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <timer0_fract>
    2114:	23 e0       	ldi	r18, 0x03	; 3
    2116:	23 0f       	add	r18, r19
    2118:	2d 37       	cpi	r18, 0x7D	; 125
    211a:	20 f4       	brcc	.+8      	; 0x2124 <__vector_16+0x3a>
    211c:	01 96       	adiw	r24, 0x01	; 1
    211e:	a1 1d       	adc	r26, r1
    2120:	b1 1d       	adc	r27, r1
    2122:	05 c0       	rjmp	.+10     	; 0x212e <__vector_16+0x44>
    2124:	26 e8       	ldi	r18, 0x86	; 134
    2126:	23 0f       	add	r18, r19
    2128:	02 96       	adiw	r24, 0x02	; 2
    212a:	a1 1d       	adc	r26, r1
    212c:	b1 1d       	adc	r27, r1
    212e:	20 93 63 02 	sts	0x0263, r18	; 0x800263 <timer0_fract>
    2132:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <timer0_millis>
    2136:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <timer0_millis+0x1>
    213a:	a0 93 66 02 	sts	0x0266, r26	; 0x800266 <timer0_millis+0x2>
    213e:	b0 93 67 02 	sts	0x0267, r27	; 0x800267 <timer0_millis+0x3>
    2142:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <timer0_overflow_count>
    2146:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <timer0_overflow_count+0x1>
    214a:	a0 91 6a 02 	lds	r26, 0x026A	; 0x80026a <timer0_overflow_count+0x2>
    214e:	b0 91 6b 02 	lds	r27, 0x026B	; 0x80026b <timer0_overflow_count+0x3>
    2152:	01 96       	adiw	r24, 0x01	; 1
    2154:	a1 1d       	adc	r26, r1
    2156:	b1 1d       	adc	r27, r1
    2158:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <timer0_overflow_count>
    215c:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <timer0_overflow_count+0x1>
    2160:	a0 93 6a 02 	sts	0x026A, r26	; 0x80026a <timer0_overflow_count+0x2>
    2164:	b0 93 6b 02 	sts	0x026B, r27	; 0x80026b <timer0_overflow_count+0x3>
    2168:	bf 91       	pop	r27
    216a:	af 91       	pop	r26
    216c:	9f 91       	pop	r25
    216e:	8f 91       	pop	r24
    2170:	3f 91       	pop	r19
    2172:	2f 91       	pop	r18
    2174:	0f 90       	pop	r0
    2176:	0f be       	out	0x3f, r0	; 63
    2178:	0f 90       	pop	r0
    217a:	1f 90       	pop	r1
    217c:	18 95       	reti

0000217e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    217e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2180:	84 b5       	in	r24, 0x24	; 36
    2182:	82 60       	ori	r24, 0x02	; 2
    2184:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2186:	84 b5       	in	r24, 0x24	; 36
    2188:	81 60       	ori	r24, 0x01	; 1
    218a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    218c:	85 b5       	in	r24, 0x25	; 37
    218e:	82 60       	ori	r24, 0x02	; 2
    2190:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2192:	85 b5       	in	r24, 0x25	; 37
    2194:	81 60       	ori	r24, 0x01	; 1
    2196:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2198:	ee e6       	ldi	r30, 0x6E	; 110
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	81 60       	ori	r24, 0x01	; 1
    21a0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    21a2:	e1 e8       	ldi	r30, 0x81	; 129
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    21a8:	80 81       	ld	r24, Z
    21aa:	82 60       	ori	r24, 0x02	; 2
    21ac:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    21ae:	80 81       	ld	r24, Z
    21b0:	81 60       	ori	r24, 0x01	; 1
    21b2:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    21b4:	e0 e8       	ldi	r30, 0x80	; 128
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	81 60       	ori	r24, 0x01	; 1
    21bc:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    21be:	e1 eb       	ldi	r30, 0xB1	; 177
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	84 60       	ori	r24, 0x04	; 4
    21c6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    21c8:	e0 eb       	ldi	r30, 0xB0	; 176
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	81 60       	ori	r24, 0x01	; 1
    21d0:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    21d2:	ea e7       	ldi	r30, 0x7A	; 122
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	84 60       	ori	r24, 0x04	; 4
    21da:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    21dc:	80 81       	ld	r24, Z
    21de:	82 60       	ori	r24, 0x02	; 2
    21e0:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    21e2:	80 81       	ld	r24, Z
    21e4:	81 60       	ori	r24, 0x01	; 1
    21e6:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    21e8:	80 81       	ld	r24, Z
    21ea:	80 68       	ori	r24, 0x80	; 128
    21ec:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    21ee:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    21f2:	08 95       	ret

000021f4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    21f4:	83 30       	cpi	r24, 0x03	; 3
    21f6:	81 f0       	breq	.+32     	; 0x2218 <turnOffPWM+0x24>
    21f8:	28 f4       	brcc	.+10     	; 0x2204 <turnOffPWM+0x10>
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	99 f0       	breq	.+38     	; 0x2224 <turnOffPWM+0x30>
    21fe:	82 30       	cpi	r24, 0x02	; 2
    2200:	a1 f0       	breq	.+40     	; 0x222a <turnOffPWM+0x36>
    2202:	08 95       	ret
    2204:	87 30       	cpi	r24, 0x07	; 7
    2206:	a9 f0       	breq	.+42     	; 0x2232 <turnOffPWM+0x3e>
    2208:	88 30       	cpi	r24, 0x08	; 8
    220a:	b9 f0       	breq	.+46     	; 0x223a <turnOffPWM+0x46>
    220c:	84 30       	cpi	r24, 0x04	; 4
    220e:	d1 f4       	brne	.+52     	; 0x2244 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2210:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2214:	8f 7d       	andi	r24, 0xDF	; 223
    2216:	03 c0       	rjmp	.+6      	; 0x221e <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2218:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    221c:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    221e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2222:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2224:	84 b5       	in	r24, 0x24	; 36
    2226:	8f 77       	andi	r24, 0x7F	; 127
    2228:	02 c0       	rjmp	.+4      	; 0x222e <turnOffPWM+0x3a>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    222a:	84 b5       	in	r24, 0x24	; 36
    222c:	8f 7d       	andi	r24, 0xDF	; 223
    222e:	84 bd       	out	0x24, r24	; 36
    2230:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2232:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2236:	8f 77       	andi	r24, 0x7F	; 127
    2238:	03 c0       	rjmp	.+6      	; 0x2240 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    223a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    223e:	8f 7d       	andi	r24, 0xDF	; 223
    2240:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2244:	08 95       	ret

00002246 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2246:	cf 93       	push	r28
    2248:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	fc 01       	movw	r30, r24
    224e:	e0 57       	subi	r30, 0x70	; 112
    2250:	fb 4f       	sbci	r31, 0xFB	; 251
    2252:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2254:	fc 01       	movw	r30, r24
    2256:	ec 55       	subi	r30, 0x5C	; 92
    2258:	fb 4f       	sbci	r31, 0xFB	; 251
    225a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    225c:	88 23       	and	r24, r24
    225e:	61 f1       	breq	.+88     	; 0x22b8 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	88 0f       	add	r24, r24
    2264:	99 1f       	adc	r25, r25
    2266:	fc 01       	movw	r30, r24
    2268:	ee 53       	subi	r30, 0x3E	; 62
    226a:	fb 4f       	sbci	r31, 0xFB	; 251
    226c:	c5 91       	lpm	r28, Z+
    226e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2270:	fc 01       	movw	r30, r24
    2272:	e8 54       	subi	r30, 0x48	; 72
    2274:	fb 4f       	sbci	r31, 0xFB	; 251
    2276:	a5 91       	lpm	r26, Z+
    2278:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    227a:	61 11       	cpse	r22, r1
    227c:	09 c0       	rjmp	.+18     	; 0x2290 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    227e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2280:	f8 94       	cli
		*reg &= ~bit;
    2282:	88 81       	ld	r24, Y
    2284:	20 95       	com	r18
    2286:	82 23       	and	r24, r18
    2288:	88 83       	st	Y, r24
		*out &= ~bit;
    228a:	ec 91       	ld	r30, X
    228c:	2e 23       	and	r18, r30
    228e:	0b c0       	rjmp	.+22     	; 0x22a6 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2290:	62 30       	cpi	r22, 0x02	; 2
    2292:	61 f4       	brne	.+24     	; 0x22ac <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2294:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2296:	f8 94       	cli
		*reg &= ~bit;
    2298:	38 81       	ld	r19, Y
    229a:	82 2f       	mov	r24, r18
    229c:	80 95       	com	r24
    229e:	83 23       	and	r24, r19
    22a0:	88 83       	st	Y, r24
		*out |= bit;
    22a2:	ec 91       	ld	r30, X
    22a4:	2e 2b       	or	r18, r30
    22a6:	2c 93       	st	X, r18
		SREG = oldSREG;
    22a8:	9f bf       	out	0x3f, r25	; 63
    22aa:	06 c0       	rjmp	.+12     	; 0x22b8 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    22ac:	8f b7       	in	r24, 0x3f	; 63
                cli();
    22ae:	f8 94       	cli
		*reg |= bit;
    22b0:	e8 81       	ld	r30, Y
    22b2:	2e 2b       	or	r18, r30
    22b4:	28 83       	st	Y, r18
		SREG = oldSREG;
    22b6:	8f bf       	out	0x3f, r24	; 63
	}
}
    22b8:	df 91       	pop	r29
    22ba:	cf 91       	pop	r28
    22bc:	08 95       	ret

000022be <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    22be:	1f 93       	push	r17
    22c0:	cf 93       	push	r28
    22c2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    22c4:	28 2f       	mov	r18, r24
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	f9 01       	movw	r30, r18
    22ca:	e4 58       	subi	r30, 0x84	; 132
    22cc:	fb 4f       	sbci	r31, 0xFB	; 251
    22ce:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    22d0:	f9 01       	movw	r30, r18
    22d2:	e0 57       	subi	r30, 0x70	; 112
    22d4:	fb 4f       	sbci	r31, 0xFB	; 251
    22d6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    22d8:	f9 01       	movw	r30, r18
    22da:	ec 55       	subi	r30, 0x5C	; 92
    22dc:	fb 4f       	sbci	r31, 0xFB	; 251
    22de:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    22e0:	cc 23       	and	r28, r28
    22e2:	c9 f0       	breq	.+50     	; 0x2316 <digitalWrite+0x58>
    22e4:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    22e6:	81 11       	cpse	r24, r1
    22e8:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <turnOffPWM>

	out = portOutputRegister(port);
    22ec:	ec 2f       	mov	r30, r28
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	ee 0f       	add	r30, r30
    22f2:	ff 1f       	adc	r31, r31
    22f4:	e8 54       	subi	r30, 0x48	; 72
    22f6:	fb 4f       	sbci	r31, 0xFB	; 251
    22f8:	a5 91       	lpm	r26, Z+
    22fa:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    22fc:	8f b7       	in	r24, 0x3f	; 63
	cli();
    22fe:	f8 94       	cli

	if (val == LOW) {
    2300:	11 11       	cpse	r17, r1
    2302:	05 c0       	rjmp	.+10     	; 0x230e <digitalWrite+0x50>
		*out &= ~bit;
    2304:	9c 91       	ld	r25, X
    2306:	ed 2f       	mov	r30, r29
    2308:	e0 95       	com	r30
    230a:	e9 23       	and	r30, r25
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <digitalWrite+0x54>
	} else {
		*out |= bit;
    230e:	ec 91       	ld	r30, X
    2310:	ed 2b       	or	r30, r29
    2312:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    2314:	8f bf       	out	0x3f, r24	; 63
}
    2316:	df 91       	pop	r29
    2318:	cf 91       	pop	r28
    231a:	1f 91       	pop	r17
    231c:	08 95       	ret

0000231e <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    231e:	bf 92       	push	r11
    2320:	cf 92       	push	r12
    2322:	df 92       	push	r13
    2324:	ef 92       	push	r14
    2326:	ff 92       	push	r15
    2328:	0f 93       	push	r16
    232a:	1f 93       	push	r17
    232c:	cf 93       	push	r28
    232e:	df 93       	push	r29
    2330:	c8 2e       	mov	r12, r24
    2332:	d6 2e       	mov	r13, r22
    2334:	b4 2e       	mov	r11, r20
    2336:	c7 e0       	ldi	r28, 0x07	; 7
    2338:	d0 e0       	ldi	r29, 0x00	; 0
    233a:	02 2f       	mov	r16, r18
    233c:	10 e0       	ldi	r17, 0x00	; 0
    233e:	87 e0       	ldi	r24, 0x07	; 7
    2340:	e8 2e       	mov	r14, r24
    2342:	f1 2c       	mov	r15, r1
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    2344:	b1 10       	cpse	r11, r1
    2346:	05 c0       	rjmp	.+10     	; 0x2352 <shiftOut+0x34>
    2348:	c7 01       	movw	r24, r14
    234a:	8c 1b       	sub	r24, r28
    234c:	9d 0b       	sbc	r25, r29
			digitalWrite(dataPin, !!(val & (1 << i)));
    234e:	98 01       	movw	r18, r16
    2350:	02 c0       	rjmp	.+4      	; 0x2356 <shiftOut+0x38>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    2352:	98 01       	movw	r18, r16
    2354:	8c 2f       	mov	r24, r28
    2356:	02 c0       	rjmp	.+4      	; 0x235c <shiftOut+0x3e>
    2358:	35 95       	asr	r19
    235a:	27 95       	ror	r18
    235c:	8a 95       	dec	r24
    235e:	e2 f7       	brpl	.-8      	; 0x2358 <shiftOut+0x3a>
    2360:	b9 01       	movw	r22, r18
    2362:	61 70       	andi	r22, 0x01	; 1
    2364:	77 27       	eor	r23, r23
    2366:	8c 2d       	mov	r24, r12
    2368:	0e 94 5f 11 	call	0x22be	; 0x22be <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    236c:	61 e0       	ldi	r22, 0x01	; 1
    236e:	8d 2d       	mov	r24, r13
    2370:	0e 94 5f 11 	call	0x22be	; 0x22be <digitalWrite>
		digitalWrite(clockPin, LOW);		
    2374:	60 e0       	ldi	r22, 0x00	; 0
    2376:	8d 2d       	mov	r24, r13
    2378:	0e 94 5f 11 	call	0x22be	; 0x22be <digitalWrite>
    237c:	21 97       	sbiw	r28, 0x01	; 1
    237e:	10 f7       	brcc	.-60     	; 0x2344 <shiftOut+0x26>
	}
}
    2380:	df 91       	pop	r29
    2382:	cf 91       	pop	r28
    2384:	1f 91       	pop	r17
    2386:	0f 91       	pop	r16
    2388:	ff 90       	pop	r15
    238a:	ef 90       	pop	r14
    238c:	df 90       	pop	r13
    238e:	cf 90       	pop	r12
    2390:	bf 90       	pop	r11
    2392:	08 95       	ret

00002394 <__udivmodsi4>:
    2394:	a1 e2       	ldi	r26, 0x21	; 33
    2396:	1a 2e       	mov	r1, r26
    2398:	aa 1b       	sub	r26, r26
    239a:	bb 1b       	sub	r27, r27
    239c:	fd 01       	movw	r30, r26
    239e:	0d c0       	rjmp	.+26     	; 0x23ba <__udivmodsi4_ep>

000023a0 <__udivmodsi4_loop>:
    23a0:	aa 1f       	adc	r26, r26
    23a2:	bb 1f       	adc	r27, r27
    23a4:	ee 1f       	adc	r30, r30
    23a6:	ff 1f       	adc	r31, r31
    23a8:	a2 17       	cp	r26, r18
    23aa:	b3 07       	cpc	r27, r19
    23ac:	e4 07       	cpc	r30, r20
    23ae:	f5 07       	cpc	r31, r21
    23b0:	20 f0       	brcs	.+8      	; 0x23ba <__udivmodsi4_ep>
    23b2:	a2 1b       	sub	r26, r18
    23b4:	b3 0b       	sbc	r27, r19
    23b6:	e4 0b       	sbc	r30, r20
    23b8:	f5 0b       	sbc	r31, r21

000023ba <__udivmodsi4_ep>:
    23ba:	66 1f       	adc	r22, r22
    23bc:	77 1f       	adc	r23, r23
    23be:	88 1f       	adc	r24, r24
    23c0:	99 1f       	adc	r25, r25
    23c2:	1a 94       	dec	r1
    23c4:	69 f7       	brne	.-38     	; 0x23a0 <__udivmodsi4_loop>
    23c6:	60 95       	com	r22
    23c8:	70 95       	com	r23
    23ca:	80 95       	com	r24
    23cc:	90 95       	com	r25
    23ce:	9b 01       	movw	r18, r22
    23d0:	ac 01       	movw	r20, r24
    23d2:	bd 01       	movw	r22, r26
    23d4:	cf 01       	movw	r24, r30
    23d6:	08 95       	ret

000023d8 <__usmulhisi3>:
    23d8:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <__umulhisi3>

000023dc <__usmulhisi3_tail>:
    23dc:	b7 ff       	sbrs	r27, 7
    23de:	08 95       	ret
    23e0:	82 1b       	sub	r24, r18
    23e2:	93 0b       	sbc	r25, r19
    23e4:	08 95       	ret

000023e6 <__tablejump2__>:
    23e6:	ee 0f       	add	r30, r30
    23e8:	ff 1f       	adc	r31, r31
    23ea:	05 90       	lpm	r0, Z+
    23ec:	f4 91       	lpm	r31, Z
    23ee:	e0 2d       	mov	r30, r0
    23f0:	09 94       	ijmp

000023f2 <__umulhisi3>:
    23f2:	a2 9f       	mul	r26, r18
    23f4:	b0 01       	movw	r22, r0
    23f6:	b3 9f       	mul	r27, r19
    23f8:	c0 01       	movw	r24, r0
    23fa:	a3 9f       	mul	r26, r19
    23fc:	70 0d       	add	r23, r0
    23fe:	81 1d       	adc	r24, r1
    2400:	11 24       	eor	r1, r1
    2402:	91 1d       	adc	r25, r1
    2404:	b2 9f       	mul	r27, r18
    2406:	70 0d       	add	r23, r0
    2408:	81 1d       	adc	r24, r1
    240a:	11 24       	eor	r1, r1
    240c:	91 1d       	adc	r25, r1
    240e:	08 95       	ret

00002410 <atoi>:
    2410:	fc 01       	movw	r30, r24
    2412:	88 27       	eor	r24, r24
    2414:	99 27       	eor	r25, r25
    2416:	e8 94       	clt
    2418:	21 91       	ld	r18, Z+
    241a:	20 32       	cpi	r18, 0x20	; 32
    241c:	e9 f3       	breq	.-6      	; 0x2418 <atoi+0x8>
    241e:	29 30       	cpi	r18, 0x09	; 9
    2420:	10 f0       	brcs	.+4      	; 0x2426 <atoi+0x16>
    2422:	2e 30       	cpi	r18, 0x0E	; 14
    2424:	c8 f3       	brcs	.-14     	; 0x2418 <atoi+0x8>
    2426:	2b 32       	cpi	r18, 0x2B	; 43
    2428:	41 f0       	breq	.+16     	; 0x243a <atoi+0x2a>
    242a:	2d 32       	cpi	r18, 0x2D	; 45
    242c:	39 f4       	brne	.+14     	; 0x243c <atoi+0x2c>
    242e:	68 94       	set
    2430:	04 c0       	rjmp	.+8      	; 0x243a <atoi+0x2a>
    2432:	0e 94 7e 12 	call	0x24fc	; 0x24fc <__mulhi_const_10>
    2436:	82 0f       	add	r24, r18
    2438:	91 1d       	adc	r25, r1
    243a:	21 91       	ld	r18, Z+
    243c:	20 53       	subi	r18, 0x30	; 48
    243e:	2a 30       	cpi	r18, 0x0A	; 10
    2440:	c0 f3       	brcs	.-16     	; 0x2432 <atoi+0x22>
    2442:	1e f4       	brtc	.+6      	; 0x244a <atoi+0x3a>
    2444:	90 95       	com	r25
    2446:	81 95       	neg	r24
    2448:	9f 4f       	sbci	r25, 0xFF	; 255
    244a:	08 95       	ret

0000244c <memcpy_P>:
    244c:	fb 01       	movw	r30, r22
    244e:	dc 01       	movw	r26, r24
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <memcpy_P+0xa>
    2452:	05 90       	lpm	r0, Z+
    2454:	0d 92       	st	X+, r0
    2456:	41 50       	subi	r20, 0x01	; 1
    2458:	50 40       	sbci	r21, 0x00	; 0
    245a:	d8 f7       	brcc	.-10     	; 0x2452 <memcpy_P+0x6>
    245c:	08 95       	ret

0000245e <strtok>:
    245e:	40 e5       	ldi	r20, 0x50	; 80
    2460:	51 e0       	ldi	r21, 0x01	; 1
    2462:	0e 94 57 12 	call	0x24ae	; 0x24ae <strtok_r>
    2466:	08 95       	ret

00002468 <strchr>:
    2468:	fc 01       	movw	r30, r24
    246a:	81 91       	ld	r24, Z+
    246c:	86 17       	cp	r24, r22
    246e:	21 f0       	breq	.+8      	; 0x2478 <strchr+0x10>
    2470:	88 23       	and	r24, r24
    2472:	d9 f7       	brne	.-10     	; 0x246a <strchr+0x2>
    2474:	99 27       	eor	r25, r25
    2476:	08 95       	ret
    2478:	31 97       	sbiw	r30, 0x01	; 1
    247a:	cf 01       	movw	r24, r30
    247c:	08 95       	ret

0000247e <strcmp>:
    247e:	fb 01       	movw	r30, r22
    2480:	dc 01       	movw	r26, r24
    2482:	8d 91       	ld	r24, X+
    2484:	01 90       	ld	r0, Z+
    2486:	80 19       	sub	r24, r0
    2488:	01 10       	cpse	r0, r1
    248a:	d9 f3       	breq	.-10     	; 0x2482 <strcmp+0x4>
    248c:	99 0b       	sbc	r25, r25
    248e:	08 95       	ret

00002490 <strncpy>:
    2490:	fb 01       	movw	r30, r22
    2492:	dc 01       	movw	r26, r24
    2494:	41 50       	subi	r20, 0x01	; 1
    2496:	50 40       	sbci	r21, 0x00	; 0
    2498:	48 f0       	brcs	.+18     	; 0x24ac <strncpy+0x1c>
    249a:	01 90       	ld	r0, Z+
    249c:	0d 92       	st	X+, r0
    249e:	00 20       	and	r0, r0
    24a0:	c9 f7       	brne	.-14     	; 0x2494 <strncpy+0x4>
    24a2:	01 c0       	rjmp	.+2      	; 0x24a6 <strncpy+0x16>
    24a4:	1d 92       	st	X+, r1
    24a6:	41 50       	subi	r20, 0x01	; 1
    24a8:	50 40       	sbci	r21, 0x00	; 0
    24aa:	e0 f7       	brcc	.-8      	; 0x24a4 <strncpy+0x14>
    24ac:	08 95       	ret

000024ae <strtok_r>:
    24ae:	fa 01       	movw	r30, r20
    24b0:	a1 91       	ld	r26, Z+
    24b2:	b0 81       	ld	r27, Z
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	19 f4       	brne	.+6      	; 0x24be <strtok_r+0x10>
    24b8:	10 97       	sbiw	r26, 0x00	; 0
    24ba:	e1 f0       	breq	.+56     	; 0x24f4 <strtok_r+0x46>
    24bc:	cd 01       	movw	r24, r26
    24be:	dc 01       	movw	r26, r24
    24c0:	cd 01       	movw	r24, r26
    24c2:	0d 90       	ld	r0, X+
    24c4:	00 20       	and	r0, r0
    24c6:	11 f4       	brne	.+4      	; 0x24cc <strtok_r+0x1e>
    24c8:	c0 01       	movw	r24, r0
    24ca:	13 c0       	rjmp	.+38     	; 0x24f2 <strtok_r+0x44>
    24cc:	fb 01       	movw	r30, r22
    24ce:	21 91       	ld	r18, Z+
    24d0:	22 23       	and	r18, r18
    24d2:	19 f0       	breq	.+6      	; 0x24da <strtok_r+0x2c>
    24d4:	20 15       	cp	r18, r0
    24d6:	d9 f7       	brne	.-10     	; 0x24ce <strtok_r+0x20>
    24d8:	f3 cf       	rjmp	.-26     	; 0x24c0 <strtok_r+0x12>
    24da:	fb 01       	movw	r30, r22
    24dc:	21 91       	ld	r18, Z+
    24de:	20 15       	cp	r18, r0
    24e0:	19 f4       	brne	.+6      	; 0x24e8 <strtok_r+0x3a>
    24e2:	1e 92       	st	-X, r1
    24e4:	11 96       	adiw	r26, 0x01	; 1
    24e6:	06 c0       	rjmp	.+12     	; 0x24f4 <strtok_r+0x46>
    24e8:	22 23       	and	r18, r18
    24ea:	c1 f7       	brne	.-16     	; 0x24dc <strtok_r+0x2e>
    24ec:	0d 90       	ld	r0, X+
    24ee:	00 20       	and	r0, r0
    24f0:	a1 f7       	brne	.-24     	; 0x24da <strtok_r+0x2c>
    24f2:	d0 01       	movw	r26, r0
    24f4:	fa 01       	movw	r30, r20
    24f6:	a1 93       	st	Z+, r26
    24f8:	b0 83       	st	Z, r27
    24fa:	08 95       	ret

000024fc <__mulhi_const_10>:
    24fc:	7a e0       	ldi	r23, 0x0A	; 10
    24fe:	97 9f       	mul	r25, r23
    2500:	90 2d       	mov	r25, r0
    2502:	87 9f       	mul	r24, r23
    2504:	80 2d       	mov	r24, r0
    2506:	91 0d       	add	r25, r1
    2508:	11 24       	eor	r1, r1
    250a:	08 95       	ret

0000250c <__do_global_dtors>:
    250c:	12 e0       	ldi	r17, 0x02	; 2
    250e:	c9 e6       	ldi	r28, 0x69	; 105
    2510:	d2 e0       	ldi	r29, 0x02	; 2
    2512:	04 c0       	rjmp	.+8      	; 0x251c <__do_global_dtors+0x10>
    2514:	fe 01       	movw	r30, r28
    2516:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <__tablejump2__>
    251a:	21 96       	adiw	r28, 0x01	; 1
    251c:	ca 36       	cpi	r28, 0x6A	; 106
    251e:	d1 07       	cpc	r29, r17
    2520:	c9 f7       	brne	.-14     	; 0x2514 <__do_global_dtors+0x8>
    2522:	f8 94       	cli

00002524 <__stop_program>:
    2524:	ff cf       	rjmp	.-2      	; 0x2524 <__stop_program>
