
Led_Anzeige.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  000024bc  00002550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012c  00800150  00800150  000025a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000025a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000558  00000000  00000000  00002610  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c89a  00000000  00000000  00002b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d85  00000000  00000000  0000f402  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003683  00000000  00000000  00011187  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013e4  00000000  00000000  0001480c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002c1e  00000000  00000000  00015bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000089c8  00000000  00000000  0001880e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007d8  00000000  00000000  000211d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__dtors_end>
       4:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
       8:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
       c:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      10:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      14:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      18:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      1c:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      20:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      24:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__vector_9>
      28:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      2c:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      30:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      34:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <__vector_13>
      38:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      3c:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      40:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_16>
      44:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      48:	0c 94 02 0f 	jmp	0x1e04	; 0x1e04 <__vector_18>
      4c:	0c 94 34 0f 	jmp	0x1e68	; 0x1e68 <__vector_19>
      50:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      54:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      58:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      5c:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      60:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>
      64:	0c 94 92 02 	jmp	0x524	; 0x524 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	45 78       	andi	r20, 0x85	; 133
      6a:	61 6d       	ori	r22, 0xD1	; 209
      6c:	70 6c       	ori	r23, 0xC0	; 192
      6e:	65 3a       	cpi	r22, 0xA5	; 165
      70:	20 74       	andi	r18, 0x40	; 64
      72:	65 78       	andi	r22, 0x85	; 133
      74:	74 3d       	cpi	r23, 0xD4	; 212
      76:	65 78       	andi	r22, 0x85	; 133
      78:	61 6d       	ori	r22, 0xD1	; 209
      7a:	70 6c       	ori	r23, 0xC0	; 192
      7c:	65 20       	and	r6, r5
      7e:	74 65       	ori	r23, 0x54	; 84
      80:	78 74       	andi	r23, 0x48	; 72
	...

00000083 <_ZZ9printHelpvE3__c_1>:
      83:	63 6f 6d 6d 61 6e 64 20 61 6e 64 20 76 61 6c 75     command and valu
      93:	65 20 68 61 73 20 74 6f 20 62 65 20 73 65 70 61     e has to be sepa
      a3:	72 61 74 65 64 20 62 79 20 61 6e 20 65 71 75 61     rated by an equa
      b3:	6c 20 73 69 67 6e 00                                l sign.

000000ba <_ZZ9printHelpvE3__c_0>:
      ba:	6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 73 20 61     known commands a
      ca:	72 65 3a 20 74 65 78 74 2c 20 69 6e 74 65 6e 73     re: text, intens
      da:	69 74 79 20 61 6e 64 20 73 70 65 65 64 00           ity and speed.

000000e8 <_ZZ9printHelpvE3__c>:
      e8:	63 6f 6d 6d 61 6e 64 20 64 6f 65 73 20 6e 6f 74     command does not
      f8:	20 6d 61 74 63 68 00                                 match.

000000ff <_ZZ15uartInputHandlevE3__c_2>:
      ff:	73 70 65 65 64 20 72 61 6e 67 65 20 4d 41 58 4d     speed range MAXM
     10f:	41 54 52 49 58 5f 53 50 45 45 44 5f 4d 49 4e 5f     ATRIX_SPEED_MIN_
     11f:	56 41 4c 55 45 20 2e 2e 2e 20 4d 41 58 4d 41 54     VALUE ... MAXMAT
     12f:	52 49 58 5f 53 50 45 45 44 5f 4d 41 58 5f 56 41     RIX_SPEED_MAX_VA
     13f:	4c 55 45 00                                         LUE.

00000143 <_ZZ15uartInputHandlevE3__c_1>:
     143:	76 61 6c 75 65 20 6f 75 74 20 6f 66 20 72 61 6e     value out of ran
     153:	67 65 00                                            ge.

00000156 <_ZZ15uartInputHandlevE3__c_0>:
     156:	69 6e 74 65 6e 73 69 74 79 20 72 61 6e 67 65 20     intensity range 
     166:	4d 41 58 4d 41 54 52 49 58 5f 49 4e 54 45 4e 53     MAXMATRIX_INTENS
     176:	49 54 59 5f 4d 49 4e 5f 56 41 4c 55 45 20 2e 2e     ITY_MIN_VALUE ..
     186:	2e 20 4d 41 58 4d 41 54 52 49 58 5f 49 4e 54 45     . MAXMATRIX_INTE
     196:	4e 53 49 54 59 5f 4d 41 58 5f 56 41 4c 55 45 00     NSITY_MAX_VALUE.

000001a6 <_ZZ15uartInputHandlevE3__c>:
     1a6:	76 61 6c 75 65 20 6f 75 74 20 6f 66 20 72 61 6e     value out of ran
     1b6:	67 65 00                                            ge.

000001b9 <_ZL11SpriteTable>:
     1b9:	03 08 00 00 00 00 00 01 08 5f 00 00 00 00 03 08     ........._......
     1c9:	03 00 03 00 00 05 08 14 3e 14 3e 14 04 08 24 6a     ........>.>...$j
     1d9:	2b 12 00 05 08 63 13 08 64 63 05 08 36 49 56 20     +....c..dc..6IV 
     1e9:	50 01 08 03 00 00 00 00 03 08 1c 22 41 00 00 03     P.........."A...
     1f9:	08 41 22 1c 00 00 05 08 28 18 0e 18 28 05 08 08     .A".....(...(...
     209:	08 3e 08 08 02 08 b0 70 00 00 00 04 08 08 08 08     .>.....p........
     219:	08 00 02 08 60 60 00 00 00 04 08 60 18 06 01 00     ....``.....`....
     229:	04 08 3e 41 41 3e 00 03 08 42 7f 40 00 00 04 08     ..>AA>...B.@....
     239:	62 51 49 46 00 04 08 22 41 49 36 00 04 08 18 14     bQIF..."AI6.....
     249:	12 7f 00 04 08 27 45 45 39 00 04 08 3e 49 49 30     .....'EE9...>II0
     259:	00 04 08 61 11 09 07 00 04 08 36 49 49 36 00 04     ...a......6II6..
     269:	08 06 49 49 3e 00 02 08 50 00 00 00 00 02 08 80     ..II>...P.......
     279:	50 00 00 00 03 08 10 28 44 00 00 03 08 14 14 14     P......(D.......
     289:	00 00 03 08 44 28 10 00 00 04 08 02 59 09 06 00     ....D(......Y...
     299:	05 08 3e 49 55 5d 0e 04 08 7e 11 11 7e 00 04 08     ..>IU]...~..~...
     2a9:	7f 49 49 36 00 04 08 3e 41 41 22 00 04 08 7f 41     .II6...>AA"....A
     2b9:	41 3e 00 04 08 7f 49 49 41 00 04 08 7f 09 09 01     A>....IIA.......
     2c9:	00 04 08 3e 41 49 7a 00 04 08 7f 08 08 7f 00 03     ...>AIz.........
     2d9:	08 41 7f 41 00 00 04 08 30 40 41 3f 00 04 08 7f     .A.A....0@A?....
     2e9:	08 14 63 00 04 08 7f 40 40 40 00 05 08 7f 02 0c     ..c....@@@......
     2f9:	02 7f 05 08 7f 04 08 10 7f 04 08 3e 41 41 3e 00     ...........>AA>.
     309:	04 08 7f 09 09 06 00 04 08 3e 41 41 be 00 04 08     .........>AA....
     319:	7f 09 09 76 00 04 08 46 49 49 32 00 05 08 01 01     ...v...FII2.....
     329:	7f 01 01 04 08 3f 40 40 3f 00 05 08 0f 30 40 30     .....?@@?....0@0
     339:	0f 05 08 3f 40 38 40 3f 05 08 63 14 08 14 63 05     ...?@8@?..c...c.
     349:	08 07 08 70 08 07 04 08 61 51 49 47 00 02 08 7f     ...p....aQIG....
     359:	41 00 00 00 04 08 01 06 18 60 00 02 08 41 7f 00     A........`...A..
     369:	00 00 03 08 02 01 02 00 00 04 08 40 40 40 40 00     ...........@@@@.
     379:	02 08 01 02 00 00 00 04 08 20 54 54 78 00 04 08     ......... TTx...
     389:	7f 44 44 38 00 04 08 38 44 44 28 00 04 08 38 44     .DD8...8DD(...8D
     399:	44 7f 00 04 08 38 54 54 18 00 03 08 04 7e 05 00     D....8TT.....~..
     3a9:	00 04 08 98 a4 a4 78 00 04 08 7f 04 04 78 00 03     ......x......x..
     3b9:	08 44 7d 40 00 00 04 08 40 80 84 7d 00 04 08 7f     .D}@....@..}....
     3c9:	10 28 44 00 03 08 41 7f 40 00 00 05 08 7c 04 7c     .(D...A.@....|.|
     3d9:	04 78 04 08 7c 04 04 78 00 04 08 38 44 44 38 00     .x..|..x...8DD8.
     3e9:	04 08 fc 24 24 18 00 04 08 18 24 24 fc 00 04 08     ...$$.....$$....
     3f9:	7c 08 04 04 00 04 08 48 54 54 24 00 03 08 04 3f     |......HTT$....?
     409:	44 00 00 04 08 3c 40 40 7c 00 05 08 1c 20 40 20     D....<@@|.... @ 
     419:	1c 05 08 3c 40 3c 40 3c 05 08 44 28 10 28 44 04     ...<@<@<..D(.(D.
     429:	08 9c a0 a0 7c 00 03 08 64 54 4c 00 00 03 08 08     ....|...dTL.....
     439:	36 41 00 00 01 08 7f 00 00 00 00 03 08 41 36 08     6A...........A6.
     449:	00 00 04 08 08 04 08 04 00 04 08 7c 13 13 7c 00     ...........|..|.
     459:	04 08 3c 43 43 3c 00 04 08 3e 41 41 3e 00 04 08     ..<CC<...>AA>...
     469:	20 56 56 78 00 04 08 38 46 46 38 00 04 08 3c 42      VVx...8FF8...<B
     479:	42 7c 00                                            B|.

0000047c <digital_pin_to_timer_PGM>:
     47c:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     48c:	00 00 00 00                                         ....

00000490 <digital_pin_to_bit_mask_PGM>:
     490:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     4a0:	04 08 10 20                                         ... 

000004a4 <digital_pin_to_port_PGM>:
     4a4:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     4b4:	03 03 03 03                                         ....

000004b8 <port_to_output_PGM>:
     4b8:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000004c2 <port_to_mode_PGM>:
     4c2:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000004cc <__ctors_start>:
     4cc:	7e 04       	cpc	r7, r14
     4ce:	cf 0d       	add	r28, r15
     4d0:	64 0f       	add	r22, r20

000004d2 <__ctors_end>:
     4d2:	85 04       	cpc	r8, r5

000004d4 <__dtors_end>:
     4d4:	11 24       	eor	r1, r1
     4d6:	1f be       	out	0x3f, r1	; 63
     4d8:	cf ef       	ldi	r28, 0xFF	; 255
     4da:	d8 e0       	ldi	r29, 0x08	; 8
     4dc:	de bf       	out	0x3e, r29	; 62
     4de:	cd bf       	out	0x3d, r28	; 61

000004e0 <__do_copy_data>:
     4e0:	11 e0       	ldi	r17, 0x01	; 1
     4e2:	a0 e0       	ldi	r26, 0x00	; 0
     4e4:	b1 e0       	ldi	r27, 0x01	; 1
     4e6:	ec eb       	ldi	r30, 0xBC	; 188
     4e8:	f4 e2       	ldi	r31, 0x24	; 36
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <__do_copy_data+0x10>
     4ec:	05 90       	lpm	r0, Z+
     4ee:	0d 92       	st	X+, r0
     4f0:	a0 35       	cpi	r26, 0x50	; 80
     4f2:	b1 07       	cpc	r27, r17
     4f4:	d9 f7       	brne	.-10     	; 0x4ec <__do_copy_data+0xc>

000004f6 <__do_clear_bss>:
     4f6:	22 e0       	ldi	r18, 0x02	; 2
     4f8:	a0 e5       	ldi	r26, 0x50	; 80
     4fa:	b1 e0       	ldi	r27, 0x01	; 1
     4fc:	01 c0       	rjmp	.+2      	; 0x500 <.do_clear_bss_start>

000004fe <.do_clear_bss_loop>:
     4fe:	1d 92       	st	X+, r1

00000500 <.do_clear_bss_start>:
     500:	ac 37       	cpi	r26, 0x7C	; 124
     502:	b2 07       	cpc	r27, r18
     504:	e1 f7       	brne	.-8      	; 0x4fe <.do_clear_bss_loop>

00000506 <__do_global_ctors>:
     506:	12 e0       	ldi	r17, 0x02	; 2
     508:	c9 e6       	ldi	r28, 0x69	; 105
     50a:	d2 e0       	ldi	r29, 0x02	; 2
     50c:	04 c0       	rjmp	.+8      	; 0x516 <__do_global_ctors+0x10>
     50e:	21 97       	sbiw	r28, 0x01	; 1
     510:	fe 01       	movw	r30, r28
     512:	0e 94 be 11 	call	0x237c	; 0x237c <__tablejump2__>
     516:	c6 36       	cpi	r28, 0x66	; 102
     518:	d1 07       	cpc	r29, r17
     51a:	c9 f7       	brne	.-14     	; 0x50e <__do_global_ctors+0x8>
     51c:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <main>
     520:	0c 94 51 12 	jmp	0x24a2	; 0x24a2 <__do_global_dtors>

00000524 <__bad_interrupt>:
     524:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000528 <_Z8systTickv>:
 *                  Will be called from interrupt context
 *                  
 *****************************************************************************************************************************************************/
void systTick()
{
    Timer1Overflow = true;
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <Timer1Overflow>
     52e:	08 95       	ret

00000530 <setup>:
/******************************************************************************************************************************************************
 *  ARDUINO setup
 *****************************************************************************************************************************************************/
void setup()
{
    Timer1.initialize(200000);
     530:	40 e4       	ldi	r20, 0x40	; 64
     532:	5d e0       	ldi	r21, 0x0D	; 13
     534:	63 e0       	ldi	r22, 0x03	; 3
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	8a ec       	ldi	r24, 0xCA	; 202
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <_ZN8TimerOne10initializeEl>
    Timer1.attachInterrupt(systTick);
     540:	2f ef       	ldi	r18, 0xFF	; 255
     542:	3f ef       	ldi	r19, 0xFF	; 255
     544:	a9 01       	movw	r20, r18
     546:	64 e9       	ldi	r22, 0x94	; 148
     548:	72 e0       	ldi	r23, 0x02	; 2
     54a:	8a ec       	ldi	r24, 0xCA	; 202
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <_ZN8TimerOne15attachInterruptEPFvvEl>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     552:	26 e0       	ldi	r18, 0x06	; 6
     554:	40 e8       	ldi	r20, 0x80	; 128
     556:	55 e2       	ldi	r21, 0x25	; 37
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	86 ed       	ldi	r24, 0xD6	; 214
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_ZN14HardwareSerial5beginEmh>
    Serial.begin(9600);
    Matrix.init();
     564:	83 e5       	ldi	r24, 0x53	; 83
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	0e 94 b7 08 	call	0x116e	; 0x116e <_ZN9MaxMatrix4initEv>
    
    Matrix.setOrientation(MAXMATRIX_MODULE_ORIENTATION_90);
     56c:	61 e0       	ldi	r22, 0x01	; 1
     56e:	83 e5       	ldi	r24, 0x53	; 83
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	0e 94 73 05 	call	0xae6	; 0xae6 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType>
    Matrix.setText("Andreas");
     576:	60 e0       	ldi	r22, 0x00	; 0
     578:	71 e0       	ldi	r23, 0x01	; 1
     57a:	83 e5       	ldi	r24, 0x53	; 83
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <_ZN9MaxMatrix7setTextEPKc>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *****************************************************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     582:	4d e1       	ldi	r20, 0x1D	; 29
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	68 e0       	ldi	r22, 0x08	; 8
     588:	71 e0       	ldi	r23, 0x01	; 1
     58a:	83 e8       	ldi	r24, 0x83	; 131
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	0e 94 13 12 	call	0x2426	; 0x2426 <strncpy>
    Destination[Length-1] = '\0';
     592:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <MaxMatrixText+0x1d>
    Matrix.init();
    
    Matrix.setOrientation(MAXMATRIX_MODULE_ORIENTATION_90);
    Matrix.setText("Andreas");
    stringCopy(MaxMatrixText, "Andreas Burnickl", sizeof(MaxMatrixText));
    UartInputComplete = false;
     596:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <UartInputComplete>
    Timer1Overflow = false;
     59a:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <Timer1Overflow>
    
    State = LEDMATRIX_STATE_READY;
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <State>
     5a4:	08 95       	ret

000005a6 <_Z9printHelpv>:
 *  \details        this function prints usage of Led Matrix over UART
 *                  
 *****************************************************************************************************************************************************/
void printHelp()
{
    Serial.println(F("command does not match"));
     5a6:	68 ee       	ldi	r22, 0xE8	; 232
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	86 ed       	ldi	r24, 0xD6	; 214
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	0e 94 1c 10 	call	0x2038	; 0x2038 <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(F("known commands are: text, intensity and speed"));
     5b2:	6a eb       	ldi	r22, 0xBA	; 186
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	86 ed       	ldi	r24, 0xD6	; 214
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	0e 94 1c 10 	call	0x2038	; 0x2038 <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(F("command and value has to be separated by an equal sign"));
     5be:	63 e8       	ldi	r22, 0x83	; 131
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	86 ed       	ldi	r24, 0xD6	; 214
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	0e 94 1c 10 	call	0x2038	; 0x2038 <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(F("Example: text=example text"));
     5ca:	68 e6       	ldi	r22, 0x68	; 104
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	86 ed       	ldi	r24, 0xD6	; 214
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	0c 94 1c 10 	jmp	0x2038	; 0x2038 <_ZN5Print7printlnEPK19__FlashStringHelper>

000005d6 <_Z15uartInputHandlev>:
 *  \details        this function handles and validates the incoming data. After splitting the data into
 *                  command and value a specific action will be called.
 *                 
 *****************************************************************************************************************************************************/
void uartInputHandle()
{
     5d6:	0f 93       	push	r16
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	cd b7       	in	r28, 0x3d	; 61
     5e0:	de b7       	in	r29, 0x3e	; 62
     5e2:	e6 97       	sbiw	r28, 0x36	; 54
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	f8 94       	cli
     5e8:	de bf       	out	0x3e, r29	; 62
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	cd bf       	out	0x3d, r28	; 61
    char command[COMMAND_MAX_LENGTH] = "";
     5ee:	1f 8e       	std	Y+31, r1	; 0x1f
     5f0:	18 a2       	std	Y+32, r1	; 0x20
     5f2:	19 a2       	std	Y+33, r1	; 0x21
     5f4:	1a a2       	std	Y+34, r1	; 0x22
     5f6:	fe 01       	movw	r30, r28
     5f8:	b3 96       	adiw	r30, 0x23	; 35
     5fa:	86 e0       	ldi	r24, 0x06	; 6
     5fc:	df 01       	movw	r26, r30
     5fe:	1d 92       	st	X+, r1
     600:	8a 95       	dec	r24
     602:	e9 f7       	brne	.-6      	; 0x5fe <_Z15uartInputHandlev+0x28>
    char valueASCII[MAXMATRIX_MAX_TEXT_LENGTH] = "";
     604:	19 82       	std	Y+1, r1	; 0x01
     606:	1a 82       	std	Y+2, r1	; 0x02
     608:	1b 82       	std	Y+3, r1	; 0x03
     60a:	1c 82       	std	Y+4, r1	; 0x04
     60c:	7e 97       	sbiw	r30, 0x1e	; 30
     60e:	8a e1       	ldi	r24, 0x1A	; 26
     610:	df 01       	movw	r26, r30
     612:	1d 92       	st	X+, r1
     614:	8a 95       	dec	r24
     616:	e9 f7       	brne	.-6      	; 0x612 <_Z15uartInputHandlev+0x3c>
    int value = 0;
    const char delimiterCommand[] = "=";
     618:	8d e3       	ldi	r24, 0x3D	; 61
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	9d ab       	std	Y+53, r25	; 0x35
     61e:	8c ab       	std	Y+52, r24	; 0x34
    const char delimiterValue[] = ",";
     620:	8c e2       	ldi	r24, 0x2C	; 44
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	9b ab       	std	Y+51, r25	; 0x33
     626:	8a ab       	std	Y+50, r24	; 0x32
    char *token = NULL;

    if(strchr(UartInput, delimiterCommand[0]))
     628:	6d e3       	ldi	r22, 0x3D	; 61
     62a:	70 e0       	ldi	r23, 0x00	; 0
     62c:	82 ea       	ldi	r24, 0xA2	; 162
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	0e 94 ff 11 	call	0x23fe	; 0x23fe <strchr>
     634:	89 2b       	or	r24, r25
     636:	09 f4       	brne	.+2      	; 0x63a <_Z15uartInputHandlev+0x64>
     638:	26 c1       	rjmp	.+588    	; 0x886 <_Z15uartInputHandlev+0x2b0>
    {
        token = strtok(UartInput, delimiterCommand);
     63a:	be 01       	movw	r22, r28
     63c:	6c 5c       	subi	r22, 0xCC	; 204
     63e:	7f 4f       	sbci	r23, 0xFF	; 255
     640:	82 ea       	ldi	r24, 0xA2	; 162
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <strtok>
        if(token != NULL) stringCopy(command, token, sizeof(command));
     648:	00 97       	sbiw	r24, 0x00	; 0
     64a:	41 f0       	breq	.+16     	; 0x65c <_Z15uartInputHandlev+0x86>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *****************************************************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     64c:	49 e0       	ldi	r20, 0x09	; 9
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	bc 01       	movw	r22, r24
     652:	ce 01       	movw	r24, r28
     654:	4f 96       	adiw	r24, 0x1f	; 31
     656:	0e 94 13 12 	call	0x2426	; 0x2426 <strncpy>
    Destination[Length-1] = '\0';
     65a:	18 a6       	std	Y+40, r1	; 0x28

    if(strchr(UartInput, delimiterCommand[0]))
    {
        token = strtok(UartInput, delimiterCommand);
        if(token != NULL) stringCopy(command, token, sizeof(command));
        token = strtok(NULL, delimiterCommand);
     65c:	be 01       	movw	r22, r28
     65e:	6c 5c       	subi	r22, 0xCC	; 204
     660:	7f 4f       	sbci	r23, 0xFF	; 255
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <strtok>
        if(token != NULL) stringCopy(valueASCII, token, sizeof(valueASCII));
     66a:	00 97       	sbiw	r24, 0x00	; 0
     66c:	41 f0       	breq	.+16     	; 0x67e <_Z15uartInputHandlev+0xa8>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *****************************************************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     66e:	4d e1       	ldi	r20, 0x1D	; 29
     670:	50 e0       	ldi	r21, 0x00	; 0
     672:	bc 01       	movw	r22, r24
     674:	ce 01       	movw	r24, r28
     676:	01 96       	adiw	r24, 0x01	; 1
     678:	0e 94 13 12 	call	0x2426	; 0x2426 <strncpy>
    Destination[Length-1] = '\0';
     67c:	1e 8e       	std	Y+30, r1	; 0x1e
        token = strtok(UartInput, delimiterCommand);
        if(token != NULL) stringCopy(command, token, sizeof(command));
        token = strtok(NULL, delimiterCommand);
        if(token != NULL) stringCopy(valueASCII, token, sizeof(valueASCII));

        if(strcmp(command, "textShift") == 0) {
     67e:	69 e1       	ldi	r22, 0x19	; 25
     680:	71 e0       	ldi	r23, 0x01	; 1
     682:	ce 01       	movw	r24, r28
     684:	4f 96       	adiw	r24, 0x1f	; 31
     686:	0e 94 0a 12 	call	0x2414	; 0x2414 <strcmp>
     68a:	89 2b       	or	r24, r25
     68c:	e9 f4       	brne	.+58     	; 0x6c8 <_Z15uartInputHandlev+0xf2>
            if(LEDMATRIX_STATE_STRING_SHIFT != State) State = LEDMATRIX_STATE_STRING_SHIFT;
     68e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <State>
     692:	82 30       	cpi	r24, 0x02	; 2
     694:	19 f0       	breq	.+6      	; 0x69c <_Z15uartInputHandlev+0xc6>
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <State>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *****************************************************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     69c:	4d e1       	ldi	r20, 0x1D	; 29
     69e:	50 e0       	ldi	r21, 0x00	; 0
     6a0:	be 01       	movw	r22, r28
     6a2:	6f 5f       	subi	r22, 0xFF	; 255
     6a4:	7f 4f       	sbci	r23, 0xFF	; 255
     6a6:	83 e8       	ldi	r24, 0x83	; 131
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	0e 94 13 12 	call	0x2426	; 0x2426 <strncpy>
    Destination[Length-1] = '\0';
     6ae:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <MaxMatrixText+0x1d>
        if(token != NULL) stringCopy(valueASCII, token, sizeof(valueASCII));

        if(strcmp(command, "textShift") == 0) {
            if(LEDMATRIX_STATE_STRING_SHIFT != State) State = LEDMATRIX_STATE_STRING_SHIFT;
            stringCopy(MaxMatrixText, valueASCII, sizeof(MaxMatrixText));
            Matrix.clear();
     6b2:	83 e5       	ldi	r24, 0x53	; 83
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	0e 94 9f 08 	call	0x113e	; 0x113e <_ZN9MaxMatrix5clearEv>
            Matrix.setTextWithShift(MaxMatrixText);
     6ba:	63 e8       	ldi	r22, 0x83	; 131
     6bc:	71 e0       	ldi	r23, 0x01	; 1
     6be:	83 e5       	ldi	r24, 0x53	; 83
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	0e 94 03 05 	call	0xa06	; 0xa06 <_ZN9MaxMatrix16setTextWithShiftEPc>
     6c6:	e8 c0       	rjmp	.+464    	; 0x898 <_Z15uartInputHandlev+0x2c2>
        }
        else if(strcmp(command, "text") == 0) {
     6c8:	63 e2       	ldi	r22, 0x23	; 35
     6ca:	71 e0       	ldi	r23, 0x01	; 1
     6cc:	ce 01       	movw	r24, r28
     6ce:	4f 96       	adiw	r24, 0x1f	; 31
     6d0:	0e 94 0a 12 	call	0x2414	; 0x2414 <strcmp>
     6d4:	89 2b       	or	r24, r25
     6d6:	e9 f4       	brne	.+58     	; 0x712 <_Z15uartInputHandlev+0x13c>
            if(LEDMATRIX_STATE_READY != State) State = LEDMATRIX_STATE_READY;
     6d8:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <State>
     6dc:	81 30       	cpi	r24, 0x01	; 1
     6de:	19 f0       	breq	.+6      	; 0x6e6 <_Z15uartInputHandlev+0x110>
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <State>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *****************************************************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     6e6:	4d e1       	ldi	r20, 0x1D	; 29
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	be 01       	movw	r22, r28
     6ec:	6f 5f       	subi	r22, 0xFF	; 255
     6ee:	7f 4f       	sbci	r23, 0xFF	; 255
     6f0:	83 e8       	ldi	r24, 0x83	; 131
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	0e 94 13 12 	call	0x2426	; 0x2426 <strncpy>
    Destination[Length-1] = '\0';
     6f8:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <MaxMatrixText+0x1d>
            Matrix.setTextWithShift(MaxMatrixText);
        }
        else if(strcmp(command, "text") == 0) {
            if(LEDMATRIX_STATE_READY != State) State = LEDMATRIX_STATE_READY;
            stringCopy(MaxMatrixText, valueASCII, sizeof(MaxMatrixText));
            Matrix.clear();
     6fc:	83 e5       	ldi	r24, 0x53	; 83
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	0e 94 9f 08 	call	0x113e	; 0x113e <_ZN9MaxMatrix5clearEv>
            Matrix.setText(MaxMatrixText);
     704:	63 e8       	ldi	r22, 0x83	; 131
     706:	71 e0       	ldi	r23, 0x01	; 1
     708:	83 e5       	ldi	r24, 0x53	; 83
     70a:	91 e0       	ldi	r25, 0x01	; 1
     70c:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <_ZN9MaxMatrix7setTextEPKc>
     710:	c3 c0       	rjmp	.+390    	; 0x898 <_Z15uartInputHandlev+0x2c2>
        }
        else if(strcmp(command, "intensity") == 0) {
     712:	68 e2       	ldi	r22, 0x28	; 40
     714:	71 e0       	ldi	r23, 0x01	; 1
     716:	ce 01       	movw	r24, r28
     718:	4f 96       	adiw	r24, 0x1f	; 31
     71a:	0e 94 0a 12 	call	0x2414	; 0x2414 <strcmp>
     71e:	89 2b       	or	r24, r25
     720:	d1 f4       	brne	.+52     	; 0x756 <_Z15uartInputHandlev+0x180>
            value = atoi(valueASCII);
     722:	ce 01       	movw	r24, r28
     724:	01 96       	adiw	r24, 0x01	; 1
     726:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <atoi>
            if(value >= MAXMATRIX_INTENSITY_MIN_VALUE && value <= MAXMATRIX_INTENSITY_MAX_VALUE) {
     72a:	9c 01       	movw	r18, r24
     72c:	21 50       	subi	r18, 0x01	; 1
     72e:	31 09       	sbc	r19, r1
     730:	20 31       	cpi	r18, 0x10	; 16
     732:	31 05       	cpc	r19, r1
     734:	38 f4       	brcc	.+14     	; 0x744 <_Z15uartInputHandlev+0x16e>
                Matrix.setIntensity(value-1);
     736:	6f ef       	ldi	r22, 0xFF	; 255
     738:	68 0f       	add	r22, r24
     73a:	83 e5       	ldi	r24, 0x53	; 83
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <_ZN9MaxMatrix12setIntensityEh>
     742:	aa c0       	rjmp	.+340    	; 0x898 <_Z15uartInputHandlev+0x2c2>
            } else {
                Serial.println(F("value out of range"));
     744:	66 ea       	ldi	r22, 0xA6	; 166
     746:	71 e0       	ldi	r23, 0x01	; 1
     748:	86 ed       	ldi	r24, 0xD6	; 214
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	0e 94 1c 10 	call	0x2038	; 0x2038 <_ZN5Print7printlnEPK19__FlashStringHelper>
                Serial.println(F("intensity range "TOSTRING(MAXMATRIX_INTENSITY_MIN_VALUE)" ... "TOSTRING(MAXMATRIX_INTENSITY_MAX_VALUE)));
     750:	66 e5       	ldi	r22, 0x56	; 86
     752:	71 e0       	ldi	r23, 0x01	; 1
     754:	29 c0       	rjmp	.+82     	; 0x7a8 <_Z15uartInputHandlev+0x1d2>
            }
        }
        else if(strcmp(command, "speed") == 0) {
     756:	62 e3       	ldi	r22, 0x32	; 50
     758:	71 e0       	ldi	r23, 0x01	; 1
     75a:	ce 01       	movw	r24, r28
     75c:	4f 96       	adiw	r24, 0x1f	; 31
     75e:	0e 94 0a 12 	call	0x2414	; 0x2414 <strcmp>
     762:	89 2b       	or	r24, r25
     764:	31 f5       	brne	.+76     	; 0x7b2 <_Z15uartInputHandlev+0x1dc>
            value = atoi(valueASCII);
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <atoi>
            if(value >= MAXMATRIX_SPEED_MIN_VALUE && value <= MAXMATRIX_SPEED_MAX_VALUE) {
     76e:	9c 01       	movw	r18, r24
     770:	21 50       	subi	r18, 0x01	; 1
     772:	31 09       	sbc	r19, r1
     774:	24 31       	cpi	r18, 0x14	; 20
     776:	31 05       	cpc	r19, r1
     778:	78 f4       	brcc	.+30     	; 0x798 <_Z15uartInputHandlev+0x1c2>
                Timer1.setPeriod(((long)(MAXMATRIX_SPEED_MAX_VALUE-value+1)*5) * 10000);
     77a:	a5 e1       	ldi	r26, 0x15	; 21
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	a8 1b       	sub	r26, r24
     780:	b9 0b       	sbc	r27, r25
     782:	20 e5       	ldi	r18, 0x50	; 80
     784:	33 ec       	ldi	r19, 0xC3	; 195
     786:	0e 94 b7 11 	call	0x236e	; 0x236e <__usmulhisi3>
     78a:	ab 01       	movw	r20, r22
     78c:	bc 01       	movw	r22, r24
     78e:	8a ec       	ldi	r24, 0xCA	; 202
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <_ZN8TimerOne9setPeriodEl>
     796:	80 c0       	rjmp	.+256    	; 0x898 <_Z15uartInputHandlev+0x2c2>
            } else {
                Serial.println(F("value out of range"));
     798:	63 e4       	ldi	r22, 0x43	; 67
     79a:	71 e0       	ldi	r23, 0x01	; 1
     79c:	86 ed       	ldi	r24, 0xD6	; 214
     79e:	91 e0       	ldi	r25, 0x01	; 1
     7a0:	0e 94 1c 10 	call	0x2038	; 0x2038 <_ZN5Print7printlnEPK19__FlashStringHelper>
                Serial.println(F("speed range "TOSTRING(MAXMATRIX_SPEED_MIN_VALUE)" ... "TOSTRING(MAXMATRIX_SPEED_MAX_VALUE)));
     7a4:	6f ef       	ldi	r22, 0xFF	; 255
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	86 ed       	ldi	r24, 0xD6	; 214
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	0e 94 1c 10 	call	0x2038	; 0x2038 <_ZN5Print7printlnEPK19__FlashStringHelper>
     7b0:	73 c0       	rjmp	.+230    	; 0x898 <_Z15uartInputHandlev+0x2c2>
            }
        }
        else if(strcmp(command, "setDot") == 0) {
     7b2:	68 e3       	ldi	r22, 0x38	; 56
     7b4:	71 e0       	ldi	r23, 0x01	; 1
     7b6:	ce 01       	movw	r24, r28
     7b8:	4f 96       	adiw	r24, 0x1f	; 31
     7ba:	0e 94 0a 12 	call	0x2414	; 0x2414 <strcmp>
     7be:	89 2b       	or	r24, r25
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <_Z15uartInputHandlev+0x1ee>
     7c2:	61 c0       	rjmp	.+194    	; 0x886 <_Z15uartInputHandlev+0x2b0>
            if(LEDMATRIX_STATE_READY != State) {
     7c4:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <State>
     7c8:	81 30       	cpi	r24, 0x01	; 1
     7ca:	39 f0       	breq	.+14     	; 0x7da <_Z15uartInputHandlev+0x204>
                State = LEDMATRIX_STATE_READY;
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <State>
                Matrix.clear();
     7d2:	83 e5       	ldi	r24, 0x53	; 83
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	0e 94 9f 08 	call	0x113e	; 0x113e <_ZN9MaxMatrix5clearEv>
            }
            char columnASCII[3] = "", rowASCII[3] = "", valueDotASCII[3] = "";
     7da:	1f a6       	std	Y+47, r1	; 0x2f
     7dc:	18 aa       	std	Y+48, r1	; 0x30
     7de:	19 aa       	std	Y+49, r1	; 0x31
     7e0:	1c a6       	std	Y+44, r1	; 0x2c
     7e2:	1d a6       	std	Y+45, r1	; 0x2d
     7e4:	1e a6       	std	Y+46, r1	; 0x2e
     7e6:	19 a6       	std	Y+41, r1	; 0x29
     7e8:	1a a6       	std	Y+42, r1	; 0x2a
     7ea:	1b a6       	std	Y+43, r1	; 0x2b
            token = strtok(valueASCII, delimiterValue);
     7ec:	be 01       	movw	r22, r28
     7ee:	6e 5c       	subi	r22, 0xCE	; 206
     7f0:	7f 4f       	sbci	r23, 0xFF	; 255
     7f2:	ce 01       	movw	r24, r28
     7f4:	01 96       	adiw	r24, 0x01	; 1
     7f6:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <strtok>
            if(token != NULL) stringCopy(columnASCII, token, sizeof(columnASCII));
     7fa:	00 97       	sbiw	r24, 0x00	; 0
     7fc:	41 f0       	breq	.+16     	; 0x80e <_Z15uartInputHandlev+0x238>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *****************************************************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     7fe:	42 e0       	ldi	r20, 0x02	; 2
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	bc 01       	movw	r22, r24
     804:	ce 01       	movw	r24, r28
     806:	8f 96       	adiw	r24, 0x2f	; 47
     808:	0e 94 13 12 	call	0x2426	; 0x2426 <strncpy>
    Destination[Length-1] = '\0';
     80c:	19 aa       	std	Y+49, r1	; 0x31
                Matrix.clear();
            }
            char columnASCII[3] = "", rowASCII[3] = "", valueDotASCII[3] = "";
            token = strtok(valueASCII, delimiterValue);
            if(token != NULL) stringCopy(columnASCII, token, sizeof(columnASCII));
            token = strtok(NULL, delimiterValue);
     80e:	be 01       	movw	r22, r28
     810:	6e 5c       	subi	r22, 0xCE	; 206
     812:	7f 4f       	sbci	r23, 0xFF	; 255
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <strtok>
            if(token != NULL) stringCopy(rowASCII, token, sizeof(rowASCII));
     81c:	00 97       	sbiw	r24, 0x00	; 0
     81e:	41 f0       	breq	.+16     	; 0x830 <_Z15uartInputHandlev+0x25a>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *****************************************************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     820:	42 e0       	ldi	r20, 0x02	; 2
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	bc 01       	movw	r22, r24
     826:	ce 01       	movw	r24, r28
     828:	8c 96       	adiw	r24, 0x2c	; 44
     82a:	0e 94 13 12 	call	0x2426	; 0x2426 <strncpy>
    Destination[Length-1] = '\0';
     82e:	1e a6       	std	Y+46, r1	; 0x2e
            char columnASCII[3] = "", rowASCII[3] = "", valueDotASCII[3] = "";
            token = strtok(valueASCII, delimiterValue);
            if(token != NULL) stringCopy(columnASCII, token, sizeof(columnASCII));
            token = strtok(NULL, delimiterValue);
            if(token != NULL) stringCopy(rowASCII, token, sizeof(rowASCII));
            token = strtok(NULL, delimiterValue);
     830:	be 01       	movw	r22, r28
     832:	6e 5c       	subi	r22, 0xCE	; 206
     834:	7f 4f       	sbci	r23, 0xFF	; 255
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <strtok>
            if(token != NULL) stringCopy(valueDotASCII, token, sizeof(valueDotASCII));
     83e:	00 97       	sbiw	r24, 0x00	; 0
     840:	41 f0       	breq	.+16     	; 0x852 <_Z15uartInputHandlev+0x27c>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *****************************************************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     842:	42 e0       	ldi	r20, 0x02	; 2
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	bc 01       	movw	r22, r24
     848:	ce 01       	movw	r24, r28
     84a:	89 96       	adiw	r24, 0x29	; 41
     84c:	0e 94 13 12 	call	0x2426	; 0x2426 <strncpy>
    Destination[Length-1] = '\0';
     850:	1b a6       	std	Y+43, r1	; 0x2b
            if(token != NULL) stringCopy(columnASCII, token, sizeof(columnASCII));
            token = strtok(NULL, delimiterValue);
            if(token != NULL) stringCopy(rowASCII, token, sizeof(rowASCII));
            token = strtok(NULL, delimiterValue);
            if(token != NULL) stringCopy(valueDotASCII, token, sizeof(valueDotASCII));
            Matrix.setDot(atoi(columnASCII), atoi(rowASCII), atoi(valueDotASCII));
     852:	ce 01       	movw	r24, r28
     854:	89 96       	adiw	r24, 0x29	; 41
     856:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <atoi>
     85a:	8c 01       	movw	r16, r24
     85c:	ce 01       	movw	r24, r28
     85e:	8c 96       	adiw	r24, 0x2c	; 44
     860:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <atoi>
     864:	48 2f       	mov	r20, r24
     866:	ce 01       	movw	r24, r28
     868:	8f 96       	adiw	r24, 0x2f	; 47
     86a:	4e ab       	std	Y+54, r20	; 0x36
     86c:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <atoi>
     870:	68 2f       	mov	r22, r24
     872:	21 e0       	ldi	r18, 0x01	; 1
     874:	4e a9       	ldd	r20, Y+54	; 0x36
     876:	01 2b       	or	r16, r17
     878:	09 f4       	brne	.+2      	; 0x87c <_Z15uartInputHandlev+0x2a6>
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	83 e5       	ldi	r24, 0x53	; 83
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	0e 94 98 09 	call	0x1330	; 0x1330 <_ZN9MaxMatrix6setDotEhhb>
     884:	09 c0       	rjmp	.+18     	; 0x898 <_Z15uartInputHandlev+0x2c2>
        }
        else {
            Serial.println(command);
     886:	be 01       	movw	r22, r28
     888:	61 5e       	subi	r22, 0xE1	; 225
     88a:	7f 4f       	sbci	r23, 0xFF	; 255
     88c:	86 ed       	ldi	r24, 0xD6	; 214
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	0e 94 2e 10 	call	0x205c	; 0x205c <_ZN5Print7printlnEPKc>
            printHelp(); 
     894:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_Z9printHelpv>
        }
    } else {
        Serial.println(command);
        printHelp(); 
    }
}
     898:	e6 96       	adiw	r28, 0x36	; 54
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	f8 94       	cli
     89e:	de bf       	out	0x3e, r29	; 62
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	cd bf       	out	0x3d, r28	; 61
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	08 95       	ret

000008ae <loop>:
/******************************************************************************************************************************************************
 *  ARDUINO loop
 *****************************************************************************************************************************************************/
void loop()
{ 
    if (UartInputComplete)
     8ae:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <UartInputComplete>
     8b2:	88 23       	and	r24, r24
     8b4:	31 f0       	breq	.+12     	; 0x8c2 <loop+0x14>
    {
        uartInputHandle();
     8b6:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <_Z15uartInputHandlev>
        // clear the string:
        UartInput[0] = '\0';
     8ba:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <UartInput>
        UartInputComplete = false;
     8be:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <UartInputComplete>
    }

    if(Timer1Overflow && State == LEDMATRIX_STATE_STRING_SHIFT)
     8c2:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <Timer1Overflow>
     8c6:	88 23       	and	r24, r24
     8c8:	c1 f0       	breq	.+48     	; 0x8fa <loop+0x4c>
     8ca:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <State>
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	a1 f4       	brne	.+40     	; 0x8fa <loop+0x4c>
    {
        if(Matrix.getState() == MAXMATRIX_STATE_STRING_SHIFT)
     8d2:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <Matrix+0x3>
     8d6:	83 30       	cpi	r24, 0x03	; 3
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <loop+0x34>
            Matrix.shiftTask();
     8da:	83 e5       	ldi	r24, 0x53	; 83
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <_ZN9MaxMatrix9shiftTaskEv>
        if(Matrix.getState() == MAXMATRIX_STATE_READY)
     8e2:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <Matrix+0x3>
     8e6:	82 30       	cpi	r24, 0x02	; 2
     8e8:	31 f4       	brne	.+12     	; 0x8f6 <loop+0x48>
        {
            Matrix.setTextWithShift(MaxMatrixText);
     8ea:	63 e8       	ldi	r22, 0x83	; 131
     8ec:	71 e0       	ldi	r23, 0x01	; 1
     8ee:	83 e5       	ldi	r24, 0x53	; 83
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	0e 94 03 05 	call	0xa06	; 0xa06 <_ZN9MaxMatrix16setTextWithShiftEPc>
        }
        Timer1Overflow = false;
     8f6:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <Timer1Overflow>
     8fa:	08 95       	ret

000008fc <_GLOBAL__sub_I_UartInput>:
 *****************************************************************************************************************************************************/
char UartInput[UART_INPUT_LENGTH];                  // buffer for incoming UART data
boolean UartInputComplete;                          // flag UART string is complete
char MaxMatrixText[MAXMATRIX_MAX_TEXT_LENGTH];      // current Matrix Text
bool Timer1Overflow;                                // flag Timer1 overflow
MaxMatrix Matrix(MAXMATRIX_DATA_PIN, MAXMATRIX_CS_PIN, MAXMATRIX_CLOCK_PIN);
     8fc:	2b e0       	ldi	r18, 0x0B	; 11
     8fe:	4a e0       	ldi	r20, 0x0A	; 10
     900:	6c e0       	ldi	r22, 0x0C	; 12
     902:	83 e5       	ldi	r24, 0x53	; 83
     904:	91 e0       	ldi	r25, 0x01	; 1
     906:	0c 94 b1 04 	jmp	0x962	; 0x962 <_ZN9MaxMatrixC1Ehhh>

0000090a <_GLOBAL__sub_D_UartInput>:
     90a:	83 e5       	ldi	r24, 0x53	; 83
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	0c 94 cc 04 	jmp	0x998	; 0x998 <_ZN9MaxMatrixD1Ev>

00000912 <_Z11serialEventv>:
 *  \details        this function saves incoming UART signs into UART buffer.
 *                  After receiving new line, string is complete and flag will be set.
 *  \pre            will be called at the end of the main function             
 *****************************************************************************************************************************************************/
void serialEvent() 
{
     912:	1f 93       	push	r17
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
        // if the incoming character is a newline, set a flag
        if (inChar == '\n') {
            UartInputComplete = true;
        } else {
            // check for free space in buffer
            int UartInputLength = strlen(UartInput);
     918:	c2 ea       	ldi	r28, 0xA2	; 162
     91a:	d1 e0       	ldi	r29, 0x01	; 1
    {
        // get the new byte from UART
        char inChar = (char) Serial.read();
        // if the incoming character is a newline, set a flag
        if (inChar == '\n') {
            UartInputComplete = true;
     91c:	11 e0       	ldi	r17, 0x01	; 1
 *                  After receiving new line, string is complete and flag will be set.
 *  \pre            will be called at the end of the main function             
 *****************************************************************************************************************************************************/
void serialEvent() 
{
    while (Serial.available()) 
     91e:	86 ed       	ldi	r24, 0xD6	; 214
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZN14HardwareSerial9availableEv>
     926:	89 2b       	or	r24, r25
     928:	c1 f0       	breq	.+48     	; 0x95a <_Z11serialEventv+0x48>
    {
        // get the new byte from UART
        char inChar = (char) Serial.read();
     92a:	86 ed       	ldi	r24, 0xD6	; 214
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_ZN14HardwareSerial4readEv>
        // if the incoming character is a newline, set a flag
        if (inChar == '\n') {
     932:	8a 30       	cpi	r24, 0x0A	; 10
     934:	19 f4       	brne	.+6      	; 0x93c <_Z11serialEventv+0x2a>
            UartInputComplete = true;
     936:	10 93 a1 01 	sts	0x01A1, r17	; 0x8001a1 <UartInputComplete>
     93a:	f1 cf       	rjmp	.-30     	; 0x91e <_Z11serialEventv+0xc>
        } else {
            // check for free space in buffer
            int UartInputLength = strlen(UartInput);
     93c:	fe 01       	movw	r30, r28
     93e:	01 90       	ld	r0, Z+
     940:	00 20       	and	r0, r0
     942:	e9 f7       	brne	.-6      	; 0x93e <_Z11serialEventv+0x2c>
     944:	31 97       	sbiw	r30, 0x01	; 1
     946:	e2 5a       	subi	r30, 0xA2	; 162
     948:	f1 40       	sbci	r31, 0x01	; 1
            if(UartInputLength < UART_INPUT_LENGTH-1)
     94a:	e7 32       	cpi	r30, 0x27	; 39
     94c:	f1 05       	cpc	r31, r1
     94e:	3c f7       	brge	.-50     	; 0x91e <_Z11serialEventv+0xc>
            {
                // save new char
                UartInput[UartInputLength] = inChar;
     950:	ee 55       	subi	r30, 0x5E	; 94
     952:	fe 4f       	sbci	r31, 0xFE	; 254
     954:	80 83       	st	Z, r24
                UartInput[UartInputLength+1] = '\0';
     956:	11 82       	std	Z+1, r1	; 0x01
     958:	e2 cf       	rjmp	.-60     	; 0x91e <_Z11serialEventv+0xc>
            }
        }
    }
} /* serialEvent */
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	1f 91       	pop	r17
     960:	08 95       	ret

00000962 <_ZN9MaxMatrixC1Ehhh>:
		}
		return E_OK;
	} else {
		return E_NOT_OK;
	}
} /* setRowOnAllModulesLL */
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	fc 01       	movw	r30, r24
     968:	60 83       	st	Z, r22
     96a:	41 83       	std	Z+1, r20	; 0x01
     96c:	22 83       	std	Z+2, r18	; 0x02
     96e:	16 a6       	std	Z+46, r1	; 0x2e
     970:	15 a6       	std	Z+45, r1	; 0x2d
     972:	14 a6       	std	Z+44, r1	; 0x2c
     974:	14 82       	std	Z+4, r1	; 0x04
     976:	13 82       	std	Z+3, r1	; 0x03
     978:	ec 01       	movw	r28, r24
     97a:	25 96       	adiw	r28, 0x05	; 5
     97c:	dc 01       	movw	r26, r24
     97e:	95 96       	adiw	r26, 0x25	; 37
     980:	19 92       	st	Y+, r1
     982:	ca 17       	cp	r28, r26
     984:	db 07       	cpc	r29, r27
     986:	e1 f7       	brne	.-8      	; 0x980 <_ZN9MaxMatrixC1Ehhh+0x1e>
     988:	bc 96       	adiw	r30, 0x2c	; 44
     98a:	1d 92       	st	X+, r1
     98c:	ae 17       	cp	r26, r30
     98e:	bf 07       	cpc	r27, r31
     990:	e1 f7       	brne	.-8      	; 0x98a <_ZN9MaxMatrixC1Ehhh+0x28>
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	08 95       	ret

00000998 <_ZN9MaxMatrixD1Ev>:
     998:	08 95       	ret

0000099a <_ZN9MaxMatrix13RegisterWriteEhh>:
     99a:	ef 92       	push	r14
     99c:	ff 92       	push	r15
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	ec 01       	movw	r28, r24
     9a8:	e6 2e       	mov	r14, r22
     9aa:	f4 2e       	mov	r15, r20
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	89 81       	ldd	r24, Y+1	; 0x01
     9b0:	0e 94 2a 11 	call	0x2254	; 0x2254 <digitalWrite>
     9b4:	04 e0       	ldi	r16, 0x04	; 4
     9b6:	10 e0       	ldi	r17, 0x00	; 0
     9b8:	2e 2d       	mov	r18, r14
     9ba:	41 e0       	ldi	r20, 0x01	; 1
     9bc:	6a 81       	ldd	r22, Y+2	; 0x02
     9be:	88 81       	ld	r24, Y
     9c0:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <shiftOut>
     9c4:	2f 2d       	mov	r18, r15
     9c6:	41 e0       	ldi	r20, 0x01	; 1
     9c8:	6a 81       	ldd	r22, Y+2	; 0x02
     9ca:	88 81       	ld	r24, Y
     9cc:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <shiftOut>
     9d0:	01 50       	subi	r16, 0x01	; 1
     9d2:	11 09       	sbc	r17, r1
     9d4:	89 f7       	brne	.-30     	; 0x9b8 <_ZN9MaxMatrix13RegisterWriteEhh+0x1e>
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	89 81       	ldd	r24, Y+1	; 0x01
     9da:	0e 94 2a 11 	call	0x2254	; 0x2254 <digitalWrite>
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	ef 90       	pop	r14
     9ee:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <digitalWrite>

000009f2 <_ZN9MaxMatrix12setIntensityEh>:
     9f2:	60 31       	cpi	r22, 0x10	; 16
     9f4:	30 f4       	brcc	.+12     	; 0xa02 <_ZN9MaxMatrix12setIntensityEh+0x10>
     9f6:	46 2f       	mov	r20, r22
     9f8:	6a e0       	ldi	r22, 0x0A	; 10
     9fa:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN9MaxMatrix13RegisterWriteEhh>
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	08 95       	ret
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	08 95       	ret

00000a06 <_ZN9MaxMatrix16setTextWithShiftEPc>:
     a06:	fc 01       	movw	r30, r24
     a08:	61 15       	cp	r22, r1
     a0a:	71 05       	cpc	r23, r1
     a0c:	39 f0       	breq	.+14     	; 0xa1c <_ZN9MaxMatrix16setTextWithShiftEPc+0x16>
     a0e:	14 a6       	std	Z+44, r1	; 0x2c
     a10:	76 a7       	std	Z+46, r23	; 0x2e
     a12:	65 a7       	std	Z+45, r22	; 0x2d
     a14:	83 e0       	ldi	r24, 0x03	; 3
     a16:	83 83       	std	Z+3, r24	; 0x03
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	08 95       	ret
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	08 95       	ret

00000a20 <_ZN9MaxMatrix9getSpriteEhPA7_h>:
     a20:	65 36       	cpi	r22, 0x65	; 101
     a22:	68 f4       	brcc	.+26     	; 0xa3e <_ZN9MaxMatrix9getSpriteEhPA7_h+0x1e>
     a24:	ca 01       	movw	r24, r20
     a26:	27 e0       	ldi	r18, 0x07	; 7
     a28:	62 9f       	mul	r22, r18
     a2a:	b0 01       	movw	r22, r0
     a2c:	11 24       	eor	r1, r1
     a2e:	67 54       	subi	r22, 0x47	; 71
     a30:	7e 4f       	sbci	r23, 0xFE	; 254
     a32:	47 e0       	ldi	r20, 0x07	; 7
     a34:	50 e0       	ldi	r21, 0x00	; 0
     a36:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <memcpy_P>
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	08 95       	ret
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	08 95       	ret

00000a42 <_ZN9MaxMatrix11reverseByteEh>:
     a42:	62 95       	swap	r22
     a44:	96 2f       	mov	r25, r22
     a46:	93 73       	andi	r25, 0x33	; 51
     a48:	84 e0       	ldi	r24, 0x04	; 4
     a4a:	98 9f       	mul	r25, r24
     a4c:	90 01       	movw	r18, r0
     a4e:	11 24       	eor	r1, r1
     a50:	6c 7c       	andi	r22, 0xCC	; 204
     a52:	66 95       	lsr	r22
     a54:	66 95       	lsr	r22
     a56:	26 2b       	or	r18, r22
     a58:	82 2f       	mov	r24, r18
     a5a:	85 75       	andi	r24, 0x55	; 85
     a5c:	88 0f       	add	r24, r24
     a5e:	2a 7a       	andi	r18, 0xAA	; 170
     a60:	26 95       	lsr	r18
     a62:	82 2b       	or	r24, r18
     a64:	08 95       	ret

00000a66 <_ZN9MaxMatrix6reloadEv>:
     a66:	df 92       	push	r13
     a68:	ef 92       	push	r14
     a6a:	ff 92       	push	r15
     a6c:	0f 93       	push	r16
     a6e:	1f 93       	push	r17
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	ec 01       	movw	r28, r24
     a76:	00 e0       	ldi	r16, 0x00	; 0
     a78:	10 e0       	ldi	r17, 0x00	; 0
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	89 81       	ldd	r24, Y+1	; 0x01
     a7e:	0e 94 2a 11 	call	0x2254	; 0x2254 <digitalWrite>
     a82:	e1 2c       	mov	r14, r1
     a84:	f1 2c       	mov	r15, r1
     a86:	dd 24       	eor	r13, r13
     a88:	d3 94       	inc	r13
     a8a:	d0 0e       	add	r13, r16
     a8c:	2d 2d       	mov	r18, r13
     a8e:	41 e0       	ldi	r20, 0x01	; 1
     a90:	6a 81       	ldd	r22, Y+2	; 0x02
     a92:	88 81       	ld	r24, Y
     a94:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <shiftOut>
     a98:	f7 01       	movw	r30, r14
     a9a:	e0 0f       	add	r30, r16
     a9c:	f1 1f       	adc	r31, r17
     a9e:	ec 0f       	add	r30, r28
     aa0:	fd 1f       	adc	r31, r29
     aa2:	25 81       	ldd	r18, Z+5	; 0x05
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	6a 81       	ldd	r22, Y+2	; 0x02
     aa8:	88 81       	ld	r24, Y
     aaa:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <shiftOut>
     aae:	88 e0       	ldi	r24, 0x08	; 8
     ab0:	e8 0e       	add	r14, r24
     ab2:	f1 1c       	adc	r15, r1
     ab4:	80 e2       	ldi	r24, 0x20	; 32
     ab6:	e8 16       	cp	r14, r24
     ab8:	f1 04       	cpc	r15, r1
     aba:	41 f7       	brne	.-48     	; 0xa8c <_ZN9MaxMatrix6reloadEv+0x26>
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	89 81       	ldd	r24, Y+1	; 0x01
     ac0:	0e 94 2a 11 	call	0x2254	; 0x2254 <digitalWrite>
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	89 81       	ldd	r24, Y+1	; 0x01
     ac8:	0e 94 2a 11 	call	0x2254	; 0x2254 <digitalWrite>
     acc:	0f 5f       	subi	r16, 0xFF	; 255
     ace:	1f 4f       	sbci	r17, 0xFF	; 255
     ad0:	08 30       	cpi	r16, 0x08	; 8
     ad2:	11 05       	cpc	r17, r1
     ad4:	91 f6       	brne	.-92     	; 0xa7a <_ZN9MaxMatrix6reloadEv+0x14>
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	ff 90       	pop	r15
     ae0:	ef 90       	pop	r14
     ae2:	df 90       	pop	r13
     ae4:	08 95       	ret

00000ae6 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType>:
     ae6:	3f 92       	push	r3
     ae8:	4f 92       	push	r4
     aea:	5f 92       	push	r5
     aec:	6f 92       	push	r6
     aee:	7f 92       	push	r7
     af0:	8f 92       	push	r8
     af2:	9f 92       	push	r9
     af4:	af 92       	push	r10
     af6:	bf 92       	push	r11
     af8:	cf 92       	push	r12
     afa:	df 92       	push	r13
     afc:	ef 92       	push	r14
     afe:	ff 92       	push	r15
     b00:	0f 93       	push	r16
     b02:	1f 93       	push	r17
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	cd b7       	in	r28, 0x3d	; 61
     b0a:	de b7       	in	r29, 0x3e	; 62
     b0c:	a8 97       	sbiw	r28, 0x28	; 40
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	f8 94       	cli
     b12:	de bf       	out	0x3e, r29	; 62
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	cd bf       	out	0x3d, r28	; 61
     b18:	fc 01       	movw	r30, r24
     b1a:	94 81       	ldd	r25, Z+4	; 0x04
     b1c:	69 17       	cp	r22, r25
     b1e:	09 f4       	brne	.+2      	; 0xb22 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x3c>
     b20:	90 c1       	rjmp	.+800    	; 0xe42 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x35c>
     b22:	91 11       	cpse	r25, r1
     b24:	04 c0       	rjmp	.+8      	; 0xb2e <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x48>
     b26:	61 30       	cpi	r22, 0x01	; 1
     b28:	a9 f0       	breq	.+42     	; 0xb54 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x6e>
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	7e c0       	rjmp	.+252    	; 0xc2a <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x144>
     b2e:	91 30       	cpi	r25, 0x01	; 1
     b30:	21 f4       	brne	.+8      	; 0xb3a <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x54>
     b32:	62 30       	cpi	r22, 0x02	; 2
     b34:	79 f0       	breq	.+30     	; 0xb54 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x6e>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	7f c0       	rjmp	.+254    	; 0xc38 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x152>
     b3a:	92 30       	cpi	r25, 0x02	; 2
     b3c:	21 f4       	brne	.+8      	; 0xb46 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x60>
     b3e:	63 30       	cpi	r22, 0x03	; 3
     b40:	49 f0       	breq	.+18     	; 0xb54 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x6e>
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	7f c0       	rjmp	.+254    	; 0xc44 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x15e>
     b46:	93 30       	cpi	r25, 0x03	; 3
     b48:	09 f0       	breq	.+2      	; 0xb4c <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x66>
     b4a:	73 c0       	rjmp	.+230    	; 0xc32 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x14c>
     b4c:	66 23       	and	r22, r22
     b4e:	11 f0       	breq	.+4      	; 0xb54 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x6e>
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	86 c0       	rjmp	.+268    	; 0xc60 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x17a>
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	41 2c       	mov	r4, r1
     b5a:	51 2c       	mov	r5, r1
     b5c:	32 01       	movw	r6, r4
     b5e:	43 94       	inc	r4
     b60:	49 01       	movw	r8, r18
     b62:	47 e0       	ldi	r20, 0x07	; 7
     b64:	84 0e       	add	r8, r20
     b66:	91 1c       	adc	r9, r1
     b68:	47 e0       	ldi	r20, 0x07	; 7
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	87 e0       	ldi	r24, 0x07	; 7
     b6e:	38 2e       	mov	r3, r24
     b70:	32 0e       	add	r3, r18
     b72:	aa 24       	eor	r10, r10
     b74:	a3 94       	inc	r10
     b76:	b1 2c       	mov	r11, r1
     b78:	04 2e       	mov	r0, r20
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x9a>
     b7c:	aa 0c       	add	r10, r10
     b7e:	bb 1c       	adc	r11, r11
     b80:	0a 94       	dec	r0
     b82:	e2 f7       	brpl	.-8      	; 0xb7c <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x96>
     b84:	be a2       	std	Y+38, r11	; 0x26
     b86:	ad a2       	std	Y+37, r10	; 0x25
     b88:	84 01       	movw	r16, r8
     b8a:	87 e0       	ldi	r24, 0x07	; 7
     b8c:	73 2d       	mov	r23, r3
     b8e:	74 1b       	sub	r23, r20
     b90:	ee 24       	eor	r14, r14
     b92:	e3 94       	inc	r14
     b94:	f1 2c       	mov	r15, r1
     b96:	ec 0e       	add	r14, r28
     b98:	fd 1e       	adc	r15, r29
     b9a:	e7 0e       	add	r14, r23
     b9c:	f1 1c       	adc	r15, r1
     b9e:	02 17       	cp	r16, r18
     ba0:	13 07       	cpc	r17, r19
     ba2:	b4 f1       	brlt	.+108    	; 0xc10 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x12a>
     ba4:	df 01       	movw	r26, r30
     ba6:	a0 0f       	add	r26, r16
     ba8:	b1 1f       	adc	r27, r17
     baa:	15 96       	adiw	r26, 0x05	; 5
     bac:	ac 91       	ld	r26, X
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	cd a0       	ldd	r12, Y+37	; 0x25
     bb2:	de a0       	ldd	r13, Y+38	; 0x26
     bb4:	ac 21       	and	r26, r12
     bb6:	bd 21       	and	r27, r13
     bb8:	ab 2b       	or	r26, r27
     bba:	91 f0       	breq	.+36     	; 0xbe0 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0xfa>
     bbc:	d7 01       	movw	r26, r14
     bbe:	7c 91       	ld	r23, X
     bc0:	63 01       	movw	r12, r6
     bc2:	52 01       	movw	r10, r4
     bc4:	08 2e       	mov	r0, r24
     bc6:	04 c0       	rjmp	.+8      	; 0xbd0 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0xea>
     bc8:	aa 0c       	add	r10, r10
     bca:	bb 1c       	adc	r11, r11
     bcc:	cc 1c       	adc	r12, r12
     bce:	dd 1c       	adc	r13, r13
     bd0:	0a 94       	dec	r0
     bd2:	d2 f7       	brpl	.-12     	; 0xbc8 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0xe2>
     bd4:	a9 a2       	std	Y+33, r10	; 0x21
     bd6:	ba a2       	std	Y+34, r11	; 0x22
     bd8:	cb a2       	std	Y+35, r12	; 0x23
     bda:	dc a2       	std	Y+36, r13	; 0x24
     bdc:	7a 29       	or	r23, r10
     bde:	13 c0       	rjmp	.+38     	; 0xc06 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x120>
     be0:	63 01       	movw	r12, r6
     be2:	52 01       	movw	r10, r4
     be4:	08 2e       	mov	r0, r24
     be6:	04 c0       	rjmp	.+8      	; 0xbf0 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x10a>
     be8:	aa 0c       	add	r10, r10
     bea:	bb 1c       	adc	r11, r11
     bec:	cc 1c       	adc	r12, r12
     bee:	dd 1c       	adc	r13, r13
     bf0:	0a 94       	dec	r0
     bf2:	d2 f7       	brpl	.-12     	; 0xbe8 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x102>
     bf4:	a9 a2       	std	Y+33, r10	; 0x21
     bf6:	ba a2       	std	Y+34, r11	; 0x22
     bf8:	cb a2       	std	Y+35, r12	; 0x23
     bfa:	dc a2       	std	Y+36, r13	; 0x24
     bfc:	da 2c       	mov	r13, r10
     bfe:	d0 94       	com	r13
     c00:	d7 01       	movw	r26, r14
     c02:	7c 91       	ld	r23, X
     c04:	7d 21       	and	r23, r13
     c06:	7c 93       	st	X, r23
     c08:	81 50       	subi	r24, 0x01	; 1
     c0a:	01 50       	subi	r16, 0x01	; 1
     c0c:	11 09       	sbc	r17, r1
     c0e:	c7 cf       	rjmp	.-114    	; 0xb9e <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0xb8>
     c10:	41 50       	subi	r20, 0x01	; 1
     c12:	51 09       	sbc	r21, r1
     c14:	08 f0       	brcs	.+2      	; 0xc18 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x132>
     c16:	ad cf       	rjmp	.-166    	; 0xb72 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x8c>
     c18:	28 5f       	subi	r18, 0xF8	; 248
     c1a:	3f 4f       	sbci	r19, 0xFF	; 255
     c1c:	20 32       	cpi	r18, 0x20	; 32
     c1e:	31 05       	cpc	r19, r1
     c20:	09 f0       	breq	.+2      	; 0xc24 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x13e>
     c22:	9e cf       	rjmp	.-196    	; 0xb60 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x7a>
     c24:	80 e2       	ldi	r24, 0x20	; 32
     c26:	91 11       	cpse	r25, r1
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x14e>
     c2a:	62 30       	cpi	r22, 0x02	; 2
     c2c:	09 f0       	breq	.+2      	; 0xc30 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x14a>
     c2e:	68 c0       	rjmp	.+208    	; 0xd00 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x21a>
     c30:	0b c0       	rjmp	.+22     	; 0xc48 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x162>
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	91 30       	cpi	r25, 0x01	; 1
     c36:	21 f4       	brne	.+8      	; 0xc40 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x15a>
     c38:	63 30       	cpi	r22, 0x03	; 3
     c3a:	09 f0       	breq	.+2      	; 0xc3e <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x158>
     c3c:	67 c0       	rjmp	.+206    	; 0xd0c <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x226>
     c3e:	04 c0       	rjmp	.+8      	; 0xc48 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x162>
     c40:	92 30       	cpi	r25, 0x02	; 2
     c42:	59 f4       	brne	.+22     	; 0xc5a <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x174>
     c44:	61 11       	cpse	r22, r1
     c46:	67 c0       	rjmp	.+206    	; 0xd16 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x230>
     c48:	27 e0       	ldi	r18, 0x07	; 7
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	17 e0       	ldi	r17, 0x07	; 7
     c4e:	31 2e       	mov	r3, r17
     c50:	41 2c       	mov	r4, r1
     c52:	51 2c       	mov	r5, r1
     c54:	32 01       	movw	r6, r4
     c56:	43 94       	inc	r4
     c58:	0d c0       	rjmp	.+26     	; 0xc74 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x18e>
     c5a:	93 30       	cpi	r25, 0x03	; 3
     c5c:	09 f0       	breq	.+2      	; 0xc60 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x17a>
     c5e:	4e c0       	rjmp	.+156    	; 0xcfc <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x216>
     c60:	61 30       	cpi	r22, 0x01	; 1
     c62:	09 f0       	breq	.+2      	; 0xc66 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x180>
     c64:	65 c0       	rjmp	.+202    	; 0xd30 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x24a>
     c66:	f0 cf       	rjmp	.-32     	; 0xc48 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x162>
     c68:	28 5f       	subi	r18, 0xF8	; 248
     c6a:	3f 4f       	sbci	r19, 0xFF	; 255
     c6c:	27 32       	cpi	r18, 0x27	; 39
     c6e:	31 05       	cpc	r19, r1
     c70:	09 f4       	brne	.+2      	; 0xc74 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x18e>
     c72:	44 c0       	rjmp	.+136    	; 0xcfc <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x216>
     c74:	89 01       	movw	r16, r18
     c76:	69 01       	movw	r12, r18
     c78:	57 e0       	ldi	r21, 0x07	; 7
     c7a:	c5 1a       	sub	r12, r21
     c7c:	d1 08       	sbc	r13, r1
     c7e:	0c 15       	cp	r16, r12
     c80:	1d 05       	cpc	r17, r13
     c82:	94 f3       	brlt	.-28     	; 0xc68 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x182>
     c84:	df 01       	movw	r26, r30
     c86:	a0 0f       	add	r26, r16
     c88:	b1 1f       	adc	r27, r17
     c8a:	15 96       	adiw	r26, 0x05	; 5
     c8c:	ec 90       	ld	r14, X
     c8e:	f1 2c       	mov	r15, r1
     c90:	40 e0       	ldi	r20, 0x00	; 0
     c92:	50 e0       	ldi	r21, 0x00	; 0
     c94:	a1 e0       	ldi	r26, 0x01	; 1
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	ac 0f       	add	r26, r28
     c9a:	bd 1f       	adc	r27, r29
     c9c:	a8 0f       	add	r26, r24
     c9e:	b1 1d       	adc	r27, r1
     ca0:	73 2d       	mov	r23, r3
     ca2:	74 1b       	sub	r23, r20
     ca4:	57 01       	movw	r10, r14
     ca6:	04 2e       	mov	r0, r20
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1c8>
     caa:	b5 94       	asr	r11
     cac:	a7 94       	ror	r10
     cae:	0a 94       	dec	r0
     cb0:	e2 f7       	brpl	.-8      	; 0xcaa <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1c4>
     cb2:	a0 fe       	sbrs	r10, 0
     cb4:	0c c0       	rjmp	.+24     	; 0xcce <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1e8>
     cb6:	53 01       	movw	r10, r6
     cb8:	42 01       	movw	r8, r4
     cba:	04 c0       	rjmp	.+8      	; 0xcc4 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1de>
     cbc:	88 0c       	add	r8, r8
     cbe:	99 1c       	adc	r9, r9
     cc0:	aa 1c       	adc	r10, r10
     cc2:	bb 1c       	adc	r11, r11
     cc4:	7a 95       	dec	r23
     cc6:	d2 f7       	brpl	.-12     	; 0xcbc <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1d6>
     cc8:	7c 91       	ld	r23, X
     cca:	78 29       	or	r23, r8
     ccc:	0d c0       	rjmp	.+26     	; 0xce8 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x202>
     cce:	53 01       	movw	r10, r6
     cd0:	42 01       	movw	r8, r4
     cd2:	04 c0       	rjmp	.+8      	; 0xcdc <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1f6>
     cd4:	88 0c       	add	r8, r8
     cd6:	99 1c       	adc	r9, r9
     cd8:	aa 1c       	adc	r10, r10
     cda:	bb 1c       	adc	r11, r11
     cdc:	7a 95       	dec	r23
     cde:	d2 f7       	brpl	.-12     	; 0xcd4 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1ee>
     ce0:	78 2d       	mov	r23, r8
     ce2:	70 95       	com	r23
     ce4:	bc 90       	ld	r11, X
     ce6:	7b 21       	and	r23, r11
     ce8:	7c 93       	st	X, r23
     cea:	4f 5f       	subi	r20, 0xFF	; 255
     cec:	5f 4f       	sbci	r21, 0xFF	; 255
     cee:	48 30       	cpi	r20, 0x08	; 8
     cf0:	51 05       	cpc	r21, r1
     cf2:	b1 f6       	brne	.-84     	; 0xca0 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1ba>
     cf4:	8f 5f       	subi	r24, 0xFF	; 255
     cf6:	01 50       	subi	r16, 0x01	; 1
     cf8:	11 09       	sbc	r17, r1
     cfa:	c1 cf       	rjmp	.-126    	; 0xc7e <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x198>
     cfc:	91 11       	cpse	r25, r1
     cfe:	04 c0       	rjmp	.+8      	; 0xd08 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x222>
     d00:	63 30       	cpi	r22, 0x03	; 3
     d02:	09 f0       	breq	.+2      	; 0xd06 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x220>
     d04:	72 c0       	rjmp	.+228    	; 0xdea <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x304>
     d06:	0a c0       	rjmp	.+20     	; 0xd1c <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x236>
     d08:	91 30       	cpi	r25, 0x01	; 1
     d0a:	19 f4       	brne	.+6      	; 0xd12 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x22c>
     d0c:	66 23       	and	r22, r22
     d0e:	31 f0       	breq	.+12     	; 0xd1c <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x236>
     d10:	6c c0       	rjmp	.+216    	; 0xdea <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x304>
     d12:	92 30       	cpi	r25, 0x02	; 2
     d14:	51 f4       	brne	.+20     	; 0xd2a <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x244>
     d16:	61 30       	cpi	r22, 0x01	; 1
     d18:	09 f0       	breq	.+2      	; 0xd1c <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x236>
     d1a:	67 c0       	rjmp	.+206    	; 0xdea <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x304>
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	41 2c       	mov	r4, r1
     d22:	51 2c       	mov	r5, r1
     d24:	32 01       	movw	r6, r4
     d26:	43 94       	inc	r4
     d28:	2d c0       	rjmp	.+90     	; 0xd84 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x29e>
     d2a:	93 30       	cpi	r25, 0x03	; 3
     d2c:	09 f0       	breq	.+2      	; 0xd30 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x24a>
     d2e:	5d c0       	rjmp	.+186    	; 0xdea <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x304>
     d30:	62 30       	cpi	r22, 0x02	; 2
     d32:	09 f0       	breq	.+2      	; 0xd36 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x250>
     d34:	5a c0       	rjmp	.+180    	; 0xdea <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x304>
     d36:	f2 cf       	rjmp	.-28     	; 0xd1c <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x236>
     d38:	a1 e0       	ldi	r26, 0x01	; 1
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	0f a0       	ldd	r0, Y+39	; 0x27
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x25e>
     d40:	aa 0f       	add	r26, r26
     d42:	bb 1f       	adc	r27, r27
     d44:	0a 94       	dec	r0
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x25a>
     d48:	be a3       	std	Y+38, r27	; 0x26
     d4a:	ad a3       	std	Y+37, r26	; 0x25
     d4c:	49 2d       	mov	r20, r9
     d4e:	58 2d       	mov	r21, r8
     d50:	9f a1       	ldd	r25, Y+39	; 0x27
     d52:	97 0f       	add	r25, r23
     d54:	ee 24       	eor	r14, r14
     d56:	e3 94       	inc	r14
     d58:	f1 2c       	mov	r15, r1
     d5a:	ec 0e       	add	r14, r28
     d5c:	fd 1e       	adc	r15, r29
     d5e:	e9 0e       	add	r14, r25
     d60:	f1 1c       	adc	r15, r1
     d62:	93 2d       	mov	r25, r3
     d64:	94 1b       	sub	r25, r20
     d66:	42 17       	cp	r20, r18
     d68:	53 07       	cpc	r21, r19
     d6a:	c4 f0       	brlt	.+48     	; 0xd9c <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x2b6>
     d6c:	4f a1       	ldd	r20, Y+39	; 0x27
     d6e:	58 a5       	ldd	r21, Y+40	; 0x28
     d70:	4f 5f       	subi	r20, 0xFF	; 255
     d72:	5f 4f       	sbci	r21, 0xFF	; 255
     d74:	58 a7       	std	Y+40, r21	; 0x28
     d76:	4f a3       	std	Y+39, r20	; 0x27
     d78:	48 30       	cpi	r20, 0x08	; 8
     d7a:	51 05       	cpc	r21, r1
     d7c:	e9 f6       	brne	.-70     	; 0xd38 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x252>
     d7e:	20 32       	cpi	r18, 0x20	; 32
     d80:	31 05       	cpc	r19, r1
     d82:	99 f1       	breq	.+102    	; 0xdea <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x304>
     d84:	78 2f       	mov	r23, r24
     d86:	72 0f       	add	r23, r18
     d88:	92 2e       	mov	r9, r18
     d8a:	83 2e       	mov	r8, r19
     d8c:	18 a6       	std	Y+40, r1	; 0x28
     d8e:	1f a2       	std	Y+39, r1	; 0x27
     d90:	47 e0       	ldi	r20, 0x07	; 7
     d92:	34 2e       	mov	r3, r20
     d94:	32 0e       	add	r3, r18
     d96:	28 5f       	subi	r18, 0xF8	; 248
     d98:	3f 4f       	sbci	r19, 0xFF	; 255
     d9a:	ce cf       	rjmp	.-100    	; 0xd38 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x252>
     d9c:	8f 01       	movw	r16, r30
     d9e:	04 0f       	add	r16, r20
     da0:	15 1f       	adc	r17, r21
     da2:	d8 01       	movw	r26, r16
     da4:	15 96       	adiw	r26, 0x05	; 5
     da6:	0c 91       	ld	r16, X
     da8:	10 e0       	ldi	r17, 0x00	; 0
     daa:	ad a0       	ldd	r10, Y+37	; 0x25
     dac:	be a0       	ldd	r11, Y+38	; 0x26
     dae:	0a 21       	and	r16, r10
     db0:	1b 21       	and	r17, r11
     db2:	63 01       	movw	r12, r6
     db4:	52 01       	movw	r10, r4
     db6:	04 c0       	rjmp	.+8      	; 0xdc0 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x2da>
     db8:	aa 0c       	add	r10, r10
     dba:	bb 1c       	adc	r11, r11
     dbc:	cc 1c       	adc	r12, r12
     dbe:	dd 1c       	adc	r13, r13
     dc0:	9a 95       	dec	r25
     dc2:	d2 f7       	brpl	.-12     	; 0xdb8 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x2d2>
     dc4:	a9 a2       	std	Y+33, r10	; 0x21
     dc6:	ba a2       	std	Y+34, r11	; 0x22
     dc8:	cb a2       	std	Y+35, r12	; 0x23
     dca:	dc a2       	std	Y+36, r13	; 0x24
     dcc:	01 2b       	or	r16, r17
     dce:	21 f0       	breq	.+8      	; 0xdd8 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x2f2>
     dd0:	d7 01       	movw	r26, r14
     dd2:	9c 91       	ld	r25, X
     dd4:	9a 29       	or	r25, r10
     dd6:	05 c0       	rjmp	.+10     	; 0xde2 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x2fc>
     dd8:	1a 2d       	mov	r17, r10
     dda:	10 95       	com	r17
     ddc:	d7 01       	movw	r26, r14
     dde:	9c 91       	ld	r25, X
     de0:	91 23       	and	r25, r17
     de2:	9c 93       	st	X, r25
     de4:	4f 5f       	subi	r20, 0xFF	; 255
     de6:	5f 4f       	sbci	r21, 0xFF	; 255
     de8:	bc cf       	rjmp	.-136    	; 0xd62 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x27c>
     dea:	64 83       	std	Z+4, r22	; 0x04
     dec:	be 01       	movw	r22, r28
     dee:	6f 5f       	subi	r22, 0xFF	; 255
     df0:	7f 4f       	sbci	r23, 0xFF	; 255
     df2:	cf 01       	movw	r24, r30
     df4:	05 96       	adiw	r24, 0x05	; 5
     df6:	9e 01       	movw	r18, r28
     df8:	2f 5d       	subi	r18, 0xDF	; 223
     dfa:	3f 4f       	sbci	r19, 0xFF	; 255
     dfc:	db 01       	movw	r26, r22
     dfe:	4d 91       	ld	r20, X+
     e00:	bd 01       	movw	r22, r26
     e02:	dc 01       	movw	r26, r24
     e04:	4d 93       	st	X+, r20
     e06:	cd 01       	movw	r24, r26
     e08:	62 17       	cp	r22, r18
     e0a:	73 07       	cpc	r23, r19
     e0c:	b9 f7       	brne	.-18     	; 0xdfc <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x316>
     e0e:	cf 01       	movw	r24, r30
     e10:	a8 96       	adiw	r28, 0x28	; 40
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	f8 94       	cli
     e16:	de bf       	out	0x3e, r29	; 62
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	cd bf       	out	0x3d, r28	; 61
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	1f 91       	pop	r17
     e22:	0f 91       	pop	r16
     e24:	ff 90       	pop	r15
     e26:	ef 90       	pop	r14
     e28:	df 90       	pop	r13
     e2a:	cf 90       	pop	r12
     e2c:	bf 90       	pop	r11
     e2e:	af 90       	pop	r10
     e30:	9f 90       	pop	r9
     e32:	8f 90       	pop	r8
     e34:	7f 90       	pop	r7
     e36:	6f 90       	pop	r6
     e38:	5f 90       	pop	r5
     e3a:	4f 90       	pop	r4
     e3c:	3f 90       	pop	r3
     e3e:	0c 94 33 05 	jmp	0xa66	; 0xa66 <_ZN9MaxMatrix6reloadEv>
     e42:	a8 96       	adiw	r28, 0x28	; 40
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	1f 91       	pop	r17
     e54:	0f 91       	pop	r16
     e56:	ff 90       	pop	r15
     e58:	ef 90       	pop	r14
     e5a:	df 90       	pop	r13
     e5c:	cf 90       	pop	r12
     e5e:	bf 90       	pop	r11
     e60:	af 90       	pop	r10
     e62:	9f 90       	pop	r9
     e64:	8f 90       	pop	r8
     e66:	7f 90       	pop	r7
     e68:	6f 90       	pop	r6
     e6a:	5f 90       	pop	r5
     e6c:	4f 90       	pop	r4
     e6e:	3f 90       	pop	r3
     e70:	08 95       	ret

00000e72 <_ZN9MaxMatrix19convertCharToSpriteEcPh>:
     e72:	fa 01       	movw	r30, r20
     e74:	64 3c       	cpi	r22, 0xC4	; 196
     e76:	11 f4       	brne	.+4      	; 0xe7c <_ZN9MaxMatrix19convertCharToSpriteEcPh+0xa>
     e78:	8f e5       	ldi	r24, 0x5F	; 95
     e7a:	13 c0       	rjmp	.+38     	; 0xea2 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     e7c:	66 3d       	cpi	r22, 0xD6	; 214
     e7e:	11 f4       	brne	.+4      	; 0xe84 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x12>
     e80:	80 e6       	ldi	r24, 0x60	; 96
     e82:	0f c0       	rjmp	.+30     	; 0xea2 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     e84:	6c 3d       	cpi	r22, 0xDC	; 220
     e86:	11 f4       	brne	.+4      	; 0xe8c <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x1a>
     e88:	81 e6       	ldi	r24, 0x61	; 97
     e8a:	0b c0       	rjmp	.+22     	; 0xea2 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     e8c:	64 3e       	cpi	r22, 0xE4	; 228
     e8e:	11 f4       	brne	.+4      	; 0xe94 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x22>
     e90:	82 e6       	ldi	r24, 0x62	; 98
     e92:	07 c0       	rjmp	.+14     	; 0xea2 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     e94:	66 3f       	cpi	r22, 0xF6	; 246
     e96:	11 f4       	brne	.+4      	; 0xe9c <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x2a>
     e98:	83 e6       	ldi	r24, 0x63	; 99
     e9a:	03 c0       	rjmp	.+6      	; 0xea2 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     e9c:	6c 3f       	cpi	r22, 0xFC	; 252
     e9e:	19 f4       	brne	.+6      	; 0xea6 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x34>
     ea0:	84 e6       	ldi	r24, 0x64	; 100
     ea2:	80 83       	st	Z, r24
     ea4:	04 c0       	rjmp	.+8      	; 0xeae <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x3c>
     ea6:	60 52       	subi	r22, 0x20	; 32
     ea8:	6f 35       	cpi	r22, 0x5F	; 95
     eaa:	18 f4       	brcc	.+6      	; 0xeb2 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x40>
     eac:	60 83       	st	Z, r22
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	08 95       	ret
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	08 95       	ret

00000eb6 <_ZN9MaxMatrix8getRowLLEhhPh>:
     eb6:	bf 92       	push	r11
     eb8:	cf 92       	push	r12
     eba:	df 92       	push	r13
     ebc:	ef 92       	push	r14
     ebe:	ff 92       	push	r15
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	e9 01       	movw	r28, r18
     eca:	64 30       	cpi	r22, 0x04	; 4
     ecc:	d8 f5       	brcc	.+118    	; 0xf44 <_ZN9MaxMatrix8getRowLLEhhPh+0x8e>
     ece:	48 30       	cpi	r20, 0x08	; 8
     ed0:	c8 f5       	brcc	.+114    	; 0xf44 <_ZN9MaxMatrix8getRowLLEhhPh+0x8e>
     ed2:	a1 e0       	ldi	r26, 0x01	; 1
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <_ZN9MaxMatrix8getRowLLEhhPh+0x26>
     ed8:	aa 0f       	add	r26, r26
     eda:	bb 1f       	adc	r27, r27
     edc:	4a 95       	dec	r20
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <_ZN9MaxMatrix8getRowLLEhhPh+0x22>
     ee0:	28 e0       	ldi	r18, 0x08	; 8
     ee2:	62 9f       	mul	r22, r18
     ee4:	80 0d       	add	r24, r0
     ee6:	91 1d       	adc	r25, r1
     ee8:	11 24       	eor	r1, r1
     eea:	fc 01       	movw	r30, r24
     eec:	35 96       	adiw	r30, 0x05	; 5
     eee:	87 e0       	ldi	r24, 0x07	; 7
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	01 e0       	ldi	r16, 0x01	; 1
     ef4:	10 e0       	ldi	r17, 0x00	; 0
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	61 91       	ld	r22, Z+
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	6a 23       	and	r22, r26
     f00:	7b 23       	and	r23, r27
     f02:	b8 80       	ld	r11, Y
     f04:	67 2b       	or	r22, r23
     f06:	69 f0       	breq	.+26     	; 0xf22 <_ZN9MaxMatrix8getRowLLEhhPh+0x6c>
     f08:	68 01       	movw	r12, r16
     f0a:	79 01       	movw	r14, r18
     f0c:	08 2e       	mov	r0, r24
     f0e:	04 c0       	rjmp	.+8      	; 0xf18 <_ZN9MaxMatrix8getRowLLEhhPh+0x62>
     f10:	cc 0c       	add	r12, r12
     f12:	dd 1c       	adc	r13, r13
     f14:	ee 1c       	adc	r14, r14
     f16:	ff 1c       	adc	r15, r15
     f18:	0a 94       	dec	r0
     f1a:	d2 f7       	brpl	.-12     	; 0xf10 <_ZN9MaxMatrix8getRowLLEhhPh+0x5a>
     f1c:	cb 28       	or	r12, r11
     f1e:	c8 82       	st	Y, r12
     f20:	0d c0       	rjmp	.+26     	; 0xf3c <_ZN9MaxMatrix8getRowLLEhhPh+0x86>
     f22:	b9 01       	movw	r22, r18
     f24:	a8 01       	movw	r20, r16
     f26:	08 2e       	mov	r0, r24
     f28:	04 c0       	rjmp	.+8      	; 0xf32 <_ZN9MaxMatrix8getRowLLEhhPh+0x7c>
     f2a:	44 0f       	add	r20, r20
     f2c:	55 1f       	adc	r21, r21
     f2e:	66 1f       	adc	r22, r22
     f30:	77 1f       	adc	r23, r23
     f32:	0a 94       	dec	r0
     f34:	d2 f7       	brpl	.-12     	; 0xf2a <_ZN9MaxMatrix8getRowLLEhhPh+0x74>
     f36:	40 95       	com	r20
     f38:	4b 21       	and	r20, r11
     f3a:	48 83       	st	Y, r20
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	e8 f6       	brcc	.-70     	; 0xefa <_ZN9MaxMatrix8getRowLLEhhPh+0x44>
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	01 c0       	rjmp	.+2      	; 0xf46 <_ZN9MaxMatrix8getRowLLEhhPh+0x90>
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	1f 91       	pop	r17
     f4c:	0f 91       	pop	r16
     f4e:	ff 90       	pop	r15
     f50:	ef 90       	pop	r14
     f52:	df 90       	pop	r13
     f54:	cf 90       	pop	r12
     f56:	bf 90       	pop	r11
     f58:	08 95       	ret

00000f5a <_ZN9MaxMatrix9getColumnEhPh>:
     f5a:	cf 92       	push	r12
     f5c:	df 92       	push	r13
     f5e:	ff 92       	push	r15
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
     f68:	1f 92       	push	r1
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	fc 01       	movw	r30, r24
     f70:	84 81       	ldd	r24, Z+4	; 0x04
     f72:	81 11       	cpse	r24, r1
     f74:	0a c0       	rjmp	.+20     	; 0xf8a <_ZN9MaxMatrix9getColumnEhPh+0x30>
     f76:	60 32       	cpi	r22, 0x20	; 32
     f78:	18 f0       	brcs	.+6      	; 0xf80 <_ZN9MaxMatrix9getColumnEhPh+0x26>
     f7a:	ff 24       	eor	r15, r15
     f7c:	f3 94       	inc	r15
     f7e:	39 c0       	rjmp	.+114    	; 0xff2 <_ZN9MaxMatrix9getColumnEhPh+0x98>
     f80:	e6 0f       	add	r30, r22
     f82:	f1 1d       	adc	r31, r1
     f84:	85 81       	ldd	r24, Z+5	; 0x05
     f86:	fa 01       	movw	r30, r20
     f88:	1d c0       	rjmp	.+58     	; 0xfc4 <_ZN9MaxMatrix9getColumnEhPh+0x6a>
     f8a:	6a 01       	movw	r12, r20
     f8c:	96 2f       	mov	r25, r22
     f8e:	8f 01       	movw	r16, r30
     f90:	66 95       	lsr	r22
     f92:	66 95       	lsr	r22
     f94:	66 95       	lsr	r22
     f96:	49 2f       	mov	r20, r25
     f98:	47 70       	andi	r20, 0x07	; 7
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	31 f4       	brne	.+12     	; 0xfaa <_ZN9MaxMatrix9getColumnEhPh+0x50>
     f9e:	96 01       	movw	r18, r12
     fa0:	cf 01       	movw	r24, r30
     fa2:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN9MaxMatrix8getRowLLEhhPh>
     fa6:	f8 2e       	mov	r15, r24
     fa8:	24 c0       	rjmp	.+72     	; 0xff2 <_ZN9MaxMatrix9getColumnEhPh+0x98>
     faa:	82 30       	cpi	r24, 0x02	; 2
     fac:	71 f4       	brne	.+28     	; 0xfca <_ZN9MaxMatrix9getColumnEhPh+0x70>
     fae:	8f e1       	ldi	r24, 0x1F	; 31
     fb0:	89 1b       	sub	r24, r25
     fb2:	80 32       	cpi	r24, 0x20	; 32
     fb4:	10 f7       	brcc	.-60     	; 0xf7a <_ZN9MaxMatrix9getColumnEhPh+0x20>
     fb6:	e8 0f       	add	r30, r24
     fb8:	f1 1d       	adc	r31, r1
     fba:	65 81       	ldd	r22, Z+5	; 0x05
     fbc:	c8 01       	movw	r24, r16
     fbe:	0e 94 21 05 	call	0xa42	; 0xa42 <_ZN9MaxMatrix11reverseByteEh>
     fc2:	f6 01       	movw	r30, r12
     fc4:	80 83       	st	Z, r24
     fc6:	f1 2c       	mov	r15, r1
     fc8:	14 c0       	rjmp	.+40     	; 0xff2 <_ZN9MaxMatrix9getColumnEhPh+0x98>
     fca:	83 30       	cpi	r24, 0x03	; 3
     fcc:	b1 f6       	brne	.-84     	; 0xf7a <_ZN9MaxMatrix9getColumnEhPh+0x20>
     fce:	87 e0       	ldi	r24, 0x07	; 7
     fd0:	84 1b       	sub	r24, r20
     fd2:	48 2f       	mov	r20, r24
     fd4:	9e 01       	movw	r18, r28
     fd6:	2f 5f       	subi	r18, 0xFF	; 255
     fd8:	3f 4f       	sbci	r19, 0xFF	; 255
     fda:	cf 01       	movw	r24, r30
     fdc:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN9MaxMatrix8getRowLLEhhPh>
     fe0:	f8 2e       	mov	r15, r24
     fe2:	81 11       	cpse	r24, r1
     fe4:	ca cf       	rjmp	.-108    	; 0xf7a <_ZN9MaxMatrix9getColumnEhPh+0x20>
     fe6:	69 81       	ldd	r22, Y+1	; 0x01
     fe8:	c8 01       	movw	r24, r16
     fea:	0e 94 21 05 	call	0xa42	; 0xa42 <_ZN9MaxMatrix11reverseByteEh>
     fee:	f6 01       	movw	r30, r12
     ff0:	80 83       	st	Z, r24
     ff2:	8f 2d       	mov	r24, r15
     ff4:	0f 90       	pop	r0
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	ff 90       	pop	r15
    1000:	df 90       	pop	r13
    1002:	cf 90       	pop	r12
    1004:	08 95       	ret

00001006 <_ZN9MaxMatrix11setColumnLLEhh>:
    1006:	bf 92       	push	r11
    1008:	cf 92       	push	r12
    100a:	df 92       	push	r13
    100c:	ef 92       	push	r14
    100e:	ff 92       	push	r15
    1010:	0f 93       	push	r16
    1012:	1f 93       	push	r17
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	60 32       	cpi	r22, 0x20	; 32
    101a:	e8 f5       	brcc	.+122    	; 0x1096 <_ZN9MaxMatrix11setColumnLLEhh+0x90>
    101c:	04 2f       	mov	r16, r20
    101e:	16 2f       	mov	r17, r22
    1020:	ec 01       	movw	r28, r24
    1022:	c6 2e       	mov	r12, r22
    1024:	c6 94       	lsr	r12
    1026:	c6 94       	lsr	r12
    1028:	c6 94       	lsr	r12
    102a:	d1 2c       	mov	r13, r1
    102c:	86 2f       	mov	r24, r22
    102e:	87 70       	andi	r24, 0x07	; 7
    1030:	b8 2e       	mov	r11, r24
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	0e 94 2a 11 	call	0x2254	; 0x2254 <digitalWrite>
    103a:	e1 2c       	mov	r14, r1
    103c:	f1 2c       	mov	r15, r1
    103e:	b3 94       	inc	r11
    1040:	ec 14       	cp	r14, r12
    1042:	fd 04       	cpc	r15, r13
    1044:	41 f4       	brne	.+16     	; 0x1056 <_ZN9MaxMatrix11setColumnLLEhh+0x50>
    1046:	2b 2d       	mov	r18, r11
    1048:	41 e0       	ldi	r20, 0x01	; 1
    104a:	6a 81       	ldd	r22, Y+2	; 0x02
    104c:	88 81       	ld	r24, Y
    104e:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <shiftOut>
    1052:	20 2f       	mov	r18, r16
    1054:	07 c0       	rjmp	.+14     	; 0x1064 <_ZN9MaxMatrix11setColumnLLEhh+0x5e>
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	41 e0       	ldi	r20, 0x01	; 1
    105a:	6a 81       	ldd	r22, Y+2	; 0x02
    105c:	88 81       	ld	r24, Y
    105e:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <shiftOut>
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	41 e0       	ldi	r20, 0x01	; 1
    1066:	6a 81       	ldd	r22, Y+2	; 0x02
    1068:	88 81       	ld	r24, Y
    106a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <shiftOut>
    106e:	8f ef       	ldi	r24, 0xFF	; 255
    1070:	e8 1a       	sub	r14, r24
    1072:	f8 0a       	sbc	r15, r24
    1074:	84 e0       	ldi	r24, 0x04	; 4
    1076:	e8 16       	cp	r14, r24
    1078:	f1 04       	cpc	r15, r1
    107a:	11 f7       	brne	.-60     	; 0x1040 <_ZN9MaxMatrix11setColumnLLEhh+0x3a>
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	0e 94 2a 11 	call	0x2254	; 0x2254 <digitalWrite>
    1084:	61 e0       	ldi	r22, 0x01	; 1
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	0e 94 2a 11 	call	0x2254	; 0x2254 <digitalWrite>
    108c:	c1 0f       	add	r28, r17
    108e:	d1 1d       	adc	r29, r1
    1090:	0d 83       	std	Y+5, r16	; 0x05
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	01 c0       	rjmp	.+2      	; 0x1098 <_ZN9MaxMatrix11setColumnLLEhh+0x92>
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	ff 90       	pop	r15
    10a2:	ef 90       	pop	r14
    10a4:	df 90       	pop	r13
    10a6:	cf 90       	pop	r12
    10a8:	bf 90       	pop	r11
    10aa:	08 95       	ret

000010ac <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh>:
    10ac:	af 92       	push	r10
    10ae:	bf 92       	push	r11
    10b0:	cf 92       	push	r12
    10b2:	df 92       	push	r13
    10b4:	ef 92       	push	r14
    10b6:	ff 92       	push	r15
    10b8:	0f 93       	push	r16
    10ba:	1f 93       	push	r17
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	68 30       	cpi	r22, 0x08	; 8
    10c2:	88 f5       	brcc	.+98     	; 0x1126 <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh+0x7a>
    10c4:	04 2f       	mov	r16, r20
    10c6:	16 2f       	mov	r17, r22
    10c8:	ec 01       	movw	r28, r24
    10ca:	60 e0       	ldi	r22, 0x00	; 0
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	0e 94 2a 11 	call	0x2254	; 0x2254 <digitalWrite>
    10d2:	a1 2e       	mov	r10, r17
    10d4:	b1 2c       	mov	r11, r1
    10d6:	6e 01       	movw	r12, r28
    10d8:	85 e0       	ldi	r24, 0x05	; 5
    10da:	c8 0e       	add	r12, r24
    10dc:	d1 1c       	adc	r13, r1
    10de:	84 e0       	ldi	r24, 0x04	; 4
    10e0:	e8 2e       	mov	r14, r24
    10e2:	f1 2c       	mov	r15, r1
    10e4:	1f 5f       	subi	r17, 0xFF	; 255
    10e6:	21 2f       	mov	r18, r17
    10e8:	41 e0       	ldi	r20, 0x01	; 1
    10ea:	6a 81       	ldd	r22, Y+2	; 0x02
    10ec:	88 81       	ld	r24, Y
    10ee:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <shiftOut>
    10f2:	20 2f       	mov	r18, r16
    10f4:	41 e0       	ldi	r20, 0x01	; 1
    10f6:	6a 81       	ldd	r22, Y+2	; 0x02
    10f8:	88 81       	ld	r24, Y
    10fa:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <shiftOut>
    10fe:	f6 01       	movw	r30, r12
    1100:	00 83       	st	Z, r16
    1102:	f1 e0       	ldi	r31, 0x01	; 1
    1104:	ef 1a       	sub	r14, r31
    1106:	f1 08       	sbc	r15, r1
    1108:	ca 0c       	add	r12, r10
    110a:	db 1c       	adc	r13, r11
    110c:	e1 14       	cp	r14, r1
    110e:	f1 04       	cpc	r15, r1
    1110:	51 f7       	brne	.-44     	; 0x10e6 <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh+0x3a>
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	0e 94 2a 11 	call	0x2254	; 0x2254 <digitalWrite>
    111a:	61 e0       	ldi	r22, 0x01	; 1
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	0e 94 2a 11 	call	0x2254	; 0x2254 <digitalWrite>
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	01 c0       	rjmp	.+2      	; 0x1128 <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh+0x7c>
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	ff 90       	pop	r15
    1132:	ef 90       	pop	r14
    1134:	df 90       	pop	r13
    1136:	cf 90       	pop	r12
    1138:	bf 90       	pop	r11
    113a:	af 90       	pop	r10
    113c:	08 95       	ret

0000113e <_ZN9MaxMatrix5clearEv>:
    113e:	1f 93       	push	r17
    1140:	cf 93       	push	r28
    1142:	df 93       	push	r29
    1144:	ec 01       	movw	r28, r24
    1146:	10 e0       	ldi	r17, 0x00	; 0
    1148:	40 e0       	ldi	r20, 0x00	; 0
    114a:	61 2f       	mov	r22, r17
    114c:	ce 01       	movw	r24, r28
    114e:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh>
    1152:	1f 5f       	subi	r17, 0xFF	; 255
    1154:	18 30       	cpi	r17, 0x08	; 8
    1156:	c1 f7       	brne	.-16     	; 0x1148 <_ZN9MaxMatrix5clearEv+0xa>
    1158:	fe 01       	movw	r30, r28
    115a:	35 96       	adiw	r30, 0x05	; 5
    115c:	a5 96       	adiw	r28, 0x25	; 37
    115e:	11 92       	st	Z+, r1
    1160:	ec 17       	cp	r30, r28
    1162:	fd 07       	cpc	r31, r29
    1164:	e1 f7       	brne	.-8      	; 0x115e <_ZN9MaxMatrix5clearEv+0x20>
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	1f 91       	pop	r17
    116c:	08 95       	ret

0000116e <_ZN9MaxMatrix4initEv>:
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	ec 01       	movw	r28, r24
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	8b 83       	std	Y+3, r24	; 0x03
    1178:	61 e0       	ldi	r22, 0x01	; 1
    117a:	88 81       	ld	r24, Y
    117c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <pinMode>
    1180:	61 e0       	ldi	r22, 0x01	; 1
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	0e 94 ee 10 	call	0x21dc	; 0x21dc <pinMode>
    1188:	61 e0       	ldi	r22, 0x01	; 1
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <pinMode>
    1190:	61 e0       	ldi	r22, 0x01	; 1
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	0e 94 2a 11 	call	0x2254	; 0x2254 <digitalWrite>
    1198:	47 e0       	ldi	r20, 0x07	; 7
    119a:	6b e0       	ldi	r22, 0x0B	; 11
    119c:	ce 01       	movw	r24, r28
    119e:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN9MaxMatrix13RegisterWriteEhh>
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	69 e0       	ldi	r22, 0x09	; 9
    11a6:	ce 01       	movw	r24, r28
    11a8:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN9MaxMatrix13RegisterWriteEhh>
    11ac:	41 e0       	ldi	r20, 0x01	; 1
    11ae:	6c e0       	ldi	r22, 0x0C	; 12
    11b0:	ce 01       	movw	r24, r28
    11b2:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN9MaxMatrix13RegisterWriteEhh>
    11b6:	40 e0       	ldi	r20, 0x00	; 0
    11b8:	6f e0       	ldi	r22, 0x0F	; 15
    11ba:	ce 01       	movw	r24, r28
    11bc:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN9MaxMatrix13RegisterWriteEhh>
    11c0:	ce 01       	movw	r24, r28
    11c2:	0e 94 9f 08 	call	0x113e	; 0x113e <_ZN9MaxMatrix5clearEv>
    11c6:	62 e0       	ldi	r22, 0x02	; 2
    11c8:	ce 01       	movw	r24, r28
    11ca:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <_ZN9MaxMatrix12setIntensityEh>
    11ce:	82 e0       	ldi	r24, 0x02	; 2
    11d0:	8b 83       	std	Y+3, r24	; 0x03
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	08 95       	ret

000011d8 <_ZN9MaxMatrix8setRowLLEhhh>:
    11d8:	af 92       	push	r10
    11da:	bf 92       	push	r11
    11dc:	cf 92       	push	r12
    11de:	df 92       	push	r13
    11e0:	ef 92       	push	r14
    11e2:	ff 92       	push	r15
    11e4:	0f 93       	push	r16
    11e6:	1f 93       	push	r17
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	64 30       	cpi	r22, 0x04	; 4
    11ee:	08 f0       	brcs	.+2      	; 0x11f2 <_ZN9MaxMatrix8setRowLLEhhh+0x1a>
    11f0:	42 c0       	rjmp	.+132    	; 0x1276 <_ZN9MaxMatrix8setRowLLEhhh+0x9e>
    11f2:	48 30       	cpi	r20, 0x08	; 8
    11f4:	08 f0       	brcs	.+2      	; 0x11f8 <_ZN9MaxMatrix8setRowLLEhhh+0x20>
    11f6:	3f c0       	rjmp	.+126    	; 0x1276 <_ZN9MaxMatrix8setRowLLEhhh+0x9e>
    11f8:	c6 2f       	mov	r28, r22
    11fa:	8c 01       	movw	r16, r24
    11fc:	f6 2e       	mov	r15, r22
    11fe:	ff 0c       	add	r15, r15
    1200:	ff 0c       	add	r15, r15
    1202:	ff 0c       	add	r15, r15
    1204:	d0 e0       	ldi	r29, 0x00	; 0
    1206:	21 96       	adiw	r28, 0x01	; 1
    1208:	83 e0       	ldi	r24, 0x03	; 3
    120a:	cc 0f       	add	r28, r28
    120c:	dd 1f       	adc	r29, r29
    120e:	8a 95       	dec	r24
    1210:	e1 f7       	brne	.-8      	; 0x120a <_ZN9MaxMatrix8setRowLLEhhh+0x32>
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	a0 e0       	ldi	r26, 0x00	; 0
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	04 c0       	rjmp	.+8      	; 0x1224 <_ZN9MaxMatrix8setRowLLEhhh+0x4c>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	aa 1f       	adc	r26, r26
    1222:	bb 1f       	adc	r27, r27
    1224:	4a 95       	dec	r20
    1226:	d2 f7       	brpl	.-12     	; 0x121c <_ZN9MaxMatrix8setRowLLEhhh+0x44>
    1228:	a8 2e       	mov	r10, r24
    122a:	e8 2e       	mov	r14, r24
    122c:	e0 94       	com	r14
    122e:	97 e0       	ldi	r25, 0x07	; 7
    1230:	b9 2e       	mov	r11, r25
    1232:	c2 2e       	mov	r12, r18
    1234:	d1 2c       	mov	r13, r1
    1236:	ef 2d       	mov	r30, r15
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	ec 17       	cp	r30, r28
    123c:	fd 07       	cpc	r31, r29
    123e:	cc f4       	brge	.+50     	; 0x1272 <_ZN9MaxMatrix8setRowLLEhhh+0x9a>
    1240:	e0 0f       	add	r30, r16
    1242:	f1 1f       	adc	r31, r17
    1244:	c6 01       	movw	r24, r12
    1246:	0b 2c       	mov	r0, r11
    1248:	02 c0       	rjmp	.+4      	; 0x124e <_ZN9MaxMatrix8setRowLLEhhh+0x76>
    124a:	95 95       	asr	r25
    124c:	87 95       	ror	r24
    124e:	0a 94       	dec	r0
    1250:	e2 f7       	brpl	.-8      	; 0x124a <_ZN9MaxMatrix8setRowLLEhhh+0x72>
    1252:	80 ff       	sbrs	r24, 0
    1254:	03 c0       	rjmp	.+6      	; 0x125c <_ZN9MaxMatrix8setRowLLEhhh+0x84>
    1256:	85 81       	ldd	r24, Z+5	; 0x05
    1258:	8a 29       	or	r24, r10
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <_ZN9MaxMatrix8setRowLLEhhh+0x88>
    125c:	85 81       	ldd	r24, Z+5	; 0x05
    125e:	8e 21       	and	r24, r14
    1260:	85 83       	std	Z+5, r24	; 0x05
    1262:	45 81       	ldd	r20, Z+5	; 0x05
    1264:	6f 2d       	mov	r22, r15
    1266:	c8 01       	movw	r24, r16
    1268:	0e 94 03 08 	call	0x1006	; 0x1006 <_ZN9MaxMatrix11setColumnLLEhh>
    126c:	ba 94       	dec	r11
    126e:	f3 94       	inc	r15
    1270:	e2 cf       	rjmp	.-60     	; 0x1236 <_ZN9MaxMatrix8setRowLLEhhh+0x5e>
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	01 c0       	rjmp	.+2      	; 0x1278 <_ZN9MaxMatrix8setRowLLEhhh+0xa0>
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	1f 91       	pop	r17
    127e:	0f 91       	pop	r16
    1280:	ff 90       	pop	r15
    1282:	ef 90       	pop	r14
    1284:	df 90       	pop	r13
    1286:	cf 90       	pop	r12
    1288:	bf 90       	pop	r11
    128a:	af 90       	pop	r10
    128c:	08 95       	ret

0000128e <_ZN9MaxMatrix9setColumnEhh>:
    128e:	ef 92       	push	r14
    1290:	ff 92       	push	r15
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	1f 92       	push	r1
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	fc 01       	movw	r30, r24
    12a2:	24 2f       	mov	r18, r20
    12a4:	06 2f       	mov	r16, r22
    12a6:	06 95       	lsr	r16
    12a8:	06 95       	lsr	r16
    12aa:	06 95       	lsr	r16
    12ac:	46 2f       	mov	r20, r22
    12ae:	47 70       	andi	r20, 0x07	; 7
    12b0:	94 81       	ldd	r25, Z+4	; 0x04
    12b2:	91 11       	cpse	r25, r1
    12b4:	03 c0       	rjmp	.+6      	; 0x12bc <_ZN9MaxMatrix9setColumnEhh+0x2e>
    12b6:	42 2f       	mov	r20, r18
    12b8:	cf 01       	movw	r24, r30
    12ba:	11 c0       	rjmp	.+34     	; 0x12de <_ZN9MaxMatrix9setColumnEhh+0x50>
    12bc:	91 30       	cpi	r25, 0x01	; 1
    12be:	19 f4       	brne	.+6      	; 0x12c6 <_ZN9MaxMatrix9setColumnEhh+0x38>
    12c0:	60 2f       	mov	r22, r16
    12c2:	cf 01       	movw	r24, r30
    12c4:	23 c0       	rjmp	.+70     	; 0x130c <_ZN9MaxMatrix9setColumnEhh+0x7e>
    12c6:	16 2f       	mov	r17, r22
    12c8:	7f 01       	movw	r14, r30
    12ca:	92 30       	cpi	r25, 0x02	; 2
    12cc:	89 f4       	brne	.+34     	; 0x12f0 <_ZN9MaxMatrix9setColumnEhh+0x62>
    12ce:	62 2f       	mov	r22, r18
    12d0:	cf 01       	movw	r24, r30
    12d2:	0e 94 21 05 	call	0xa42	; 0xa42 <_ZN9MaxMatrix11reverseByteEh>
    12d6:	6f e1       	ldi	r22, 0x1F	; 31
    12d8:	61 1b       	sub	r22, r17
    12da:	48 2f       	mov	r20, r24
    12dc:	c7 01       	movw	r24, r14
    12de:	0f 90       	pop	r0
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	1f 91       	pop	r17
    12e6:	0f 91       	pop	r16
    12e8:	ff 90       	pop	r15
    12ea:	ef 90       	pop	r14
    12ec:	0c 94 03 08 	jmp	0x1006	; 0x1006 <_ZN9MaxMatrix11setColumnLLEhh>
    12f0:	93 30       	cpi	r25, 0x03	; 3
    12f2:	a9 f4       	brne	.+42     	; 0x131e <_ZN9MaxMatrix9setColumnEhh+0x90>
    12f4:	62 2f       	mov	r22, r18
    12f6:	cf 01       	movw	r24, r30
    12f8:	49 83       	std	Y+1, r20	; 0x01
    12fa:	0e 94 21 05 	call	0xa42	; 0xa42 <_ZN9MaxMatrix11reverseByteEh>
    12fe:	97 e0       	ldi	r25, 0x07	; 7
    1300:	49 81       	ldd	r20, Y+1	; 0x01
    1302:	94 1b       	sub	r25, r20
    1304:	49 2f       	mov	r20, r25
    1306:	28 2f       	mov	r18, r24
    1308:	60 2f       	mov	r22, r16
    130a:	c7 01       	movw	r24, r14
    130c:	0f 90       	pop	r0
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	ff 90       	pop	r15
    1318:	ef 90       	pop	r14
    131a:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <_ZN9MaxMatrix8setRowLLEhhh>
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	0f 90       	pop	r0
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	1f 91       	pop	r17
    1328:	0f 91       	pop	r16
    132a:	ff 90       	pop	r15
    132c:	ef 90       	pop	r14
    132e:	08 95       	ret

00001330 <_ZN9MaxMatrix6setDotEhhb>:
    1330:	df 92       	push	r13
    1332:	ef 92       	push	r14
    1334:	ff 92       	push	r15
    1336:	0f 93       	push	r16
    1338:	1f 93       	push	r17
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
    133e:	1f 92       	push	r1
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	60 32       	cpi	r22, 0x20	; 32
    1346:	80 f5       	brcc	.+96     	; 0x13a8 <_ZN9MaxMatrix6setDotEhhb+0x78>
    1348:	48 30       	cpi	r20, 0x08	; 8
    134a:	70 f5       	brcc	.+92     	; 0x13a8 <_ZN9MaxMatrix6setDotEhhb+0x78>
    134c:	d2 2e       	mov	r13, r18
    134e:	e4 2e       	mov	r14, r20
    1350:	f6 2e       	mov	r15, r22
    1352:	8c 01       	movw	r16, r24
    1354:	ae 01       	movw	r20, r28
    1356:	4f 5f       	subi	r20, 0xFF	; 255
    1358:	5f 4f       	sbci	r21, 0xFF	; 255
    135a:	0e 94 ad 07 	call	0xf5a	; 0xf5a <_ZN9MaxMatrix9getColumnEhPh>
    135e:	29 81       	ldd	r18, Y+1	; 0x01
    1360:	dd 20       	and	r13, r13
    1362:	71 f0       	breq	.+28     	; 0x1380 <_ZN9MaxMatrix6setDotEhhb+0x50>
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	a0 e0       	ldi	r26, 0x00	; 0
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	04 c0       	rjmp	.+8      	; 0x1376 <_ZN9MaxMatrix6setDotEhhb+0x46>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	aa 1f       	adc	r26, r26
    1374:	bb 1f       	adc	r27, r27
    1376:	ea 94       	dec	r14
    1378:	d2 f7       	brpl	.-12     	; 0x136e <_ZN9MaxMatrix6setDotEhhb+0x3e>
    137a:	82 2b       	or	r24, r18
    137c:	89 83       	std	Y+1, r24	; 0x01
    137e:	0e c0       	rjmp	.+28     	; 0x139c <_ZN9MaxMatrix6setDotEhhb+0x6c>
    1380:	41 e0       	ldi	r20, 0x01	; 1
    1382:	50 e0       	ldi	r21, 0x00	; 0
    1384:	60 e0       	ldi	r22, 0x00	; 0
    1386:	70 e0       	ldi	r23, 0x00	; 0
    1388:	04 c0       	rjmp	.+8      	; 0x1392 <_ZN9MaxMatrix6setDotEhhb+0x62>
    138a:	44 0f       	add	r20, r20
    138c:	55 1f       	adc	r21, r21
    138e:	66 1f       	adc	r22, r22
    1390:	77 1f       	adc	r23, r23
    1392:	ea 94       	dec	r14
    1394:	d2 f7       	brpl	.-12     	; 0x138a <_ZN9MaxMatrix6setDotEhhb+0x5a>
    1396:	40 95       	com	r20
    1398:	42 23       	and	r20, r18
    139a:	49 83       	std	Y+1, r20	; 0x01
    139c:	49 81       	ldd	r20, Y+1	; 0x01
    139e:	6f 2d       	mov	r22, r15
    13a0:	c8 01       	movw	r24, r16
    13a2:	0e 94 47 09 	call	0x128e	; 0x128e <_ZN9MaxMatrix9setColumnEhh>
    13a6:	01 c0       	rjmp	.+2      	; 0x13aa <_ZN9MaxMatrix6setDotEhhb+0x7a>
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	0f 90       	pop	r0
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	1f 91       	pop	r17
    13b2:	0f 91       	pop	r16
    13b4:	ff 90       	pop	r15
    13b6:	ef 90       	pop	r14
    13b8:	df 90       	pop	r13
    13ba:	08 95       	ret

000013bc <_ZN9MaxMatrix9setSpriteEiiPA7_Kh>:
    13bc:	2f 92       	push	r2
    13be:	3f 92       	push	r3
    13c0:	4f 92       	push	r4
    13c2:	5f 92       	push	r5
    13c4:	6f 92       	push	r6
    13c6:	7f 92       	push	r7
    13c8:	8f 92       	push	r8
    13ca:	9f 92       	push	r9
    13cc:	af 92       	push	r10
    13ce:	bf 92       	push	r11
    13d0:	cf 92       	push	r12
    13d2:	df 92       	push	r13
    13d4:	ef 92       	push	r14
    13d6:	ff 92       	push	r15
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x26>
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x28>
    13e4:	1f 92       	push	r1
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	4c 01       	movw	r8, r24
    13ec:	6b 01       	movw	r12, r22
    13ee:	3a 01       	movw	r6, r20
    13f0:	59 01       	movw	r10, r18
    13f2:	f9 01       	movw	r30, r18
    13f4:	40 80       	ld	r4, Z
    13f6:	51 2c       	mov	r5, r1
    13f8:	e1 80       	ldd	r14, Z+1	; 0x01
    13fa:	f1 2c       	mov	r15, r1
    13fc:	f8 e0       	ldi	r31, 0x08	; 8
    13fe:	ef 16       	cp	r14, r31
    1400:	f1 04       	cpc	r15, r1
    1402:	c9 f4       	brne	.+50     	; 0x1436 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x7a>
    1404:	45 2b       	or	r20, r21
    1406:	b9 f4       	brne	.+46     	; 0x1436 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x7a>
    1408:	00 e0       	ldi	r16, 0x00	; 0
    140a:	10 e0       	ldi	r17, 0x00	; 0
    140c:	04 15       	cp	r16, r4
    140e:	15 05       	cpc	r17, r5
    1410:	0c f0       	brlt	.+2      	; 0x1414 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x58>
    1412:	4f c0       	rjmp	.+158    	; 0x14b2 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xf6>
    1414:	c8 01       	movw	r24, r16
    1416:	8c 0d       	add	r24, r12
    1418:	9d 1d       	adc	r25, r13
    141a:	80 97       	sbiw	r24, 0x20	; 32
    141c:	48 f4       	brcc	.+18     	; 0x1430 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x74>
    141e:	f5 01       	movw	r30, r10
    1420:	e0 0f       	add	r30, r16
    1422:	f1 1f       	adc	r31, r17
    1424:	42 81       	ldd	r20, Z+2	; 0x02
    1426:	60 2f       	mov	r22, r16
    1428:	6c 0d       	add	r22, r12
    142a:	c4 01       	movw	r24, r8
    142c:	0e 94 47 09 	call	0x128e	; 0x128e <_ZN9MaxMatrix9setColumnEhh>
    1430:	0f 5f       	subi	r16, 0xFF	; 255
    1432:	1f 4f       	sbci	r17, 0xFF	; 255
    1434:	eb cf       	rjmp	.-42     	; 0x140c <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x50>
    1436:	1d 82       	std	Y+5, r1	; 0x05
    1438:	1c 82       	std	Y+4, r1	; 0x04
    143a:	8c 81       	ldd	r24, Y+4	; 0x04
    143c:	9d 81       	ldd	r25, Y+5	; 0x05
    143e:	84 15       	cp	r24, r4
    1440:	95 05       	cpc	r25, r5
    1442:	bc f5       	brge	.+110    	; 0x14b2 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xf6>
    1444:	00 e0       	ldi	r16, 0x00	; 0
    1446:	10 e0       	ldi	r17, 0x00	; 0
    1448:	2c 80       	ldd	r2, Y+4	; 0x04
    144a:	3d 80       	ldd	r3, Y+5	; 0x05
    144c:	2c 0c       	add	r2, r12
    144e:	3d 1c       	adc	r3, r13
    1450:	8c 81       	ldd	r24, Y+4	; 0x04
    1452:	9d 81       	ldd	r25, Y+5	; 0x05
    1454:	8a 0d       	add	r24, r10
    1456:	9b 1d       	adc	r25, r11
    1458:	9a 83       	std	Y+2, r25	; 0x02
    145a:	89 83       	std	Y+1, r24	; 0x01
    145c:	3c 81       	ldd	r19, Y+4	; 0x04
    145e:	3c 0d       	add	r19, r12
    1460:	0e 15       	cp	r16, r14
    1462:	1f 05       	cpc	r17, r15
    1464:	04 f5       	brge	.+64     	; 0x14a6 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xea>
    1466:	80 e2       	ldi	r24, 0x20	; 32
    1468:	28 16       	cp	r2, r24
    146a:	31 04       	cpc	r3, r1
    146c:	c8 f4       	brcc	.+50     	; 0x14a0 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xe4>
    146e:	c8 01       	movw	r24, r16
    1470:	86 0d       	add	r24, r6
    1472:	97 1d       	adc	r25, r7
    1474:	08 97       	sbiw	r24, 0x08	; 8
    1476:	a0 f4       	brcc	.+40     	; 0x14a0 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xe4>
    1478:	e9 81       	ldd	r30, Y+1	; 0x01
    147a:	fa 81       	ldd	r31, Y+2	; 0x02
    147c:	82 81       	ldd	r24, Z+2	; 0x02
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	00 2e       	mov	r0, r16
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xcc>
    1484:	95 95       	asr	r25
    1486:	87 95       	ror	r24
    1488:	0a 94       	dec	r0
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xc8>
    148c:	28 2f       	mov	r18, r24
    148e:	21 70       	andi	r18, 0x01	; 1
    1490:	40 2f       	mov	r20, r16
    1492:	46 0d       	add	r20, r6
    1494:	63 2f       	mov	r22, r19
    1496:	c4 01       	movw	r24, r8
    1498:	3b 83       	std	Y+3, r19	; 0x03
    149a:	0e 94 98 09 	call	0x1330	; 0x1330 <_ZN9MaxMatrix6setDotEhhb>
    149e:	3b 81       	ldd	r19, Y+3	; 0x03
    14a0:	0f 5f       	subi	r16, 0xFF	; 255
    14a2:	1f 4f       	sbci	r17, 0xFF	; 255
    14a4:	dd cf       	rjmp	.-70     	; 0x1460 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xa4>
    14a6:	ec 81       	ldd	r30, Y+4	; 0x04
    14a8:	fd 81       	ldd	r31, Y+5	; 0x05
    14aa:	31 96       	adiw	r30, 0x01	; 1
    14ac:	fd 83       	std	Y+5, r31	; 0x05
    14ae:	ec 83       	std	Y+4, r30	; 0x04
    14b0:	c4 cf       	rjmp	.-120    	; 0x143a <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x7e>
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	1f 91       	pop	r17
    14c2:	0f 91       	pop	r16
    14c4:	ff 90       	pop	r15
    14c6:	ef 90       	pop	r14
    14c8:	df 90       	pop	r13
    14ca:	cf 90       	pop	r12
    14cc:	bf 90       	pop	r11
    14ce:	af 90       	pop	r10
    14d0:	9f 90       	pop	r9
    14d2:	8f 90       	pop	r8
    14d4:	7f 90       	pop	r7
    14d6:	6f 90       	pop	r6
    14d8:	5f 90       	pop	r5
    14da:	4f 90       	pop	r4
    14dc:	3f 90       	pop	r3
    14de:	2f 90       	pop	r2
    14e0:	08 95       	ret

000014e2 <_ZN9MaxMatrix7setTextEPKc>:
    14e2:	cf 92       	push	r12
    14e4:	df 92       	push	r13
    14e6:	ef 92       	push	r14
    14e8:	ff 92       	push	r15
    14ea:	0f 93       	push	r16
    14ec:	1f 93       	push	r17
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
    14f6:	28 97       	sbiw	r28, 0x08	; 8
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	f8 94       	cli
    14fc:	de bf       	out	0x3e, r29	; 62
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	cd bf       	out	0x3d, r28	; 61
    1502:	61 15       	cp	r22, r1
    1504:	71 05       	cpc	r23, r1
    1506:	11 f4       	brne	.+4      	; 0x150c <_ZN9MaxMatrix7setTextEPKc+0x2a>
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	2e c0       	rjmp	.+92     	; 0x1568 <_ZN9MaxMatrix7setTextEPKc+0x86>
    150c:	7c 01       	movw	r14, r24
    150e:	8b 01       	movw	r16, r22
    1510:	c1 2c       	mov	r12, r1
    1512:	d1 2c       	mov	r13, r1
    1514:	f8 01       	movw	r30, r16
    1516:	61 91       	ld	r22, Z+
    1518:	8f 01       	movw	r16, r30
    151a:	66 23       	and	r22, r22
    151c:	21 f1       	breq	.+72     	; 0x1566 <_ZN9MaxMatrix7setTextEPKc+0x84>
    151e:	ae 01       	movw	r20, r28
    1520:	48 5f       	subi	r20, 0xF8	; 248
    1522:	5f 4f       	sbci	r21, 0xFF	; 255
    1524:	c7 01       	movw	r24, r14
    1526:	0e 94 39 07 	call	0xe72	; 0xe72 <_ZN9MaxMatrix19convertCharToSpriteEcPh>
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	69 f3       	breq	.-38     	; 0x1508 <_ZN9MaxMatrix7setTextEPKc+0x26>
    152e:	ae 01       	movw	r20, r28
    1530:	4f 5f       	subi	r20, 0xFF	; 255
    1532:	5f 4f       	sbci	r21, 0xFF	; 255
    1534:	68 85       	ldd	r22, Y+8	; 0x08
    1536:	c7 01       	movw	r24, r14
    1538:	0e 94 10 05 	call	0xa20	; 0xa20 <_ZN9MaxMatrix9getSpriteEhPA7_h>
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	21 f3       	breq	.-56     	; 0x1508 <_ZN9MaxMatrix7setTextEPKc+0x26>
    1540:	9e 01       	movw	r18, r28
    1542:	2f 5f       	subi	r18, 0xFF	; 255
    1544:	3f 4f       	sbci	r19, 0xFF	; 255
    1546:	40 e0       	ldi	r20, 0x00	; 0
    1548:	50 e0       	ldi	r21, 0x00	; 0
    154a:	b6 01       	movw	r22, r12
    154c:	c7 01       	movw	r24, r14
    154e:	0e 94 de 09 	call	0x13bc	; 0x13bc <_ZN9MaxMatrix9setSpriteEiiPA7_Kh>
    1552:	29 81       	ldd	r18, Y+1	; 0x01
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	2f 5f       	subi	r18, 0xFF	; 255
    1558:	3f 4f       	sbci	r19, 0xFF	; 255
    155a:	c2 0e       	add	r12, r18
    155c:	d3 1e       	adc	r13, r19
    155e:	81 e2       	ldi	r24, 0x21	; 33
    1560:	c8 16       	cp	r12, r24
    1562:	d1 04       	cpc	r13, r1
    1564:	bc f2       	brlt	.-82     	; 0x1514 <_ZN9MaxMatrix7setTextEPKc+0x32>
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	28 96       	adiw	r28, 0x08	; 8
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	de bf       	out	0x3e, r29	; 62
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	cd bf       	out	0x3d, r28	; 61
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	1f 91       	pop	r17
    157a:	0f 91       	pop	r16
    157c:	ff 90       	pop	r15
    157e:	ef 90       	pop	r14
    1580:	df 90       	pop	r13
    1582:	cf 90       	pop	r12
    1584:	08 95       	ret

00001586 <_ZN9MaxMatrix11shiftLeftLLEbbb>:
 *  \param[in]      FillWithZero                initialize the column on the right side with zero.
 *  \param[in]      ShiftToNeighbourModule      shift led states to neighbour module
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftLeftLL(bool Rotate, bool FillWithZero, bool ShiftToNeighbourModule)
{
    1586:	ef 92       	push	r14
    1588:	ff 92       	push	r15
    158a:	0f 93       	push	r16
    158c:	1f 93       	push	r17
    158e:	cf 93       	push	r28
    1590:	df 93       	push	r29
	if(ShiftToNeighbourModule) {
    1592:	22 23       	and	r18, r18
    1594:	b9 f0       	breq	.+46     	; 0x15c4 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x3e>
		byte old = MatrixBuffer[0];
    1596:	ec 01       	movw	r28, r24
    1598:	2d 81       	ldd	r18, Y+5	; 0x05
    159a:	fc 01       	movw	r30, r24
    159c:	36 96       	adiw	r30, 0x06	; 6
    159e:	dc 01       	movw	r26, r24
    15a0:	95 96       	adiw	r26, 0x25	; 37
		for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS - 1; Column++) {
			MatrixBuffer[Column] = MatrixBuffer[Column + 1]; 
    15a2:	31 91       	ld	r19, Z+
    15a4:	ef 01       	movw	r28, r30
    15a6:	22 97       	sbiw	r28, 0x02	; 2
    15a8:	38 83       	st	Y, r19
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftLeftLL(bool Rotate, bool FillWithZero, bool ShiftToNeighbourModule)
{
	if(ShiftToNeighbourModule) {
		byte old = MatrixBuffer[0];
		for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS - 1; Column++) {
    15aa:	ea 17       	cp	r30, r26
    15ac:	fb 07       	cpc	r31, r27
    15ae:	c9 f7       	brne	.-14     	; 0x15a2 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x1c>
			MatrixBuffer[Column] = MatrixBuffer[Column + 1]; 
		}
		if(Rotate) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = old;
    15b0:	66 23       	and	r22, r22
    15b2:	19 f0       	breq	.+6      	; 0x15ba <_ZN9MaxMatrix11shiftLeftLLEbbb+0x34>
    15b4:	fc 01       	movw	r30, r24
    15b6:	24 a3       	std	Z+36, r18	; 0x24
    15b8:	26 c0       	rjmp	.+76     	; 0x1606 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x80>
		else if(FillWithZero) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = 0;
    15ba:	44 23       	and	r20, r20
    15bc:	21 f1       	breq	.+72     	; 0x1606 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x80>
    15be:	ec 01       	movw	r28, r24
    15c0:	1c a2       	std	Y+36, r1	; 0x24
    15c2:	21 c0       	rjmp	.+66     	; 0x1606 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x80>
    15c4:	fc 01       	movw	r30, r24
    15c6:	3c 96       	adiw	r30, 0x0c	; 12
    15c8:	7c 01       	movw	r14, r24
    15ca:	dc e2       	ldi	r29, 0x2C	; 44
    15cc:	ed 0e       	add	r14, r29
    15ce:	f1 1c       	adc	r15, r1
    15d0:	df 01       	movw	r26, r30
    15d2:	17 97       	sbiw	r26, 0x07	; 7
	} else {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
			byte old = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module];
    15d4:	5c 91       	ld	r21, X
    15d6:	11 96       	adiw	r26, 0x01	; 1
			for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; Column++) {
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] = 
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module) + 1];
    15dc:	7d 91       	ld	r23, X+
    15de:	8d 01       	movw	r16, r26
    15e0:	02 50       	subi	r16, 0x02	; 2
    15e2:	11 09       	sbc	r17, r1
    15e4:	e8 01       	movw	r28, r16
    15e6:	78 83       	st	Y, r23
		if(Rotate) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = old;
		else if(FillWithZero) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = 0;
	} else {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
			byte old = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module];
			for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; Column++) {
    15e8:	2f 5f       	subi	r18, 0xFF	; 255
    15ea:	3f 4f       	sbci	r19, 0xFF	; 255
    15ec:	27 30       	cpi	r18, 0x07	; 7
    15ee:	31 05       	cpc	r19, r1
    15f0:	a9 f7       	brne	.-22     	; 0x15dc <_ZN9MaxMatrix11shiftLeftLLEbbb+0x56>
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] = 
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module) + 1];
			}
			if(Rotate) MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * (Module + 1) - 1] = old;
    15f2:	66 23       	and	r22, r22
    15f4:	11 f0       	breq	.+4      	; 0x15fa <_ZN9MaxMatrix11shiftLeftLLEbbb+0x74>
    15f6:	50 83       	st	Z, r21
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <_ZN9MaxMatrix11shiftLeftLLEbbb+0x78>
			else if(FillWithZero) MatrixBuffer[(Module + 1) * MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1] = 0;
    15fa:	41 11       	cpse	r20, r1
    15fc:	10 82       	st	Z, r1
    15fe:	38 96       	adiw	r30, 0x08	; 8
			MatrixBuffer[Column] = MatrixBuffer[Column + 1]; 
		}
		if(Rotate) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = old;
		else if(FillWithZero) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = 0;
	} else {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
    1600:	ee 15       	cp	r30, r14
    1602:	ff 05       	cpc	r31, r15
    1604:	29 f7       	brne	.-54     	; 0x15d0 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x4a>
			if(Rotate) MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * (Module + 1) - 1] = old;
			else if(FillWithZero) MatrixBuffer[(Module + 1) * MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1] = 0;
		}
	}
    reload();
} /* shiftLeftLL */
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	1f 91       	pop	r17
    160c:	0f 91       	pop	r16
    160e:	ff 90       	pop	r15
    1610:	ef 90       	pop	r14
			}
			if(Rotate) MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * (Module + 1) - 1] = old;
			else if(FillWithZero) MatrixBuffer[(Module + 1) * MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1] = 0;
		}
	}
    reload();
    1612:	0c 94 33 05 	jmp	0xa66	; 0xa66 <_ZN9MaxMatrix6reloadEv>

00001616 <_ZN9MaxMatrix12shiftRightLLEbbb>:
 *  \param[in]      FillWithZero                initialize the column on the left side with zero.
 *  \param[in]      ShiftToNeighbourModule      shift led states to neighbour module
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftRightLL(bool Rotate, bool FillWithZero, bool ShiftToNeighbourModule)
{
    1616:	cf 92       	push	r12
    1618:	df 92       	push	r13
    161a:	ef 92       	push	r14
    161c:	ff 92       	push	r15
    161e:	0f 93       	push	r16
    1620:	1f 93       	push	r17
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    1626:	dc 01       	movw	r26, r24
    1628:	95 96       	adiw	r26, 0x25	; 37
    162a:	6d 01       	movw	r12, r26
	if(ShiftToNeighbourModule) {
	    byte old = MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1];
    162c:	fc 01       	movw	r30, r24
 *  \param[in]      ShiftToNeighbourModule      shift led states to neighbour module
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftRightLL(bool Rotate, bool FillWithZero, bool ShiftToNeighbourModule)
{
	if(ShiftToNeighbourModule) {
    162e:	22 23       	and	r18, r18
    1630:	a9 f0       	breq	.+42     	; 0x165c <_ZN9MaxMatrix12shiftRightLLEbbb+0x46>
	    byte old = MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1];
    1632:	24 a1       	ldd	r18, Z+36	; 0x24
    1634:	fd 01       	movw	r30, r26
    1636:	5f 97       	sbiw	r26, 0x1f	; 31
    1638:	ef 01       	movw	r28, r30
    163a:	22 97       	sbiw	r28, 0x02	; 2
	    for(int Column = MAXMATRIX_NUMBER_OF_COLUMNS - 1; Column > 0; Column--) { 
			MatrixBuffer[Column] = MatrixBuffer[Column - 1]; 
    163c:	38 81       	ld	r19, Y
    163e:	32 93       	st	-Z, r19
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftRightLL(bool Rotate, bool FillWithZero, bool ShiftToNeighbourModule)
{
	if(ShiftToNeighbourModule) {
	    byte old = MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1];
	    for(int Column = MAXMATRIX_NUMBER_OF_COLUMNS - 1; Column > 0; Column--) { 
    1640:	ea 17       	cp	r30, r26
    1642:	fb 07       	cpc	r31, r27
    1644:	c9 f7       	brne	.-14     	; 0x1638 <_ZN9MaxMatrix12shiftRightLLEbbb+0x22>
			MatrixBuffer[Column] = MatrixBuffer[Column - 1]; 
		}
	    if(Rotate) MatrixBuffer[0] = old;
    1646:	66 23       	and	r22, r22
    1648:	21 f0       	breq	.+8      	; 0x1652 <_ZN9MaxMatrix12shiftRightLLEbbb+0x3c>
    164a:	dc 01       	movw	r26, r24
    164c:	15 96       	adiw	r26, 0x05	; 5
    164e:	2c 93       	st	X, r18
    1650:	22 c0       	rjmp	.+68     	; 0x1696 <_ZN9MaxMatrix12shiftRightLLEbbb+0x80>
	    else if(FillWithZero) MatrixBuffer[0] = 0;
    1652:	44 23       	and	r20, r20
    1654:	01 f1       	breq	.+64     	; 0x1696 <_ZN9MaxMatrix12shiftRightLLEbbb+0x80>
    1656:	fc 01       	movw	r30, r24
    1658:	15 82       	std	Z+5, r1	; 0x05
    165a:	1d c0       	rjmp	.+58     	; 0x1696 <_ZN9MaxMatrix12shiftRightLLEbbb+0x80>
    165c:	35 96       	adiw	r30, 0x05	; 5
    165e:	8f 01       	movw	r16, r30
	} else {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
			byte old = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * (Module + 1) - 1];
    1660:	57 81       	ldd	r21, Z+7	; 0x07
    1662:	38 96       	adiw	r30, 0x08	; 8
    1664:	ef 01       	movw	r28, r30
			for(int Column = MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; Column > 0; Column--) {
    1666:	27 e0       	ldi	r18, 0x07	; 7
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	7e 01       	movw	r14, r28
    166c:	72 e0       	ldi	r23, 0x02	; 2
    166e:	e7 1a       	sub	r14, r23
    1670:	f1 08       	sbc	r15, r1
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] = 
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module) - 1];
    1672:	d7 01       	movw	r26, r14
    1674:	7c 91       	ld	r23, X
    1676:	7a 93       	st	-Y, r23
	    if(Rotate) MatrixBuffer[0] = old;
	    else if(FillWithZero) MatrixBuffer[0] = 0;
	} else {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
			byte old = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * (Module + 1) - 1];
			for(int Column = MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; Column > 0; Column--) {
    1678:	21 50       	subi	r18, 0x01	; 1
    167a:	31 09       	sbc	r19, r1
    167c:	b1 f7       	brne	.-20     	; 0x166a <_ZN9MaxMatrix12shiftRightLLEbbb+0x54>
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] = 
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module) - 1];
			}
			if(Rotate) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = old;
    167e:	66 23       	and	r22, r22
    1680:	19 f0       	breq	.+6      	; 0x1688 <_ZN9MaxMatrix12shiftRightLLEbbb+0x72>
    1682:	d8 01       	movw	r26, r16
    1684:	5c 93       	st	X, r21
    1686:	04 c0       	rjmp	.+8      	; 0x1690 <_ZN9MaxMatrix12shiftRightLLEbbb+0x7a>
			else if(FillWithZero) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = 0;
    1688:	44 23       	and	r20, r20
    168a:	11 f0       	breq	.+4      	; 0x1690 <_ZN9MaxMatrix12shiftRightLLEbbb+0x7a>
    168c:	d8 01       	movw	r26, r16
    168e:	1c 92       	st	X, r1
			MatrixBuffer[Column] = MatrixBuffer[Column - 1]; 
		}
	    if(Rotate) MatrixBuffer[0] = old;
	    else if(FillWithZero) MatrixBuffer[0] = 0;
	} else {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
    1690:	ec 15       	cp	r30, r12
    1692:	fd 05       	cpc	r31, r13
    1694:	21 f7       	brne	.-56     	; 0x165e <_ZN9MaxMatrix12shiftRightLLEbbb+0x48>
			if(Rotate) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = old;
			else if(FillWithZero) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = 0;
		}
	}
    reload();
} /* shiftRightLL */
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	1f 91       	pop	r17
    169c:	0f 91       	pop	r16
    169e:	ff 90       	pop	r15
    16a0:	ef 90       	pop	r14
    16a2:	df 90       	pop	r13
    16a4:	cf 90       	pop	r12
			}
			if(Rotate) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = old;
			else if(FillWithZero) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = 0;
		}
	}
    reload();
    16a6:	0c 94 33 05 	jmp	0xa66	; 0xa66 <_ZN9MaxMatrix6reloadEv>

000016aa <_ZN9MaxMatrix9shiftUpLLEbb>:
 *  \param[in]      Rotate                      activate rotation of the matrix LED states
 *  \param[in]      ShiftToNeighbourModule      shift led states to neighbour module
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftUpLL(bool Rotate, bool ShiftToNeighbourModule)
{	
    16aa:	bf 92       	push	r11
    16ac:	cf 92       	push	r12
    16ae:	df 92       	push	r13
    16b0:	ef 92       	push	r14
    16b2:	ff 92       	push	r15
    16b4:	0f 93       	push	r16
    16b6:	1f 93       	push	r17
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
    16bc:	00 d0       	rcall	.+0      	; 0x16be <_ZN9MaxMatrix9shiftUpLLEbb+0x14>
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	7c 01       	movw	r14, r24
    16c4:	c6 2e       	mov	r12, r22
	byte ModuleTopRow = 0;
    16c6:	1a 82       	std	Y+2, r1	; 0x02
	byte MatrixTopRow = 0;
    16c8:	19 82       	std	Y+1, r1	; 0x01
    16ca:	fc 01       	movw	r30, r24
    16cc:	35 96       	adiw	r30, 0x05	; 5

	if(ShiftToNeighbourModule) {
    16ce:	44 23       	and	r20, r20
    16d0:	e1 f1       	breq	.+120    	; 0x174a <_ZN9MaxMatrix9shiftUpLLEbb+0xa0>
    16d2:	8f 01       	movw	r16, r30
    16d4:	d1 2c       	mov	r13, r1
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++)
		{
			if(Module == 0 && Rotate) getRowLL(0, 0, &MatrixTopRow);
    16d6:	d1 10       	cpse	r13, r1
    16d8:	0a c0       	rjmp	.+20     	; 0x16ee <_ZN9MaxMatrix9shiftUpLLEbb+0x44>
    16da:	cc 20       	and	r12, r12
    16dc:	41 f0       	breq	.+16     	; 0x16ee <_ZN9MaxMatrix9shiftUpLLEbb+0x44>
    16de:	9e 01       	movw	r18, r28
    16e0:	2f 5f       	subi	r18, 0xFF	; 255
    16e2:	3f 4f       	sbci	r19, 0xFF	; 255
    16e4:	40 e0       	ldi	r20, 0x00	; 0
    16e6:	60 e0       	ldi	r22, 0x00	; 0
    16e8:	c7 01       	movw	r24, r14
    16ea:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN9MaxMatrix8getRowLLEhhPh>
			getRowLL(Module + 1, 0, &ModuleTopRow);
    16ee:	bb 24       	eor	r11, r11
    16f0:	b3 94       	inc	r11
    16f2:	bd 0c       	add	r11, r13
    16f4:	9e 01       	movw	r18, r28
    16f6:	2e 5f       	subi	r18, 0xFE	; 254
    16f8:	3f 4f       	sbci	r19, 0xFF	; 255
    16fa:	40 e0       	ldi	r20, 0x00	; 0
    16fc:	6b 2d       	mov	r22, r11
    16fe:	c7 01       	movw	r24, r14
    1700:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN9MaxMatrix8getRowLLEhhPh>
    1704:	f8 01       	movw	r30, r16
			
			for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; Column++) 
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] >>= 1;
    170a:	80 81       	ld	r24, Z
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	95 95       	asr	r25
    1710:	87 95       	ror	r24
    1712:	81 93       	st	Z+, r24
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++)
		{
			if(Module == 0 && Rotate) getRowLL(0, 0, &MatrixTopRow);
			getRowLL(Module + 1, 0, &ModuleTopRow);
			
			for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; Column++) 
    1714:	2f 5f       	subi	r18, 0xFF	; 255
    1716:	3f 4f       	sbci	r19, 0xFF	; 255
    1718:	28 30       	cpi	r18, 0x08	; 8
    171a:	31 05       	cpc	r19, r1
    171c:	b1 f7       	brne	.-20     	; 0x170a <_ZN9MaxMatrix9shiftUpLLEbb+0x60>
				MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] >>= 1;
			
			if(Module == MAXMATRIX_NUMBER_OF_MODULES - 1) {
    171e:	83 e0       	ldi	r24, 0x03	; 3
    1720:	d8 12       	cpse	r13, r24
    1722:	06 c0       	rjmp	.+12     	; 0x1730 <_ZN9MaxMatrix9shiftUpLLEbb+0x86>
				if(Rotate) setRowLL(Module, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, MatrixTopRow);
    1724:	cc 20       	and	r12, r12
    1726:	51 f0       	breq	.+20     	; 0x173c <_ZN9MaxMatrix9shiftUpLLEbb+0x92>
    1728:	29 81       	ldd	r18, Y+1	; 0x01
    172a:	47 e0       	ldi	r20, 0x07	; 7
    172c:	63 e0       	ldi	r22, 0x03	; 3
    172e:	03 c0       	rjmp	.+6      	; 0x1736 <_ZN9MaxMatrix9shiftUpLLEbb+0x8c>
			} else {
				setRowLL(Module, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, ModuleTopRow);
    1730:	2a 81       	ldd	r18, Y+2	; 0x02
    1732:	47 e0       	ldi	r20, 0x07	; 7
    1734:	6d 2d       	mov	r22, r13
    1736:	c7 01       	movw	r24, r14
    1738:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <_ZN9MaxMatrix8setRowLLEhhh>
    173c:	08 5f       	subi	r16, 0xF8	; 248
    173e:	1f 4f       	sbci	r17, 0xFF	; 255
{	
	byte ModuleTopRow = 0;
	byte MatrixTopRow = 0;

	if(ShiftToNeighbourModule) {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++)
    1740:	84 e0       	ldi	r24, 0x04	; 4
    1742:	b8 16       	cp	r11, r24
    1744:	89 f0       	breq	.+34     	; 0x1768 <_ZN9MaxMatrix9shiftUpLLEbb+0xbe>
    1746:	db 2c       	mov	r13, r11
    1748:	c6 cf       	rjmp	.-116    	; 0x16d6 <_ZN9MaxMatrix9shiftUpLLEbb+0x2c>
    174a:	ac 01       	movw	r20, r24
    174c:	4b 5d       	subi	r20, 0xDB	; 219
    174e:	5f 4f       	sbci	r21, 0xFF	; 255
			}
		}
	} else {
		for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS; Column++) 
		{
			bool TopBit = bitRead(MatrixBuffer[Column], 0);
    1750:	20 81       	ld	r18, Z
			MatrixBuffer[Column] >>= 1;
    1752:	82 2f       	mov	r24, r18
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	95 95       	asr	r25
    1758:	87 95       	ror	r24
			if(Rotate) bitWrite(MatrixBuffer[Column], MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, TopBit);
    175a:	c1 10       	cpse	r12, r1
    175c:	14 c0       	rjmp	.+40     	; 0x1786 <_ZN9MaxMatrix9shiftUpLLEbb+0xdc>
    175e:	80 83       	st	Z, r24
    1760:	31 96       	adiw	r30, 0x01	; 1
			} else {
				setRowLL(Module, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, ModuleTopRow);
			}
		}
	} else {
		for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS; Column++) 
    1762:	e4 17       	cp	r30, r20
    1764:	f5 07       	cpc	r31, r21
    1766:	a1 f7       	brne	.-24     	; 0x1750 <_ZN9MaxMatrix9shiftUpLLEbb+0xa6>
			bool TopBit = bitRead(MatrixBuffer[Column], 0);
			MatrixBuffer[Column] >>= 1;
			if(Rotate) bitWrite(MatrixBuffer[Column], MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, TopBit);
		}		
	}
    reload();
    1768:	c7 01       	movw	r24, r14
    176a:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN9MaxMatrix6reloadEv>
} /* shiftModuleUpLL */
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	1f 91       	pop	r17
    1778:	0f 91       	pop	r16
    177a:	ff 90       	pop	r15
    177c:	ef 90       	pop	r14
    177e:	df 90       	pop	r13
    1780:	cf 90       	pop	r12
    1782:	bf 90       	pop	r11
    1784:	08 95       	ret
	} else {
		for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS; Column++) 
		{
			bool TopBit = bitRead(MatrixBuffer[Column], 0);
			MatrixBuffer[Column] >>= 1;
			if(Rotate) bitWrite(MatrixBuffer[Column], MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, TopBit);
    1786:	20 ff       	sbrs	r18, 0
    1788:	ea cf       	rjmp	.-44     	; 0x175e <_ZN9MaxMatrix9shiftUpLLEbb+0xb4>
    178a:	80 68       	ori	r24, 0x80	; 128
    178c:	e8 cf       	rjmp	.-48     	; 0x175e <_ZN9MaxMatrix9shiftUpLLEbb+0xb4>

0000178e <_ZN9MaxMatrix11shiftDownLLEbb>:
 *  \param[in]      Rotate                      activate rotation of the matrix LED states
 *  \param[in]      ShiftToNeighbourModule      shift led states to neighbour module
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftDownLL(bool Rotate, bool ShiftToNeighbourModule)
{
    178e:	bf 92       	push	r11
    1790:	cf 92       	push	r12
    1792:	df 92       	push	r13
    1794:	ef 92       	push	r14
    1796:	ff 92       	push	r15
    1798:	0f 93       	push	r16
    179a:	1f 93       	push	r17
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	00 d0       	rcall	.+0      	; 0x17a2 <_ZN9MaxMatrix11shiftDownLLEbb+0x14>
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	7c 01       	movw	r14, r24
    17a8:	c6 2e       	mov	r12, r22
	byte ModuleBottomRow = 0;
    17aa:	1a 82       	std	Y+2, r1	; 0x02
	byte MatrixBottomRow = 0;
    17ac:	19 82       	std	Y+1, r1	; 0x01
    17ae:	fc 01       	movw	r30, r24
    17b0:	35 96       	adiw	r30, 0x05	; 5

	if(ShiftToNeighbourModule) {
    17b2:	44 23       	and	r20, r20
    17b4:	c9 f1       	breq	.+114    	; 0x1828 <_ZN9MaxMatrix11shiftDownLLEbb+0x9a>
    17b6:	8f 01       	movw	r16, r30
    17b8:	d1 2c       	mov	r13, r1
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++)
		{
			if(Module == 0 && Rotate) getRowLL(0, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, &MatrixBottomRow);
    17ba:	d1 10       	cpse	r13, r1
    17bc:	0a c0       	rjmp	.+20     	; 0x17d2 <_ZN9MaxMatrix11shiftDownLLEbb+0x44>
    17be:	cc 20       	and	r12, r12
    17c0:	41 f0       	breq	.+16     	; 0x17d2 <_ZN9MaxMatrix11shiftDownLLEbb+0x44>
    17c2:	9e 01       	movw	r18, r28
    17c4:	2f 5f       	subi	r18, 0xFF	; 255
    17c6:	3f 4f       	sbci	r19, 0xFF	; 255
    17c8:	47 e0       	ldi	r20, 0x07	; 7
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	c7 01       	movw	r24, r14
    17ce:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN9MaxMatrix8getRowLLEhhPh>
			getRowLL(Module + 1, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, &ModuleBottomRow);
    17d2:	bb 24       	eor	r11, r11
    17d4:	b3 94       	inc	r11
    17d6:	bd 0c       	add	r11, r13
    17d8:	9e 01       	movw	r18, r28
    17da:	2e 5f       	subi	r18, 0xFE	; 254
    17dc:	3f 4f       	sbci	r19, 0xFF	; 255
    17de:	47 e0       	ldi	r20, 0x07	; 7
    17e0:	6b 2d       	mov	r22, r11
    17e2:	c7 01       	movw	r24, r14
    17e4:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN9MaxMatrix8getRowLLEhhPh>
    17e8:	f8 01       	movw	r30, r16
			
			for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; Column++)
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	90 e0       	ldi	r25, 0x00	; 0
			MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] <<= 1;
    17ee:	20 81       	ld	r18, Z
    17f0:	22 0f       	add	r18, r18
    17f2:	21 93       	st	Z+, r18
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++)
		{
			if(Module == 0 && Rotate) getRowLL(0, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, &MatrixBottomRow);
			getRowLL(Module + 1, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, &ModuleBottomRow);
			
			for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; Column++)
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	88 30       	cpi	r24, 0x08	; 8
    17f8:	91 05       	cpc	r25, r1
    17fa:	c9 f7       	brne	.-14     	; 0x17ee <_ZN9MaxMatrix11shiftDownLLEbb+0x60>
			MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] <<= 1;
			
			if(Module == MAXMATRIX_NUMBER_OF_MODULES - 1) {
    17fc:	83 e0       	ldi	r24, 0x03	; 3
    17fe:	d8 12       	cpse	r13, r24
    1800:	06 c0       	rjmp	.+12     	; 0x180e <_ZN9MaxMatrix11shiftDownLLEbb+0x80>
				if(Rotate) setRowLL(Module, 0, MatrixBottomRow);
    1802:	cc 20       	and	r12, r12
    1804:	51 f0       	breq	.+20     	; 0x181a <_ZN9MaxMatrix11shiftDownLLEbb+0x8c>
    1806:	29 81       	ldd	r18, Y+1	; 0x01
    1808:	40 e0       	ldi	r20, 0x00	; 0
    180a:	63 e0       	ldi	r22, 0x03	; 3
    180c:	03 c0       	rjmp	.+6      	; 0x1814 <_ZN9MaxMatrix11shiftDownLLEbb+0x86>
			} else {
				setRowLL(Module, 0, ModuleBottomRow);
    180e:	2a 81       	ldd	r18, Y+2	; 0x02
    1810:	40 e0       	ldi	r20, 0x00	; 0
    1812:	6d 2d       	mov	r22, r13
    1814:	c7 01       	movw	r24, r14
    1816:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <_ZN9MaxMatrix8setRowLLEhhh>
    181a:	08 5f       	subi	r16, 0xF8	; 248
    181c:	1f 4f       	sbci	r17, 0xFF	; 255
{
	byte ModuleBottomRow = 0;
	byte MatrixBottomRow = 0;

	if(ShiftToNeighbourModule) {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++)
    181e:	84 e0       	ldi	r24, 0x04	; 4
    1820:	b8 16       	cp	r11, r24
    1822:	79 f0       	breq	.+30     	; 0x1842 <_ZN9MaxMatrix11shiftDownLLEbb+0xb4>
    1824:	db 2c       	mov	r13, r11
    1826:	c9 cf       	rjmp	.-110    	; 0x17ba <_ZN9MaxMatrix11shiftDownLLEbb+0x2c>
    1828:	9c 01       	movw	r18, r24
    182a:	2b 5d       	subi	r18, 0xDB	; 219
    182c:	3f 4f       	sbci	r19, 0xFF	; 255
			}
		}
	} else {
	    for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS; Column++) 
		{
		    bool BottomBit = bitRead(MatrixBuffer[Column], MAXMATRIX_ROW_NUMBER_OF_MODULE - 1);
    182e:	90 81       	ld	r25, Z
		    MatrixBuffer[Column] <<= 1;
    1830:	89 2f       	mov	r24, r25
    1832:	88 0f       	add	r24, r24
		    if(Rotate) bitWrite(MatrixBuffer[Column], 0, BottomBit);
    1834:	c1 10       	cpse	r12, r1
    1836:	14 c0       	rjmp	.+40     	; 0x1860 <_ZN9MaxMatrix11shiftDownLLEbb+0xd2>
    1838:	80 83       	st	Z, r24
    183a:	31 96       	adiw	r30, 0x01	; 1
			} else {
				setRowLL(Module, 0, ModuleBottomRow);
			}
		}
	} else {
	    for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS; Column++) 
    183c:	e2 17       	cp	r30, r18
    183e:	f3 07       	cpc	r31, r19
    1840:	b1 f7       	brne	.-20     	; 0x182e <_ZN9MaxMatrix11shiftDownLLEbb+0xa0>
		    bool BottomBit = bitRead(MatrixBuffer[Column], MAXMATRIX_ROW_NUMBER_OF_MODULE - 1);
		    MatrixBuffer[Column] <<= 1;
		    if(Rotate) bitWrite(MatrixBuffer[Column], 0, BottomBit);
		}
	}
    reload();
    1842:	c7 01       	movw	r24, r14
    1844:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN9MaxMatrix6reloadEv>
} /* shiftDownLL */
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	1f 91       	pop	r17
    1852:	0f 91       	pop	r16
    1854:	ff 90       	pop	r15
    1856:	ef 90       	pop	r14
    1858:	df 90       	pop	r13
    185a:	cf 90       	pop	r12
    185c:	bf 90       	pop	r11
    185e:	08 95       	ret
	} else {
	    for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS; Column++) 
		{
		    bool BottomBit = bitRead(MatrixBuffer[Column], MAXMATRIX_ROW_NUMBER_OF_MODULE - 1);
		    MatrixBuffer[Column] <<= 1;
		    if(Rotate) bitWrite(MatrixBuffer[Column], 0, BottomBit);
    1860:	97 ff       	sbrs	r25, 7
    1862:	ea cf       	rjmp	.-44     	; 0x1838 <_ZN9MaxMatrix11shiftDownLLEbb+0xaa>
    1864:	81 60       	ori	r24, 0x01	; 1
    1866:	e8 cf       	rjmp	.-48     	; 0x1838 <_ZN9MaxMatrix11shiftDownLLEbb+0xaa>

00001868 <_ZN9MaxMatrix9shiftLeftEbb>:
 *  \param[in]      Rotate          activate rotation of the matrix LED states
 *  \param[in]      FillWithZero    initialize the column on the right side with zero.
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftLeft(bool Rotate, bool FillWithZero)
{
    1868:	0f 93       	push	r16
    186a:	1f 93       	push	r17
    186c:	cf 93       	push	r28
    186e:	df 93       	push	r29
    1870:	ec 01       	movw	r28, r24
    1872:	16 2f       	mov	r17, r22
    1874:	04 2f       	mov	r16, r20
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_0) shiftLeftLL(Rotate, FillWithZero, true);
    1876:	8c 81       	ldd	r24, Y+4	; 0x04
    1878:	81 11       	cpse	r24, r1
    187a:	04 c0       	rjmp	.+8      	; 0x1884 <_ZN9MaxMatrix9shiftLeftEbb+0x1c>
    187c:	21 e0       	ldi	r18, 0x01	; 1
    187e:	ce 01       	movw	r24, r28
    1880:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN9MaxMatrix11shiftLeftLLEbbb>
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_90) shiftUpLL(Rotate, true);
    1884:	8c 81       	ldd	r24, Y+4	; 0x04
    1886:	81 30       	cpi	r24, 0x01	; 1
    1888:	29 f4       	brne	.+10     	; 0x1894 <_ZN9MaxMatrix9shiftLeftEbb+0x2c>
    188a:	41 e0       	ldi	r20, 0x01	; 1
    188c:	61 2f       	mov	r22, r17
    188e:	ce 01       	movw	r24, r28
    1890:	0e 94 55 0b 	call	0x16aa	; 0x16aa <_ZN9MaxMatrix9shiftUpLLEbb>
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_180) shiftRightLL(Rotate, FillWithZero, true);
    1894:	8c 81       	ldd	r24, Y+4	; 0x04
    1896:	82 30       	cpi	r24, 0x02	; 2
    1898:	31 f4       	brne	.+12     	; 0x18a6 <_ZN9MaxMatrix9shiftLeftEbb+0x3e>
    189a:	21 e0       	ldi	r18, 0x01	; 1
    189c:	40 2f       	mov	r20, r16
    189e:	61 2f       	mov	r22, r17
    18a0:	ce 01       	movw	r24, r28
    18a2:	0e 94 0b 0b 	call	0x1616	; 0x1616 <_ZN9MaxMatrix12shiftRightLLEbbb>
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_270) shiftDownLL(Rotate, true);
    18a6:	8c 81       	ldd	r24, Y+4	; 0x04
    18a8:	83 30       	cpi	r24, 0x03	; 3
    18aa:	49 f4       	brne	.+18     	; 0x18be <_ZN9MaxMatrix9shiftLeftEbb+0x56>
    18ac:	41 e0       	ldi	r20, 0x01	; 1
    18ae:	61 2f       	mov	r22, r17
    18b0:	ce 01       	movw	r24, r28

} /* shiftLeft */
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	1f 91       	pop	r17
    18b8:	0f 91       	pop	r16
void MaxMatrix::shiftLeft(bool Rotate, bool FillWithZero)
{
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_0) shiftLeftLL(Rotate, FillWithZero, true);
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_90) shiftUpLL(Rotate, true);
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_180) shiftRightLL(Rotate, FillWithZero, true);
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_270) shiftDownLL(Rotate, true);
    18ba:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <_ZN9MaxMatrix11shiftDownLLEbb>

} /* shiftLeft */
    18be:	df 91       	pop	r29
    18c0:	cf 91       	pop	r28
    18c2:	1f 91       	pop	r17
    18c4:	0f 91       	pop	r16
    18c6:	08 95       	ret

000018c8 <_ZN9MaxMatrix13charShiftTaskEv>:
 *                  MAXMATRIX_STATE_CHAR_SHIFT or MAXMATRIX_STATE_STRING_SHIFT to MAXMATRIX_STATE_READY
 *  \return         -
 *  \pre            has to be called from shiftTask()
 *****************************************************************************************************************************************************/
void MaxMatrix::charShiftTask()
{
    18c8:	cf 93       	push	r28
    18ca:	df 93       	push	r29
    18cc:	ec 01       	movw	r28, r24
    if(SpriteShiftCounter <= SpriteBuffer[ASCII_TABLE_SPRITE_WIDTH]) {
    18ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    18d0:	8d a1       	ldd	r24, Y+37	; 0x25
    18d2:	89 17       	cp	r24, r25
    18d4:	b0 f0       	brcs	.+44     	; 0x1902 <_ZN9MaxMatrix13charShiftTaskEv+0x3a>
        shiftLeft(false, true);
    18d6:	41 e0       	ldi	r20, 0x01	; 1
    18d8:	60 e0       	ldi	r22, 0x00	; 0
    18da:	ce 01       	movw	r24, r28
    18dc:	0e 94 34 0c 	call	0x1868	; 0x1868 <_ZN9MaxMatrix9shiftLeftEbb>
        setSprite(MAXMATRIX_NUMBER_OF_COLUMNS-SpriteShiftCounter, 0, &SpriteBuffer);
    18e0:	9e 01       	movw	r18, r28
    18e2:	2b 5d       	subi	r18, 0xDB	; 219
    18e4:	3f 4f       	sbci	r19, 0xFF	; 255
    18e6:	8c a5       	ldd	r24, Y+44	; 0x2c
    18e8:	60 e2       	ldi	r22, 0x20	; 32
    18ea:	70 e0       	ldi	r23, 0x00	; 0
    18ec:	68 1b       	sub	r22, r24
    18ee:	71 09       	sbc	r23, r1
    18f0:	40 e0       	ldi	r20, 0x00	; 0
    18f2:	50 e0       	ldi	r21, 0x00	; 0
    18f4:	ce 01       	movw	r24, r28
    18f6:	0e 94 de 09 	call	0x13bc	; 0x13bc <_ZN9MaxMatrix9setSpriteEiiPA7_Kh>
        SpriteShiftCounter++;
    18fa:	8c a5       	ldd	r24, Y+44	; 0x2c
    18fc:	8f 5f       	subi	r24, 0xFF	; 255
    18fe:	8c a7       	std	Y+44, r24	; 0x2c
    1900:	06 c0       	rjmp	.+12     	; 0x190e <_ZN9MaxMatrix13charShiftTaskEv+0x46>
    } else {
        if (MAXMATRIX_STATE_CHAR_SHIFT == State) State = MAXMATRIX_STATE_READY;
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	84 30       	cpi	r24, 0x04	; 4
    1906:	11 f4       	brne	.+4      	; 0x190c <_ZN9MaxMatrix13charShiftTaskEv+0x44>
    1908:	82 e0       	ldi	r24, 0x02	; 2
    190a:	8b 83       	std	Y+3, r24	; 0x03
        SpriteShiftCounter = 0;
    190c:	1c a6       	std	Y+44, r1	; 0x2c
    }
} /* charShiftTask */
    190e:	df 91       	pop	r29
    1910:	cf 91       	pop	r28
    1912:	08 95       	ret

00001914 <_ZN9MaxMatrix15stringShiftTaskEv>:
 *                  MAXMATRIX_STATE_CHAR_SHIFT or MAXMATRIX_STATE_STRING_SHIFT to MAXMATRIX_STATE_READY
 *  \return         -
 *  \pre            has to be called from shiftTask()
 *****************************************************************************************************************************************************/
void MaxMatrix::stringShiftTask()
{
    1914:	0f 93       	push	r16
    1916:	1f 93       	push	r17
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	1f 92       	push	r1
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	8c 01       	movw	r16, r24
    spriteIndexType SpriteIndex;
    
    if(SpriteShiftCounter == 0)
    1924:	dc 01       	movw	r26, r24
    1926:	9c 96       	adiw	r26, 0x2c	; 44
    1928:	8c 91       	ld	r24, X
    192a:	9c 97       	sbiw	r26, 0x2c	; 44
    192c:	81 11       	cpse	r24, r1
    192e:	30 c0       	rjmp	.+96     	; 0x1990 <_ZN9MaxMatrix15stringShiftTaskEv+0x7c>
    {
        if(*String != '\0') {
    1930:	9d 96       	adiw	r26, 0x2d	; 45
    1932:	ed 91       	ld	r30, X+
    1934:	fc 91       	ld	r31, X
    1936:	9e 97       	sbiw	r26, 0x2e	; 46
    1938:	60 81       	ld	r22, Z
    193a:	66 23       	and	r22, r22
    193c:	21 f1       	breq	.+72     	; 0x1986 <_ZN9MaxMatrix15stringShiftTaskEv+0x72>
            convertCharToSprite(*String, &SpriteIndex);
    193e:	ae 01       	movw	r20, r28
    1940:	4f 5f       	subi	r20, 0xFF	; 255
    1942:	5f 4f       	sbci	r21, 0xFF	; 255
    1944:	c8 01       	movw	r24, r16
    1946:	0e 94 39 07 	call	0xe72	; 0xe72 <_ZN9MaxMatrix19convertCharToSpriteEcPh>
            getSprite(SpriteIndex, &SpriteBuffer);
    194a:	a8 01       	movw	r20, r16
    194c:	4b 5d       	subi	r20, 0xDB	; 219
    194e:	5f 4f       	sbci	r21, 0xFF	; 255
    1950:	69 81       	ldd	r22, Y+1	; 0x01
    1952:	c8 01       	movw	r24, r16
    1954:	0e 94 10 05 	call	0xa20	; 0xa20 <_ZN9MaxMatrix9getSpriteEhPA7_h>
            if(SpriteShiftCounter != 0) shiftLeft(false, true);
    1958:	f8 01       	movw	r30, r16
    195a:	84 a5       	ldd	r24, Z+44	; 0x2c
    195c:	88 23       	and	r24, r24
    195e:	29 f0       	breq	.+10     	; 0x196a <_ZN9MaxMatrix15stringShiftTaskEv+0x56>
    1960:	41 e0       	ldi	r20, 0x01	; 1
    1962:	60 e0       	ldi	r22, 0x00	; 0
    1964:	c8 01       	movw	r24, r16
    1966:	0e 94 34 0c 	call	0x1868	; 0x1868 <_ZN9MaxMatrix9shiftLeftEbb>
            SpriteShiftCounter = 1;
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	d8 01       	movw	r26, r16
    196e:	9c 96       	adiw	r26, 0x2c	; 44
    1970:	8c 93       	st	X, r24
            charShiftTask();
    1972:	c8 01       	movw	r24, r16
    1974:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <_ZN9MaxMatrix13charShiftTaskEv>
            String++;
    1978:	f8 01       	movw	r30, r16
    197a:	85 a5       	ldd	r24, Z+45	; 0x2d
    197c:	96 a5       	ldd	r25, Z+46	; 0x2e
    197e:	01 96       	adiw	r24, 0x01	; 1
    1980:	96 a7       	std	Z+46, r25	; 0x2e
    1982:	85 a7       	std	Z+45, r24	; 0x2d
    1984:	11 c0       	rjmp	.+34     	; 0x19a8 <_ZN9MaxMatrix15stringShiftTaskEv+0x94>
        } else {
            State = MAXMATRIX_STATE_READY;
    1986:	82 e0       	ldi	r24, 0x02	; 2
    1988:	d8 01       	movw	r26, r16
    198a:	13 96       	adiw	r26, 0x03	; 3
    198c:	8c 93       	st	X, r24
    198e:	07 c0       	rjmp	.+14     	; 0x199e <_ZN9MaxMatrix15stringShiftTaskEv+0x8a>
            shiftLeft(false, true);
        }
    } else {
        charShiftTask();
    1990:	c8 01       	movw	r24, r16
    1992:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <_ZN9MaxMatrix13charShiftTaskEv>
        if(SpriteShiftCounter == 0) shiftLeft(false, true);
    1996:	f8 01       	movw	r30, r16
    1998:	84 a5       	ldd	r24, Z+44	; 0x2c
    199a:	81 11       	cpse	r24, r1
    199c:	05 c0       	rjmp	.+10     	; 0x19a8 <_ZN9MaxMatrix15stringShiftTaskEv+0x94>
    199e:	41 e0       	ldi	r20, 0x01	; 1
    19a0:	60 e0       	ldi	r22, 0x00	; 0
    19a2:	c8 01       	movw	r24, r16
    19a4:	0e 94 34 0c 	call	0x1868	; 0x1868 <_ZN9MaxMatrix9shiftLeftEbb>
    }
} /* stringShiftTask */
    19a8:	0f 90       	pop	r0
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	1f 91       	pop	r17
    19b0:	0f 91       	pop	r16
    19b2:	08 95       	ret

000019b4 <_ZN9MaxMatrix9shiftTaskEv>:
 *                  MAXMATRIX_STATE_CHAR_SHIFT or MAXMATRIX_STATE_STRING_SHIFT to MAXMATRIX_STATE_READY
 *  \return         -
 *  \pre            setCharWithShift or setTextWithShift must be called first
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftTask()
{
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	ec 01       	movw	r28, r24
    if(MAXMATRIX_STATE_STRING_SHIFT == State) stringShiftTask();
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	83 30       	cpi	r24, 0x03	; 3
    19be:	19 f4       	brne	.+6      	; 0x19c6 <_ZN9MaxMatrix9shiftTaskEv+0x12>
    19c0:	ce 01       	movw	r24, r28
    19c2:	0e 94 8a 0c 	call	0x1914	; 0x1914 <_ZN9MaxMatrix15stringShiftTaskEv>
    if(MAXMATRIX_STATE_CHAR_SHIFT == State) charShiftTask();
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	84 30       	cpi	r24, 0x04	; 4
    19ca:	29 f4       	brne	.+10     	; 0x19d6 <_ZN9MaxMatrix9shiftTaskEv+0x22>
    19cc:	ce 01       	movw	r24, r28
} /* shiftTask */
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
 *  \pre            setCharWithShift or setTextWithShift must be called first
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftTask()
{
    if(MAXMATRIX_STATE_STRING_SHIFT == State) stringShiftTask();
    if(MAXMATRIX_STATE_CHAR_SHIFT == State) charShiftTask();
    19d2:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <_ZN9MaxMatrix13charShiftTaskEv>
} /* shiftTask */
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	08 95       	ret

000019dc <__vector_13>:
  else if(pin == 2 || pin == 10) {
    DDRB |= _BV(PORTB2);
    TCCR1A |= _BV(COM1B1);
  }
  setPwmDuty(pin, duty);
  resume();			// Lex - make sure the clock is running.  We don't want to restart the count, in case we are starting the second WGM
    19dc:	1f 92       	push	r1
    19de:	0f 92       	push	r0
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	0f 92       	push	r0
    19e4:	11 24       	eor	r1, r1
    19e6:	2f 93       	push	r18
    19e8:	3f 93       	push	r19
    19ea:	4f 93       	push	r20
    19ec:	5f 93       	push	r21
    19ee:	6f 93       	push	r22
    19f0:	7f 93       	push	r23
    19f2:	8f 93       	push	r24
    19f4:	9f 93       	push	r25
    19f6:	af 93       	push	r26
    19f8:	bf 93       	push	r27
    19fa:	ef 93       	push	r30
    19fc:	ff 93       	push	r31
    19fe:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <Timer1+0x4>
    1a02:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <Timer1+0x5>
    1a06:	09 95       	icall
    1a08:	ff 91       	pop	r31
    1a0a:	ef 91       	pop	r30
    1a0c:	bf 91       	pop	r27
    1a0e:	af 91       	pop	r26
    1a10:	9f 91       	pop	r25
    1a12:	8f 91       	pop	r24
    1a14:	7f 91       	pop	r23
    1a16:	6f 91       	pop	r22
    1a18:	5f 91       	pop	r21
    1a1a:	4f 91       	pop	r20
    1a1c:	3f 91       	pop	r19
    1a1e:	2f 91       	pop	r18
    1a20:	0f 90       	pop	r0
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	0f 90       	pop	r0
    1a26:	1f 90       	pop	r1
    1a28:	18 95       	reti

00001a2a <_ZN8TimerOne9setPeriodEl>:
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	a3 e0       	ldi	r26, 0x03	; 3
    1a2e:	44 0f       	add	r20, r20
    1a30:	55 1f       	adc	r21, r21
    1a32:	66 1f       	adc	r22, r22
    1a34:	77 1f       	adc	r23, r23
    1a36:	aa 95       	dec	r26
    1a38:	d1 f7       	brne	.-12     	; 0x1a2e <_ZN8TimerOne9setPeriodEl+0x4>
    1a3a:	41 15       	cp	r20, r1
    1a3c:	51 05       	cpc	r21, r1
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	68 07       	cpc	r22, r24
    1a42:	71 05       	cpc	r23, r1
    1a44:	14 f4       	brge	.+4      	; 0x1a4a <_ZN8TimerOne9setPeriodEl+0x20>
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	0e c0       	rjmp	.+28     	; 0x1a66 <_ZN8TimerOne9setPeriodEl+0x3c>
    1a4a:	33 e0       	ldi	r19, 0x03	; 3
    1a4c:	75 95       	asr	r23
    1a4e:	67 95       	ror	r22
    1a50:	57 95       	ror	r21
    1a52:	47 95       	ror	r20
    1a54:	3a 95       	dec	r19
    1a56:	d1 f7       	brne	.-12     	; 0x1a4c <_ZN8TimerOne9setPeriodEl+0x22>
    1a58:	41 15       	cp	r20, r1
    1a5a:	51 05       	cpc	r21, r1
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	68 07       	cpc	r22, r24
    1a60:	71 05       	cpc	r23, r1
    1a62:	1c f4       	brge	.+6      	; 0x1a6a <_ZN8TimerOne9setPeriodEl+0x40>
    1a64:	82 e0       	ldi	r24, 0x02	; 2
    1a66:	82 83       	std	Z+2, r24	; 0x02
    1a68:	31 c0       	rjmp	.+98     	; 0x1acc <_ZN8TimerOne9setPeriodEl+0xa2>
    1a6a:	23 e0       	ldi	r18, 0x03	; 3
    1a6c:	75 95       	asr	r23
    1a6e:	67 95       	ror	r22
    1a70:	57 95       	ror	r21
    1a72:	47 95       	ror	r20
    1a74:	2a 95       	dec	r18
    1a76:	d1 f7       	brne	.-12     	; 0x1a6c <_ZN8TimerOne9setPeriodEl+0x42>
    1a78:	41 15       	cp	r20, r1
    1a7a:	51 05       	cpc	r21, r1
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	68 07       	cpc	r22, r24
    1a80:	71 05       	cpc	r23, r1
    1a82:	14 f4       	brge	.+4      	; 0x1a88 <_ZN8TimerOne9setPeriodEl+0x5e>
    1a84:	83 e0       	ldi	r24, 0x03	; 3
    1a86:	ef cf       	rjmp	.-34     	; 0x1a66 <_ZN8TimerOne9setPeriodEl+0x3c>
    1a88:	92 e0       	ldi	r25, 0x02	; 2
    1a8a:	75 95       	asr	r23
    1a8c:	67 95       	ror	r22
    1a8e:	57 95       	ror	r21
    1a90:	47 95       	ror	r20
    1a92:	9a 95       	dec	r25
    1a94:	d1 f7       	brne	.-12     	; 0x1a8a <_ZN8TimerOne9setPeriodEl+0x60>
    1a96:	41 15       	cp	r20, r1
    1a98:	51 05       	cpc	r21, r1
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	68 07       	cpc	r22, r24
    1a9e:	71 05       	cpc	r23, r1
    1aa0:	14 f4       	brge	.+4      	; 0x1aa6 <_ZN8TimerOne9setPeriodEl+0x7c>
    1aa2:	84 e0       	ldi	r24, 0x04	; 4
    1aa4:	e0 cf       	rjmp	.-64     	; 0x1a66 <_ZN8TimerOne9setPeriodEl+0x3c>
    1aa6:	82 e0       	ldi	r24, 0x02	; 2
    1aa8:	75 95       	asr	r23
    1aaa:	67 95       	ror	r22
    1aac:	57 95       	ror	r21
    1aae:	47 95       	ror	r20
    1ab0:	8a 95       	dec	r24
    1ab2:	d1 f7       	brne	.-12     	; 0x1aa8 <_ZN8TimerOne9setPeriodEl+0x7e>
    1ab4:	85 e0       	ldi	r24, 0x05	; 5
    1ab6:	82 83       	std	Z+2, r24	; 0x02
    1ab8:	41 15       	cp	r20, r1
    1aba:	51 05       	cpc	r21, r1
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	68 07       	cpc	r22, r24
    1ac0:	71 05       	cpc	r23, r1
    1ac2:	24 f0       	brlt	.+8      	; 0x1acc <_ZN8TimerOne9setPeriodEl+0xa2>
    1ac4:	4f ef       	ldi	r20, 0xFF	; 255
    1ac6:	5f ef       	ldi	r21, 0xFF	; 255
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	70 e0       	ldi	r23, 0x00	; 0
    1acc:	8f b7       	in	r24, 0x3f	; 63
    1ace:	83 83       	std	Z+3, r24	; 0x03
    1ad0:	f8 94       	cli
    1ad2:	51 83       	std	Z+1, r21	; 0x01
    1ad4:	40 83       	st	Z, r20
    1ad6:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1ada:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    1ade:	83 81       	ldd	r24, Z+3	; 0x03
    1ae0:	8f bf       	out	0x3f, r24	; 63
    1ae2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1ae6:	88 7f       	andi	r24, 0xF8	; 248
    1ae8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1aec:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1af0:	82 81       	ldd	r24, Z+2	; 0x02
    1af2:	89 2b       	or	r24, r25
    1af4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1af8:	08 95       	ret

00001afa <_ZN8TimerOne10initializeEl>:
    1afa:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1afe:	20 e1       	ldi	r18, 0x10	; 16
    1b00:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1b04:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <_ZN8TimerOne9setPeriodEl>

00001b08 <_ZN8TimerOne6resumeEv>:
    1b08:	e1 e8       	ldi	r30, 0x81	; 129
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	20 81       	ld	r18, Z
    1b0e:	dc 01       	movw	r26, r24
    1b10:	12 96       	adiw	r26, 0x02	; 2
    1b12:	8c 91       	ld	r24, X
    1b14:	82 2b       	or	r24, r18
    1b16:	80 83       	st	Z, r24
    1b18:	08 95       	ret

00001b1a <_ZN8TimerOne15attachInterruptEPFvvEl>:
  if(pin == 1 || pin == 9)       TCCR1A &= ~_BV(COM1A1);   // clear the bit that enables pwm on PB1
  else if(pin == 2 || pin == 10) TCCR1A &= ~_BV(COM1B1);   // clear the bit that enables pwm on PB2
}

void TimerOne::attachInterrupt(void (*isr)(), long microseconds)
{
    1b1a:	0f 93       	push	r16
    1b1c:	1f 93       	push	r17
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29
    1b22:	ec 01       	movw	r28, r24
    1b24:	8b 01       	movw	r16, r22
    1b26:	ba 01       	movw	r22, r20
    1b28:	a9 01       	movw	r20, r18
  if(microseconds > 0) setPeriod(microseconds);
    1b2a:	14 16       	cp	r1, r20
    1b2c:	15 06       	cpc	r1, r21
    1b2e:	16 06       	cpc	r1, r22
    1b30:	17 06       	cpc	r1, r23
    1b32:	14 f4       	brge	.+4      	; 0x1b38 <_ZN8TimerOne15attachInterruptEPFvvEl+0x1e>
    1b34:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <_ZN8TimerOne9setPeriodEl>
  isrCallback = isr;                                       // register the user's callback with the real ISR
    1b38:	1d 83       	std	Y+5, r17	; 0x05
    1b3a:	0c 83       	std	Y+4, r16	; 0x04
  TIMSK1 = _BV(TOIE1);                                     // sets the timer overflow interrupt enable bit
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	// might be running with interrupts disabled (eg inside an ISR), so don't touch the global state
//  sei();
  resume();												
    1b42:	ce 01       	movw	r24, r28
}
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	1f 91       	pop	r17
    1b4a:	0f 91       	pop	r16
  if(microseconds > 0) setPeriod(microseconds);
  isrCallback = isr;                                       // register the user's callback with the real ISR
  TIMSK1 = _BV(TOIE1);                                     // sets the timer overflow interrupt enable bit
	// might be running with interrupts disabled (eg inside an ISR), so don't touch the global state
//  sei();
  resume();												
    1b4c:	0c 94 84 0d 	jmp	0x1b08	; 0x1b08 <_ZN8TimerOne6resumeEv>

00001b50 <__vector_9>:

/******************************************************************************************************************************************************
  I S R   F U N C T I O N S
******************************************************************************************************************************************************/
ISR(TIMER2_OVF_vect)
{
    1b50:	1f 92       	push	r1
    1b52:	0f 92       	push	r0
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	0f 92       	push	r0
    1b58:	11 24       	eor	r1, r1
    1b5a:	2f 93       	push	r18
    1b5c:	3f 93       	push	r19
    1b5e:	4f 93       	push	r20
    1b60:	5f 93       	push	r21
    1b62:	6f 93       	push	r22
    1b64:	7f 93       	push	r23
    1b66:	8f 93       	push	r24
    1b68:	9f 93       	push	r25
    1b6a:	af 93       	push	r26
    1b6c:	bf 93       	push	r27
    1b6e:	ef 93       	push	r30
    1b70:	ff 93       	push	r31
	Timer2.TimerOverflowCallback();
    1b72:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <Timer2+0x4>
    1b76:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <Timer2+0x5>
    1b7a:	09 95       	icall
}
    1b7c:	ff 91       	pop	r31
    1b7e:	ef 91       	pop	r30
    1b80:	bf 91       	pop	r27
    1b82:	af 91       	pop	r26
    1b84:	9f 91       	pop	r25
    1b86:	8f 91       	pop	r24
    1b88:	7f 91       	pop	r23
    1b8a:	6f 91       	pop	r22
    1b8c:	5f 91       	pop	r21
    1b8e:	4f 91       	pop	r20
    1b90:	3f 91       	pop	r19
    1b92:	2f 91       	pop	r18
    1b94:	0f 90       	pop	r0
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	0f 90       	pop	r0
    1b9a:	1f 90       	pop	r1
    1b9c:	18 95       	reti

00001b9e <_GLOBAL__sub_I_Timer2>:
 *    
 *  \return         -
 *****************************************************************************************************************************************************/
TimerTwo::TimerTwo()
{
	State = TIMERTWO_STATE_NONE;
    1b9e:	e0 ed       	ldi	r30, 0xD0	; 208
    1ba0:	f1 e0       	ldi	r31, 0x01	; 1
    1ba2:	10 82       	st	Z, r1
	TimerOverflowCallback = NULL;
    1ba4:	15 82       	std	Z+5, r1	; 0x05
    1ba6:	14 82       	std	Z+4, r1	; 0x04
	ClockSelectBitGroup = TIMERTWO_REG_CS_NO_CLOCK;
    1ba8:	11 82       	std	Z+1, r1	; 0x01
    1baa:	08 95       	ret

00001bac <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1bac:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1bae:	91 8d       	ldd	r25, Z+25	; 0x19
    1bb0:	22 8d       	ldd	r18, Z+26	; 0x1a
    1bb2:	89 2f       	mov	r24, r25
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	80 5c       	subi	r24, 0xC0	; 192
    1bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bba:	82 1b       	sub	r24, r18
    1bbc:	91 09       	sbc	r25, r1
}
    1bbe:	8f 73       	andi	r24, 0x3F	; 63
    1bc0:	99 27       	eor	r25, r25
    1bc2:	08 95       	ret

00001bc4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1bc4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1bc6:	91 8d       	ldd	r25, Z+25	; 0x19
    1bc8:	82 8d       	ldd	r24, Z+26	; 0x1a
    1bca:	98 17       	cp	r25, r24
    1bcc:	31 f0       	breq	.+12     	; 0x1bda <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1bce:	82 8d       	ldd	r24, Z+26	; 0x1a
    1bd0:	e8 0f       	add	r30, r24
    1bd2:	f1 1d       	adc	r31, r1
    1bd4:	85 8d       	ldd	r24, Z+29	; 0x1d
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1bda:	8f ef       	ldi	r24, 0xFF	; 255
    1bdc:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1bde:	08 95       	ret

00001be0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1be0:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1be2:	91 8d       	ldd	r25, Z+25	; 0x19
    1be4:	82 8d       	ldd	r24, Z+26	; 0x1a
    1be6:	98 17       	cp	r25, r24
    1be8:	61 f0       	breq	.+24     	; 0x1c02 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1bea:	82 8d       	ldd	r24, Z+26	; 0x1a
    1bec:	df 01       	movw	r26, r30
    1bee:	a8 0f       	add	r26, r24
    1bf0:	b1 1d       	adc	r27, r1
    1bf2:	5d 96       	adiw	r26, 0x1d	; 29
    1bf4:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1bf6:	92 8d       	ldd	r25, Z+26	; 0x1a
    1bf8:	9f 5f       	subi	r25, 0xFF	; 255
    1bfa:	9f 73       	andi	r25, 0x3F	; 63
    1bfc:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1c02:	8f ef       	ldi	r24, 0xFF	; 255
    1c04:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1c06:	08 95       	ret

00001c08 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1c08:	8a e5       	ldi	r24, 0x5A	; 90
    1c0a:	9f e0       	ldi	r25, 0x0F	; 15
    1c0c:	89 2b       	or	r24, r25
    1c0e:	49 f0       	breq	.+18     	; 0x1c22 <_Z14serialEventRunv+0x1a>
    1c10:	89 e8       	ldi	r24, 0x89	; 137
    1c12:	94 e0       	ldi	r25, 0x04	; 4
    1c14:	89 2b       	or	r24, r25
    1c16:	29 f0       	breq	.+10     	; 0x1c22 <_Z14serialEventRunv+0x1a>
    1c18:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <_Z17Serial0_availablev>
    1c1c:	81 11       	cpse	r24, r1
    1c1e:	0c 94 89 04 	jmp	0x912	; 0x912 <_Z11serialEventv>
    1c22:	08 95       	ret

00001c24 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1c24:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1c26:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c28:	df 01       	movw	r26, r30
    1c2a:	a8 0f       	add	r26, r24
    1c2c:	b1 1d       	adc	r27, r1
    1c2e:	a3 5a       	subi	r26, 0xA3	; 163
    1c30:	bf 4f       	sbci	r27, 0xFF	; 255
    1c32:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1c34:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	01 96       	adiw	r24, 0x01	; 1
    1c3a:	8f 73       	andi	r24, 0x3F	; 63
    1c3c:	99 27       	eor	r25, r25
    1c3e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1c40:	a6 89       	ldd	r26, Z+22	; 0x16
    1c42:	b7 89       	ldd	r27, Z+23	; 0x17
    1c44:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1c46:	a0 89       	ldd	r26, Z+16	; 0x10
    1c48:	b1 89       	ldd	r27, Z+17	; 0x11
    1c4a:	8c 91       	ld	r24, X
    1c4c:	80 64       	ori	r24, 0x40	; 64
    1c4e:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1c50:	93 8d       	ldd	r25, Z+27	; 0x1b
    1c52:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c54:	98 13       	cpse	r25, r24
    1c56:	06 c0       	rjmp	.+12     	; 0x1c64 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1c58:	02 88       	ldd	r0, Z+18	; 0x12
    1c5a:	f3 89       	ldd	r31, Z+19	; 0x13
    1c5c:	e0 2d       	mov	r30, r0
    1c5e:	80 81       	ld	r24, Z
    1c60:	8f 7d       	andi	r24, 0xDF	; 223
    1c62:	80 83       	st	Z, r24
    1c64:	08 95       	ret

00001c66 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1c66:	cf 93       	push	r28
    1c68:	df 93       	push	r29
    1c6a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1c6c:	88 8d       	ldd	r24, Y+24	; 0x18
    1c6e:	88 23       	and	r24, r24
    1c70:	c9 f0       	breq	.+50     	; 0x1ca4 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1c72:	ea 89       	ldd	r30, Y+18	; 0x12
    1c74:	fb 89       	ldd	r31, Y+19	; 0x13
    1c76:	80 81       	ld	r24, Z
    1c78:	85 fd       	sbrc	r24, 5
    1c7a:	05 c0       	rjmp	.+10     	; 0x1c86 <_ZN14HardwareSerial5flushEv+0x20>
    1c7c:	a8 89       	ldd	r26, Y+16	; 0x10
    1c7e:	b9 89       	ldd	r27, Y+17	; 0x11
    1c80:	8c 91       	ld	r24, X
    1c82:	86 fd       	sbrc	r24, 6
    1c84:	0f c0       	rjmp	.+30     	; 0x1ca4 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	07 fc       	sbrc	r0, 7
    1c8a:	f5 cf       	rjmp	.-22     	; 0x1c76 <_ZN14HardwareSerial5flushEv+0x10>
    1c8c:	80 81       	ld	r24, Z
    1c8e:	85 ff       	sbrs	r24, 5
    1c90:	f2 cf       	rjmp	.-28     	; 0x1c76 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1c92:	a8 89       	ldd	r26, Y+16	; 0x10
    1c94:	b9 89       	ldd	r27, Y+17	; 0x11
    1c96:	8c 91       	ld	r24, X
    1c98:	85 ff       	sbrs	r24, 5
    1c9a:	ed cf       	rjmp	.-38     	; 0x1c76 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1c9c:	ce 01       	movw	r24, r28
    1c9e:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1ca2:	e7 cf       	rjmp	.-50     	; 0x1c72 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	08 95       	ret

00001caa <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1caa:	ef 92       	push	r14
    1cac:	ff 92       	push	r15
    1cae:	0f 93       	push	r16
    1cb0:	1f 93       	push	r17
    1cb2:	cf 93       	push	r28
    1cb4:	df 93       	push	r29
    1cb6:	ec 01       	movw	r28, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1cb8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1cba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1cbc:	98 13       	cpse	r25, r24
    1cbe:	05 c0       	rjmp	.+10     	; 0x1cca <_ZN14HardwareSerial5writeEh+0x20>
    1cc0:	e8 89       	ldd	r30, Y+16	; 0x10
    1cc2:	f9 89       	ldd	r31, Y+17	; 0x11
    1cc4:	80 81       	ld	r24, Z
    1cc6:	85 fd       	sbrc	r24, 5
    1cc8:	27 c0       	rjmp	.+78     	; 0x1d18 <_ZN14HardwareSerial5writeEh+0x6e>
    1cca:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1ccc:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1cce:	10 e0       	ldi	r17, 0x00	; 0
    1cd0:	0f 5f       	subi	r16, 0xFF	; 255
    1cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd4:	0f 73       	andi	r16, 0x3F	; 63
    1cd6:	11 27       	eor	r17, r17
    1cd8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1cda:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1cdc:	e8 12       	cpse	r14, r24
    1cde:	0c c0       	rjmp	.+24     	; 0x1cf8 <_ZN14HardwareSerial5writeEh+0x4e>
    if (bit_is_clear(SREG, SREG_I)) {
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	07 fc       	sbrc	r0, 7
    1ce4:	fa cf       	rjmp	.-12     	; 0x1cda <_ZN14HardwareSerial5writeEh+0x30>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1ce6:	e8 89       	ldd	r30, Y+16	; 0x10
    1ce8:	f9 89       	ldd	r31, Y+17	; 0x11
    1cea:	80 81       	ld	r24, Z
    1cec:	85 ff       	sbrs	r24, 5
    1cee:	f5 cf       	rjmp	.-22     	; 0x1cda <_ZN14HardwareSerial5writeEh+0x30>
	_tx_udr_empty_irq();
    1cf0:	ce 01       	movw	r24, r28
    1cf2:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1cf6:	f1 cf       	rjmp	.-30     	; 0x1cda <_ZN14HardwareSerial5writeEh+0x30>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1cf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	e8 0f       	add	r30, r24
    1cfe:	f1 1d       	adc	r31, r1
    1d00:	e3 5a       	subi	r30, 0xA3	; 163
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1d06:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1d08:	ea 89       	ldd	r30, Y+18	; 0x12
    1d0a:	fb 89       	ldd	r31, Y+19	; 0x13
    1d0c:	80 81       	ld	r24, Z
    1d0e:	80 62       	ori	r24, 0x20	; 32
    1d10:	80 83       	st	Z, r24
  _written = true;
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	88 8f       	std	Y+24, r24	; 0x18
    1d16:	08 c0       	rjmp	.+16     	; 0x1d28 <_ZN14HardwareSerial5writeEh+0x7e>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1d18:	ee 89       	ldd	r30, Y+22	; 0x16
    1d1a:	ff 89       	ldd	r31, Y+23	; 0x17
    1d1c:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1d1e:	e8 89       	ldd	r30, Y+16	; 0x10
    1d20:	f9 89       	ldd	r31, Y+17	; 0x11
    1d22:	80 81       	ld	r24, Z
    1d24:	80 64       	ori	r24, 0x40	; 64
    1d26:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	1f 91       	pop	r17
    1d32:	0f 91       	pop	r16
    1d34:	ff 90       	pop	r15
    1d36:	ef 90       	pop	r14
    1d38:	08 95       	ret

00001d3a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1d3a:	cf 92       	push	r12
    1d3c:	df 92       	push	r13
    1d3e:	ef 92       	push	r14
    1d40:	ff 92       	push	r15
    1d42:	1f 93       	push	r17
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
    1d48:	ec 01       	movw	r28, r24
    1d4a:	6a 01       	movw	r12, r20
    1d4c:	7b 01       	movw	r14, r22
    1d4e:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1d50:	e8 89       	ldd	r30, Y+16	; 0x10
    1d52:	f9 89       	ldd	r31, Y+17	; 0x11
    1d54:	82 e0       	ldi	r24, 0x02	; 2
    1d56:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1d58:	41 15       	cp	r20, r1
    1d5a:	51 4e       	sbci	r21, 0xE1	; 225
    1d5c:	61 05       	cpc	r22, r1
    1d5e:	71 05       	cpc	r23, r1
    1d60:	b1 f0       	breq	.+44     	; 0x1d8e <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1d62:	60 e0       	ldi	r22, 0x00	; 0
    1d64:	79 e0       	ldi	r23, 0x09	; 9
    1d66:	8d e3       	ldi	r24, 0x3D	; 61
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	a7 01       	movw	r20, r14
    1d6c:	96 01       	movw	r18, r12
    1d6e:	0e 94 95 11 	call	0x232a	; 0x232a <__udivmodsi4>
    1d72:	da 01       	movw	r26, r20
    1d74:	c9 01       	movw	r24, r18
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	a1 09       	sbc	r26, r1
    1d7a:	b1 09       	sbc	r27, r1
    1d7c:	b6 95       	lsr	r27
    1d7e:	a7 95       	ror	r26
    1d80:	97 95       	ror	r25
    1d82:	87 95       	ror	r24
    1d84:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1d86:	41 15       	cp	r20, r1
    1d88:	80 e1       	ldi	r24, 0x10	; 16
    1d8a:	58 07       	cpc	r21, r24
    1d8c:	a8 f0       	brcs	.+42     	; 0x1db8 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1d8e:	e8 89       	ldd	r30, Y+16	; 0x10
    1d90:	f9 89       	ldd	r31, Y+17	; 0x11
    1d92:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1d94:	60 e8       	ldi	r22, 0x80	; 128
    1d96:	74 e8       	ldi	r23, 0x84	; 132
    1d98:	8e e1       	ldi	r24, 0x1E	; 30
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	a7 01       	movw	r20, r14
    1d9e:	96 01       	movw	r18, r12
    1da0:	0e 94 95 11 	call	0x232a	; 0x232a <__udivmodsi4>
    1da4:	ba 01       	movw	r22, r20
    1da6:	a9 01       	movw	r20, r18
    1da8:	41 50       	subi	r20, 0x01	; 1
    1daa:	51 09       	sbc	r21, r1
    1dac:	61 09       	sbc	r22, r1
    1dae:	71 09       	sbc	r23, r1
    1db0:	76 95       	lsr	r23
    1db2:	67 95       	ror	r22
    1db4:	57 95       	ror	r21
    1db6:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1db8:	ec 85       	ldd	r30, Y+12	; 0x0c
    1dba:	fd 85       	ldd	r31, Y+13	; 0x0d
    1dbc:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    1dbe:	ee 85       	ldd	r30, Y+14	; 0x0e
    1dc0:	ff 85       	ldd	r31, Y+15	; 0x0f
    1dc2:	40 83       	st	Z, r20

  _written = false;
    1dc4:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1dc6:	ec 89       	ldd	r30, Y+20	; 0x14
    1dc8:	fd 89       	ldd	r31, Y+21	; 0x15
    1dca:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1dcc:	ea 89       	ldd	r30, Y+18	; 0x12
    1dce:	fb 89       	ldd	r31, Y+19	; 0x13
    1dd0:	80 81       	ld	r24, Z
    1dd2:	80 61       	ori	r24, 0x10	; 16
    1dd4:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1dd6:	ea 89       	ldd	r30, Y+18	; 0x12
    1dd8:	fb 89       	ldd	r31, Y+19	; 0x13
    1dda:	80 81       	ld	r24, Z
    1ddc:	88 60       	ori	r24, 0x08	; 8
    1dde:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1de0:	ea 89       	ldd	r30, Y+18	; 0x12
    1de2:	fb 89       	ldd	r31, Y+19	; 0x13
    1de4:	80 81       	ld	r24, Z
    1de6:	80 68       	ori	r24, 0x80	; 128
    1de8:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1dea:	ea 89       	ldd	r30, Y+18	; 0x12
    1dec:	fb 89       	ldd	r31, Y+19	; 0x13
    1dee:	80 81       	ld	r24, Z
    1df0:	8f 7d       	andi	r24, 0xDF	; 223
    1df2:	80 83       	st	Z, r24
}
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
    1df8:	1f 91       	pop	r17
    1dfa:	ff 90       	pop	r15
    1dfc:	ef 90       	pop	r14
    1dfe:	df 90       	pop	r13
    1e00:	cf 90       	pop	r12
    1e02:	08 95       	ret

00001e04 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1e04:	1f 92       	push	r1
    1e06:	0f 92       	push	r0
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	0f 92       	push	r0
    1e0c:	11 24       	eor	r1, r1
    1e0e:	2f 93       	push	r18
    1e10:	8f 93       	push	r24
    1e12:	9f 93       	push	r25
    1e14:	ef 93       	push	r30
    1e16:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1e18:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <Serial+0x10>
    1e1c:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <Serial+0x11>
    1e20:	80 81       	ld	r24, Z
    1e22:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <Serial+0x16>
    1e26:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <Serial+0x17>
    1e2a:	82 fd       	sbrc	r24, 2
    1e2c:	12 c0       	rjmp	.+36     	; 0x1e52 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1e2e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1e30:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <Serial+0x19>
    1e34:	8f 5f       	subi	r24, 0xFF	; 255
    1e36:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1e38:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <Serial+0x1a>
    1e3c:	82 17       	cp	r24, r18
    1e3e:	51 f0       	breq	.+20     	; 0x1e54 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1e40:	e0 91 ef 01 	lds	r30, 0x01EF	; 0x8001ef <Serial+0x19>
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	ea 52       	subi	r30, 0x2A	; 42
    1e48:	fe 4f       	sbci	r31, 0xFE	; 254
    1e4a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1e4c:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <Serial+0x19>
    1e50:	01 c0       	rjmp	.+2      	; 0x1e54 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1e52:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1e54:	ff 91       	pop	r31
    1e56:	ef 91       	pop	r30
    1e58:	9f 91       	pop	r25
    1e5a:	8f 91       	pop	r24
    1e5c:	2f 91       	pop	r18
    1e5e:	0f 90       	pop	r0
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	0f 90       	pop	r0
    1e64:	1f 90       	pop	r1
    1e66:	18 95       	reti

00001e68 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1e68:	1f 92       	push	r1
    1e6a:	0f 92       	push	r0
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	0f 92       	push	r0
    1e70:	11 24       	eor	r1, r1
    1e72:	2f 93       	push	r18
    1e74:	3f 93       	push	r19
    1e76:	4f 93       	push	r20
    1e78:	5f 93       	push	r21
    1e7a:	6f 93       	push	r22
    1e7c:	7f 93       	push	r23
    1e7e:	8f 93       	push	r24
    1e80:	9f 93       	push	r25
    1e82:	af 93       	push	r26
    1e84:	bf 93       	push	r27
    1e86:	ef 93       	push	r30
    1e88:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1e8a:	86 ed       	ldi	r24, 0xD6	; 214
    1e8c:	91 e0       	ldi	r25, 0x01	; 1
    1e8e:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1e92:	ff 91       	pop	r31
    1e94:	ef 91       	pop	r30
    1e96:	bf 91       	pop	r27
    1e98:	af 91       	pop	r26
    1e9a:	9f 91       	pop	r25
    1e9c:	8f 91       	pop	r24
    1e9e:	7f 91       	pop	r23
    1ea0:	6f 91       	pop	r22
    1ea2:	5f 91       	pop	r21
    1ea4:	4f 91       	pop	r20
    1ea6:	3f 91       	pop	r19
    1ea8:	2f 91       	pop	r18
    1eaa:	0f 90       	pop	r0
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	0f 90       	pop	r0
    1eb0:	1f 90       	pop	r1
    1eb2:	18 95       	reti

00001eb4 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1eb4:	86 ed       	ldi	r24, 0xD6	; 214
    1eb6:	91 e0       	ldi	r25, 0x01	; 1
    1eb8:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZN14HardwareSerial9availableEv>
    1ebc:	21 e0       	ldi	r18, 0x01	; 1
    1ebe:	89 2b       	or	r24, r25
    1ec0:	09 f4       	brne	.+2      	; 0x1ec4 <_Z17Serial0_availablev+0x10>
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
}
    1ec4:	82 2f       	mov	r24, r18
    1ec6:	08 95       	ret

00001ec8 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1ec8:	e6 ed       	ldi	r30, 0xD6	; 214
    1eca:	f1 e0       	ldi	r31, 0x01	; 1
    1ecc:	13 82       	std	Z+3, r1	; 0x03
    1ece:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1ed0:	88 ee       	ldi	r24, 0xE8	; 232
    1ed2:	93 e0       	ldi	r25, 0x03	; 3
    1ed4:	a0 e0       	ldi	r26, 0x00	; 0
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	84 83       	std	Z+4, r24	; 0x04
    1eda:	95 83       	std	Z+5, r25	; 0x05
    1edc:	a6 83       	std	Z+6, r26	; 0x06
    1ede:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1ee0:	83 e4       	ldi	r24, 0x43	; 67
    1ee2:	91 e0       	ldi	r25, 0x01	; 1
    1ee4:	91 83       	std	Z+1, r25	; 0x01
    1ee6:	80 83       	st	Z, r24
    1ee8:	85 ec       	ldi	r24, 0xC5	; 197
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	95 87       	std	Z+13, r25	; 0x0d
    1eee:	84 87       	std	Z+12, r24	; 0x0c
    1ef0:	84 ec       	ldi	r24, 0xC4	; 196
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	97 87       	std	Z+15, r25	; 0x0f
    1ef6:	86 87       	std	Z+14, r24	; 0x0e
    1ef8:	80 ec       	ldi	r24, 0xC0	; 192
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	91 8b       	std	Z+17, r25	; 0x11
    1efe:	80 8b       	std	Z+16, r24	; 0x10
    1f00:	81 ec       	ldi	r24, 0xC1	; 193
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	93 8b       	std	Z+19, r25	; 0x13
    1f06:	82 8b       	std	Z+18, r24	; 0x12
    1f08:	82 ec       	ldi	r24, 0xC2	; 194
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	95 8b       	std	Z+21, r25	; 0x15
    1f0e:	84 8b       	std	Z+20, r24	; 0x14
    1f10:	86 ec       	ldi	r24, 0xC6	; 198
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	97 8b       	std	Z+23, r25	; 0x17
    1f16:	86 8b       	std	Z+22, r24	; 0x16
    1f18:	11 8e       	std	Z+25, r1	; 0x19
    1f1a:	12 8e       	std	Z+26, r1	; 0x1a
    1f1c:	13 8e       	std	Z+27, r1	; 0x1b
    1f1e:	14 8e       	std	Z+28, r1	; 0x1c
    1f20:	08 95       	ret

00001f22 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1f22:	08 95       	ret

00001f24 <main>:

int main(void)
{
	init();
    1f24:	0e 94 8a 10 	call	0x2114	; 0x2114 <init>

	initVariant();
    1f28:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1f2c:	0e 94 98 02 	call	0x530	; 0x530 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1f30:	c4 e0       	ldi	r28, 0x04	; 4
    1f32:	de e0       	ldi	r29, 0x0E	; 14
#endif
	
	setup();
    
	for (;;) {
		loop();
    1f34:	0e 94 57 04 	call	0x8ae	; 0x8ae <loop>
		if (serialEventRun) serialEventRun();
    1f38:	20 97       	sbiw	r28, 0x00	; 0
    1f3a:	e1 f3       	breq	.-8      	; 0x1f34 <main+0x10>
    1f3c:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_Z14serialEventRunv>
    1f40:	f9 cf       	rjmp	.-14     	; 0x1f34 <main+0x10>

00001f42 <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
    1f42:	cf 92       	push	r12
    1f44:	df 92       	push	r13
    1f46:	ef 92       	push	r14
    1f48:	ff 92       	push	r15
    1f4a:	0f 93       	push	r16
    1f4c:	1f 93       	push	r17
    1f4e:	cf 93       	push	r28
    1f50:	df 93       	push	r29
    1f52:	6c 01       	movw	r12, r24
    1f54:	eb 01       	movw	r28, r22
    1f56:	7b 01       	movw	r14, r22
    1f58:	e4 0e       	add	r14, r20
    1f5a:	f5 1e       	adc	r15, r21
    1f5c:	00 e0       	ldi	r16, 0x00	; 0
    1f5e:	10 e0       	ldi	r17, 0x00	; 0
    1f60:	ce 15       	cp	r28, r14
    1f62:	df 05       	cpc	r29, r15
    1f64:	61 f0       	breq	.+24     	; 0x1f7e <_ZN5Print5writeEPKhj+0x3c>
    1f66:	69 91       	ld	r22, Y+
    1f68:	d6 01       	movw	r26, r12
    1f6a:	ed 91       	ld	r30, X+
    1f6c:	fc 91       	ld	r31, X
    1f6e:	01 90       	ld	r0, Z+
    1f70:	f0 81       	ld	r31, Z
    1f72:	e0 2d       	mov	r30, r0
    1f74:	c6 01       	movw	r24, r12
    1f76:	09 95       	icall
    1f78:	08 0f       	add	r16, r24
    1f7a:	19 1f       	adc	r17, r25
    1f7c:	f1 cf       	rjmp	.-30     	; 0x1f60 <_ZN5Print5writeEPKhj+0x1e>
    1f7e:	c8 01       	movw	r24, r16
    1f80:	df 91       	pop	r29
    1f82:	cf 91       	pop	r28
    1f84:	1f 91       	pop	r17
    1f86:	0f 91       	pop	r16
    1f88:	ff 90       	pop	r15
    1f8a:	ef 90       	pop	r14
    1f8c:	df 90       	pop	r13
    1f8e:	cf 90       	pop	r12
    1f90:	08 95       	ret

00001f92 <_ZN5Print5writeEPKc>:
    1f92:	61 15       	cp	r22, r1
    1f94:	71 05       	cpc	r23, r1
    1f96:	79 f0       	breq	.+30     	; 0x1fb6 <_ZN5Print5writeEPKc+0x24>
    1f98:	fb 01       	movw	r30, r22
    1f9a:	01 90       	ld	r0, Z+
    1f9c:	00 20       	and	r0, r0
    1f9e:	e9 f7       	brne	.-6      	; 0x1f9a <_ZN5Print5writeEPKc+0x8>
    1fa0:	31 97       	sbiw	r30, 0x01	; 1
    1fa2:	af 01       	movw	r20, r30
    1fa4:	46 1b       	sub	r20, r22
    1fa6:	57 0b       	sbc	r21, r23
    1fa8:	dc 01       	movw	r26, r24
    1faa:	ed 91       	ld	r30, X+
    1fac:	fc 91       	ld	r31, X
    1fae:	02 80       	ldd	r0, Z+2	; 0x02
    1fb0:	f3 81       	ldd	r31, Z+3	; 0x03
    1fb2:	e0 2d       	mov	r30, r0
    1fb4:	09 94       	ijmp
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	08 95       	ret

00001fbc <_ZN5Print5printEPK19__FlashStringHelper>:
    1fbc:	ef 92       	push	r14
    1fbe:	ff 92       	push	r15
    1fc0:	0f 93       	push	r16
    1fc2:	1f 93       	push	r17
    1fc4:	cf 93       	push	r28
    1fc6:	df 93       	push	r29
    1fc8:	7c 01       	movw	r14, r24
    1fca:	fb 01       	movw	r30, r22
    1fcc:	00 e0       	ldi	r16, 0x00	; 0
    1fce:	10 e0       	ldi	r17, 0x00	; 0
    1fd0:	64 91       	lpm	r22, Z
    1fd2:	ef 01       	movw	r28, r30
    1fd4:	21 96       	adiw	r28, 0x01	; 1
    1fd6:	66 23       	and	r22, r22
    1fd8:	61 f0       	breq	.+24     	; 0x1ff2 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    1fda:	d7 01       	movw	r26, r14
    1fdc:	ed 91       	ld	r30, X+
    1fde:	fc 91       	ld	r31, X
    1fe0:	01 90       	ld	r0, Z+
    1fe2:	f0 81       	ld	r31, Z
    1fe4:	e0 2d       	mov	r30, r0
    1fe6:	c7 01       	movw	r24, r14
    1fe8:	09 95       	icall
    1fea:	08 0f       	add	r16, r24
    1fec:	19 1f       	adc	r17, r25
    1fee:	fe 01       	movw	r30, r28
    1ff0:	ef cf       	rjmp	.-34     	; 0x1fd0 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    1ff2:	c8 01       	movw	r24, r16
    1ff4:	df 91       	pop	r29
    1ff6:	cf 91       	pop	r28
    1ff8:	1f 91       	pop	r17
    1ffa:	0f 91       	pop	r16
    1ffc:	ff 90       	pop	r15
    1ffe:	ef 90       	pop	r14
    2000:	08 95       	ret

00002002 <_ZN5Print5printEc>:
    2002:	dc 01       	movw	r26, r24
    2004:	ed 91       	ld	r30, X+
    2006:	fc 91       	ld	r31, X
    2008:	01 90       	ld	r0, Z+
    200a:	f0 81       	ld	r31, Z
    200c:	e0 2d       	mov	r30, r0
    200e:	09 94       	ijmp

00002010 <_ZN5Print7printlnEv>:
    2010:	0f 93       	push	r16
    2012:	1f 93       	push	r17
    2014:	cf 93       	push	r28
    2016:	df 93       	push	r29
    2018:	ec 01       	movw	r28, r24
    201a:	6d e0       	ldi	r22, 0x0D	; 13
    201c:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN5Print5printEc>
    2020:	8c 01       	movw	r16, r24
    2022:	6a e0       	ldi	r22, 0x0A	; 10
    2024:	ce 01       	movw	r24, r28
    2026:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN5Print5printEc>
    202a:	80 0f       	add	r24, r16
    202c:	91 1f       	adc	r25, r17
    202e:	df 91       	pop	r29
    2030:	cf 91       	pop	r28
    2032:	1f 91       	pop	r17
    2034:	0f 91       	pop	r16
    2036:	08 95       	ret

00002038 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    2038:	0f 93       	push	r16
    203a:	1f 93       	push	r17
    203c:	cf 93       	push	r28
    203e:	df 93       	push	r29
    2040:	ec 01       	movw	r28, r24
    2042:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <_ZN5Print5printEPK19__FlashStringHelper>
    2046:	8c 01       	movw	r16, r24
    2048:	ce 01       	movw	r24, r28
    204a:	0e 94 08 10 	call	0x2010	; 0x2010 <_ZN5Print7printlnEv>
    204e:	80 0f       	add	r24, r16
    2050:	91 1f       	adc	r25, r17
    2052:	df 91       	pop	r29
    2054:	cf 91       	pop	r28
    2056:	1f 91       	pop	r17
    2058:	0f 91       	pop	r16
    205a:	08 95       	ret

0000205c <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    205c:	0f 93       	push	r16
    205e:	1f 93       	push	r17
    2060:	cf 93       	push	r28
    2062:	df 93       	push	r29
    2064:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2066:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <_ZN5Print5writeEPKc>
    206a:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    206c:	ce 01       	movw	r24, r28
    206e:	0e 94 08 10 	call	0x2010	; 0x2010 <_ZN5Print7printlnEv>
  return n;
}
    2072:	80 0f       	add	r24, r16
    2074:	91 1f       	adc	r25, r17
    2076:	df 91       	pop	r29
    2078:	cf 91       	pop	r28
    207a:	1f 91       	pop	r17
    207c:	0f 91       	pop	r16
    207e:	08 95       	ret

00002080 <__vector_16>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    2080:	1f 92       	push	r1
    2082:	0f 92       	push	r0
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	0f 92       	push	r0
    2088:	11 24       	eor	r1, r1
    208a:	2f 93       	push	r18
    208c:	3f 93       	push	r19
    208e:	8f 93       	push	r24
    2090:	9f 93       	push	r25
    2092:	af 93       	push	r26
    2094:	bf 93       	push	r27
    2096:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <timer0_millis>
    209a:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <timer0_millis+0x1>
    209e:	a0 91 76 02 	lds	r26, 0x0276	; 0x800276 <timer0_millis+0x2>
    20a2:	b0 91 77 02 	lds	r27, 0x0277	; 0x800277 <timer0_millis+0x3>
    20a6:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <timer0_fract>
    20aa:	23 e0       	ldi	r18, 0x03	; 3
    20ac:	23 0f       	add	r18, r19
    20ae:	2d 37       	cpi	r18, 0x7D	; 125
    20b0:	20 f4       	brcc	.+8      	; 0x20ba <__vector_16+0x3a>
    20b2:	01 96       	adiw	r24, 0x01	; 1
    20b4:	a1 1d       	adc	r26, r1
    20b6:	b1 1d       	adc	r27, r1
    20b8:	05 c0       	rjmp	.+10     	; 0x20c4 <__vector_16+0x44>
    20ba:	26 e8       	ldi	r18, 0x86	; 134
    20bc:	23 0f       	add	r18, r19
    20be:	02 96       	adiw	r24, 0x02	; 2
    20c0:	a1 1d       	adc	r26, r1
    20c2:	b1 1d       	adc	r27, r1
    20c4:	20 93 73 02 	sts	0x0273, r18	; 0x800273 <timer0_fract>
    20c8:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <timer0_millis>
    20cc:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <timer0_millis+0x1>
    20d0:	a0 93 76 02 	sts	0x0276, r26	; 0x800276 <timer0_millis+0x2>
    20d4:	b0 93 77 02 	sts	0x0277, r27	; 0x800277 <timer0_millis+0x3>
    20d8:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <timer0_overflow_count>
    20dc:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <timer0_overflow_count+0x1>
    20e0:	a0 91 7a 02 	lds	r26, 0x027A	; 0x80027a <timer0_overflow_count+0x2>
    20e4:	b0 91 7b 02 	lds	r27, 0x027B	; 0x80027b <timer0_overflow_count+0x3>
    20e8:	01 96       	adiw	r24, 0x01	; 1
    20ea:	a1 1d       	adc	r26, r1
    20ec:	b1 1d       	adc	r27, r1
    20ee:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <timer0_overflow_count>
    20f2:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <timer0_overflow_count+0x1>
    20f6:	a0 93 7a 02 	sts	0x027A, r26	; 0x80027a <timer0_overflow_count+0x2>
    20fa:	b0 93 7b 02 	sts	0x027B, r27	; 0x80027b <timer0_overflow_count+0x3>
    20fe:	bf 91       	pop	r27
    2100:	af 91       	pop	r26
    2102:	9f 91       	pop	r25
    2104:	8f 91       	pop	r24
    2106:	3f 91       	pop	r19
    2108:	2f 91       	pop	r18
    210a:	0f 90       	pop	r0
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	0f 90       	pop	r0
    2110:	1f 90       	pop	r1
    2112:	18 95       	reti

00002114 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2114:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2116:	84 b5       	in	r24, 0x24	; 36
    2118:	82 60       	ori	r24, 0x02	; 2
    211a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    211c:	84 b5       	in	r24, 0x24	; 36
    211e:	81 60       	ori	r24, 0x01	; 1
    2120:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2122:	85 b5       	in	r24, 0x25	; 37
    2124:	82 60       	ori	r24, 0x02	; 2
    2126:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2128:	85 b5       	in	r24, 0x25	; 37
    212a:	81 60       	ori	r24, 0x01	; 1
    212c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    212e:	ee e6       	ldi	r30, 0x6E	; 110
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	81 60       	ori	r24, 0x01	; 1
    2136:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2138:	e1 e8       	ldi	r30, 0x81	; 129
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    213e:	80 81       	ld	r24, Z
    2140:	82 60       	ori	r24, 0x02	; 2
    2142:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2144:	80 81       	ld	r24, Z
    2146:	81 60       	ori	r24, 0x01	; 1
    2148:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    214a:	e0 e8       	ldi	r30, 0x80	; 128
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	80 81       	ld	r24, Z
    2150:	81 60       	ori	r24, 0x01	; 1
    2152:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2154:	e1 eb       	ldi	r30, 0xB1	; 177
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	84 60       	ori	r24, 0x04	; 4
    215c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    215e:	e0 eb       	ldi	r30, 0xB0	; 176
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	81 60       	ori	r24, 0x01	; 1
    2166:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    2168:	ea e7       	ldi	r30, 0x7A	; 122
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	84 60       	ori	r24, 0x04	; 4
    2170:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    2172:	80 81       	ld	r24, Z
    2174:	82 60       	ori	r24, 0x02	; 2
    2176:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    2178:	80 81       	ld	r24, Z
    217a:	81 60       	ori	r24, 0x01	; 1
    217c:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    217e:	80 81       	ld	r24, Z
    2180:	80 68       	ori	r24, 0x80	; 128
    2182:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2184:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2188:	08 95       	ret

0000218a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    218a:	83 30       	cpi	r24, 0x03	; 3
    218c:	81 f0       	breq	.+32     	; 0x21ae <turnOffPWM+0x24>
    218e:	28 f4       	brcc	.+10     	; 0x219a <turnOffPWM+0x10>
    2190:	81 30       	cpi	r24, 0x01	; 1
    2192:	99 f0       	breq	.+38     	; 0x21ba <turnOffPWM+0x30>
    2194:	82 30       	cpi	r24, 0x02	; 2
    2196:	a1 f0       	breq	.+40     	; 0x21c0 <turnOffPWM+0x36>
    2198:	08 95       	ret
    219a:	87 30       	cpi	r24, 0x07	; 7
    219c:	a9 f0       	breq	.+42     	; 0x21c8 <turnOffPWM+0x3e>
    219e:	88 30       	cpi	r24, 0x08	; 8
    21a0:	b9 f0       	breq	.+46     	; 0x21d0 <turnOffPWM+0x46>
    21a2:	84 30       	cpi	r24, 0x04	; 4
    21a4:	d1 f4       	brne	.+52     	; 0x21da <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    21a6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    21aa:	8f 7d       	andi	r24, 0xDF	; 223
    21ac:	03 c0       	rjmp	.+6      	; 0x21b4 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    21ae:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    21b2:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    21b4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    21b8:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    21ba:	84 b5       	in	r24, 0x24	; 36
    21bc:	8f 77       	andi	r24, 0x7F	; 127
    21be:	02 c0       	rjmp	.+4      	; 0x21c4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    21c0:	84 b5       	in	r24, 0x24	; 36
    21c2:	8f 7d       	andi	r24, 0xDF	; 223
    21c4:	84 bd       	out	0x24, r24	; 36
    21c6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    21c8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    21cc:	8f 77       	andi	r24, 0x7F	; 127
    21ce:	03 c0       	rjmp	.+6      	; 0x21d6 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    21d0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    21d4:	8f 7d       	andi	r24, 0xDF	; 223
    21d6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    21da:	08 95       	ret

000021dc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    21dc:	cf 93       	push	r28
    21de:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	fc 01       	movw	r30, r24
    21e4:	e0 57       	subi	r30, 0x70	; 112
    21e6:	fb 4f       	sbci	r31, 0xFB	; 251
    21e8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    21ea:	fc 01       	movw	r30, r24
    21ec:	ec 55       	subi	r30, 0x5C	; 92
    21ee:	fb 4f       	sbci	r31, 0xFB	; 251
    21f0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    21f2:	88 23       	and	r24, r24
    21f4:	61 f1       	breq	.+88     	; 0x224e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	88 0f       	add	r24, r24
    21fa:	99 1f       	adc	r25, r25
    21fc:	fc 01       	movw	r30, r24
    21fe:	ee 53       	subi	r30, 0x3E	; 62
    2200:	fb 4f       	sbci	r31, 0xFB	; 251
    2202:	c5 91       	lpm	r28, Z+
    2204:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2206:	fc 01       	movw	r30, r24
    2208:	e8 54       	subi	r30, 0x48	; 72
    220a:	fb 4f       	sbci	r31, 0xFB	; 251
    220c:	a5 91       	lpm	r26, Z+
    220e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2210:	61 11       	cpse	r22, r1
    2212:	09 c0       	rjmp	.+18     	; 0x2226 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2214:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2216:	f8 94       	cli
		*reg &= ~bit;
    2218:	88 81       	ld	r24, Y
    221a:	20 95       	com	r18
    221c:	82 23       	and	r24, r18
    221e:	88 83       	st	Y, r24
		*out &= ~bit;
    2220:	ec 91       	ld	r30, X
    2222:	2e 23       	and	r18, r30
    2224:	0b c0       	rjmp	.+22     	; 0x223c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2226:	62 30       	cpi	r22, 0x02	; 2
    2228:	61 f4       	brne	.+24     	; 0x2242 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    222a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    222c:	f8 94       	cli
		*reg &= ~bit;
    222e:	38 81       	ld	r19, Y
    2230:	82 2f       	mov	r24, r18
    2232:	80 95       	com	r24
    2234:	83 23       	and	r24, r19
    2236:	88 83       	st	Y, r24
		*out |= bit;
    2238:	ec 91       	ld	r30, X
    223a:	2e 2b       	or	r18, r30
    223c:	2c 93       	st	X, r18
		SREG = oldSREG;
    223e:	9f bf       	out	0x3f, r25	; 63
    2240:	06 c0       	rjmp	.+12     	; 0x224e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2242:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2244:	f8 94       	cli
		*reg |= bit;
    2246:	e8 81       	ld	r30, Y
    2248:	2e 2b       	or	r18, r30
    224a:	28 83       	st	Y, r18
		SREG = oldSREG;
    224c:	8f bf       	out	0x3f, r24	; 63
	}
}
    224e:	df 91       	pop	r29
    2250:	cf 91       	pop	r28
    2252:	08 95       	ret

00002254 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2254:	1f 93       	push	r17
    2256:	cf 93       	push	r28
    2258:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    225a:	28 2f       	mov	r18, r24
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	f9 01       	movw	r30, r18
    2260:	e4 58       	subi	r30, 0x84	; 132
    2262:	fb 4f       	sbci	r31, 0xFB	; 251
    2264:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2266:	f9 01       	movw	r30, r18
    2268:	e0 57       	subi	r30, 0x70	; 112
    226a:	fb 4f       	sbci	r31, 0xFB	; 251
    226c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    226e:	f9 01       	movw	r30, r18
    2270:	ec 55       	subi	r30, 0x5C	; 92
    2272:	fb 4f       	sbci	r31, 0xFB	; 251
    2274:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2276:	cc 23       	and	r28, r28
    2278:	c9 f0       	breq	.+50     	; 0x22ac <digitalWrite+0x58>
    227a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    227c:	81 11       	cpse	r24, r1
    227e:	0e 94 c5 10 	call	0x218a	; 0x218a <turnOffPWM>

	out = portOutputRegister(port);
    2282:	ec 2f       	mov	r30, r28
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	ee 0f       	add	r30, r30
    2288:	ff 1f       	adc	r31, r31
    228a:	e8 54       	subi	r30, 0x48	; 72
    228c:	fb 4f       	sbci	r31, 0xFB	; 251
    228e:	a5 91       	lpm	r26, Z+
    2290:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2292:	8f b7       	in	r24, 0x3f	; 63
	cli();
    2294:	f8 94       	cli

	if (val == LOW) {
    2296:	11 11       	cpse	r17, r1
    2298:	05 c0       	rjmp	.+10     	; 0x22a4 <digitalWrite+0x50>
		*out &= ~bit;
    229a:	9c 91       	ld	r25, X
    229c:	ed 2f       	mov	r30, r29
    229e:	e0 95       	com	r30
    22a0:	e9 23       	and	r30, r25
    22a2:	02 c0       	rjmp	.+4      	; 0x22a8 <digitalWrite+0x54>
	} else {
		*out |= bit;
    22a4:	ec 91       	ld	r30, X
    22a6:	ed 2b       	or	r30, r29
    22a8:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    22aa:	8f bf       	out	0x3f, r24	; 63
}
    22ac:	df 91       	pop	r29
    22ae:	cf 91       	pop	r28
    22b0:	1f 91       	pop	r17
    22b2:	08 95       	ret

000022b4 <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    22b4:	bf 92       	push	r11
    22b6:	cf 92       	push	r12
    22b8:	df 92       	push	r13
    22ba:	ef 92       	push	r14
    22bc:	ff 92       	push	r15
    22be:	0f 93       	push	r16
    22c0:	1f 93       	push	r17
    22c2:	cf 93       	push	r28
    22c4:	df 93       	push	r29
    22c6:	c8 2e       	mov	r12, r24
    22c8:	d6 2e       	mov	r13, r22
    22ca:	b4 2e       	mov	r11, r20
    22cc:	c7 e0       	ldi	r28, 0x07	; 7
    22ce:	d0 e0       	ldi	r29, 0x00	; 0
    22d0:	02 2f       	mov	r16, r18
    22d2:	10 e0       	ldi	r17, 0x00	; 0
    22d4:	87 e0       	ldi	r24, 0x07	; 7
    22d6:	e8 2e       	mov	r14, r24
    22d8:	f1 2c       	mov	r15, r1
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    22da:	b1 10       	cpse	r11, r1
    22dc:	05 c0       	rjmp	.+10     	; 0x22e8 <shiftOut+0x34>
    22de:	c7 01       	movw	r24, r14
    22e0:	8c 1b       	sub	r24, r28
    22e2:	9d 0b       	sbc	r25, r29
			digitalWrite(dataPin, !!(val & (1 << i)));
    22e4:	98 01       	movw	r18, r16
    22e6:	02 c0       	rjmp	.+4      	; 0x22ec <shiftOut+0x38>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    22e8:	98 01       	movw	r18, r16
    22ea:	8c 2f       	mov	r24, r28
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <shiftOut+0x3e>
    22ee:	35 95       	asr	r19
    22f0:	27 95       	ror	r18
    22f2:	8a 95       	dec	r24
    22f4:	e2 f7       	brpl	.-8      	; 0x22ee <shiftOut+0x3a>
    22f6:	b9 01       	movw	r22, r18
    22f8:	61 70       	andi	r22, 0x01	; 1
    22fa:	77 27       	eor	r23, r23
    22fc:	8c 2d       	mov	r24, r12
    22fe:	0e 94 2a 11 	call	0x2254	; 0x2254 <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    2302:	61 e0       	ldi	r22, 0x01	; 1
    2304:	8d 2d       	mov	r24, r13
    2306:	0e 94 2a 11 	call	0x2254	; 0x2254 <digitalWrite>
		digitalWrite(clockPin, LOW);		
    230a:	60 e0       	ldi	r22, 0x00	; 0
    230c:	8d 2d       	mov	r24, r13
    230e:	0e 94 2a 11 	call	0x2254	; 0x2254 <digitalWrite>
    2312:	21 97       	sbiw	r28, 0x01	; 1
    2314:	10 f7       	brcc	.-60     	; 0x22da <shiftOut+0x26>
	}
}
    2316:	df 91       	pop	r29
    2318:	cf 91       	pop	r28
    231a:	1f 91       	pop	r17
    231c:	0f 91       	pop	r16
    231e:	ff 90       	pop	r15
    2320:	ef 90       	pop	r14
    2322:	df 90       	pop	r13
    2324:	cf 90       	pop	r12
    2326:	bf 90       	pop	r11
    2328:	08 95       	ret

0000232a <__udivmodsi4>:
    232a:	a1 e2       	ldi	r26, 0x21	; 33
    232c:	1a 2e       	mov	r1, r26
    232e:	aa 1b       	sub	r26, r26
    2330:	bb 1b       	sub	r27, r27
    2332:	fd 01       	movw	r30, r26
    2334:	0d c0       	rjmp	.+26     	; 0x2350 <__udivmodsi4_ep>

00002336 <__udivmodsi4_loop>:
    2336:	aa 1f       	adc	r26, r26
    2338:	bb 1f       	adc	r27, r27
    233a:	ee 1f       	adc	r30, r30
    233c:	ff 1f       	adc	r31, r31
    233e:	a2 17       	cp	r26, r18
    2340:	b3 07       	cpc	r27, r19
    2342:	e4 07       	cpc	r30, r20
    2344:	f5 07       	cpc	r31, r21
    2346:	20 f0       	brcs	.+8      	; 0x2350 <__udivmodsi4_ep>
    2348:	a2 1b       	sub	r26, r18
    234a:	b3 0b       	sbc	r27, r19
    234c:	e4 0b       	sbc	r30, r20
    234e:	f5 0b       	sbc	r31, r21

00002350 <__udivmodsi4_ep>:
    2350:	66 1f       	adc	r22, r22
    2352:	77 1f       	adc	r23, r23
    2354:	88 1f       	adc	r24, r24
    2356:	99 1f       	adc	r25, r25
    2358:	1a 94       	dec	r1
    235a:	69 f7       	brne	.-38     	; 0x2336 <__udivmodsi4_loop>
    235c:	60 95       	com	r22
    235e:	70 95       	com	r23
    2360:	80 95       	com	r24
    2362:	90 95       	com	r25
    2364:	9b 01       	movw	r18, r22
    2366:	ac 01       	movw	r20, r24
    2368:	bd 01       	movw	r22, r26
    236a:	cf 01       	movw	r24, r30
    236c:	08 95       	ret

0000236e <__usmulhisi3>:
    236e:	0e 94 c4 11 	call	0x2388	; 0x2388 <__umulhisi3>

00002372 <__usmulhisi3_tail>:
    2372:	b7 ff       	sbrs	r27, 7
    2374:	08 95       	ret
    2376:	82 1b       	sub	r24, r18
    2378:	93 0b       	sbc	r25, r19
    237a:	08 95       	ret

0000237c <__tablejump2__>:
    237c:	ee 0f       	add	r30, r30
    237e:	ff 1f       	adc	r31, r31
    2380:	05 90       	lpm	r0, Z+
    2382:	f4 91       	lpm	r31, Z
    2384:	e0 2d       	mov	r30, r0
    2386:	09 94       	ijmp

00002388 <__umulhisi3>:
    2388:	a2 9f       	mul	r26, r18
    238a:	b0 01       	movw	r22, r0
    238c:	b3 9f       	mul	r27, r19
    238e:	c0 01       	movw	r24, r0
    2390:	a3 9f       	mul	r26, r19
    2392:	70 0d       	add	r23, r0
    2394:	81 1d       	adc	r24, r1
    2396:	11 24       	eor	r1, r1
    2398:	91 1d       	adc	r25, r1
    239a:	b2 9f       	mul	r27, r18
    239c:	70 0d       	add	r23, r0
    239e:	81 1d       	adc	r24, r1
    23a0:	11 24       	eor	r1, r1
    23a2:	91 1d       	adc	r25, r1
    23a4:	08 95       	ret

000023a6 <atoi>:
    23a6:	fc 01       	movw	r30, r24
    23a8:	88 27       	eor	r24, r24
    23aa:	99 27       	eor	r25, r25
    23ac:	e8 94       	clt
    23ae:	21 91       	ld	r18, Z+
    23b0:	20 32       	cpi	r18, 0x20	; 32
    23b2:	e9 f3       	breq	.-6      	; 0x23ae <atoi+0x8>
    23b4:	29 30       	cpi	r18, 0x09	; 9
    23b6:	10 f0       	brcs	.+4      	; 0x23bc <atoi+0x16>
    23b8:	2e 30       	cpi	r18, 0x0E	; 14
    23ba:	c8 f3       	brcs	.-14     	; 0x23ae <atoi+0x8>
    23bc:	2b 32       	cpi	r18, 0x2B	; 43
    23be:	41 f0       	breq	.+16     	; 0x23d0 <atoi+0x2a>
    23c0:	2d 32       	cpi	r18, 0x2D	; 45
    23c2:	39 f4       	brne	.+14     	; 0x23d2 <atoi+0x2c>
    23c4:	68 94       	set
    23c6:	04 c0       	rjmp	.+8      	; 0x23d0 <atoi+0x2a>
    23c8:	0e 94 49 12 	call	0x2492	; 0x2492 <__mulhi_const_10>
    23cc:	82 0f       	add	r24, r18
    23ce:	91 1d       	adc	r25, r1
    23d0:	21 91       	ld	r18, Z+
    23d2:	20 53       	subi	r18, 0x30	; 48
    23d4:	2a 30       	cpi	r18, 0x0A	; 10
    23d6:	c0 f3       	brcs	.-16     	; 0x23c8 <atoi+0x22>
    23d8:	1e f4       	brtc	.+6      	; 0x23e0 <atoi+0x3a>
    23da:	90 95       	com	r25
    23dc:	81 95       	neg	r24
    23de:	9f 4f       	sbci	r25, 0xFF	; 255
    23e0:	08 95       	ret

000023e2 <memcpy_P>:
    23e2:	fb 01       	movw	r30, r22
    23e4:	dc 01       	movw	r26, r24
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <memcpy_P+0xa>
    23e8:	05 90       	lpm	r0, Z+
    23ea:	0d 92       	st	X+, r0
    23ec:	41 50       	subi	r20, 0x01	; 1
    23ee:	50 40       	sbci	r21, 0x00	; 0
    23f0:	d8 f7       	brcc	.-10     	; 0x23e8 <memcpy_P+0x6>
    23f2:	08 95       	ret

000023f4 <strtok>:
    23f4:	40 e5       	ldi	r20, 0x50	; 80
    23f6:	51 e0       	ldi	r21, 0x01	; 1
    23f8:	0e 94 22 12 	call	0x2444	; 0x2444 <strtok_r>
    23fc:	08 95       	ret

000023fe <strchr>:
    23fe:	fc 01       	movw	r30, r24
    2400:	81 91       	ld	r24, Z+
    2402:	86 17       	cp	r24, r22
    2404:	21 f0       	breq	.+8      	; 0x240e <strchr+0x10>
    2406:	88 23       	and	r24, r24
    2408:	d9 f7       	brne	.-10     	; 0x2400 <strchr+0x2>
    240a:	99 27       	eor	r25, r25
    240c:	08 95       	ret
    240e:	31 97       	sbiw	r30, 0x01	; 1
    2410:	cf 01       	movw	r24, r30
    2412:	08 95       	ret

00002414 <strcmp>:
    2414:	fb 01       	movw	r30, r22
    2416:	dc 01       	movw	r26, r24
    2418:	8d 91       	ld	r24, X+
    241a:	01 90       	ld	r0, Z+
    241c:	80 19       	sub	r24, r0
    241e:	01 10       	cpse	r0, r1
    2420:	d9 f3       	breq	.-10     	; 0x2418 <strcmp+0x4>
    2422:	99 0b       	sbc	r25, r25
    2424:	08 95       	ret

00002426 <strncpy>:
    2426:	fb 01       	movw	r30, r22
    2428:	dc 01       	movw	r26, r24
    242a:	41 50       	subi	r20, 0x01	; 1
    242c:	50 40       	sbci	r21, 0x00	; 0
    242e:	48 f0       	brcs	.+18     	; 0x2442 <strncpy+0x1c>
    2430:	01 90       	ld	r0, Z+
    2432:	0d 92       	st	X+, r0
    2434:	00 20       	and	r0, r0
    2436:	c9 f7       	brne	.-14     	; 0x242a <strncpy+0x4>
    2438:	01 c0       	rjmp	.+2      	; 0x243c <strncpy+0x16>
    243a:	1d 92       	st	X+, r1
    243c:	41 50       	subi	r20, 0x01	; 1
    243e:	50 40       	sbci	r21, 0x00	; 0
    2440:	e0 f7       	brcc	.-8      	; 0x243a <strncpy+0x14>
    2442:	08 95       	ret

00002444 <strtok_r>:
    2444:	fa 01       	movw	r30, r20
    2446:	a1 91       	ld	r26, Z+
    2448:	b0 81       	ld	r27, Z
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	19 f4       	brne	.+6      	; 0x2454 <strtok_r+0x10>
    244e:	10 97       	sbiw	r26, 0x00	; 0
    2450:	e1 f0       	breq	.+56     	; 0x248a <strtok_r+0x46>
    2452:	cd 01       	movw	r24, r26
    2454:	dc 01       	movw	r26, r24
    2456:	cd 01       	movw	r24, r26
    2458:	0d 90       	ld	r0, X+
    245a:	00 20       	and	r0, r0
    245c:	11 f4       	brne	.+4      	; 0x2462 <strtok_r+0x1e>
    245e:	c0 01       	movw	r24, r0
    2460:	13 c0       	rjmp	.+38     	; 0x2488 <strtok_r+0x44>
    2462:	fb 01       	movw	r30, r22
    2464:	21 91       	ld	r18, Z+
    2466:	22 23       	and	r18, r18
    2468:	19 f0       	breq	.+6      	; 0x2470 <strtok_r+0x2c>
    246a:	20 15       	cp	r18, r0
    246c:	d9 f7       	brne	.-10     	; 0x2464 <strtok_r+0x20>
    246e:	f3 cf       	rjmp	.-26     	; 0x2456 <strtok_r+0x12>
    2470:	fb 01       	movw	r30, r22
    2472:	21 91       	ld	r18, Z+
    2474:	20 15       	cp	r18, r0
    2476:	19 f4       	brne	.+6      	; 0x247e <strtok_r+0x3a>
    2478:	1e 92       	st	-X, r1
    247a:	11 96       	adiw	r26, 0x01	; 1
    247c:	06 c0       	rjmp	.+12     	; 0x248a <strtok_r+0x46>
    247e:	22 23       	and	r18, r18
    2480:	c1 f7       	brne	.-16     	; 0x2472 <strtok_r+0x2e>
    2482:	0d 90       	ld	r0, X+
    2484:	00 20       	and	r0, r0
    2486:	a1 f7       	brne	.-24     	; 0x2470 <strtok_r+0x2c>
    2488:	d0 01       	movw	r26, r0
    248a:	fa 01       	movw	r30, r20
    248c:	a1 93       	st	Z+, r26
    248e:	b0 83       	st	Z, r27
    2490:	08 95       	ret

00002492 <__mulhi_const_10>:
    2492:	7a e0       	ldi	r23, 0x0A	; 10
    2494:	97 9f       	mul	r25, r23
    2496:	90 2d       	mov	r25, r0
    2498:	87 9f       	mul	r24, r23
    249a:	80 2d       	mov	r24, r0
    249c:	91 0d       	add	r25, r1
    249e:	11 24       	eor	r1, r1
    24a0:	08 95       	ret

000024a2 <__do_global_dtors>:
    24a2:	12 e0       	ldi	r17, 0x02	; 2
    24a4:	c9 e6       	ldi	r28, 0x69	; 105
    24a6:	d2 e0       	ldi	r29, 0x02	; 2
    24a8:	04 c0       	rjmp	.+8      	; 0x24b2 <__do_global_dtors+0x10>
    24aa:	fe 01       	movw	r30, r28
    24ac:	0e 94 be 11 	call	0x237c	; 0x237c <__tablejump2__>
    24b0:	21 96       	adiw	r28, 0x01	; 1
    24b2:	ca 36       	cpi	r28, 0x6A	; 106
    24b4:	d1 07       	cpc	r29, r17
    24b6:	c9 f7       	brne	.-14     	; 0x24aa <__do_global_dtors+0x8>
    24b8:	f8 94       	cli

000024ba <__stop_program>:
    24ba:	ff cf       	rjmp	.-2      	; 0x24ba <__stop_program>
