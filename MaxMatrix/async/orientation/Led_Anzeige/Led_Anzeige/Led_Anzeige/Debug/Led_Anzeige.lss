
Led_Anzeige.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  0000255a  000025ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000255a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a5  00800162  00800162  00002650  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002650  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002680  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000558  00000000  00000000  000026c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cd35  00000000  00000000  00002c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002207  00000000  00000000  0000f94d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000371b  00000000  00000000  00011b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013c8  00000000  00000000  00015270  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000312b  00000000  00000000  00016638  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000086ce  00000000  00000000  00019763  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000720  00000000  00000000  00021e31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 aa 02 	jmp	0x554	; 0x554 <__dtors_end>
       4:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
       8:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
       c:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      10:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      14:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      18:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      1c:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      20:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      24:	0c 94 fa 0d 	jmp	0x1bf4	; 0x1bf4 <__vector_9>
      28:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      2c:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      30:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      34:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__vector_13>
      38:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      3c:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      40:	0c 94 92 10 	jmp	0x2124	; 0x2124 <__vector_16>
      44:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      48:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__vector_18>
      4c:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__vector_19>
      50:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      54:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      58:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      5c:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      60:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>
      64:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	45 78       	andi	r20, 0x85	; 133
      6a:	61 6d       	ori	r22, 0xD1	; 209
      6c:	70 6c       	ori	r23, 0xC0	; 192
      6e:	65 3a       	cpi	r22, 0xA5	; 165
      70:	20 74       	andi	r18, 0x40	; 64
      72:	65 78       	andi	r22, 0x85	; 133
      74:	74 3d       	cpi	r23, 0xD4	; 212
      76:	65 78       	andi	r22, 0x85	; 133
      78:	61 6d       	ori	r22, 0xD1	; 209
      7a:	70 6c       	ori	r23, 0xC0	; 192
      7c:	65 20       	and	r6, r5
      7e:	74 65       	ori	r23, 0x54	; 84
      80:	78 74       	andi	r23, 0x48	; 72
	...

00000083 <_ZZ9printHelpvE3__c_1>:
      83:	63 6f 6d 6d 61 6e 64 20 61 6e 64 20 76 61 6c 75     command and valu
      93:	65 20 68 61 73 20 74 6f 20 62 65 20 73 65 70 61     e has to be sepa
      a3:	72 61 74 65 64 20 62 79 20 61 6e 20 65 71 75 61     rated by an equa
      b3:	6c 20 73 69 67 6e 00                                l sign.

000000ba <_ZZ9printHelpvE3__c_0>:
      ba:	6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 73 20 61     known commands a
      ca:	72 65 3a 20 74 65 78 74 2c 20 69 6e 74 65 6e 73     re: text, intens
      da:	69 74 79 20 61 6e 64 20 73 70 65 65 64 00           ity and speed.

000000e8 <_ZZ9printHelpvE3__c>:
      e8:	63 6f 6d 6d 61 6e 64 20 64 6f 65 73 20 6e 6f 74     command does not
      f8:	20 6d 61 74 63 68 00                                 match.

000000ff <_ZZ15uartInputHandlevE3__c_4>:
      ff:	73 70 61 63 65 42 65 74 77 65 65 6e 43 68 61 72     spaceBetweenChar
     10f:	73 20 72 61 6e 67 65 20 4d 41 58 4d 41 54 52 49     s range MAXMATRI
     11f:	58 5f 53 50 41 43 45 5f 42 45 54 57 45 45 4e 5f     X_SPACE_BETWEEN_
     12f:	43 48 41 52 53 5f 4d 49 4e 5f 56 41 4c 55 45 20     CHARS_MIN_VALUE 
     13f:	2e 2e 2e 20 4d 41 58 4d 41 54 52 49 58 5f 53 50     ... MAXMATRIX_SP
     14f:	41 43 45 5f 42 45 54 57 45 45 4e 5f 43 48 41 52     ACE_BETWEEN_CHAR
     15f:	53 5f 4d 41 58 5f 56 41 4c 55 45 00                 S_MAX_VALUE.

0000016b <_ZZ15uartInputHandlevE3__c_3>:
     16b:	76 61 6c 75 65 20 6f 75 74 20 6f 66 20 72 61 6e     value out of ran
     17b:	67 65 00                                            ge.

0000017e <_ZZ15uartInputHandlevE3__c_2>:
     17e:	73 70 65 65 64 20 72 61 6e 67 65 20 4d 41 58 4d     speed range MAXM
     18e:	41 54 52 49 58 5f 53 50 45 45 44 5f 4d 49 4e 5f     ATRIX_SPEED_MIN_
     19e:	56 41 4c 55 45 20 2e 2e 2e 20 4d 41 58 4d 41 54     VALUE ... MAXMAT
     1ae:	52 49 58 5f 53 50 45 45 44 5f 4d 41 58 5f 56 41     RIX_SPEED_MAX_VA
     1be:	4c 55 45 00                                         LUE.

000001c2 <_ZZ15uartInputHandlevE3__c_1>:
     1c2:	76 61 6c 75 65 20 6f 75 74 20 6f 66 20 72 61 6e     value out of ran
     1d2:	67 65 00                                            ge.

000001d5 <_ZZ15uartInputHandlevE3__c_0>:
     1d5:	69 6e 74 65 6e 73 69 74 79 20 72 61 6e 67 65 20     intensity range 
     1e5:	4d 41 58 4d 41 54 52 49 58 5f 49 4e 54 45 4e 53     MAXMATRIX_INTENS
     1f5:	49 54 59 5f 4d 49 4e 5f 56 41 4c 55 45 20 2e 2e     ITY_MIN_VALUE ..
     205:	2e 20 4d 41 58 4d 41 54 52 49 58 5f 49 4e 54 45     . MAXMATRIX_INTE
     215:	4e 53 49 54 59 5f 4d 41 58 5f 56 41 4c 55 45 00     NSITY_MAX_VALUE.

00000225 <_ZZ15uartInputHandlevE3__c>:
     225:	76 61 6c 75 65 20 6f 75 74 20 6f 66 20 72 61 6e     value out of ran
     235:	67 65 00                                            ge.

00000238 <_ZL11SpriteTable>:
     238:	03 08 00 00 00 00 00 01 08 5f 00 00 00 00 03 08     ........._......
     248:	03 00 03 00 00 05 08 14 3e 14 3e 14 04 08 24 6a     ........>.>...$j
     258:	2b 12 00 05 08 63 13 08 64 63 05 08 36 49 56 20     +....c..dc..6IV 
     268:	50 01 08 03 00 00 00 00 03 08 1c 22 41 00 00 03     P.........."A...
     278:	08 41 22 1c 00 00 05 08 28 18 0e 18 28 05 08 08     .A".....(...(...
     288:	08 3e 08 08 02 08 b0 70 00 00 00 04 08 08 08 08     .>.....p........
     298:	08 00 02 08 60 60 00 00 00 04 08 60 18 06 01 00     ....``.....`....
     2a8:	04 08 3e 41 41 3e 00 03 08 42 7f 40 00 00 04 08     ..>AA>...B.@....
     2b8:	62 51 49 46 00 04 08 22 41 49 36 00 04 08 18 14     bQIF..."AI6.....
     2c8:	12 7f 00 04 08 27 45 45 39 00 04 08 3e 49 49 30     .....'EE9...>II0
     2d8:	00 04 08 61 11 09 07 00 04 08 36 49 49 36 00 04     ...a......6II6..
     2e8:	08 06 49 49 3e 00 02 08 50 00 00 00 00 02 08 80     ..II>...P.......
     2f8:	50 00 00 00 03 08 10 28 44 00 00 03 08 14 14 14     P......(D.......
     308:	00 00 03 08 44 28 10 00 00 04 08 02 59 09 06 00     ....D(......Y...
     318:	05 08 3e 49 55 5d 0e 04 08 7e 11 11 7e 00 04 08     ..>IU]...~..~...
     328:	7f 49 49 36 00 04 08 3e 41 41 22 00 04 08 7f 41     .II6...>AA"....A
     338:	41 3e 00 04 08 7f 49 49 41 00 04 08 7f 09 09 01     A>....IIA.......
     348:	00 04 08 3e 41 49 7a 00 04 08 7f 08 08 7f 00 03     ...>AIz.........
     358:	08 41 7f 41 00 00 04 08 30 40 41 3f 00 04 08 7f     .A.A....0@A?....
     368:	08 14 63 00 04 08 7f 40 40 40 00 05 08 7f 02 0c     ..c....@@@......
     378:	02 7f 05 08 7f 04 08 10 7f 04 08 3e 41 41 3e 00     ...........>AA>.
     388:	04 08 7f 09 09 06 00 04 08 3e 41 41 be 00 04 08     .........>AA....
     398:	7f 09 09 76 00 04 08 46 49 49 32 00 05 08 01 01     ...v...FII2.....
     3a8:	7f 01 01 04 08 3f 40 40 3f 00 05 08 0f 30 40 30     .....?@@?....0@0
     3b8:	0f 05 08 3f 40 38 40 3f 05 08 63 14 08 14 63 05     ...?@8@?..c...c.
     3c8:	08 07 08 70 08 07 04 08 61 51 49 47 00 02 08 7f     ...p....aQIG....
     3d8:	41 00 00 00 04 08 01 06 18 60 00 02 08 41 7f 00     A........`...A..
     3e8:	00 00 03 08 02 01 02 00 00 04 08 40 40 40 40 00     ...........@@@@.
     3f8:	02 08 01 02 00 00 00 04 08 20 54 54 78 00 04 08     ......... TTx...
     408:	7f 44 44 38 00 04 08 38 44 44 28 00 04 08 38 44     .DD8...8DD(...8D
     418:	44 7f 00 04 08 38 54 54 18 00 03 08 04 7e 05 00     D....8TT.....~..
     428:	00 04 08 98 a4 a4 78 00 04 08 7f 04 04 78 00 03     ......x......x..
     438:	08 44 7d 40 00 00 04 08 40 80 84 7d 00 04 08 7f     .D}@....@..}....
     448:	10 28 44 00 03 08 41 7f 40 00 00 05 08 7c 04 7c     .(D...A.@....|.|
     458:	04 78 04 08 7c 04 04 78 00 04 08 38 44 44 38 00     .x..|..x...8DD8.
     468:	04 08 fc 24 24 18 00 04 08 18 24 24 fc 00 04 08     ...$$.....$$....
     478:	7c 08 04 04 00 04 08 48 54 54 24 00 03 08 04 3f     |......HTT$....?
     488:	44 00 00 04 08 3c 40 40 7c 00 05 08 1c 20 40 20     D....<@@|.... @ 
     498:	1c 05 08 3c 40 3c 40 3c 05 08 44 28 10 28 44 04     ...<@<@<..D(.(D.
     4a8:	08 9c a0 a0 7c 00 03 08 64 54 4c 00 00 03 08 08     ....|...dTL.....
     4b8:	36 41 00 00 01 08 7f 00 00 00 00 03 08 41 36 08     6A...........A6.
     4c8:	00 00 04 08 08 04 08 04 00 04 08 7c 13 13 7c 00     ...........|..|.
     4d8:	04 08 3c 43 43 3c 00 04 08 3e 41 41 3e 00 04 08     ..<CC<...>AA>...
     4e8:	20 56 56 78 00 04 08 38 46 46 38 00 04 08 3c 42      VVx...8FF8...<B
     4f8:	42 7c 00                                            B|.

000004fb <digital_pin_to_timer_PGM>:
     4fb:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     50b:	00 00 00 00                                         ....

0000050f <digital_pin_to_bit_mask_PGM>:
     50f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     51f:	04 08 10 20                                         ... 

00000523 <digital_pin_to_port_PGM>:
     523:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     533:	03 03 03 03                                         ....

00000537 <port_to_output_PGM>:
     537:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000541 <port_to_mode_PGM>:
     541:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

0000054c <__ctors_start>:
     54c:	06 05       	cpc	r16, r6
     54e:	21 0e       	add	r2, r17
     550:	b6 0f       	add	r27, r22

00000552 <__ctors_end>:
     552:	0d 05       	cpc	r16, r13

00000554 <__dtors_end>:
     554:	11 24       	eor	r1, r1
     556:	1f be       	out	0x3f, r1	; 63
     558:	cf ef       	ldi	r28, 0xFF	; 255
     55a:	d8 e0       	ldi	r29, 0x08	; 8
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	cd bf       	out	0x3d, r28	; 61

00000560 <__do_copy_data>:
     560:	11 e0       	ldi	r17, 0x01	; 1
     562:	a0 e0       	ldi	r26, 0x00	; 0
     564:	b1 e0       	ldi	r27, 0x01	; 1
     566:	ea e5       	ldi	r30, 0x5A	; 90
     568:	f5 e2       	ldi	r31, 0x25	; 37
     56a:	02 c0       	rjmp	.+4      	; 0x570 <__do_copy_data+0x10>
     56c:	05 90       	lpm	r0, Z+
     56e:	0d 92       	st	X+, r0
     570:	a2 36       	cpi	r26, 0x62	; 98
     572:	b1 07       	cpc	r27, r17
     574:	d9 f7       	brne	.-10     	; 0x56c <__do_copy_data+0xc>

00000576 <__do_clear_bss>:
     576:	23 e0       	ldi	r18, 0x03	; 3
     578:	a2 e6       	ldi	r26, 0x62	; 98
     57a:	b1 e0       	ldi	r27, 0x01	; 1
     57c:	01 c0       	rjmp	.+2      	; 0x580 <.do_clear_bss_start>

0000057e <.do_clear_bss_loop>:
     57e:	1d 92       	st	X+, r1

00000580 <.do_clear_bss_start>:
     580:	a7 30       	cpi	r26, 0x07	; 7
     582:	b2 07       	cpc	r27, r18
     584:	e1 f7       	brne	.-8      	; 0x57e <.do_clear_bss_loop>

00000586 <__do_global_ctors>:
     586:	12 e0       	ldi	r17, 0x02	; 2
     588:	c9 ea       	ldi	r28, 0xA9	; 169
     58a:	d2 e0       	ldi	r29, 0x02	; 2
     58c:	04 c0       	rjmp	.+8      	; 0x596 <__do_global_ctors+0x10>
     58e:	21 97       	sbiw	r28, 0x01	; 1
     590:	fe 01       	movw	r30, r28
     592:	0e 94 0d 12 	call	0x241a	; 0x241a <__tablejump2__>
     596:	c6 3a       	cpi	r28, 0xA6	; 166
     598:	d1 07       	cpc	r29, r17
     59a:	c9 f7       	brne	.-14     	; 0x58e <__do_global_ctors+0x8>
     59c:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <main>
     5a0:	0c 94 a0 12 	jmp	0x2540	; 0x2540 <__do_global_dtors>

000005a4 <__bad_interrupt>:
     5a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005a8 <_Z8systTickv>:
 *                  
 *  \pre            will be called from interrupt context by an Hardware Timer
 *****************************************************************************************************************************************************/
void systTick()
{
    Timer1Overflow = true;
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <Timer1Overflow>
     5ae:	08 95       	ret

000005b0 <setup>:
/******************************************************************************************************************************************************
 *  ARDUINO setup
 *****************************************************************************************************************************************************/
void setup()
{
    Timer1.initialize(200000);
     5b0:	40 e4       	ldi	r20, 0x40	; 64
     5b2:	5d e0       	ldi	r21, 0x0D	; 13
     5b4:	63 e0       	ldi	r22, 0x03	; 3
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	85 e5       	ldi	r24, 0x55	; 85
     5ba:	92 e0       	ldi	r25, 0x02	; 2
     5bc:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <_ZN8TimerOne10initializeEl>
    Timer1.attachInterrupt(systTick);
     5c0:	2f ef       	ldi	r18, 0xFF	; 255
     5c2:	3f ef       	ldi	r19, 0xFF	; 255
     5c4:	a9 01       	movw	r20, r18
     5c6:	64 ed       	ldi	r22, 0xD4	; 212
     5c8:	72 e0       	ldi	r23, 0x02	; 2
     5ca:	85 e5       	ldi	r24, 0x55	; 85
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <_ZN8TimerOne15attachInterruptEPFvvEl>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     5d2:	26 e0       	ldi	r18, 0x06	; 6
     5d4:	40 e8       	ldi	r20, 0x80	; 128
     5d6:	55 e2       	ldi	r21, 0x25	; 37
     5d8:	60 e0       	ldi	r22, 0x00	; 0
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	81 e6       	ldi	r24, 0x61	; 97
     5de:	92 e0       	ldi	r25, 0x02	; 2
     5e0:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <_ZN14HardwareSerial5beginEmh>
    Serial.begin(9600);
    Matrix.init();
     5e4:	85 e6       	ldi	r24, 0x65	; 101
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	0e 94 4f 09 	call	0x129e	; 0x129e <_ZN9MaxMatrix4initEv>
    
    Matrix.setModuleOrientation(MAXMATRIX_MODULE_ORIENTATION_90);
     5ec:	61 e0       	ldi	r22, 0x01	; 1
     5ee:	85 e6       	ldi	r24, 0x65	; 101
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	0e 94 05 06 	call	0xc0a	; 0xc0a <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType>
    Matrix.setText("Andreas");
     5f6:	60 e0       	ldi	r22, 0x00	; 0
     5f8:	71 e0       	ldi	r23, 0x01	; 1
     5fa:	85 e6       	ldi	r24, 0x65	; 101
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <_ZN9MaxMatrix7setTextEPKc>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *****************************************************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length - 1);
     602:	49 e5       	ldi	r20, 0x59	; 89
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	68 e0       	ldi	r22, 0x08	; 8
     608:	71 e0       	ldi	r23, 0x01	; 1
     60a:	86 e9       	ldi	r24, 0x96	; 150
     60c:	91 e0       	ldi	r25, 0x01	; 1
     60e:	0e 94 62 12 	call	0x24c4	; 0x24c4 <strncpy>
    Destination[Length-1] = STD_NULL_CHARACTER;
     612:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <MaxMatrixText+0x59>
    Matrix.init();
    
    Matrix.setModuleOrientation(MAXMATRIX_MODULE_ORIENTATION_90);
    Matrix.setText("Andreas");
    stringCopy(MaxMatrixText, "Andreas Burnickl", sizeof(MaxMatrixText));
    UartInputComplete = false;
     616:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <UartInputComplete>
    Timer1Overflow = false;
     61a:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <Timer1Overflow>
    
    State = LEDMATRIX_STATE_READY;
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <State>
     624:	08 95       	ret

00000626 <_Z9printHelpv>:
 *  \details        this function prints usage of Led Matrix over UART
 *                  
 *****************************************************************************************************************************************************/
void printHelp()
{
    Serial.println(F("command does not match"));
     626:	68 ee       	ldi	r22, 0xE8	; 232
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	81 e6       	ldi	r24, 0x61	; 97
     62c:	92 e0       	ldi	r25, 0x02	; 2
     62e:	0e 94 6e 10 	call	0x20dc	; 0x20dc <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(F("known commands are: text, intensity and speed"));
     632:	6a eb       	ldi	r22, 0xBA	; 186
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	81 e6       	ldi	r24, 0x61	; 97
     638:	92 e0       	ldi	r25, 0x02	; 2
     63a:	0e 94 6e 10 	call	0x20dc	; 0x20dc <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(F("command and value has to be separated by an equal sign"));
     63e:	63 e8       	ldi	r22, 0x83	; 131
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	81 e6       	ldi	r24, 0x61	; 97
     644:	92 e0       	ldi	r25, 0x02	; 2
     646:	0e 94 6e 10 	call	0x20dc	; 0x20dc <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(F("Example: text=example text"));
     64a:	68 e6       	ldi	r22, 0x68	; 104
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	81 e6       	ldi	r24, 0x61	; 97
     650:	92 e0       	ldi	r25, 0x02	; 2
     652:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <_ZN5Print7printlnEPK19__FlashStringHelper>

00000656 <_Z15uartInputHandlev>:
 *  \details        this function handles and validates the incoming data. After splitting the data into
 *                  command and value a specific action will be called.
 *                 
 *****************************************************************************************************************************************************/
void uartInputHandle()
{
     656:	ef 92       	push	r14
     658:	ff 92       	push	r15
     65a:	1f 93       	push	r17
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
     664:	c1 57       	subi	r28, 0x71	; 113
     666:	d1 09       	sbc	r29, r1
     668:	0f b6       	in	r0, 0x3f	; 63
     66a:	f8 94       	cli
     66c:	de bf       	out	0x3e, r29	; 62
     66e:	0f be       	out	0x3f, r0	; 63
     670:	cd bf       	out	0x3d, r28	; 61
    char command[COMMAND_MAX_LENGTH] = "";
     672:	fe 01       	movw	r30, r28
     674:	e5 5a       	subi	r30, 0xA5	; 165
     676:	ff 4f       	sbci	r31, 0xFF	; 255
     678:	11 92       	st	Z+, r1
     67a:	11 92       	st	Z+, r1
     67c:	88 e0       	ldi	r24, 0x08	; 8
     67e:	df 01       	movw	r26, r30
     680:	1d 92       	st	X+, r1
     682:	8a 95       	dec	r24
     684:	e9 f7       	brne	.-6      	; 0x680 <_Z15uartInputHandlev+0x2a>
    char valueASCII[MAXMATRIX_MAX_TEXT_LENGTH] = "";
     686:	1a 82       	std	Y+2, r1	; 0x02
     688:	19 82       	std	Y+1, r1	; 0x01
     68a:	fe 01       	movw	r30, r28
     68c:	33 96       	adiw	r30, 0x03	; 3
     68e:	88 e5       	ldi	r24, 0x58	; 88
     690:	df 01       	movw	r26, r30
     692:	1d 92       	st	X+, r1
     694:	8a 95       	dec	r24
     696:	e9 f7       	brne	.-6      	; 0x692 <_Z15uartInputHandlev+0x3c>
    int value = 0;
    const char delimiterCommand[] = "=";
     698:	8d e3       	ldi	r24, 0x3D	; 61
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	e2 96       	adiw	r28, 0x32	; 50
     69e:	9f af       	std	Y+63, r25	; 0x3f
     6a0:	8e af       	std	Y+62, r24	; 0x3e
     6a2:	e2 97       	sbiw	r28, 0x32	; 50
    const char delimiterValue[] = ",";
     6a4:	8c e2       	ldi	r24, 0x2C	; 44
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	e0 96       	adiw	r28, 0x30	; 48
     6aa:	9f af       	std	Y+63, r25	; 0x3f
     6ac:	8e af       	std	Y+62, r24	; 0x3e
     6ae:	e0 97       	sbiw	r28, 0x30	; 48
    char *token = NULL;

    if(strchr(UartInput, delimiterCommand[0]))
     6b0:	6d e3       	ldi	r22, 0x3D	; 61
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	81 ef       	ldi	r24, 0xF1	; 241
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	0e 94 4e 12 	call	0x249c	; 0x249c <strchr>
     6bc:	89 2b       	or	r24, r25
     6be:	09 f4       	brne	.+2      	; 0x6c2 <_Z15uartInputHandlev+0x6c>
     6c0:	67 c1       	rjmp	.+718    	; 0x990 <__stack+0x91>
    {
        token = strtok(UartInput, delimiterCommand);
     6c2:	be 01       	movw	r22, r28
     6c4:	60 59       	subi	r22, 0x90	; 144
     6c6:	7f 4f       	sbci	r23, 0xFF	; 255
     6c8:	81 ef       	ldi	r24, 0xF1	; 241
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	0e 94 49 12 	call	0x2492	; 0x2492 <strtok>
        if(token != NULL) stringCopy(command, token, sizeof(command));
     6d0:	00 97       	sbiw	r24, 0x00	; 0
     6d2:	59 f0       	breq	.+22     	; 0x6ea <_Z15uartInputHandlev+0x94>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *****************************************************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length - 1);
     6d4:	49 e0       	ldi	r20, 0x09	; 9
     6d6:	50 e0       	ldi	r21, 0x00	; 0
     6d8:	bc 01       	movw	r22, r24
     6da:	ce 01       	movw	r24, r28
     6dc:	85 5a       	subi	r24, 0xA5	; 165
     6de:	9f 4f       	sbci	r25, 0xFF	; 255
     6e0:	0e 94 62 12 	call	0x24c4	; 0x24c4 <strncpy>
    Destination[Length-1] = STD_NULL_CHARACTER;
     6e4:	a5 96       	adiw	r28, 0x25	; 37
     6e6:	1f ae       	std	Y+63, r1	; 0x3f
     6e8:	a5 97       	sbiw	r28, 0x25	; 37

    if(strchr(UartInput, delimiterCommand[0]))
    {
        token = strtok(UartInput, delimiterCommand);
        if(token != NULL) stringCopy(command, token, sizeof(command));
        token = strtok(NULL, delimiterCommand);
     6ea:	be 01       	movw	r22, r28
     6ec:	60 59       	subi	r22, 0x90	; 144
     6ee:	7f 4f       	sbci	r23, 0xFF	; 255
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 49 12 	call	0x2492	; 0x2492 <strtok>
        if(token != NULL) stringCopy(valueASCII, token, sizeof(valueASCII));
     6f8:	00 97       	sbiw	r24, 0x00	; 0
     6fa:	51 f0       	breq	.+20     	; 0x710 <_Z15uartInputHandlev+0xba>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *****************************************************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length - 1);
     6fc:	49 e5       	ldi	r20, 0x59	; 89
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	bc 01       	movw	r22, r24
     702:	ce 01       	movw	r24, r28
     704:	01 96       	adiw	r24, 0x01	; 1
     706:	0e 94 62 12 	call	0x24c4	; 0x24c4 <strncpy>
    Destination[Length-1] = STD_NULL_CHARACTER;
     70a:	6b 96       	adiw	r28, 0x1b	; 27
     70c:	1f ae       	std	Y+63, r1	; 0x3f
     70e:	6b 97       	sbiw	r28, 0x1b	; 27
        token = strtok(UartInput, delimiterCommand);
        if(token != NULL) stringCopy(command, token, sizeof(command));
        token = strtok(NULL, delimiterCommand);
        if(token != NULL) stringCopy(valueASCII, token, sizeof(valueASCII));

        if(strcmp(command, "textShift") == 0) {
     710:	69 e1       	ldi	r22, 0x19	; 25
     712:	71 e0       	ldi	r23, 0x01	; 1
     714:	ce 01       	movw	r24, r28
     716:	85 5a       	subi	r24, 0xA5	; 165
     718:	9f 4f       	sbci	r25, 0xFF	; 255
     71a:	0e 94 59 12 	call	0x24b2	; 0x24b2 <strcmp>
     71e:	89 2b       	or	r24, r25
     720:	e9 f4       	brne	.+58     	; 0x75c <_Z15uartInputHandlev+0x106>
            if(LEDMATRIX_STATE_STRING_SHIFT != State) State = LEDMATRIX_STATE_STRING_SHIFT;
     722:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <State>
     726:	82 30       	cpi	r24, 0x02	; 2
     728:	19 f0       	breq	.+6      	; 0x730 <_Z15uartInputHandlev+0xda>
     72a:	82 e0       	ldi	r24, 0x02	; 2
     72c:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <State>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *****************************************************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length - 1);
     730:	49 e5       	ldi	r20, 0x59	; 89
     732:	50 e0       	ldi	r21, 0x00	; 0
     734:	be 01       	movw	r22, r28
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	86 e9       	ldi	r24, 0x96	; 150
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	0e 94 62 12 	call	0x24c4	; 0x24c4 <strncpy>
    Destination[Length-1] = STD_NULL_CHARACTER;
     742:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <MaxMatrixText+0x59>
        if(token != NULL) stringCopy(valueASCII, token, sizeof(valueASCII));

        if(strcmp(command, "textShift") == 0) {
            if(LEDMATRIX_STATE_STRING_SHIFT != State) State = LEDMATRIX_STATE_STRING_SHIFT;
            stringCopy(MaxMatrixText, valueASCII, sizeof(MaxMatrixText));
            Matrix.clear();
     746:	85 e6       	ldi	r24, 0x65	; 101
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN9MaxMatrix5clearEv>
            Matrix.setTextWithShift(MaxMatrixText);
     74e:	66 e9       	ldi	r22, 0x96	; 150
     750:	71 e0       	ldi	r23, 0x01	; 1
     752:	85 e6       	ldi	r24, 0x65	; 101
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN9MaxMatrix16setTextWithShiftEPc>
     75a:	23 c1       	rjmp	.+582    	; 0x9a2 <__stack+0xa3>
        }
        else if(strcmp(command, "text") == 0) {
     75c:	63 e2       	ldi	r22, 0x23	; 35
     75e:	71 e0       	ldi	r23, 0x01	; 1
     760:	ce 01       	movw	r24, r28
     762:	85 5a       	subi	r24, 0xA5	; 165
     764:	9f 4f       	sbci	r25, 0xFF	; 255
     766:	0e 94 59 12 	call	0x24b2	; 0x24b2 <strcmp>
     76a:	89 2b       	or	r24, r25
     76c:	e9 f4       	brne	.+58     	; 0x7a8 <_Z15uartInputHandlev+0x152>
            if(LEDMATRIX_STATE_READY != State) State = LEDMATRIX_STATE_READY;
     76e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <State>
     772:	81 30       	cpi	r24, 0x01	; 1
     774:	19 f0       	breq	.+6      	; 0x77c <_Z15uartInputHandlev+0x126>
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <State>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *****************************************************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length - 1);
     77c:	49 e5       	ldi	r20, 0x59	; 89
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	be 01       	movw	r22, r28
     782:	6f 5f       	subi	r22, 0xFF	; 255
     784:	7f 4f       	sbci	r23, 0xFF	; 255
     786:	86 e9       	ldi	r24, 0x96	; 150
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	0e 94 62 12 	call	0x24c4	; 0x24c4 <strncpy>
    Destination[Length-1] = STD_NULL_CHARACTER;
     78e:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <MaxMatrixText+0x59>
            Matrix.setTextWithShift(MaxMatrixText);
        }
        else if(strcmp(command, "text") == 0) {
            if(LEDMATRIX_STATE_READY != State) State = LEDMATRIX_STATE_READY;
            stringCopy(MaxMatrixText, valueASCII, sizeof(MaxMatrixText));
            Matrix.clear();
     792:	85 e6       	ldi	r24, 0x65	; 101
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN9MaxMatrix5clearEv>
            Matrix.setText(MaxMatrixText);
     79a:	66 e9       	ldi	r22, 0x96	; 150
     79c:	71 e0       	ldi	r23, 0x01	; 1
     79e:	85 e6       	ldi	r24, 0x65	; 101
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <_ZN9MaxMatrix7setTextEPKc>
     7a6:	fd c0       	rjmp	.+506    	; 0x9a2 <__stack+0xa3>
        }
        else if(strcmp(command, "intensity") == 0) {
     7a8:	68 e2       	ldi	r22, 0x28	; 40
     7aa:	71 e0       	ldi	r23, 0x01	; 1
     7ac:	ce 01       	movw	r24, r28
     7ae:	85 5a       	subi	r24, 0xA5	; 165
     7b0:	9f 4f       	sbci	r25, 0xFF	; 255
     7b2:	0e 94 59 12 	call	0x24b2	; 0x24b2 <strcmp>
     7b6:	89 2b       	or	r24, r25
     7b8:	d1 f4       	brne	.+52     	; 0x7ee <_Z15uartInputHandlev+0x198>
            value = atoi(valueASCII);
     7ba:	ce 01       	movw	r24, r28
     7bc:	01 96       	adiw	r24, 0x01	; 1
     7be:	0e 94 22 12 	call	0x2444	; 0x2444 <atoi>
            if(value >= MAXMATRIX_INTENSITY_MIN_VALUE && value <= MAXMATRIX_INTENSITY_MAX_VALUE) {
     7c2:	9c 01       	movw	r18, r24
     7c4:	21 50       	subi	r18, 0x01	; 1
     7c6:	31 09       	sbc	r19, r1
     7c8:	20 31       	cpi	r18, 0x10	; 16
     7ca:	31 05       	cpc	r19, r1
     7cc:	38 f4       	brcc	.+14     	; 0x7dc <_Z15uartInputHandlev+0x186>
                Matrix.setIntensity(value - 1);
     7ce:	6f ef       	ldi	r22, 0xFF	; 255
     7d0:	68 0f       	add	r22, r24
     7d2:	85 e6       	ldi	r24, 0x65	; 101
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZN9MaxMatrix12setIntensityEh>
     7da:	e3 c0       	rjmp	.+454    	; 0x9a2 <__stack+0xa3>
            } else {
                Serial.println(F("value out of range"));
     7dc:	65 e2       	ldi	r22, 0x25	; 37
     7de:	72 e0       	ldi	r23, 0x02	; 2
     7e0:	81 e6       	ldi	r24, 0x61	; 97
     7e2:	92 e0       	ldi	r25, 0x02	; 2
     7e4:	0e 94 6e 10 	call	0x20dc	; 0x20dc <_ZN5Print7printlnEPK19__FlashStringHelper>
                Serial.println(F("intensity range "TOSTRING(MAXMATRIX_INTENSITY_MIN_VALUE)" ... "TOSTRING(MAXMATRIX_INTENSITY_MAX_VALUE)));
     7e8:	65 ed       	ldi	r22, 0xD5	; 213
     7ea:	71 e0       	ldi	r23, 0x01	; 1
     7ec:	4a c0       	rjmp	.+148    	; 0x882 <_Z15uartInputHandlev+0x22c>
            }
        }
        else if(strcmp(command, "speed") == 0) {
     7ee:	62 e3       	ldi	r22, 0x32	; 50
     7f0:	71 e0       	ldi	r23, 0x01	; 1
     7f2:	ce 01       	movw	r24, r28
     7f4:	85 5a       	subi	r24, 0xA5	; 165
     7f6:	9f 4f       	sbci	r25, 0xFF	; 255
     7f8:	0e 94 59 12 	call	0x24b2	; 0x24b2 <strcmp>
     7fc:	89 2b       	or	r24, r25
     7fe:	11 f5       	brne	.+68     	; 0x844 <_Z15uartInputHandlev+0x1ee>
            value = atoi(valueASCII);
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	0e 94 22 12 	call	0x2444	; 0x2444 <atoi>
            if(value >= MAXMATRIX_SPEED_MIN_VALUE && value <= MAXMATRIX_SPEED_MAX_VALUE) {
     808:	9c 01       	movw	r18, r24
     80a:	21 50       	subi	r18, 0x01	; 1
     80c:	31 09       	sbc	r19, r1
     80e:	24 31       	cpi	r18, 0x14	; 20
     810:	31 05       	cpc	r19, r1
     812:	78 f4       	brcc	.+30     	; 0x832 <_Z15uartInputHandlev+0x1dc>
                Timer1.setPeriod(((long)(MAXMATRIX_SPEED_MAX_VALUE - value + 1) * 5) * 10000);
     814:	a5 e1       	ldi	r26, 0x15	; 21
     816:	b0 e0       	ldi	r27, 0x00	; 0
     818:	a8 1b       	sub	r26, r24
     81a:	b9 0b       	sbc	r27, r25
     81c:	20 e5       	ldi	r18, 0x50	; 80
     81e:	33 ec       	ldi	r19, 0xC3	; 195
     820:	0e 94 06 12 	call	0x240c	; 0x240c <__usmulhisi3>
     824:	ab 01       	movw	r20, r22
     826:	bc 01       	movw	r22, r24
     828:	85 e5       	ldi	r24, 0x55	; 85
     82a:	92 e0       	ldi	r25, 0x02	; 2
     82c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_ZN8TimerOne9setPeriodEl>
     830:	b8 c0       	rjmp	.+368    	; 0x9a2 <__stack+0xa3>
            } else {
                Serial.println(F("value out of range"));
     832:	62 ec       	ldi	r22, 0xC2	; 194
     834:	71 e0       	ldi	r23, 0x01	; 1
     836:	81 e6       	ldi	r24, 0x61	; 97
     838:	92 e0       	ldi	r25, 0x02	; 2
     83a:	0e 94 6e 10 	call	0x20dc	; 0x20dc <_ZN5Print7printlnEPK19__FlashStringHelper>
                Serial.println(F("speed range "TOSTRING(MAXMATRIX_SPEED_MIN_VALUE)" ... "TOSTRING(MAXMATRIX_SPEED_MAX_VALUE)));
     83e:	6e e7       	ldi	r22, 0x7E	; 126
     840:	71 e0       	ldi	r23, 0x01	; 1
     842:	1f c0       	rjmp	.+62     	; 0x882 <_Z15uartInputHandlev+0x22c>
            }
        }
        else if(strcmp(command, "spaceBetweenChars") == 0) {
     844:	68 e3       	ldi	r22, 0x38	; 56
     846:	71 e0       	ldi	r23, 0x01	; 1
     848:	ce 01       	movw	r24, r28
     84a:	85 5a       	subi	r24, 0xA5	; 165
     84c:	9f 4f       	sbci	r25, 0xFF	; 255
     84e:	0e 94 59 12 	call	0x24b2	; 0x24b2 <strcmp>
     852:	89 2b       	or	r24, r25
     854:	d9 f4       	brne	.+54     	; 0x88c <_Z15uartInputHandlev+0x236>
            value = atoi(valueASCII);
     856:	ce 01       	movw	r24, r28
     858:	01 96       	adiw	r24, 0x01	; 1
     85a:	0e 94 22 12 	call	0x2444	; 0x2444 <atoi>
            if(value >= MAXMATRIX_SPACE_BETWEEN_CHARS_MIN_VALUE && value <= MAXMATRIX_SPACE_BETWEEN_CHARS_MAX_VALUE) {
     85e:	8f 3f       	cpi	r24, 0xFF	; 255
     860:	91 05       	cpc	r25, r1
     862:	09 f0       	breq	.+2      	; 0x866 <_Z15uartInputHandlev+0x210>
     864:	30 f4       	brcc	.+12     	; 0x872 <_Z15uartInputHandlev+0x21c>
                    Matrix.setSpaceBetweenChars(value);
     866:	68 2f       	mov	r22, r24
     868:	85 e6       	ldi	r24, 0x65	; 101
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN9MaxMatrix20setSpaceBetweenCharsEh>
     870:	98 c0       	rjmp	.+304    	; 0x9a2 <__stack+0xa3>
                } else {
                Serial.println(F("value out of range"));
     872:	6b e6       	ldi	r22, 0x6B	; 107
     874:	71 e0       	ldi	r23, 0x01	; 1
     876:	81 e6       	ldi	r24, 0x61	; 97
     878:	92 e0       	ldi	r25, 0x02	; 2
     87a:	0e 94 6e 10 	call	0x20dc	; 0x20dc <_ZN5Print7printlnEPK19__FlashStringHelper>
                Serial.println(F("spaceBetweenChars range "TOSTRING(MAXMATRIX_SPACE_BETWEEN_CHARS_MIN_VALUE)" ... "TOSTRING(MAXMATRIX_SPACE_BETWEEN_CHARS_MAX_VALUE)));
     87e:	6f ef       	ldi	r22, 0xFF	; 255
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	81 e6       	ldi	r24, 0x61	; 97
     884:	92 e0       	ldi	r25, 0x02	; 2
     886:	0e 94 6e 10 	call	0x20dc	; 0x20dc <_ZN5Print7printlnEPK19__FlashStringHelper>
     88a:	8b c0       	rjmp	.+278    	; 0x9a2 <__stack+0xa3>
            }
        }
        else if(strcmp(command, "setDot") == 0) {
     88c:	6a e4       	ldi	r22, 0x4A	; 74
     88e:	71 e0       	ldi	r23, 0x01	; 1
     890:	ce 01       	movw	r24, r28
     892:	85 5a       	subi	r24, 0xA5	; 165
     894:	9f 4f       	sbci	r25, 0xFF	; 255
     896:	0e 94 59 12 	call	0x24b2	; 0x24b2 <strcmp>
     89a:	89 2b       	or	r24, r25
     89c:	09 f0       	breq	.+2      	; 0x8a0 <_Z15uartInputHandlev+0x24a>
     89e:	78 c0       	rjmp	.+240    	; 0x990 <__stack+0x91>
            if(LEDMATRIX_STATE_READY != State) {
     8a0:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <State>
     8a4:	81 30       	cpi	r24, 0x01	; 1
     8a6:	39 f0       	breq	.+14     	; 0x8b6 <_Z15uartInputHandlev+0x260>
                State = LEDMATRIX_STATE_READY;
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <State>
                Matrix.clear();
     8ae:	85 e6       	ldi	r24, 0x65	; 101
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN9MaxMatrix5clearEv>
            }
            char columnASCII[3] = "", rowASCII[3] = "", valueDotASCII[3] = "";
     8b6:	ad 96       	adiw	r28, 0x2d	; 45
     8b8:	1f ae       	std	Y+63, r1	; 0x3f
     8ba:	1e ae       	std	Y+62, r1	; 0x3e
     8bc:	ad 97       	sbiw	r28, 0x2d	; 45
     8be:	ae 96       	adiw	r28, 0x2e	; 46
     8c0:	1f ae       	std	Y+63, r1	; 0x3f
     8c2:	ae 97       	sbiw	r28, 0x2e	; 46
     8c4:	aa 96       	adiw	r28, 0x2a	; 42
     8c6:	1f ae       	std	Y+63, r1	; 0x3f
     8c8:	1e ae       	std	Y+62, r1	; 0x3e
     8ca:	aa 97       	sbiw	r28, 0x2a	; 42
     8cc:	ab 96       	adiw	r28, 0x2b	; 43
     8ce:	1f ae       	std	Y+63, r1	; 0x3f
     8d0:	ab 97       	sbiw	r28, 0x2b	; 43
     8d2:	a7 96       	adiw	r28, 0x27	; 39
     8d4:	1f ae       	std	Y+63, r1	; 0x3f
     8d6:	1e ae       	std	Y+62, r1	; 0x3e
     8d8:	a7 97       	sbiw	r28, 0x27	; 39
     8da:	a8 96       	adiw	r28, 0x28	; 40
     8dc:	1f ae       	std	Y+63, r1	; 0x3f
     8de:	a8 97       	sbiw	r28, 0x28	; 40
            token = strtok(valueASCII, delimiterValue);
     8e0:	be 01       	movw	r22, r28
     8e2:	62 59       	subi	r22, 0x92	; 146
     8e4:	7f 4f       	sbci	r23, 0xFF	; 255
     8e6:	ce 01       	movw	r24, r28
     8e8:	01 96       	adiw	r24, 0x01	; 1
     8ea:	0e 94 49 12 	call	0x2492	; 0x2492 <strtok>
            if(token != NULL) stringCopy(columnASCII, token, sizeof(columnASCII));
     8ee:	00 97       	sbiw	r24, 0x00	; 0
     8f0:	59 f0       	breq	.+22     	; 0x908 <__stack+0x9>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *****************************************************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length - 1);
     8f2:	42 e0       	ldi	r20, 0x02	; 2
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	bc 01       	movw	r22, r24
     8f8:	ce 01       	movw	r24, r28
     8fa:	85 59       	subi	r24, 0x95	; 149
     8fc:	9f 4f       	sbci	r25, 0xFF	; 255
     8fe:	0e 94 62 12 	call	0x24c4	; 0x24c4 <strncpy>
    Destination[Length-1] = STD_NULL_CHARACTER;
     902:	ae 96       	adiw	r28, 0x2e	; 46
     904:	1f ae       	std	Y+63, r1	; 0x3f
     906:	ae 97       	sbiw	r28, 0x2e	; 46
                Matrix.clear();
            }
            char columnASCII[3] = "", rowASCII[3] = "", valueDotASCII[3] = "";
            token = strtok(valueASCII, delimiterValue);
            if(token != NULL) stringCopy(columnASCII, token, sizeof(columnASCII));
            token = strtok(NULL, delimiterValue);
     908:	be 01       	movw	r22, r28
     90a:	62 59       	subi	r22, 0x92	; 146
     90c:	7f 4f       	sbci	r23, 0xFF	; 255
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 49 12 	call	0x2492	; 0x2492 <strtok>
            if(token != NULL) stringCopy(rowASCII, token, sizeof(rowASCII));
     916:	00 97       	sbiw	r24, 0x00	; 0
     918:	59 f0       	breq	.+22     	; 0x930 <__stack+0x31>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *****************************************************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length - 1);
     91a:	42 e0       	ldi	r20, 0x02	; 2
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	bc 01       	movw	r22, r24
     920:	ce 01       	movw	r24, r28
     922:	88 59       	subi	r24, 0x98	; 152
     924:	9f 4f       	sbci	r25, 0xFF	; 255
     926:	0e 94 62 12 	call	0x24c4	; 0x24c4 <strncpy>
    Destination[Length-1] = STD_NULL_CHARACTER;
     92a:	ab 96       	adiw	r28, 0x2b	; 43
     92c:	1f ae       	std	Y+63, r1	; 0x3f
     92e:	ab 97       	sbiw	r28, 0x2b	; 43
            char columnASCII[3] = "", rowASCII[3] = "", valueDotASCII[3] = "";
            token = strtok(valueASCII, delimiterValue);
            if(token != NULL) stringCopy(columnASCII, token, sizeof(columnASCII));
            token = strtok(NULL, delimiterValue);
            if(token != NULL) stringCopy(rowASCII, token, sizeof(rowASCII));
            token = strtok(NULL, delimiterValue);
     930:	be 01       	movw	r22, r28
     932:	62 59       	subi	r22, 0x92	; 146
     934:	7f 4f       	sbci	r23, 0xFF	; 255
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 49 12 	call	0x2492	; 0x2492 <strtok>
            if(token != NULL) stringCopy(valueDotASCII, token, sizeof(valueDotASCII));
     93e:	00 97       	sbiw	r24, 0x00	; 0
     940:	59 f0       	breq	.+22     	; 0x958 <__stack+0x59>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *****************************************************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length - 1);
     942:	42 e0       	ldi	r20, 0x02	; 2
     944:	50 e0       	ldi	r21, 0x00	; 0
     946:	bc 01       	movw	r22, r24
     948:	ce 01       	movw	r24, r28
     94a:	8b 59       	subi	r24, 0x9B	; 155
     94c:	9f 4f       	sbci	r25, 0xFF	; 255
     94e:	0e 94 62 12 	call	0x24c4	; 0x24c4 <strncpy>
    Destination[Length-1] = STD_NULL_CHARACTER;
     952:	a8 96       	adiw	r28, 0x28	; 40
     954:	1f ae       	std	Y+63, r1	; 0x3f
     956:	a8 97       	sbiw	r28, 0x28	; 40
            if(token != NULL) stringCopy(columnASCII, token, sizeof(columnASCII));
            token = strtok(NULL, delimiterValue);
            if(token != NULL) stringCopy(rowASCII, token, sizeof(rowASCII));
            token = strtok(NULL, delimiterValue);
            if(token != NULL) stringCopy(valueDotASCII, token, sizeof(valueDotASCII));
            Matrix.setDot(atoi(columnASCII), atoi(rowASCII), atoi(valueDotASCII));
     958:	ce 01       	movw	r24, r28
     95a:	8b 59       	subi	r24, 0x9B	; 155
     95c:	9f 4f       	sbci	r25, 0xFF	; 255
     95e:	0e 94 22 12 	call	0x2444	; 0x2444 <atoi>
     962:	7c 01       	movw	r14, r24
     964:	ce 01       	movw	r24, r28
     966:	88 59       	subi	r24, 0x98	; 152
     968:	9f 4f       	sbci	r25, 0xFF	; 255
     96a:	0e 94 22 12 	call	0x2444	; 0x2444 <atoi>
     96e:	18 2f       	mov	r17, r24
     970:	ce 01       	movw	r24, r28
     972:	85 59       	subi	r24, 0x95	; 149
     974:	9f 4f       	sbci	r25, 0xFF	; 255
     976:	0e 94 22 12 	call	0x2444	; 0x2444 <atoi>
     97a:	21 e0       	ldi	r18, 0x01	; 1
     97c:	ef 28       	or	r14, r15
     97e:	09 f4       	brne	.+2      	; 0x982 <__stack+0x83>
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	41 2f       	mov	r20, r17
     984:	68 2f       	mov	r22, r24
     986:	85 e6       	ldi	r24, 0x65	; 101
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	0e 94 1e 0a 	call	0x143c	; 0x143c <_ZN9MaxMatrix6setDotEhhb>
     98e:	09 c0       	rjmp	.+18     	; 0x9a2 <__stack+0xa3>
        }
        else {
            Serial.println(command);
     990:	be 01       	movw	r22, r28
     992:	65 5a       	subi	r22, 0xA5	; 165
     994:	7f 4f       	sbci	r23, 0xFF	; 255
     996:	81 e6       	ldi	r24, 0x61	; 97
     998:	92 e0       	ldi	r25, 0x02	; 2
     99a:	0e 94 80 10 	call	0x2100	; 0x2100 <_ZN5Print7printlnEPKc>
            printHelp(); 
     99e:	0e 94 13 03 	call	0x626	; 0x626 <_Z9printHelpv>
        }
    } else {
        Serial.println(command);
        printHelp(); 
    }
}
     9a2:	cf 58       	subi	r28, 0x8F	; 143
     9a4:	df 4f       	sbci	r29, 0xFF	; 255
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	f8 94       	cli
     9aa:	de bf       	out	0x3e, r29	; 62
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	cd bf       	out	0x3d, r28	; 61
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	1f 91       	pop	r17
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	08 95       	ret

000009bc <loop>:
/******************************************************************************************************************************************************
 *  ARDUINO loop
 *****************************************************************************************************************************************************/
void loop()
{ 
    if (UartInputComplete)
     9bc:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <UartInputComplete>
     9c0:	88 23       	and	r24, r24
     9c2:	31 f0       	breq	.+12     	; 0x9d0 <loop+0x14>
    {
        uartInputHandle();
     9c4:	0e 94 2b 03 	call	0x656	; 0x656 <_Z15uartInputHandlev>
        // clear the string:
        UartInput[0] = STD_NULL_CHARACTER;
     9c8:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <UartInput>
        UartInputComplete = false;
     9cc:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <UartInputComplete>
    }

    if(Timer1Overflow && State == LEDMATRIX_STATE_STRING_SHIFT)
     9d0:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <Timer1Overflow>
     9d4:	88 23       	and	r24, r24
     9d6:	c9 f0       	breq	.+50     	; 0xa0a <loop+0x4e>
     9d8:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <State>
     9dc:	82 30       	cpi	r24, 0x02	; 2
     9de:	a9 f4       	brne	.+42     	; 0xa0a <loop+0x4e>
    {
        if(Matrix.getState() == MAXMATRIX_STATE_STRING_SHIFT)
     9e0:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <Matrix+0x3>
     9e4:	83 30       	cpi	r24, 0x03	; 3
     9e6:	21 f4       	brne	.+8      	; 0x9f0 <loop+0x34>
            Matrix.shiftTask();
     9e8:	85 e6       	ldi	r24, 0x65	; 101
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_ZN9MaxMatrix9shiftTaskEv>
        if(Matrix.getState() == MAXMATRIX_STATE_READY)
     9f0:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <Matrix+0x3>
     9f4:	82 30       	cpi	r24, 0x02	; 2
     9f6:	31 f4       	brne	.+12     	; 0xa04 <loop+0x48>
        {
            Matrix.setTextWithShift(MaxMatrixText);
     9f8:	66 e9       	ldi	r22, 0x96	; 150
     9fa:	71 e0       	ldi	r23, 0x01	; 1
     9fc:	85 e6       	ldi	r24, 0x65	; 101
     9fe:	91 e0       	ldi	r25, 0x01	; 1
     a00:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN9MaxMatrix16setTextWithShiftEPc>
        }
        Timer1Overflow = false;
     a04:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <Timer1Overflow>
    }
}
     a08:	08 95       	ret
     a0a:	08 95       	ret

00000a0c <_GLOBAL__sub_I_UartInput>:
 *****************************************************************************************************************************************************/
char UartInput[UART_INPUT_LENGTH];                  // buffer for incoming UART data
boolean UartInputComplete;                          // flag UART string is complete
char MaxMatrixText[MAXMATRIX_MAX_TEXT_LENGTH];      // current Matrix Text
volatile bool Timer1Overflow;                       // flag Timer1 overflow
MaxMatrix Matrix(MAXMATRIX_DATA_PIN, MAXMATRIX_CS_PIN, MAXMATRIX_CLOCK_PIN);
     a0c:	2b e0       	ldi	r18, 0x0B	; 11
     a0e:	4a e0       	ldi	r20, 0x0A	; 10
     a10:	6c e0       	ldi	r22, 0x0C	; 12
     a12:	85 e6       	ldi	r24, 0x65	; 101
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	0c 94 39 05 	jmp	0xa72	; 0xa72 <_ZN9MaxMatrixC1Ehhh>

00000a1a <_GLOBAL__sub_D_UartInput>:
     a1a:	85 e6       	ldi	r24, 0x65	; 101
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	0c 94 56 05 	jmp	0xaac	; 0xaac <_ZN9MaxMatrixD1Ev>

00000a22 <_Z11serialEventv>:
 *  \details        this function saves incoming UART signs into UART buffer.
 *                  After receiving new line, string is complete and flag will be set.
 *  \pre            will be called at the end of the main function             
 *****************************************************************************************************************************************************/
void serialEvent() 
{
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
        // if the incoming character is a newline, set a flag
        if (inChar == '\n') {
            UartInputComplete = true;
        } else {
            // check for free space in buffer
            int UartInputLength = strlen(UartInput);
     a28:	c1 ef       	ldi	r28, 0xF1	; 241
     a2a:	d1 e0       	ldi	r29, 0x01	; 1
    {
        // get the new byte from UART
        char inChar = (char) Serial.read();
        // if the incoming character is a newline, set a flag
        if (inChar == '\n') {
            UartInputComplete = true;
     a2c:	11 e0       	ldi	r17, 0x01	; 1
 *                  After receiving new line, string is complete and flag will be set.
 *  \pre            will be called at the end of the main function             
 *****************************************************************************************************************************************************/
void serialEvent() 
{
    while (Serial.available()) 
     a2e:	81 e6       	ldi	r24, 0x61	; 97
     a30:	92 e0       	ldi	r25, 0x02	; 2
     a32:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <_ZN14HardwareSerial9availableEv>
     a36:	89 2b       	or	r24, r25
     a38:	c1 f0       	breq	.+48     	; 0xa6a <_Z11serialEventv+0x48>
    {
        // get the new byte from UART
        char inChar = (char) Serial.read();
     a3a:	81 e6       	ldi	r24, 0x61	; 97
     a3c:	92 e0       	ldi	r25, 0x02	; 2
     a3e:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <_ZN14HardwareSerial4readEv>
        // if the incoming character is a newline, set a flag
        if (inChar == '\n') {
     a42:	8a 30       	cpi	r24, 0x0A	; 10
     a44:	19 f4       	brne	.+6      	; 0xa4c <_Z11serialEventv+0x2a>
            UartInputComplete = true;
     a46:	10 93 f0 01 	sts	0x01F0, r17	; 0x8001f0 <UartInputComplete>
     a4a:	f1 cf       	rjmp	.-30     	; 0xa2e <_Z11serialEventv+0xc>
        } else {
            // check for free space in buffer
            int UartInputLength = strlen(UartInput);
     a4c:	fe 01       	movw	r30, r28
     a4e:	01 90       	ld	r0, Z+
     a50:	00 20       	and	r0, r0
     a52:	e9 f7       	brne	.-6      	; 0xa4e <_Z11serialEventv+0x2c>
     a54:	31 97       	sbiw	r30, 0x01	; 1
     a56:	e1 5f       	subi	r30, 0xF1	; 241
     a58:	f1 40       	sbci	r31, 0x01	; 1
            if(UartInputLength < UART_INPUT_LENGTH-1)
     a5a:	e3 36       	cpi	r30, 0x63	; 99
     a5c:	f1 05       	cpc	r31, r1
     a5e:	3c f7       	brge	.-50     	; 0xa2e <_Z11serialEventv+0xc>
            {
                // save new char
                UartInput[UartInputLength] = inChar;
     a60:	ef 50       	subi	r30, 0x0F	; 15
     a62:	fe 4f       	sbci	r31, 0xFE	; 254
     a64:	80 83       	st	Z, r24
                UartInput[UartInputLength+1] = STD_NULL_CHARACTER;
     a66:	11 82       	std	Z+1, r1	; 0x01
     a68:	e2 cf       	rjmp	.-60     	; 0xa2e <_Z11serialEventv+0xc>
            }
        }
    }
} /* serialEvent */
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	1f 91       	pop	r17
     a70:	08 95       	ret

00000a72 <_ZN9MaxMatrixC1Ehhh>:
        }
        return E_OK;
    } else {
        return E_NOT_OK;
    }
} /* setRowOnAllModulesLL */
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	fc 01       	movw	r30, r24
     a78:	60 83       	st	Z, r22
     a7a:	41 83       	std	Z+1, r20	; 0x01
     a7c:	22 83       	std	Z+2, r18	; 0x02
     a7e:	17 a6       	std	Z+47, r1	; 0x2f
     a80:	16 a6       	std	Z+46, r1	; 0x2e
     a82:	14 a6       	std	Z+44, r1	; 0x2c
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	85 a7       	std	Z+45, r24	; 0x2d
     a88:	14 82       	std	Z+4, r1	; 0x04
     a8a:	13 82       	std	Z+3, r1	; 0x03
     a8c:	ef 01       	movw	r28, r30
     a8e:	25 96       	adiw	r28, 0x05	; 5
     a90:	df 01       	movw	r26, r30
     a92:	95 96       	adiw	r26, 0x25	; 37
     a94:	19 92       	st	Y+, r1
     a96:	ca 17       	cp	r28, r26
     a98:	db 07       	cpc	r29, r27
     a9a:	e1 f7       	brne	.-8      	; 0xa94 <_ZN9MaxMatrixC1Ehhh+0x22>
     a9c:	bc 96       	adiw	r30, 0x2c	; 44
     a9e:	1d 92       	st	X+, r1
     aa0:	ae 17       	cp	r26, r30
     aa2:	bf 07       	cpc	r27, r31
     aa4:	e1 f7       	brne	.-8      	; 0xa9e <_ZN9MaxMatrixC1Ehhh+0x2c>
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	08 95       	ret

00000aac <_ZN9MaxMatrixD1Ev>:
     aac:	08 95       	ret

00000aae <_ZN9MaxMatrix13RegisterWriteEhh>:
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	ec 01       	movw	r28, r24
     abc:	e6 2e       	mov	r14, r22
     abe:	f4 2e       	mov	r15, r20
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	89 81       	ldd	r24, Y+1	; 0x01
     ac4:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <digitalWrite>
     ac8:	04 e0       	ldi	r16, 0x04	; 4
     aca:	10 e0       	ldi	r17, 0x00	; 0
     acc:	2e 2d       	mov	r18, r14
     ace:	41 e0       	ldi	r20, 0x01	; 1
     ad0:	6a 81       	ldd	r22, Y+2	; 0x02
     ad2:	88 81       	ld	r24, Y
     ad4:	0e 94 ab 11 	call	0x2356	; 0x2356 <shiftOut>
     ad8:	2f 2d       	mov	r18, r15
     ada:	41 e0       	ldi	r20, 0x01	; 1
     adc:	6a 81       	ldd	r22, Y+2	; 0x02
     ade:	88 81       	ld	r24, Y
     ae0:	0e 94 ab 11 	call	0x2356	; 0x2356 <shiftOut>
     ae4:	01 50       	subi	r16, 0x01	; 1
     ae6:	11 09       	sbc	r17, r1
     ae8:	89 f7       	brne	.-30     	; 0xacc <_ZN9MaxMatrix13RegisterWriteEhh+0x1e>
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <digitalWrite>
     af2:	61 e0       	ldi	r22, 0x01	; 1
     af4:	89 81       	ldd	r24, Y+1	; 0x01
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	0f 91       	pop	r16
     afe:	ff 90       	pop	r15
     b00:	ef 90       	pop	r14
     b02:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <digitalWrite>

00000b06 <_ZN9MaxMatrix12setIntensityEh>:
     b06:	60 31       	cpi	r22, 0x10	; 16
     b08:	30 f4       	brcc	.+12     	; 0xb16 <_ZN9MaxMatrix12setIntensityEh+0x10>
     b0a:	46 2f       	mov	r20, r22
     b0c:	6a e0       	ldi	r22, 0x0A	; 10
     b0e:	0e 94 57 05 	call	0xaae	; 0xaae <_ZN9MaxMatrix13RegisterWriteEhh>
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	08 95       	ret
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	08 95       	ret

00000b1a <_ZN9MaxMatrix16setTextWithShiftEPc>:
     b1a:	fc 01       	movw	r30, r24
     b1c:	61 15       	cp	r22, r1
     b1e:	71 05       	cpc	r23, r1
     b20:	39 f0       	breq	.+14     	; 0xb30 <_ZN9MaxMatrix16setTextWithShiftEPc+0x16>
     b22:	14 a6       	std	Z+44, r1	; 0x2c
     b24:	77 a7       	std	Z+47, r23	; 0x2f
     b26:	66 a7       	std	Z+46, r22	; 0x2e
     b28:	83 e0       	ldi	r24, 0x03	; 3
     b2a:	83 83       	std	Z+3, r24	; 0x03
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	08 95       	ret
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	08 95       	ret

00000b34 <_ZN9MaxMatrix9getSpriteEhPA7_h>:
     b34:	65 36       	cpi	r22, 0x65	; 101
     b36:	68 f4       	brcc	.+26     	; 0xb52 <_ZN9MaxMatrix9getSpriteEhPA7_h+0x1e>
     b38:	ca 01       	movw	r24, r20
     b3a:	27 e0       	ldi	r18, 0x07	; 7
     b3c:	62 9f       	mul	r22, r18
     b3e:	b0 01       	movw	r22, r0
     b40:	11 24       	eor	r1, r1
     b42:	68 5c       	subi	r22, 0xC8	; 200
     b44:	7d 4f       	sbci	r23, 0xFD	; 253
     b46:	47 e0       	ldi	r20, 0x07	; 7
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	0e 94 40 12 	call	0x2480	; 0x2480 <memcpy_P>
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	08 95       	ret
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	08 95       	ret

00000b56 <_ZN9MaxMatrix20setSpaceBetweenCharsEh>:
     b56:	fc 01       	movw	r30, r24
     b58:	65 a7       	std	Z+45, r22	; 0x2d
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	08 95       	ret

00000b5e <_ZN9MaxMatrix11reverseByteEh>:
     b5e:	96 2f       	mov	r25, r22
     b60:	92 95       	swap	r25
     b62:	69 2f       	mov	r22, r25
     b64:	6c 7c       	andi	r22, 0xCC	; 204
     b66:	86 2f       	mov	r24, r22
     b68:	86 95       	lsr	r24
     b6a:	86 95       	lsr	r24
     b6c:	93 73       	andi	r25, 0x33	; 51
     b6e:	24 e0       	ldi	r18, 0x04	; 4
     b70:	92 9f       	mul	r25, r18
     b72:	b0 01       	movw	r22, r0
     b74:	11 24       	eor	r1, r1
     b76:	68 2b       	or	r22, r24
     b78:	86 2f       	mov	r24, r22
     b7a:	8a 7a       	andi	r24, 0xAA	; 170
     b7c:	86 95       	lsr	r24
     b7e:	65 75       	andi	r22, 0x55	; 85
     b80:	66 0f       	add	r22, r22
     b82:	86 2b       	or	r24, r22
     b84:	08 95       	ret

00000b86 <_ZN9MaxMatrix6reloadEv>:
     b86:	af 92       	push	r10
     b88:	bf 92       	push	r11
     b8a:	cf 92       	push	r12
     b8c:	df 92       	push	r13
     b8e:	ef 92       	push	r14
     b90:	ff 92       	push	r15
     b92:	1f 93       	push	r17
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	ec 01       	movw	r28, r24
     b9a:	7c 01       	movw	r14, r24
     b9c:	11 e0       	ldi	r17, 0x01	; 1
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <digitalWrite>
     ba6:	57 01       	movw	r10, r14
     ba8:	84 e0       	ldi	r24, 0x04	; 4
     baa:	c8 2e       	mov	r12, r24
     bac:	d1 2c       	mov	r13, r1
     bae:	21 2f       	mov	r18, r17
     bb0:	41 e0       	ldi	r20, 0x01	; 1
     bb2:	6a 81       	ldd	r22, Y+2	; 0x02
     bb4:	88 81       	ld	r24, Y
     bb6:	0e 94 ab 11 	call	0x2356	; 0x2356 <shiftOut>
     bba:	f5 01       	movw	r30, r10
     bbc:	25 81       	ldd	r18, Z+5	; 0x05
     bbe:	41 e0       	ldi	r20, 0x01	; 1
     bc0:	6a 81       	ldd	r22, Y+2	; 0x02
     bc2:	88 81       	ld	r24, Y
     bc4:	0e 94 ab 11 	call	0x2356	; 0x2356 <shiftOut>
     bc8:	f1 e0       	ldi	r31, 0x01	; 1
     bca:	cf 1a       	sub	r12, r31
     bcc:	d1 08       	sbc	r13, r1
     bce:	88 e0       	ldi	r24, 0x08	; 8
     bd0:	a8 0e       	add	r10, r24
     bd2:	b1 1c       	adc	r11, r1
     bd4:	c1 14       	cp	r12, r1
     bd6:	d1 04       	cpc	r13, r1
     bd8:	51 f7       	brne	.-44     	; 0xbae <_ZN9MaxMatrix6reloadEv+0x28>
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <digitalWrite>
     be2:	61 e0       	ldi	r22, 0x01	; 1
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <digitalWrite>
     bea:	ef ef       	ldi	r30, 0xFF	; 255
     bec:	ee 1a       	sub	r14, r30
     bee:	fe 0a       	sbc	r15, r30
     bf0:	1f 5f       	subi	r17, 0xFF	; 255
     bf2:	19 30       	cpi	r17, 0x09	; 9
     bf4:	a1 f6       	brne	.-88     	; 0xb9e <_ZN9MaxMatrix6reloadEv+0x18>
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	ff 90       	pop	r15
     bfe:	ef 90       	pop	r14
     c00:	df 90       	pop	r13
     c02:	cf 90       	pop	r12
     c04:	bf 90       	pop	r11
     c06:	af 90       	pop	r10
     c08:	08 95       	ret

00000c0a <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType>:
     c0a:	2f 92       	push	r2
     c0c:	3f 92       	push	r3
     c0e:	4f 92       	push	r4
     c10:	5f 92       	push	r5
     c12:	6f 92       	push	r6
     c14:	7f 92       	push	r7
     c16:	8f 92       	push	r8
     c18:	9f 92       	push	r9
     c1a:	af 92       	push	r10
     c1c:	bf 92       	push	r11
     c1e:	cf 92       	push	r12
     c20:	df 92       	push	r13
     c22:	ef 92       	push	r14
     c24:	ff 92       	push	r15
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	aa 97       	sbiw	r28, 0x2a	; 42
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	de bf       	out	0x3e, r29	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	cd bf       	out	0x3d, r28	; 61
     c3e:	1c 01       	movw	r2, r24
     c40:	fc 01       	movw	r30, r24
     c42:	84 81       	ldd	r24, Z+4	; 0x04
     c44:	86 17       	cp	r24, r22
     c46:	09 f4       	brne	.+2      	; 0xc4a <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x40>
     c48:	96 c1       	rjmp	.+812    	; 0xf76 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x36c>
     c4a:	81 11       	cpse	r24, r1
     c4c:	04 c0       	rjmp	.+8      	; 0xc56 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x4c>
     c4e:	61 30       	cpi	r22, 0x01	; 1
     c50:	99 f0       	breq	.+38     	; 0xc78 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x6e>
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	7c c0       	rjmp	.+248    	; 0xd4e <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x144>
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	21 f4       	brne	.+8      	; 0xc62 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x58>
     c5a:	62 30       	cpi	r22, 0x02	; 2
     c5c:	69 f0       	breq	.+26     	; 0xc78 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x6e>
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	83 c0       	rjmp	.+262    	; 0xd68 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x15e>
     c62:	82 30       	cpi	r24, 0x02	; 2
     c64:	21 f4       	brne	.+8      	; 0xc6e <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x64>
     c66:	63 30       	cpi	r22, 0x03	; 3
     c68:	39 f0       	breq	.+14     	; 0xc78 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x6e>
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	83 c0       	rjmp	.+262    	; 0xd74 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x16a>
     c6e:	83 30       	cpi	r24, 0x03	; 3
     c70:	09 f0       	breq	.+2      	; 0xc74 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x6a>
     c72:	77 c0       	rjmp	.+238    	; 0xd62 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x158>
     c74:	61 11       	cpse	r22, r1
     c76:	81 c0       	rjmp	.+258    	; 0xd7a <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x170>
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	81 2c       	mov	r8, r1
     c7e:	91 2c       	mov	r9, r1
     c80:	54 01       	movw	r10, r8
     c82:	83 94       	inc	r8
     c84:	72 2f       	mov	r23, r18
     c86:	a9 01       	movw	r20, r18
     c88:	49 5f       	subi	r20, 0xF9	; 249
     c8a:	5f 4f       	sbci	r21, 0xFF	; 255
     c8c:	5c a3       	std	Y+36, r21	; 0x24
     c8e:	4b a3       	std	Y+35, r20	; 0x23
     c90:	e7 e0       	ldi	r30, 0x07	; 7
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	fe a3       	std	Y+38, r31	; 0x26
     c96:	ed a3       	std	Y+37, r30	; 0x25
     c98:	69 01       	movw	r12, r18
     c9a:	f8 e0       	ldi	r31, 0x08	; 8
     c9c:	cf 0e       	add	r12, r31
     c9e:	d1 1c       	adc	r13, r1
     ca0:	41 e0       	ldi	r20, 0x01	; 1
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	0d a0       	ldd	r0, Y+37	; 0x25
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0xa2>
     ca8:	44 0f       	add	r20, r20
     caa:	55 1f       	adc	r21, r21
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x9e>
     cb0:	5a a3       	std	Y+34, r21	; 0x22
     cb2:	49 a3       	std	Y+33, r20	; 0x21
     cb4:	81 01       	movw	r16, r2
     cb6:	0c 0d       	add	r16, r12
     cb8:	1d 1d       	adc	r17, r13
     cba:	eb a0       	ldd	r14, Y+35	; 0x23
     cbc:	fc a0       	ldd	r15, Y+36	; 0x24
     cbe:	97 e0       	ldi	r25, 0x07	; 7
     cc0:	a1 e0       	ldi	r26, 0x01	; 1
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	ac 0f       	add	r26, r28
     cc6:	bd 1f       	adc	r27, r29
     cc8:	a7 0f       	add	r26, r23
     cca:	b1 1d       	adc	r27, r1
     ccc:	e2 16       	cp	r14, r18
     cce:	f3 06       	cpc	r15, r19
     cd0:	5c f1       	brlt	.+86     	; 0xd28 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x11e>
     cd2:	f8 01       	movw	r30, r16
     cd4:	44 81       	ldd	r20, Z+4	; 0x04
     cd6:	50 e0       	ldi	r21, 0x00	; 0
     cd8:	e9 a1       	ldd	r30, Y+33	; 0x21
     cda:	fa a1       	ldd	r31, Y+34	; 0x22
     cdc:	4e 23       	and	r20, r30
     cde:	5f 23       	and	r21, r31
     ce0:	45 2b       	or	r20, r21
     ce2:	69 f0       	breq	.+26     	; 0xcfe <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0xf4>
     ce4:	4c 91       	ld	r20, X
     ce6:	24 01       	movw	r4, r8
     ce8:	35 01       	movw	r6, r10
     cea:	09 2e       	mov	r0, r25
     cec:	04 c0       	rjmp	.+8      	; 0xcf6 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0xec>
     cee:	44 0c       	add	r4, r4
     cf0:	55 1c       	adc	r5, r5
     cf2:	66 1c       	adc	r6, r6
     cf4:	77 1c       	adc	r7, r7
     cf6:	0a 94       	dec	r0
     cf8:	d2 f7       	brpl	.-12     	; 0xcee <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0xe4>
     cfa:	44 2a       	or	r4, r20
     cfc:	0d c0       	rjmp	.+26     	; 0xd18 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x10e>
     cfe:	24 01       	movw	r4, r8
     d00:	35 01       	movw	r6, r10
     d02:	09 2e       	mov	r0, r25
     d04:	04 c0       	rjmp	.+8      	; 0xd0e <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x104>
     d06:	44 0c       	add	r4, r4
     d08:	55 1c       	adc	r5, r5
     d0a:	66 1c       	adc	r6, r6
     d0c:	77 1c       	adc	r7, r7
     d0e:	0a 94       	dec	r0
     d10:	d2 f7       	brpl	.-12     	; 0xd06 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0xfc>
     d12:	40 94       	com	r4
     d14:	4c 91       	ld	r20, X
     d16:	44 22       	and	r4, r20
     d18:	4c 92       	st	X, r4
     d1a:	91 50       	subi	r25, 0x01	; 1
     d1c:	f1 e0       	ldi	r31, 0x01	; 1
     d1e:	ef 1a       	sub	r14, r31
     d20:	f1 08       	sbc	r15, r1
     d22:	01 50       	subi	r16, 0x01	; 1
     d24:	11 09       	sbc	r17, r1
     d26:	d2 cf       	rjmp	.-92     	; 0xccc <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0xc2>
     d28:	7f 5f       	subi	r23, 0xFF	; 255
     d2a:	4d a1       	ldd	r20, Y+37	; 0x25
     d2c:	5e a1       	ldd	r21, Y+38	; 0x26
     d2e:	41 50       	subi	r20, 0x01	; 1
     d30:	51 09       	sbc	r21, r1
     d32:	5e a3       	std	Y+38, r21	; 0x26
     d34:	4d a3       	std	Y+37, r20	; 0x25
     d36:	4f 3f       	cpi	r20, 0xFF	; 255
     d38:	5f 4f       	sbci	r21, 0xFF	; 255
     d3a:	09 f0       	breq	.+2      	; 0xd3e <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x134>
     d3c:	b1 cf       	rjmp	.-158    	; 0xca0 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x96>
     d3e:	96 01       	movw	r18, r12
     d40:	20 32       	cpi	r18, 0x20	; 32
     d42:	31 05       	cpc	r19, r1
     d44:	09 f0       	breq	.+2      	; 0xd48 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x13e>
     d46:	9e cf       	rjmp	.-196    	; 0xc84 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x7a>
     d48:	90 e2       	ldi	r25, 0x20	; 32
     d4a:	81 11       	cpse	r24, r1
     d4c:	0b c0       	rjmp	.+22     	; 0xd64 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x15a>
     d4e:	62 30       	cpi	r22, 0x02	; 2
     d50:	09 f0       	breq	.+2      	; 0xd54 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x14a>
     d52:	71 c0       	rjmp	.+226    	; 0xe36 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x22c>
     d54:	27 e0       	ldi	r18, 0x07	; 7
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	41 2c       	mov	r4, r1
     d5a:	51 2c       	mov	r5, r1
     d5c:	32 01       	movw	r6, r4
     d5e:	43 94       	inc	r4
     d60:	1b c0       	rjmp	.+54     	; 0xd98 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x18e>
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	81 30       	cpi	r24, 0x01	; 1
     d66:	21 f4       	brne	.+8      	; 0xd70 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x166>
     d68:	63 30       	cpi	r22, 0x03	; 3
     d6a:	09 f0       	breq	.+2      	; 0xd6e <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x164>
     d6c:	75 c0       	rjmp	.+234    	; 0xe58 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x24e>
     d6e:	f2 cf       	rjmp	.-28     	; 0xd54 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x14a>
     d70:	82 30       	cpi	r24, 0x02	; 2
     d72:	29 f4       	brne	.+10     	; 0xd7e <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x174>
     d74:	66 23       	and	r22, r22
     d76:	71 f3       	breq	.-36     	; 0xd54 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x14a>
     d78:	7b c0       	rjmp	.+246    	; 0xe70 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x266>
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	03 c0       	rjmp	.+6      	; 0xd84 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x17a>
     d7e:	83 30       	cpi	r24, 0x03	; 3
     d80:	09 f0       	breq	.+2      	; 0xd84 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x17a>
     d82:	57 c0       	rjmp	.+174    	; 0xe32 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x228>
     d84:	61 30       	cpi	r22, 0x01	; 1
     d86:	09 f0       	breq	.+2      	; 0xd8a <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x180>
     d88:	78 c0       	rjmp	.+240    	; 0xe7a <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x270>
     d8a:	e4 cf       	rjmp	.-56     	; 0xd54 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x14a>
     d8c:	28 5f       	subi	r18, 0xF8	; 248
     d8e:	3f 4f       	sbci	r19, 0xFF	; 255
     d90:	27 32       	cpi	r18, 0x27	; 39
     d92:	31 05       	cpc	r19, r1
     d94:	09 f4       	brne	.+2      	; 0xd98 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x18e>
     d96:	4d c0       	rjmp	.+154    	; 0xe32 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x228>
     d98:	a9 01       	movw	r20, r18
     d9a:	69 01       	movw	r12, r18
     d9c:	e7 e0       	ldi	r30, 0x07	; 7
     d9e:	ce 1a       	sub	r12, r30
     da0:	d1 08       	sbc	r13, r1
     da2:	f9 01       	movw	r30, r18
     da4:	31 96       	adiw	r30, 0x01	; 1
     da6:	e2 0d       	add	r30, r2
     da8:	f3 1d       	adc	r31, r3
     daa:	4c 15       	cp	r20, r12
     dac:	5d 05       	cpc	r21, r13
     dae:	74 f3       	brlt	.-36     	; 0xd8c <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x182>
     db0:	e4 80       	ldd	r14, Z+4	; 0x04
     db2:	f1 2c       	mov	r15, r1
     db4:	00 e0       	ldi	r16, 0x00	; 0
     db6:	10 e0       	ldi	r17, 0x00	; 0
     db8:	77 e0       	ldi	r23, 0x07	; 7
     dba:	a1 e0       	ldi	r26, 0x01	; 1
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	ac 0f       	add	r26, r28
     dc0:	bd 1f       	adc	r27, r29
     dc2:	a9 0f       	add	r26, r25
     dc4:	b1 1d       	adc	r27, r1
     dc6:	57 01       	movw	r10, r14
     dc8:	00 2e       	mov	r0, r16
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x1c6>
     dcc:	b5 94       	asr	r11
     dce:	a7 94       	ror	r10
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x1c2>
     dd4:	a0 fe       	sbrs	r10, 0
     dd6:	15 c0       	rjmp	.+42     	; 0xe02 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x1f8>
     dd8:	8c 90       	ld	r8, X
     dda:	8b a2       	std	Y+35, r8	; 0x23
     ddc:	53 01       	movw	r10, r6
     dde:	42 01       	movw	r8, r4
     de0:	07 2e       	mov	r0, r23
     de2:	04 c0       	rjmp	.+8      	; 0xdec <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x1e2>
     de4:	88 0c       	add	r8, r8
     de6:	99 1c       	adc	r9, r9
     de8:	aa 1c       	adc	r10, r10
     dea:	bb 1c       	adc	r11, r11
     dec:	0a 94       	dec	r0
     dee:	d2 f7       	brpl	.-12     	; 0xde4 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x1da>
     df0:	8f a2       	std	Y+39, r8	; 0x27
     df2:	98 a6       	std	Y+40, r9	; 0x28
     df4:	a9 a6       	std	Y+41, r10	; 0x29
     df6:	ba a6       	std	Y+42, r11	; 0x2a
     df8:	b8 2c       	mov	r11, r8
     dfa:	9b a0       	ldd	r9, Y+35	; 0x23
     dfc:	b9 28       	or	r11, r9
     dfe:	bc 92       	st	X, r11
     e00:	0e c0       	rjmp	.+28     	; 0xe1e <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x214>
     e02:	53 01       	movw	r10, r6
     e04:	42 01       	movw	r8, r4
     e06:	07 2e       	mov	r0, r23
     e08:	04 c0       	rjmp	.+8      	; 0xe12 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x208>
     e0a:	88 0c       	add	r8, r8
     e0c:	99 1c       	adc	r9, r9
     e0e:	aa 1c       	adc	r10, r10
     e10:	bb 1c       	adc	r11, r11
     e12:	0a 94       	dec	r0
     e14:	d2 f7       	brpl	.-12     	; 0xe0a <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x200>
     e16:	80 94       	com	r8
     e18:	bc 90       	ld	r11, X
     e1a:	8b 20       	and	r8, r11
     e1c:	8c 92       	st	X, r8
     e1e:	71 50       	subi	r23, 0x01	; 1
     e20:	0f 5f       	subi	r16, 0xFF	; 255
     e22:	1f 4f       	sbci	r17, 0xFF	; 255
     e24:	7f 3f       	cpi	r23, 0xFF	; 255
     e26:	79 f6       	brne	.-98     	; 0xdc6 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x1bc>
     e28:	9f 5f       	subi	r25, 0xFF	; 255
     e2a:	41 50       	subi	r20, 0x01	; 1
     e2c:	51 09       	sbc	r21, r1
     e2e:	31 97       	sbiw	r30, 0x01	; 1
     e30:	bc cf       	rjmp	.-136    	; 0xdaa <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x1a0>
     e32:	81 11       	cpse	r24, r1
     e34:	0f c0       	rjmp	.+30     	; 0xe54 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x24a>
     e36:	63 30       	cpi	r22, 0x03	; 3
     e38:	89 f4       	brne	.+34     	; 0xe5c <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x252>
     e3a:	71 01       	movw	r14, r2
     e3c:	28 e0       	ldi	r18, 0x08	; 8
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	3a a3       	std	Y+34, r19	; 0x22
     e42:	29 a3       	std	Y+33, r18	; 0x21
     e44:	cc 24       	eor	r12, r12
     e46:	c3 94       	inc	r12
     e48:	d1 2c       	mov	r13, r1
     e4a:	41 2c       	mov	r4, r1
     e4c:	51 2c       	mov	r5, r1
     e4e:	32 01       	movw	r6, r4
     e50:	43 94       	inc	r4
     e52:	43 c0       	rjmp	.+134    	; 0xeda <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x2d0>
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	51 f4       	brne	.+20     	; 0xe6c <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x262>
     e58:	66 23       	and	r22, r22
     e5a:	79 f3       	breq	.-34     	; 0xe3a <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x230>
     e5c:	f1 01       	movw	r30, r2
     e5e:	64 83       	std	Z+4, r22	; 0x04
     e60:	de 01       	movw	r26, r28
     e62:	11 96       	adiw	r26, 0x01	; 1
     e64:	35 96       	adiw	r30, 0x05	; 5
     e66:	c1 01       	movw	r24, r2
     e68:	85 96       	adiw	r24, 0x25	; 37
     e6a:	65 c0       	rjmp	.+202    	; 0xf36 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x32c>
     e6c:	82 30       	cpi	r24, 0x02	; 2
     e6e:	19 f4       	brne	.+6      	; 0xe76 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x26c>
     e70:	61 30       	cpi	r22, 0x01	; 1
     e72:	a1 f7       	brne	.-24     	; 0xe5c <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x252>
     e74:	e2 cf       	rjmp	.-60     	; 0xe3a <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x230>
     e76:	83 30       	cpi	r24, 0x03	; 3
     e78:	89 f7       	brne	.-30     	; 0xe5c <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x252>
     e7a:	62 30       	cpi	r22, 0x02	; 2
     e7c:	79 f7       	brne	.-34     	; 0xe5c <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x252>
     e7e:	dd cf       	rjmp	.-70     	; 0xe3a <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x230>
     e80:	46 01       	movw	r8, r12
     e82:	02 2e       	mov	r0, r18
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x280>
     e86:	88 0c       	add	r8, r8
     e88:	99 1c       	adc	r9, r9
     e8a:	0a 94       	dec	r0
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x27c>
     e8e:	9c a2       	std	Y+36, r9	; 0x24
     e90:	8b a2       	std	Y+35, r8	; 0x23
     e92:	d7 01       	movw	r26, r14
     e94:	87 e0       	ldi	r24, 0x07	; 7
     e96:	49 2f       	mov	r20, r25
     e98:	42 0f       	add	r20, r18
     e9a:	01 e0       	ldi	r16, 0x01	; 1
     e9c:	10 e0       	ldi	r17, 0x00	; 0
     e9e:	0c 0f       	add	r16, r28
     ea0:	1d 1f       	adc	r17, r29
     ea2:	04 0f       	add	r16, r20
     ea4:	11 1d       	adc	r17, r1
     ea6:	ad 01       	movw	r20, r26
     ea8:	42 19       	sub	r20, r2
     eaa:	53 09       	sbc	r21, r3
     eac:	a9 a0       	ldd	r10, Y+33	; 0x21
     eae:	ba a0       	ldd	r11, Y+34	; 0x22
     eb0:	4a 15       	cp	r20, r10
     eb2:	5b 05       	cpc	r21, r11
     eb4:	ac f0       	brlt	.+42     	; 0xee0 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x2d6>
     eb6:	2f 5f       	subi	r18, 0xFF	; 255
     eb8:	3f 4f       	sbci	r19, 0xFF	; 255
     eba:	28 30       	cpi	r18, 0x08	; 8
     ebc:	31 05       	cpc	r19, r1
     ebe:	01 f7       	brne	.-64     	; 0xe80 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x276>
     ec0:	98 5f       	subi	r25, 0xF8	; 248
     ec2:	f8 e0       	ldi	r31, 0x08	; 8
     ec4:	ef 0e       	add	r14, r31
     ec6:	f1 1c       	adc	r15, r1
     ec8:	29 a1       	ldd	r18, Y+33	; 0x21
     eca:	3a a1       	ldd	r19, Y+34	; 0x22
     ecc:	28 5f       	subi	r18, 0xF8	; 248
     ece:	3f 4f       	sbci	r19, 0xFF	; 255
     ed0:	3a a3       	std	Y+34, r19	; 0x22
     ed2:	29 a3       	std	Y+33, r18	; 0x21
     ed4:	28 32       	cpi	r18, 0x28	; 40
     ed6:	31 05       	cpc	r19, r1
     ed8:	09 f2       	breq	.-126    	; 0xe5c <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x252>
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	d0 cf       	rjmp	.-96     	; 0xe80 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x276>
     ee0:	15 96       	adiw	r26, 0x05	; 5
     ee2:	4c 91       	ld	r20, X
     ee4:	15 97       	sbiw	r26, 0x05	; 5
     ee6:	50 e0       	ldi	r21, 0x00	; 0
     ee8:	eb a1       	ldd	r30, Y+35	; 0x23
     eea:	fc a1       	ldd	r31, Y+36	; 0x24
     eec:	4e 23       	and	r20, r30
     eee:	5f 23       	and	r21, r31
     ef0:	45 2b       	or	r20, r21
     ef2:	71 f0       	breq	.+28     	; 0xf10 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x306>
     ef4:	f8 01       	movw	r30, r16
     ef6:	40 81       	ld	r20, Z
     ef8:	53 01       	movw	r10, r6
     efa:	42 01       	movw	r8, r4
     efc:	08 2e       	mov	r0, r24
     efe:	04 c0       	rjmp	.+8      	; 0xf08 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x2fe>
     f00:	88 0c       	add	r8, r8
     f02:	99 1c       	adc	r9, r9
     f04:	aa 1c       	adc	r10, r10
     f06:	bb 1c       	adc	r11, r11
     f08:	0a 94       	dec	r0
     f0a:	d2 f7       	brpl	.-12     	; 0xf00 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x2f6>
     f0c:	48 29       	or	r20, r8
     f0e:	0f c0       	rjmp	.+30     	; 0xf2e <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x324>
     f10:	53 01       	movw	r10, r6
     f12:	42 01       	movw	r8, r4
     f14:	08 2e       	mov	r0, r24
     f16:	04 c0       	rjmp	.+8      	; 0xf20 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x316>
     f18:	88 0c       	add	r8, r8
     f1a:	99 1c       	adc	r9, r9
     f1c:	aa 1c       	adc	r10, r10
     f1e:	bb 1c       	adc	r11, r11
     f20:	0a 94       	dec	r0
     f22:	d2 f7       	brpl	.-12     	; 0xf18 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x30e>
     f24:	58 2d       	mov	r21, r8
     f26:	50 95       	com	r21
     f28:	f8 01       	movw	r30, r16
     f2a:	40 81       	ld	r20, Z
     f2c:	45 23       	and	r20, r21
     f2e:	40 83       	st	Z, r20
     f30:	81 50       	subi	r24, 0x01	; 1
     f32:	11 96       	adiw	r26, 0x01	; 1
     f34:	b8 cf       	rjmp	.-144    	; 0xea6 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x29c>
     f36:	2d 91       	ld	r18, X+
     f38:	21 93       	st	Z+, r18
     f3a:	e8 17       	cp	r30, r24
     f3c:	f9 07       	cpc	r31, r25
     f3e:	d9 f7       	brne	.-10     	; 0xf36 <_ZN9MaxMatrix20setModuleOrientationE30MaxMatrixModuleOrientationType+0x32c>
     f40:	c1 01       	movw	r24, r2
     f42:	aa 96       	adiw	r28, 0x2a	; 42
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	de bf       	out	0x3e, r29	; 62
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	cd bf       	out	0x3d, r28	; 61
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	ff 90       	pop	r15
     f58:	ef 90       	pop	r14
     f5a:	df 90       	pop	r13
     f5c:	cf 90       	pop	r12
     f5e:	bf 90       	pop	r11
     f60:	af 90       	pop	r10
     f62:	9f 90       	pop	r9
     f64:	8f 90       	pop	r8
     f66:	7f 90       	pop	r7
     f68:	6f 90       	pop	r6
     f6a:	5f 90       	pop	r5
     f6c:	4f 90       	pop	r4
     f6e:	3f 90       	pop	r3
     f70:	2f 90       	pop	r2
     f72:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <_ZN9MaxMatrix6reloadEv>
     f76:	aa 96       	adiw	r28, 0x2a	; 42
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	de bf       	out	0x3e, r29	; 62
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	cd bf       	out	0x3d, r28	; 61
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	1f 91       	pop	r17
     f88:	0f 91       	pop	r16
     f8a:	ff 90       	pop	r15
     f8c:	ef 90       	pop	r14
     f8e:	df 90       	pop	r13
     f90:	cf 90       	pop	r12
     f92:	bf 90       	pop	r11
     f94:	af 90       	pop	r10
     f96:	9f 90       	pop	r9
     f98:	8f 90       	pop	r8
     f9a:	7f 90       	pop	r7
     f9c:	6f 90       	pop	r6
     f9e:	5f 90       	pop	r5
     fa0:	4f 90       	pop	r4
     fa2:	3f 90       	pop	r3
     fa4:	2f 90       	pop	r2
     fa6:	08 95       	ret

00000fa8 <_ZN9MaxMatrix19convertCharToSpriteEcPh>:
     fa8:	fa 01       	movw	r30, r20
     faa:	64 3c       	cpi	r22, 0xC4	; 196
     fac:	11 f4       	brne	.+4      	; 0xfb2 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0xa>
     fae:	8f e5       	ldi	r24, 0x5F	; 95
     fb0:	13 c0       	rjmp	.+38     	; 0xfd8 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     fb2:	66 3d       	cpi	r22, 0xD6	; 214
     fb4:	11 f4       	brne	.+4      	; 0xfba <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x12>
     fb6:	80 e6       	ldi	r24, 0x60	; 96
     fb8:	0f c0       	rjmp	.+30     	; 0xfd8 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     fba:	6c 3d       	cpi	r22, 0xDC	; 220
     fbc:	11 f4       	brne	.+4      	; 0xfc2 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x1a>
     fbe:	81 e6       	ldi	r24, 0x61	; 97
     fc0:	0b c0       	rjmp	.+22     	; 0xfd8 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     fc2:	64 3e       	cpi	r22, 0xE4	; 228
     fc4:	11 f4       	brne	.+4      	; 0xfca <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x22>
     fc6:	82 e6       	ldi	r24, 0x62	; 98
     fc8:	07 c0       	rjmp	.+14     	; 0xfd8 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     fca:	66 3f       	cpi	r22, 0xF6	; 246
     fcc:	11 f4       	brne	.+4      	; 0xfd2 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x2a>
     fce:	83 e6       	ldi	r24, 0x63	; 99
     fd0:	03 c0       	rjmp	.+6      	; 0xfd8 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     fd2:	6c 3f       	cpi	r22, 0xFC	; 252
     fd4:	19 f4       	brne	.+6      	; 0xfdc <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x34>
     fd6:	84 e6       	ldi	r24, 0x64	; 100
     fd8:	80 83       	st	Z, r24
     fda:	04 c0       	rjmp	.+8      	; 0xfe4 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x3c>
     fdc:	60 52       	subi	r22, 0x20	; 32
     fde:	6f 35       	cpi	r22, 0x5F	; 95
     fe0:	18 f4       	brcc	.+6      	; 0xfe8 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x40>
     fe2:	60 83       	st	Z, r22
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	08 95       	ret
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	08 95       	ret

00000fec <_ZN9MaxMatrix8getRowLLEhhPh>:
     fec:	bf 92       	push	r11
     fee:	cf 92       	push	r12
     ff0:	df 92       	push	r13
     ff2:	ef 92       	push	r14
     ff4:	ff 92       	push	r15
     ff6:	0f 93       	push	r16
     ff8:	1f 93       	push	r17
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	e9 01       	movw	r28, r18
    1000:	64 30       	cpi	r22, 0x04	; 4
    1002:	d8 f5       	brcc	.+118    	; 0x107a <_ZN9MaxMatrix8getRowLLEhhPh+0x8e>
    1004:	48 30       	cpi	r20, 0x08	; 8
    1006:	c8 f5       	brcc	.+114    	; 0x107a <_ZN9MaxMatrix8getRowLLEhhPh+0x8e>
    1008:	a1 e0       	ldi	r26, 0x01	; 1
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <_ZN9MaxMatrix8getRowLLEhhPh+0x26>
    100e:	aa 0f       	add	r26, r26
    1010:	bb 1f       	adc	r27, r27
    1012:	4a 95       	dec	r20
    1014:	e2 f7       	brpl	.-8      	; 0x100e <_ZN9MaxMatrix8getRowLLEhhPh+0x22>
    1016:	28 e0       	ldi	r18, 0x08	; 8
    1018:	62 9f       	mul	r22, r18
    101a:	80 0d       	add	r24, r0
    101c:	91 1d       	adc	r25, r1
    101e:	11 24       	eor	r1, r1
    1020:	fc 01       	movw	r30, r24
    1022:	35 96       	adiw	r30, 0x05	; 5
    1024:	87 e0       	ldi	r24, 0x07	; 7
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	01 e0       	ldi	r16, 0x01	; 1
    102a:	10 e0       	ldi	r17, 0x00	; 0
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	61 91       	ld	r22, Z+
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	6a 23       	and	r22, r26
    1036:	7b 23       	and	r23, r27
    1038:	b8 80       	ld	r11, Y
    103a:	67 2b       	or	r22, r23
    103c:	69 f0       	breq	.+26     	; 0x1058 <_ZN9MaxMatrix8getRowLLEhhPh+0x6c>
    103e:	68 01       	movw	r12, r16
    1040:	79 01       	movw	r14, r18
    1042:	08 2e       	mov	r0, r24
    1044:	04 c0       	rjmp	.+8      	; 0x104e <_ZN9MaxMatrix8getRowLLEhhPh+0x62>
    1046:	cc 0c       	add	r12, r12
    1048:	dd 1c       	adc	r13, r13
    104a:	ee 1c       	adc	r14, r14
    104c:	ff 1c       	adc	r15, r15
    104e:	0a 94       	dec	r0
    1050:	d2 f7       	brpl	.-12     	; 0x1046 <_ZN9MaxMatrix8getRowLLEhhPh+0x5a>
    1052:	cb 28       	or	r12, r11
    1054:	c8 82       	st	Y, r12
    1056:	0d c0       	rjmp	.+26     	; 0x1072 <_ZN9MaxMatrix8getRowLLEhhPh+0x86>
    1058:	b9 01       	movw	r22, r18
    105a:	a8 01       	movw	r20, r16
    105c:	08 2e       	mov	r0, r24
    105e:	04 c0       	rjmp	.+8      	; 0x1068 <_ZN9MaxMatrix8getRowLLEhhPh+0x7c>
    1060:	44 0f       	add	r20, r20
    1062:	55 1f       	adc	r21, r21
    1064:	66 1f       	adc	r22, r22
    1066:	77 1f       	adc	r23, r23
    1068:	0a 94       	dec	r0
    106a:	d2 f7       	brpl	.-12     	; 0x1060 <_ZN9MaxMatrix8getRowLLEhhPh+0x74>
    106c:	40 95       	com	r20
    106e:	4b 21       	and	r20, r11
    1070:	48 83       	st	Y, r20
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	e8 f6       	brcc	.-70     	; 0x1030 <_ZN9MaxMatrix8getRowLLEhhPh+0x44>
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	01 c0       	rjmp	.+2      	; 0x107c <_ZN9MaxMatrix8getRowLLEhhPh+0x90>
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	1f 91       	pop	r17
    1082:	0f 91       	pop	r16
    1084:	ff 90       	pop	r15
    1086:	ef 90       	pop	r14
    1088:	df 90       	pop	r13
    108a:	cf 90       	pop	r12
    108c:	bf 90       	pop	r11
    108e:	08 95       	ret

00001090 <_ZN9MaxMatrix9getColumnEhPh>:
    1090:	cf 92       	push	r12
    1092:	df 92       	push	r13
    1094:	ff 92       	push	r15
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	1f 92       	push	r1
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	fc 01       	movw	r30, r24
    10a6:	84 81       	ldd	r24, Z+4	; 0x04
    10a8:	81 11       	cpse	r24, r1
    10aa:	0a c0       	rjmp	.+20     	; 0x10c0 <_ZN9MaxMatrix9getColumnEhPh+0x30>
    10ac:	60 32       	cpi	r22, 0x20	; 32
    10ae:	18 f0       	brcs	.+6      	; 0x10b6 <_ZN9MaxMatrix9getColumnEhPh+0x26>
    10b0:	ff 24       	eor	r15, r15
    10b2:	f3 94       	inc	r15
    10b4:	39 c0       	rjmp	.+114    	; 0x1128 <_ZN9MaxMatrix9getColumnEhPh+0x98>
    10b6:	e6 0f       	add	r30, r22
    10b8:	f1 1d       	adc	r31, r1
    10ba:	85 81       	ldd	r24, Z+5	; 0x05
    10bc:	fa 01       	movw	r30, r20
    10be:	1d c0       	rjmp	.+58     	; 0x10fa <_ZN9MaxMatrix9getColumnEhPh+0x6a>
    10c0:	6a 01       	movw	r12, r20
    10c2:	96 2f       	mov	r25, r22
    10c4:	8f 01       	movw	r16, r30
    10c6:	66 95       	lsr	r22
    10c8:	66 95       	lsr	r22
    10ca:	66 95       	lsr	r22
    10cc:	49 2f       	mov	r20, r25
    10ce:	47 70       	andi	r20, 0x07	; 7
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	31 f4       	brne	.+12     	; 0x10e0 <_ZN9MaxMatrix9getColumnEhPh+0x50>
    10d4:	96 01       	movw	r18, r12
    10d6:	cf 01       	movw	r24, r30
    10d8:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZN9MaxMatrix8getRowLLEhhPh>
    10dc:	f8 2e       	mov	r15, r24
    10de:	24 c0       	rjmp	.+72     	; 0x1128 <_ZN9MaxMatrix9getColumnEhPh+0x98>
    10e0:	82 30       	cpi	r24, 0x02	; 2
    10e2:	71 f4       	brne	.+28     	; 0x1100 <_ZN9MaxMatrix9getColumnEhPh+0x70>
    10e4:	8f e1       	ldi	r24, 0x1F	; 31
    10e6:	89 1b       	sub	r24, r25
    10e8:	80 32       	cpi	r24, 0x20	; 32
    10ea:	10 f7       	brcc	.-60     	; 0x10b0 <_ZN9MaxMatrix9getColumnEhPh+0x20>
    10ec:	e8 0f       	add	r30, r24
    10ee:	f1 1d       	adc	r31, r1
    10f0:	65 81       	ldd	r22, Z+5	; 0x05
    10f2:	c8 01       	movw	r24, r16
    10f4:	0e 94 af 05 	call	0xb5e	; 0xb5e <_ZN9MaxMatrix11reverseByteEh>
    10f8:	f6 01       	movw	r30, r12
    10fa:	80 83       	st	Z, r24
    10fc:	f1 2c       	mov	r15, r1
    10fe:	14 c0       	rjmp	.+40     	; 0x1128 <_ZN9MaxMatrix9getColumnEhPh+0x98>
    1100:	83 30       	cpi	r24, 0x03	; 3
    1102:	b1 f6       	brne	.-84     	; 0x10b0 <_ZN9MaxMatrix9getColumnEhPh+0x20>
    1104:	87 e0       	ldi	r24, 0x07	; 7
    1106:	84 1b       	sub	r24, r20
    1108:	48 2f       	mov	r20, r24
    110a:	9e 01       	movw	r18, r28
    110c:	2f 5f       	subi	r18, 0xFF	; 255
    110e:	3f 4f       	sbci	r19, 0xFF	; 255
    1110:	cf 01       	movw	r24, r30
    1112:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZN9MaxMatrix8getRowLLEhhPh>
    1116:	f8 2e       	mov	r15, r24
    1118:	81 11       	cpse	r24, r1
    111a:	ca cf       	rjmp	.-108    	; 0x10b0 <_ZN9MaxMatrix9getColumnEhPh+0x20>
    111c:	69 81       	ldd	r22, Y+1	; 0x01
    111e:	c8 01       	movw	r24, r16
    1120:	0e 94 af 05 	call	0xb5e	; 0xb5e <_ZN9MaxMatrix11reverseByteEh>
    1124:	f6 01       	movw	r30, r12
    1126:	80 83       	st	Z, r24
    1128:	8f 2d       	mov	r24, r15
    112a:	0f 90       	pop	r0
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	df 90       	pop	r13
    1138:	cf 90       	pop	r12
    113a:	08 95       	ret

0000113c <_ZN9MaxMatrix11setColumnLLEhh>:
    113c:	bf 92       	push	r11
    113e:	cf 92       	push	r12
    1140:	df 92       	push	r13
    1142:	ef 92       	push	r14
    1144:	ff 92       	push	r15
    1146:	0f 93       	push	r16
    1148:	1f 93       	push	r17
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	60 32       	cpi	r22, 0x20	; 32
    1150:	e8 f5       	brcc	.+122    	; 0x11cc <_ZN9MaxMatrix11setColumnLLEhh+0x90>
    1152:	04 2f       	mov	r16, r20
    1154:	16 2f       	mov	r17, r22
    1156:	ec 01       	movw	r28, r24
    1158:	c6 2e       	mov	r12, r22
    115a:	c6 94       	lsr	r12
    115c:	c6 94       	lsr	r12
    115e:	c6 94       	lsr	r12
    1160:	d1 2c       	mov	r13, r1
    1162:	86 2f       	mov	r24, r22
    1164:	87 70       	andi	r24, 0x07	; 7
    1166:	b8 2e       	mov	r11, r24
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <digitalWrite>
    1170:	e1 2c       	mov	r14, r1
    1172:	f1 2c       	mov	r15, r1
    1174:	b3 94       	inc	r11
    1176:	ce 14       	cp	r12, r14
    1178:	df 04       	cpc	r13, r15
    117a:	41 f4       	brne	.+16     	; 0x118c <_ZN9MaxMatrix11setColumnLLEhh+0x50>
    117c:	2b 2d       	mov	r18, r11
    117e:	41 e0       	ldi	r20, 0x01	; 1
    1180:	6a 81       	ldd	r22, Y+2	; 0x02
    1182:	88 81       	ld	r24, Y
    1184:	0e 94 ab 11 	call	0x2356	; 0x2356 <shiftOut>
    1188:	20 2f       	mov	r18, r16
    118a:	07 c0       	rjmp	.+14     	; 0x119a <_ZN9MaxMatrix11setColumnLLEhh+0x5e>
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	41 e0       	ldi	r20, 0x01	; 1
    1190:	6a 81       	ldd	r22, Y+2	; 0x02
    1192:	88 81       	ld	r24, Y
    1194:	0e 94 ab 11 	call	0x2356	; 0x2356 <shiftOut>
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	41 e0       	ldi	r20, 0x01	; 1
    119c:	6a 81       	ldd	r22, Y+2	; 0x02
    119e:	88 81       	ld	r24, Y
    11a0:	0e 94 ab 11 	call	0x2356	; 0x2356 <shiftOut>
    11a4:	8f ef       	ldi	r24, 0xFF	; 255
    11a6:	e8 1a       	sub	r14, r24
    11a8:	f8 0a       	sbc	r15, r24
    11aa:	84 e0       	ldi	r24, 0x04	; 4
    11ac:	e8 16       	cp	r14, r24
    11ae:	f1 04       	cpc	r15, r1
    11b0:	11 f7       	brne	.-60     	; 0x1176 <_ZN9MaxMatrix11setColumnLLEhh+0x3a>
    11b2:	60 e0       	ldi	r22, 0x00	; 0
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <digitalWrite>
    11ba:	61 e0       	ldi	r22, 0x01	; 1
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <digitalWrite>
    11c2:	c1 0f       	add	r28, r17
    11c4:	d1 1d       	adc	r29, r1
    11c6:	0d 83       	std	Y+5, r16	; 0x05
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	01 c0       	rjmp	.+2      	; 0x11ce <_ZN9MaxMatrix11setColumnLLEhh+0x92>
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	1f 91       	pop	r17
    11d4:	0f 91       	pop	r16
    11d6:	ff 90       	pop	r15
    11d8:	ef 90       	pop	r14
    11da:	df 90       	pop	r13
    11dc:	cf 90       	pop	r12
    11de:	bf 90       	pop	r11
    11e0:	08 95       	ret

000011e2 <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh>:
    11e2:	af 92       	push	r10
    11e4:	bf 92       	push	r11
    11e6:	cf 92       	push	r12
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	68 30       	cpi	r22, 0x08	; 8
    11f8:	70 f5       	brcc	.+92     	; 0x1256 <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh+0x74>
    11fa:	04 2f       	mov	r16, r20
    11fc:	16 2f       	mov	r17, r22
    11fe:	ec 01       	movw	r28, r24
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <digitalWrite>
    1208:	a1 2e       	mov	r10, r17
    120a:	b1 2c       	mov	r11, r1
    120c:	6e 01       	movw	r12, r28
    120e:	84 e0       	ldi	r24, 0x04	; 4
    1210:	e8 2e       	mov	r14, r24
    1212:	f1 2c       	mov	r15, r1
    1214:	1f 5f       	subi	r17, 0xFF	; 255
    1216:	21 2f       	mov	r18, r17
    1218:	41 e0       	ldi	r20, 0x01	; 1
    121a:	6a 81       	ldd	r22, Y+2	; 0x02
    121c:	88 81       	ld	r24, Y
    121e:	0e 94 ab 11 	call	0x2356	; 0x2356 <shiftOut>
    1222:	20 2f       	mov	r18, r16
    1224:	41 e0       	ldi	r20, 0x01	; 1
    1226:	6a 81       	ldd	r22, Y+2	; 0x02
    1228:	88 81       	ld	r24, Y
    122a:	0e 94 ab 11 	call	0x2356	; 0x2356 <shiftOut>
    122e:	f6 01       	movw	r30, r12
    1230:	05 83       	std	Z+5, r16	; 0x05
    1232:	f1 e0       	ldi	r31, 0x01	; 1
    1234:	ef 1a       	sub	r14, r31
    1236:	f1 08       	sbc	r15, r1
    1238:	ca 0c       	add	r12, r10
    123a:	db 1c       	adc	r13, r11
    123c:	e1 14       	cp	r14, r1
    123e:	f1 04       	cpc	r15, r1
    1240:	51 f7       	brne	.-44     	; 0x1216 <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh+0x34>
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <digitalWrite>
    124a:	61 e0       	ldi	r22, 0x01	; 1
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <digitalWrite>
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	01 c0       	rjmp	.+2      	; 0x1258 <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh+0x76>
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	1f 91       	pop	r17
    125e:	0f 91       	pop	r16
    1260:	ff 90       	pop	r15
    1262:	ef 90       	pop	r14
    1264:	df 90       	pop	r13
    1266:	cf 90       	pop	r12
    1268:	bf 90       	pop	r11
    126a:	af 90       	pop	r10
    126c:	08 95       	ret

0000126e <_ZN9MaxMatrix5clearEv>:
    126e:	1f 93       	push	r17
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	ec 01       	movw	r28, r24
    1276:	10 e0       	ldi	r17, 0x00	; 0
    1278:	40 e0       	ldi	r20, 0x00	; 0
    127a:	61 2f       	mov	r22, r17
    127c:	ce 01       	movw	r24, r28
    127e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh>
    1282:	1f 5f       	subi	r17, 0xFF	; 255
    1284:	18 30       	cpi	r17, 0x08	; 8
    1286:	c1 f7       	brne	.-16     	; 0x1278 <_ZN9MaxMatrix5clearEv+0xa>
    1288:	fe 01       	movw	r30, r28
    128a:	35 96       	adiw	r30, 0x05	; 5
    128c:	a5 96       	adiw	r28, 0x25	; 37
    128e:	11 92       	st	Z+, r1
    1290:	ec 17       	cp	r30, r28
    1292:	fd 07       	cpc	r31, r29
    1294:	e1 f7       	brne	.-8      	; 0x128e <_ZN9MaxMatrix5clearEv+0x20>
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	1f 91       	pop	r17
    129c:	08 95       	ret

0000129e <_ZN9MaxMatrix4initEv>:
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	ec 01       	movw	r28, r24
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	8b 83       	std	Y+3, r24	; 0x03
    12a8:	61 e0       	ldi	r22, 0x01	; 1
    12aa:	88 81       	ld	r24, Y
    12ac:	0e 94 40 11 	call	0x2280	; 0x2280 <pinMode>
    12b0:	61 e0       	ldi	r22, 0x01	; 1
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	0e 94 40 11 	call	0x2280	; 0x2280 <pinMode>
    12b8:	61 e0       	ldi	r22, 0x01	; 1
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	0e 94 40 11 	call	0x2280	; 0x2280 <pinMode>
    12c0:	61 e0       	ldi	r22, 0x01	; 1
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <digitalWrite>
    12c8:	47 e0       	ldi	r20, 0x07	; 7
    12ca:	6b e0       	ldi	r22, 0x0B	; 11
    12cc:	ce 01       	movw	r24, r28
    12ce:	0e 94 57 05 	call	0xaae	; 0xaae <_ZN9MaxMatrix13RegisterWriteEhh>
    12d2:	40 e0       	ldi	r20, 0x00	; 0
    12d4:	69 e0       	ldi	r22, 0x09	; 9
    12d6:	ce 01       	movw	r24, r28
    12d8:	0e 94 57 05 	call	0xaae	; 0xaae <_ZN9MaxMatrix13RegisterWriteEhh>
    12dc:	41 e0       	ldi	r20, 0x01	; 1
    12de:	6c e0       	ldi	r22, 0x0C	; 12
    12e0:	ce 01       	movw	r24, r28
    12e2:	0e 94 57 05 	call	0xaae	; 0xaae <_ZN9MaxMatrix13RegisterWriteEhh>
    12e6:	40 e0       	ldi	r20, 0x00	; 0
    12e8:	6f e0       	ldi	r22, 0x0F	; 15
    12ea:	ce 01       	movw	r24, r28
    12ec:	0e 94 57 05 	call	0xaae	; 0xaae <_ZN9MaxMatrix13RegisterWriteEhh>
    12f0:	ce 01       	movw	r24, r28
    12f2:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN9MaxMatrix5clearEv>
    12f6:	65 e0       	ldi	r22, 0x05	; 5
    12f8:	ce 01       	movw	r24, r28
    12fa:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZN9MaxMatrix12setIntensityEh>
    12fe:	82 e0       	ldi	r24, 0x02	; 2
    1300:	8b 83       	std	Y+3, r24	; 0x03
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	08 95       	ret

00001308 <_ZN9MaxMatrix8setRowLLEhhh>:
    1308:	af 92       	push	r10
    130a:	bf 92       	push	r11
    130c:	cf 92       	push	r12
    130e:	df 92       	push	r13
    1310:	ef 92       	push	r14
    1312:	ff 92       	push	r15
    1314:	0f 93       	push	r16
    1316:	1f 93       	push	r17
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	64 30       	cpi	r22, 0x04	; 4
    131e:	08 f0       	brcs	.+2      	; 0x1322 <_ZN9MaxMatrix8setRowLLEhhh+0x1a>
    1320:	3f c0       	rjmp	.+126    	; 0x13a0 <_ZN9MaxMatrix8setRowLLEhhh+0x98>
    1322:	48 30       	cpi	r20, 0x08	; 8
    1324:	e8 f5       	brcc	.+122    	; 0x13a0 <_ZN9MaxMatrix8setRowLLEhhh+0x98>
    1326:	8c 01       	movw	r16, r24
    1328:	f6 2e       	mov	r15, r22
    132a:	ff 0c       	add	r15, r15
    132c:	ff 0c       	add	r15, r15
    132e:	ff 0c       	add	r15, r15
    1330:	c6 2f       	mov	r28, r22
    1332:	d0 e0       	ldi	r29, 0x00	; 0
    1334:	21 96       	adiw	r28, 0x01	; 1
    1336:	83 e0       	ldi	r24, 0x03	; 3
    1338:	cc 0f       	add	r28, r28
    133a:	dd 1f       	adc	r29, r29
    133c:	8a 95       	dec	r24
    133e:	e1 f7       	brne	.-8      	; 0x1338 <_ZN9MaxMatrix8setRowLLEhhh+0x30>
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	a0 e0       	ldi	r26, 0x00	; 0
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	04 c0       	rjmp	.+8      	; 0x1352 <_ZN9MaxMatrix8setRowLLEhhh+0x4a>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	aa 1f       	adc	r26, r26
    1350:	bb 1f       	adc	r27, r27
    1352:	4a 95       	dec	r20
    1354:	d2 f7       	brpl	.-12     	; 0x134a <_ZN9MaxMatrix8setRowLLEhhh+0x42>
    1356:	a8 2e       	mov	r10, r24
    1358:	e8 2e       	mov	r14, r24
    135a:	e0 94       	com	r14
    135c:	97 e0       	ldi	r25, 0x07	; 7
    135e:	b9 2e       	mov	r11, r25
    1360:	c2 2e       	mov	r12, r18
    1362:	d1 2c       	mov	r13, r1
    1364:	ef 2d       	mov	r30, r15
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	ec 17       	cp	r30, r28
    136a:	fd 07       	cpc	r31, r29
    136c:	dc f4       	brge	.+54     	; 0x13a4 <_ZN9MaxMatrix8setRowLLEhhh+0x9c>
    136e:	e0 0f       	add	r30, r16
    1370:	f1 1f       	adc	r31, r17
    1372:	c6 01       	movw	r24, r12
    1374:	0b 2c       	mov	r0, r11
    1376:	02 c0       	rjmp	.+4      	; 0x137c <_ZN9MaxMatrix8setRowLLEhhh+0x74>
    1378:	95 95       	asr	r25
    137a:	87 95       	ror	r24
    137c:	0a 94       	dec	r0
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <_ZN9MaxMatrix8setRowLLEhhh+0x70>
    1380:	80 ff       	sbrs	r24, 0
    1382:	03 c0       	rjmp	.+6      	; 0x138a <_ZN9MaxMatrix8setRowLLEhhh+0x82>
    1384:	85 81       	ldd	r24, Z+5	; 0x05
    1386:	8a 29       	or	r24, r10
    1388:	02 c0       	rjmp	.+4      	; 0x138e <_ZN9MaxMatrix8setRowLLEhhh+0x86>
    138a:	85 81       	ldd	r24, Z+5	; 0x05
    138c:	8e 21       	and	r24, r14
    138e:	85 83       	std	Z+5, r24	; 0x05
    1390:	45 81       	ldd	r20, Z+5	; 0x05
    1392:	6f 2d       	mov	r22, r15
    1394:	c8 01       	movw	r24, r16
    1396:	0e 94 9e 08 	call	0x113c	; 0x113c <_ZN9MaxMatrix11setColumnLLEhh>
    139a:	ba 94       	dec	r11
    139c:	f3 94       	inc	r15
    139e:	e2 cf       	rjmp	.-60     	; 0x1364 <_ZN9MaxMatrix8setRowLLEhhh+0x5c>
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	01 c0       	rjmp	.+2      	; 0x13a6 <_ZN9MaxMatrix8setRowLLEhhh+0x9e>
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	ff 90       	pop	r15
    13b0:	ef 90       	pop	r14
    13b2:	df 90       	pop	r13
    13b4:	cf 90       	pop	r12
    13b6:	bf 90       	pop	r11
    13b8:	af 90       	pop	r10
    13ba:	08 95       	ret

000013bc <_ZN9MaxMatrix9setColumnEhh>:
    13bc:	ff 92       	push	r15
    13be:	0f 93       	push	r16
    13c0:	1f 93       	push	r17
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	ec 01       	movw	r28, r24
    13c8:	06 2f       	mov	r16, r22
    13ca:	06 95       	lsr	r16
    13cc:	06 95       	lsr	r16
    13ce:	06 95       	lsr	r16
    13d0:	86 2f       	mov	r24, r22
    13d2:	87 70       	andi	r24, 0x07	; 7
    13d4:	f8 2e       	mov	r15, r24
    13d6:	9c 81       	ldd	r25, Y+4	; 0x04
    13d8:	99 23       	and	r25, r25
    13da:	79 f0       	breq	.+30     	; 0x13fa <_ZN9MaxMatrix9setColumnEhh+0x3e>
    13dc:	91 30       	cpi	r25, 0x01	; 1
    13de:	19 f4       	brne	.+6      	; 0x13e6 <_ZN9MaxMatrix9setColumnEhh+0x2a>
    13e0:	24 2f       	mov	r18, r20
    13e2:	48 2f       	mov	r20, r24
    13e4:	1b c0       	rjmp	.+54     	; 0x141c <_ZN9MaxMatrix9setColumnEhh+0x60>
    13e6:	16 2f       	mov	r17, r22
    13e8:	92 30       	cpi	r25, 0x02	; 2
    13ea:	79 f4       	brne	.+30     	; 0x140a <_ZN9MaxMatrix9setColumnEhh+0x4e>
    13ec:	64 2f       	mov	r22, r20
    13ee:	ce 01       	movw	r24, r28
    13f0:	0e 94 af 05 	call	0xb5e	; 0xb5e <_ZN9MaxMatrix11reverseByteEh>
    13f4:	6f e1       	ldi	r22, 0x1F	; 31
    13f6:	61 1b       	sub	r22, r17
    13f8:	48 2f       	mov	r20, r24
    13fa:	ce 01       	movw	r24, r28
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	1f 91       	pop	r17
    1402:	0f 91       	pop	r16
    1404:	ff 90       	pop	r15
    1406:	0c 94 9e 08 	jmp	0x113c	; 0x113c <_ZN9MaxMatrix11setColumnLLEhh>
    140a:	93 30       	cpi	r25, 0x03	; 3
    140c:	81 f4       	brne	.+32     	; 0x142e <_ZN9MaxMatrix9setColumnEhh+0x72>
    140e:	64 2f       	mov	r22, r20
    1410:	ce 01       	movw	r24, r28
    1412:	0e 94 af 05 	call	0xb5e	; 0xb5e <_ZN9MaxMatrix11reverseByteEh>
    1416:	47 e0       	ldi	r20, 0x07	; 7
    1418:	4f 19       	sub	r20, r15
    141a:	28 2f       	mov	r18, r24
    141c:	60 2f       	mov	r22, r16
    141e:	ce 01       	movw	r24, r28
    1420:	df 91       	pop	r29
    1422:	cf 91       	pop	r28
    1424:	1f 91       	pop	r17
    1426:	0f 91       	pop	r16
    1428:	ff 90       	pop	r15
    142a:	0c 94 84 09 	jmp	0x1308	; 0x1308 <_ZN9MaxMatrix8setRowLLEhhh>
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	1f 91       	pop	r17
    1436:	0f 91       	pop	r16
    1438:	ff 90       	pop	r15
    143a:	08 95       	ret

0000143c <_ZN9MaxMatrix6setDotEhhb>:
    143c:	df 92       	push	r13
    143e:	ef 92       	push	r14
    1440:	ff 92       	push	r15
    1442:	0f 93       	push	r16
    1444:	1f 93       	push	r17
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	1f 92       	push	r1
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	60 32       	cpi	r22, 0x20	; 32
    1452:	80 f5       	brcc	.+96     	; 0x14b4 <_ZN9MaxMatrix6setDotEhhb+0x78>
    1454:	48 30       	cpi	r20, 0x08	; 8
    1456:	70 f5       	brcc	.+92     	; 0x14b4 <_ZN9MaxMatrix6setDotEhhb+0x78>
    1458:	d2 2e       	mov	r13, r18
    145a:	e4 2e       	mov	r14, r20
    145c:	f6 2e       	mov	r15, r22
    145e:	8c 01       	movw	r16, r24
    1460:	ae 01       	movw	r20, r28
    1462:	4f 5f       	subi	r20, 0xFF	; 255
    1464:	5f 4f       	sbci	r21, 0xFF	; 255
    1466:	0e 94 48 08 	call	0x1090	; 0x1090 <_ZN9MaxMatrix9getColumnEhPh>
    146a:	29 81       	ldd	r18, Y+1	; 0x01
    146c:	dd 20       	and	r13, r13
    146e:	71 f0       	breq	.+28     	; 0x148c <_ZN9MaxMatrix6setDotEhhb+0x50>
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	a0 e0       	ldi	r26, 0x00	; 0
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	04 c0       	rjmp	.+8      	; 0x1482 <_ZN9MaxMatrix6setDotEhhb+0x46>
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	aa 1f       	adc	r26, r26
    1480:	bb 1f       	adc	r27, r27
    1482:	ea 94       	dec	r14
    1484:	d2 f7       	brpl	.-12     	; 0x147a <_ZN9MaxMatrix6setDotEhhb+0x3e>
    1486:	82 2b       	or	r24, r18
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	0e c0       	rjmp	.+28     	; 0x14a8 <_ZN9MaxMatrix6setDotEhhb+0x6c>
    148c:	41 e0       	ldi	r20, 0x01	; 1
    148e:	50 e0       	ldi	r21, 0x00	; 0
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	70 e0       	ldi	r23, 0x00	; 0
    1494:	04 c0       	rjmp	.+8      	; 0x149e <_ZN9MaxMatrix6setDotEhhb+0x62>
    1496:	44 0f       	add	r20, r20
    1498:	55 1f       	adc	r21, r21
    149a:	66 1f       	adc	r22, r22
    149c:	77 1f       	adc	r23, r23
    149e:	ea 94       	dec	r14
    14a0:	d2 f7       	brpl	.-12     	; 0x1496 <_ZN9MaxMatrix6setDotEhhb+0x5a>
    14a2:	40 95       	com	r20
    14a4:	42 23       	and	r20, r18
    14a6:	49 83       	std	Y+1, r20	; 0x01
    14a8:	49 81       	ldd	r20, Y+1	; 0x01
    14aa:	6f 2d       	mov	r22, r15
    14ac:	c8 01       	movw	r24, r16
    14ae:	0e 94 de 09 	call	0x13bc	; 0x13bc <_ZN9MaxMatrix9setColumnEhh>
    14b2:	01 c0       	rjmp	.+2      	; 0x14b6 <_ZN9MaxMatrix6setDotEhhb+0x7a>
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	0f 90       	pop	r0
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	1f 91       	pop	r17
    14be:	0f 91       	pop	r16
    14c0:	ff 90       	pop	r15
    14c2:	ef 90       	pop	r14
    14c4:	df 90       	pop	r13
    14c6:	08 95       	ret

000014c8 <_ZN9MaxMatrix9setSpriteEiiPKh>:
    14c8:	2f 92       	push	r2
    14ca:	3f 92       	push	r3
    14cc:	4f 92       	push	r4
    14ce:	5f 92       	push	r5
    14d0:	6f 92       	push	r6
    14d2:	7f 92       	push	r7
    14d4:	8f 92       	push	r8
    14d6:	9f 92       	push	r9
    14d8:	af 92       	push	r10
    14da:	bf 92       	push	r11
    14dc:	cf 92       	push	r12
    14de:	df 92       	push	r13
    14e0:	ef 92       	push	r14
    14e2:	ff 92       	push	r15
    14e4:	0f 93       	push	r16
    14e6:	1f 93       	push	r17
    14e8:	cf 93       	push	r28
    14ea:	df 93       	push	r29
    14ec:	4c 01       	movw	r8, r24
    14ee:	3a 01       	movw	r6, r20
    14f0:	89 01       	movw	r16, r18
    14f2:	f9 01       	movw	r30, r18
    14f4:	20 80       	ld	r2, Z
    14f6:	31 2c       	mov	r3, r1
    14f8:	41 80       	ldd	r4, Z+1	; 0x01
    14fa:	51 2c       	mov	r5, r1
    14fc:	eb 01       	movw	r28, r22
    14fe:	79 01       	movw	r14, r18
    1500:	f8 e0       	ldi	r31, 0x08	; 8
    1502:	4f 16       	cp	r4, r31
    1504:	51 04       	cpc	r5, r1
    1506:	31 f5       	brne	.+76     	; 0x1554 <_ZN9MaxMatrix9setSpriteEiiPKh+0x8c>
    1508:	45 2b       	or	r20, r21
    150a:	21 f5       	brne	.+72     	; 0x1554 <_ZN9MaxMatrix9setSpriteEiiPKh+0x8c>
    150c:	c7 01       	movw	r24, r14
    150e:	80 1b       	sub	r24, r16
    1510:	91 0b       	sbc	r25, r17
    1512:	82 15       	cp	r24, r2
    1514:	93 05       	cpc	r25, r3
    1516:	e4 f5       	brge	.+120    	; 0x1590 <_ZN9MaxMatrix9setSpriteEiiPKh+0xc8>
    1518:	c0 32       	cpi	r28, 0x20	; 32
    151a:	d1 05       	cpc	r29, r1
    151c:	30 f4       	brcc	.+12     	; 0x152a <_ZN9MaxMatrix9setSpriteEiiPKh+0x62>
    151e:	f7 01       	movw	r30, r14
    1520:	42 81       	ldd	r20, Z+2	; 0x02
    1522:	6c 2f       	mov	r22, r28
    1524:	c4 01       	movw	r24, r8
    1526:	0e 94 de 09 	call	0x13bc	; 0x13bc <_ZN9MaxMatrix9setColumnEhh>
    152a:	21 96       	adiw	r28, 0x01	; 1
    152c:	ff ef       	ldi	r31, 0xFF	; 255
    152e:	ef 1a       	sub	r14, r31
    1530:	ff 0a       	sbc	r15, r31
    1532:	ec cf       	rjmp	.-40     	; 0x150c <_ZN9MaxMatrix9setSpriteEiiPKh+0x44>
    1534:	c0 32       	cpi	r28, 0x20	; 32
    1536:	d1 05       	cpc	r29, r1
    1538:	b8 f0       	brcs	.+46     	; 0x1568 <_ZN9MaxMatrix9setSpriteEiiPKh+0xa0>
    153a:	ff ef       	ldi	r31, 0xFF	; 255
    153c:	af 1a       	sub	r10, r31
    153e:	bf 0a       	sbc	r11, r31
    1540:	8f ef       	ldi	r24, 0xFF	; 255
    1542:	c8 1a       	sub	r12, r24
    1544:	d8 0a       	sbc	r13, r24
    1546:	a4 14       	cp	r10, r4
    1548:	b5 04       	cpc	r11, r5
    154a:	a4 f3       	brlt	.-24     	; 0x1534 <_ZN9MaxMatrix9setSpriteEiiPKh+0x6c>
    154c:	ef ef       	ldi	r30, 0xFF	; 255
    154e:	ee 1a       	sub	r14, r30
    1550:	fe 0a       	sbc	r15, r30
    1552:	21 96       	adiw	r28, 0x01	; 1
    1554:	c7 01       	movw	r24, r14
    1556:	80 1b       	sub	r24, r16
    1558:	91 0b       	sbc	r25, r17
    155a:	82 15       	cp	r24, r2
    155c:	93 05       	cpc	r25, r3
    155e:	c4 f4       	brge	.+48     	; 0x1590 <_ZN9MaxMatrix9setSpriteEiiPKh+0xc8>
    1560:	63 01       	movw	r12, r6
    1562:	a1 2c       	mov	r10, r1
    1564:	b1 2c       	mov	r11, r1
    1566:	ef cf       	rjmp	.-34     	; 0x1546 <_ZN9MaxMatrix9setSpriteEiiPKh+0x7e>
    1568:	88 e0       	ldi	r24, 0x08	; 8
    156a:	c8 16       	cp	r12, r24
    156c:	d1 04       	cpc	r13, r1
    156e:	28 f7       	brcc	.-54     	; 0x153a <_ZN9MaxMatrix9setSpriteEiiPKh+0x72>
    1570:	f7 01       	movw	r30, r14
    1572:	22 81       	ldd	r18, Z+2	; 0x02
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	0a 2c       	mov	r0, r10
    1578:	02 c0       	rjmp	.+4      	; 0x157e <_ZN9MaxMatrix9setSpriteEiiPKh+0xb6>
    157a:	35 95       	asr	r19
    157c:	27 95       	ror	r18
    157e:	0a 94       	dec	r0
    1580:	e2 f7       	brpl	.-8      	; 0x157a <_ZN9MaxMatrix9setSpriteEiiPKh+0xb2>
    1582:	21 70       	andi	r18, 0x01	; 1
    1584:	4c 2d       	mov	r20, r12
    1586:	6c 2f       	mov	r22, r28
    1588:	c4 01       	movw	r24, r8
    158a:	0e 94 1e 0a 	call	0x143c	; 0x143c <_ZN9MaxMatrix6setDotEhhb>
    158e:	d5 cf       	rjmp	.-86     	; 0x153a <_ZN9MaxMatrix9setSpriteEiiPKh+0x72>
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
    1594:	1f 91       	pop	r17
    1596:	0f 91       	pop	r16
    1598:	ff 90       	pop	r15
    159a:	ef 90       	pop	r14
    159c:	df 90       	pop	r13
    159e:	cf 90       	pop	r12
    15a0:	bf 90       	pop	r11
    15a2:	af 90       	pop	r10
    15a4:	9f 90       	pop	r9
    15a6:	8f 90       	pop	r8
    15a8:	7f 90       	pop	r7
    15aa:	6f 90       	pop	r6
    15ac:	5f 90       	pop	r5
    15ae:	4f 90       	pop	r4
    15b0:	3f 90       	pop	r3
    15b2:	2f 90       	pop	r2
    15b4:	08 95       	ret

000015b6 <_ZN9MaxMatrix7setTextEPKc>:
    15b6:	cf 92       	push	r12
    15b8:	df 92       	push	r13
    15ba:	ef 92       	push	r14
    15bc:	ff 92       	push	r15
    15be:	0f 93       	push	r16
    15c0:	1f 93       	push	r17
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	28 97       	sbiw	r28, 0x08	; 8
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	61 15       	cp	r22, r1
    15d8:	71 05       	cpc	r23, r1
    15da:	91 f1       	breq	.+100    	; 0x1640 <_ZN9MaxMatrix7setTextEPKc+0x8a>
    15dc:	6c 01       	movw	r12, r24
    15de:	8b 01       	movw	r16, r22
    15e0:	e1 2c       	mov	r14, r1
    15e2:	f1 2c       	mov	r15, r1
    15e4:	f8 01       	movw	r30, r16
    15e6:	61 91       	ld	r22, Z+
    15e8:	8f 01       	movw	r16, r30
    15ea:	61 11       	cpse	r22, r1
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <_ZN9MaxMatrix7setTextEPKc+0x3c>
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	28 c0       	rjmp	.+80     	; 0x1642 <_ZN9MaxMatrix7setTextEPKc+0x8c>
    15f2:	ae 01       	movw	r20, r28
    15f4:	48 5f       	subi	r20, 0xF8	; 248
    15f6:	5f 4f       	sbci	r21, 0xFF	; 255
    15f8:	c6 01       	movw	r24, r12
    15fa:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_ZN9MaxMatrix19convertCharToSpriteEcPh>
    15fe:	81 30       	cpi	r24, 0x01	; 1
    1600:	f9 f0       	breq	.+62     	; 0x1640 <_ZN9MaxMatrix7setTextEPKc+0x8a>
    1602:	ae 01       	movw	r20, r28
    1604:	4f 5f       	subi	r20, 0xFF	; 255
    1606:	5f 4f       	sbci	r21, 0xFF	; 255
    1608:	68 85       	ldd	r22, Y+8	; 0x08
    160a:	c6 01       	movw	r24, r12
    160c:	0e 94 9a 05 	call	0xb34	; 0xb34 <_ZN9MaxMatrix9getSpriteEhPA7_h>
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	b1 f0       	breq	.+44     	; 0x1640 <_ZN9MaxMatrix7setTextEPKc+0x8a>
    1614:	9e 01       	movw	r18, r28
    1616:	2f 5f       	subi	r18, 0xFF	; 255
    1618:	3f 4f       	sbci	r19, 0xFF	; 255
    161a:	40 e0       	ldi	r20, 0x00	; 0
    161c:	50 e0       	ldi	r21, 0x00	; 0
    161e:	b7 01       	movw	r22, r14
    1620:	c6 01       	movw	r24, r12
    1622:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <_ZN9MaxMatrix9setSpriteEiiPKh>
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	f6 01       	movw	r30, r12
    162a:	25 a5       	ldd	r18, Z+45	; 0x2d
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	28 0f       	add	r18, r24
    1630:	31 1d       	adc	r19, r1
    1632:	e2 0e       	add	r14, r18
    1634:	f3 1e       	adc	r15, r19
    1636:	f1 e2       	ldi	r31, 0x21	; 33
    1638:	ef 16       	cp	r14, r31
    163a:	f1 04       	cpc	r15, r1
    163c:	9c f2       	brlt	.-90     	; 0x15e4 <_ZN9MaxMatrix7setTextEPKc+0x2e>
    163e:	d7 cf       	rjmp	.-82     	; 0x15ee <_ZN9MaxMatrix7setTextEPKc+0x38>
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	28 96       	adiw	r28, 0x08	; 8
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	1f 91       	pop	r17
    1654:	0f 91       	pop	r16
    1656:	ff 90       	pop	r15
    1658:	ef 90       	pop	r14
    165a:	df 90       	pop	r13
    165c:	cf 90       	pop	r12
    165e:	08 95       	ret

00001660 <_ZN9MaxMatrix11shiftLeftLLEbbb>:
 *  \param[in]      FillWithZero                initialize the column on the right side with zero.
 *  \param[in]      ShiftToNeighbourModule      shift led states to neighbor module
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftLeftLL(bool Rotate, bool FillWithZero, bool ShiftToNeighbourModule)
{
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	fc 01       	movw	r30, r24
    1666:	35 96       	adiw	r30, 0x05	; 5
    /* should we shift the state to the next module? */
    if(ShiftToNeighbourModule) {
    1668:	22 23       	and	r18, r18
    166a:	a9 f0       	breq	.+42     	; 0x1696 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x36>
        /* save left column will be wrapped around later if rotation is active */
        byte ColumnLeft = MatrixBuffer[0];
    166c:	dc 01       	movw	r26, r24
    166e:	15 96       	adiw	r26, 0x05	; 5
    1670:	2c 91       	ld	r18, X
    1672:	15 97       	sbiw	r26, 0x05	; 5
    1674:	94 96       	adiw	r26, 0x24	; 36
        /* shift every column one step left */
        for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS - 1; Column++) {
            MatrixBuffer[Column] = MatrixBuffer[Column + 1];
    1676:	31 81       	ldd	r19, Z+1	; 0x01
    1678:	31 93       	st	Z+, r19
    /* should we shift the state to the next module? */
    if(ShiftToNeighbourModule) {
        /* save left column will be wrapped around later if rotation is active */
        byte ColumnLeft = MatrixBuffer[0];
        /* shift every column one step left */
        for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS - 1; Column++) {
    167a:	ea 17       	cp	r30, r26
    167c:	fb 07       	cpc	r31, r27
    167e:	d9 f7       	brne	.-10     	; 0x1676 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x16>
            MatrixBuffer[Column] = MatrixBuffer[Column + 1];
        }
        /* wrap around saved left column to the right */
        if(Rotate) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = ColumnLeft;
    1680:	66 23       	and	r22, r22
    1682:	19 f0       	breq	.+6      	; 0x168a <_ZN9MaxMatrix11shiftLeftLLEbbb+0x2a>
    1684:	fc 01       	movw	r30, r24
    1686:	24 a3       	std	Z+36, r18	; 0x24
    1688:	1f c0       	rjmp	.+62     	; 0x16c8 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x68>
        /* otherwise initialize right column */
        else if(FillWithZero) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = 0;
    168a:	44 23       	and	r20, r20
    168c:	e9 f0       	breq	.+58     	; 0x16c8 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x68>
    168e:	dc 01       	movw	r26, r24
    1690:	94 96       	adiw	r26, 0x24	; 36
    1692:	1c 92       	st	X, r1
    1694:	19 c0       	rjmp	.+50     	; 0x16c8 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x68>
    1696:	ec 01       	movw	r28, r24
    1698:	a5 96       	adiw	r28, 0x25	; 37
    } else {
        /* no shift to neighbor module is more complicated, we have to iterate over every module */
        for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
            /* save left column on module will be wrapped around later if rotation is active */
            byte ModuleColumnLeft = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module];
    169a:	50 81       	ld	r21, Z
    169c:	df 01       	movw	r26, r30
            /* shift every column of the module one step left */
            for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; Column++) {
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
                MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] = 
                MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module) + 1];
    16a2:	11 96       	adiw	r26, 0x01	; 1
    16a4:	7c 91       	ld	r23, X
    16a6:	11 97       	sbiw	r26, 0x01	; 1
    16a8:	7d 93       	st	X+, r23
        /* no shift to neighbor module is more complicated, we have to iterate over every module */
        for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
            /* save left column on module will be wrapped around later if rotation is active */
            byte ModuleColumnLeft = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module];
            /* shift every column of the module one step left */
            for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; Column++) {
    16aa:	2f 5f       	subi	r18, 0xFF	; 255
    16ac:	3f 4f       	sbci	r19, 0xFF	; 255
    16ae:	27 30       	cpi	r18, 0x07	; 7
    16b0:	31 05       	cpc	r19, r1
    16b2:	b9 f7       	brne	.-18     	; 0x16a2 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x42>
                MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] = 
                MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module) + 1];
            }
            /* wrap around saved left module column to the right */
            if(Rotate) MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * (Module + 1) - 1] = ModuleColumnLeft;
    16b4:	66 23       	and	r22, r22
    16b6:	11 f0       	breq	.+4      	; 0x16bc <_ZN9MaxMatrix11shiftLeftLLEbbb+0x5c>
    16b8:	57 83       	std	Z+7, r21	; 0x07
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x60>
            /* otherwise initialize right module column */
            else if(FillWithZero) MatrixBuffer[(Module + 1) * MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1] = 0;
    16bc:	41 11       	cpse	r20, r1
    16be:	17 82       	std	Z+7, r1	; 0x07
    16c0:	38 96       	adiw	r30, 0x08	; 8
        if(Rotate) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = ColumnLeft;
        /* otherwise initialize right column */
        else if(FillWithZero) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = 0;
    } else {
        /* no shift to neighbor module is more complicated, we have to iterate over every module */
        for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
    16c2:	ec 17       	cp	r30, r28
    16c4:	fd 07       	cpc	r31, r29
    16c6:	49 f7       	brne	.-46     	; 0x169a <_ZN9MaxMatrix11shiftLeftLLEbbb+0x3a>
            /* otherwise initialize right module column */
            else if(FillWithZero) MatrixBuffer[(Module + 1) * MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1] = 0;
        }
    }
    reload();
} /* shiftLeftLL */
    16c8:	df 91       	pop	r29
    16ca:	cf 91       	pop	r28
            if(Rotate) MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * (Module + 1) - 1] = ModuleColumnLeft;
            /* otherwise initialize right module column */
            else if(FillWithZero) MatrixBuffer[(Module + 1) * MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1] = 0;
        }
    }
    reload();
    16cc:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <_ZN9MaxMatrix6reloadEv>

000016d0 <_ZN9MaxMatrix12shiftRightLLEbbb>:
 *  \param[in]      FillWithZero                initialize the column on the left side with zero.
 *  \param[in]      ShiftToNeighbourModule      shift led states to neighbor module
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftRightLL(bool Rotate, bool FillWithZero, bool ShiftToNeighbourModule)
{
    16d0:	cf 93       	push	r28
    16d2:	df 93       	push	r29
    /* should we shift the state to the next module? */
    if(ShiftToNeighbourModule) {
        /* save right column, will be wrapped around later if rotation is active */
        byte ColumnRight = MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1];
    16d4:	fc 01       	movw	r30, r24
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftRightLL(bool Rotate, bool FillWithZero, bool ShiftToNeighbourModule)
{
    /* should we shift the state to the next module? */
    if(ShiftToNeighbourModule) {
    16d6:	22 23       	and	r18, r18
    16d8:	99 f0       	breq	.+38     	; 0x1700 <_ZN9MaxMatrix12shiftRightLLEbbb+0x30>
        /* save right column, will be wrapped around later if rotation is active */
        byte ColumnRight = MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1];
    16da:	24 a1       	ldd	r18, Z+36	; 0x24
    16dc:	b4 96       	adiw	r30, 0x24	; 36
    16de:	dc 01       	movw	r26, r24
    16e0:	15 96       	adiw	r26, 0x05	; 5
        /* shift every column of the module one step right */
        for(int Column = MAXMATRIX_NUMBER_OF_COLUMNS - 1; Column > 0; Column--) { 
            MatrixBuffer[Column] = MatrixBuffer[Column - 1]; 
    16e2:	32 91       	ld	r19, -Z
    16e4:	31 83       	std	Z+1, r19	; 0x01
    /* should we shift the state to the next module? */
    if(ShiftToNeighbourModule) {
        /* save right column, will be wrapped around later if rotation is active */
        byte ColumnRight = MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1];
        /* shift every column of the module one step right */
        for(int Column = MAXMATRIX_NUMBER_OF_COLUMNS - 1; Column > 0; Column--) { 
    16e6:	ea 17       	cp	r30, r26
    16e8:	fb 07       	cpc	r31, r27
    16ea:	d9 f7       	brne	.-10     	; 0x16e2 <_ZN9MaxMatrix12shiftRightLLEbbb+0x12>
            MatrixBuffer[Column] = MatrixBuffer[Column - 1]; 
        }
        /* wrap around saved right column to the left */
        if(Rotate) MatrixBuffer[0] = ColumnRight;
    16ec:	66 23       	and	r22, r22
    16ee:	19 f0       	breq	.+6      	; 0x16f6 <_ZN9MaxMatrix12shiftRightLLEbbb+0x26>
    16f0:	fc 01       	movw	r30, r24
    16f2:	25 83       	std	Z+5, r18	; 0x05
    16f4:	21 c0       	rjmp	.+66     	; 0x1738 <_ZN9MaxMatrix12shiftRightLLEbbb+0x68>
        /* otherwise initialize right column */
        else if(FillWithZero) MatrixBuffer[0] = 0;
    16f6:	44 23       	and	r20, r20
    16f8:	f9 f0       	breq	.+62     	; 0x1738 <_ZN9MaxMatrix12shiftRightLLEbbb+0x68>
    16fa:	fc 01       	movw	r30, r24
    16fc:	15 82       	std	Z+5, r1	; 0x05
    16fe:	1c c0       	rjmp	.+56     	; 0x1738 <_ZN9MaxMatrix12shiftRightLLEbbb+0x68>
    1700:	ec 01       	movw	r28, r24
    1702:	a0 96       	adiw	r28, 0x20	; 32
    } else {
        /* no shift to neighbor module is more complicated, we have to iterate over every module */
        for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
            byte ModuleColumnRight = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * (Module + 1) - 1];
    1704:	54 85       	ldd	r21, Z+12	; 0x0c
    1706:	df 01       	movw	r26, r30
            /* shift every column of the module one step right */
            for(int Column = MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; Column > 0; Column--) {
    1708:	27 e0       	ldi	r18, 0x07	; 7
    170a:	30 e0       	ldi	r19, 0x00	; 0
                MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] = 
                MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module) - 1];
    170c:	1b 96       	adiw	r26, 0x0b	; 11
    170e:	7c 91       	ld	r23, X
    1710:	1b 97       	sbiw	r26, 0x0b	; 11
    1712:	1c 96       	adiw	r26, 0x0c	; 12
    1714:	7c 93       	st	X, r23
    1716:	1c 97       	sbiw	r26, 0x0c	; 12
    } else {
        /* no shift to neighbor module is more complicated, we have to iterate over every module */
        for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
            byte ModuleColumnRight = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * (Module + 1) - 1];
            /* shift every column of the module one step right */
            for(int Column = MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; Column > 0; Column--) {
    1718:	21 50       	subi	r18, 0x01	; 1
    171a:	31 09       	sbc	r19, r1
    171c:	11 97       	sbiw	r26, 0x01	; 1
    171e:	21 15       	cp	r18, r1
    1720:	31 05       	cpc	r19, r1
    1722:	a1 f7       	brne	.-24     	; 0x170c <_ZN9MaxMatrix12shiftRightLLEbbb+0x3c>
                MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] = 
                MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module) - 1];
            }
            /* wrap around saved left module column to the left */
            if(Rotate) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = ModuleColumnRight;
    1724:	66 23       	and	r22, r22
    1726:	11 f0       	breq	.+4      	; 0x172c <_ZN9MaxMatrix12shiftRightLLEbbb+0x5c>
    1728:	55 83       	std	Z+5, r21	; 0x05
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <_ZN9MaxMatrix12shiftRightLLEbbb+0x60>
            /* otherwise initialize left module column */
            else if(FillWithZero) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = 0;
    172c:	41 11       	cpse	r20, r1
    172e:	15 82       	std	Z+5, r1	; 0x05
    1730:	38 96       	adiw	r30, 0x08	; 8
        if(Rotate) MatrixBuffer[0] = ColumnRight;
        /* otherwise initialize right column */
        else if(FillWithZero) MatrixBuffer[0] = 0;
    } else {
        /* no shift to neighbor module is more complicated, we have to iterate over every module */
        for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
    1732:	ec 17       	cp	r30, r28
    1734:	fd 07       	cpc	r31, r29
    1736:	31 f7       	brne	.-52     	; 0x1704 <_ZN9MaxMatrix12shiftRightLLEbbb+0x34>
            /* otherwise initialize left module column */
            else if(FillWithZero) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = 0;
        }
    }
    reload();
} /* shiftRightLL */
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
            if(Rotate) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = ModuleColumnRight;
            /* otherwise initialize left module column */
            else if(FillWithZero) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = 0;
        }
    }
    reload();
    173c:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <_ZN9MaxMatrix6reloadEv>

00001740 <_ZN9MaxMatrix9shiftUpLLEbb>:
 *  \param[in]      Rotate                      activate rotation of the matrix LED states
 *  \param[in]      ShiftToNeighbourModule      shift led states to neighbor module
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftUpLL(bool Rotate, bool ShiftToNeighbourModule)
{   
    1740:	bf 92       	push	r11
    1742:	cf 92       	push	r12
    1744:	df 92       	push	r13
    1746:	ef 92       	push	r14
    1748:	ff 92       	push	r15
    174a:	0f 93       	push	r16
    174c:	1f 93       	push	r17
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	00 d0       	rcall	.+0      	; 0x1754 <_ZN9MaxMatrix9shiftUpLLEbb+0x14>
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	8c 01       	movw	r16, r24
    175a:	e6 2e       	mov	r14, r22
    byte ModuleTopRow = 0;
    175c:	1a 82       	std	Y+2, r1	; 0x02
    byte MatrixTopRow = 0;
    175e:	19 82       	std	Y+1, r1	; 0x01

    /* should we shift the state to the next module? */
    if(ShiftToNeighbourModule) {
    1760:	44 23       	and	r20, r20
    1762:	09 f4       	brne	.+2      	; 0x1766 <_ZN9MaxMatrix9shiftUpLLEbb+0x26>
    1764:	50 c0       	rjmp	.+160    	; 0x1806 <_ZN9MaxMatrix9shiftUpLLEbb+0xc6>
    1766:	6c 01       	movw	r12, r24
    1768:	85 e0       	ldi	r24, 0x05	; 5
    176a:	c8 0e       	add	r12, r24
    176c:	d1 1c       	adc	r13, r1
    176e:	f1 2c       	mov	r15, r1
        /* shift to neighbor module is more complicated, we have to iterate over every module */
        for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++)
        {
            /* save matrix top row, will be wrapped around later if rotation is active */
            if(Module == 0 && Rotate) getRowLL(0, 0, &MatrixTopRow);
    1770:	f1 10       	cpse	r15, r1
    1772:	0a c0       	rjmp	.+20     	; 0x1788 <_ZN9MaxMatrix9shiftUpLLEbb+0x48>
    1774:	ee 20       	and	r14, r14
    1776:	41 f0       	breq	.+16     	; 0x1788 <_ZN9MaxMatrix9shiftUpLLEbb+0x48>
    1778:	9e 01       	movw	r18, r28
    177a:	2f 5f       	subi	r18, 0xFF	; 255
    177c:	3f 4f       	sbci	r19, 0xFF	; 255
    177e:	40 e0       	ldi	r20, 0x00	; 0
    1780:	60 e0       	ldi	r22, 0x00	; 0
    1782:	c8 01       	movw	r24, r16
    1784:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZN9MaxMatrix8getRowLLEhhPh>
            /* save module top row will be set to next module later */
            getRowLL(Module + 1, 0, &ModuleTopRow);
    1788:	bb 24       	eor	r11, r11
    178a:	b3 94       	inc	r11
    178c:	bf 0c       	add	r11, r15
    178e:	9e 01       	movw	r18, r28
    1790:	2e 5f       	subi	r18, 0xFE	; 254
    1792:	3f 4f       	sbci	r19, 0xFF	; 255
    1794:	40 e0       	ldi	r20, 0x00	; 0
    1796:	6b 2d       	mov	r22, r11
    1798:	c8 01       	movw	r24, r16
    179a:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZN9MaxMatrix8getRowLLEhhPh>
    179e:	f6 01       	movw	r30, r12
            /* shift every bit in column one step right conforms to shift up */
            for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; Column++) 
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
                MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] >>= 1;
    17a4:	80 81       	ld	r24, Z
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	95 95       	asr	r25
    17aa:	87 95       	ror	r24
    17ac:	81 93       	st	Z+, r24
            /* save matrix top row, will be wrapped around later if rotation is active */
            if(Module == 0 && Rotate) getRowLL(0, 0, &MatrixTopRow);
            /* save module top row will be set to next module later */
            getRowLL(Module + 1, 0, &ModuleTopRow);
            /* shift every bit in column one step right conforms to shift up */
            for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; Column++) 
    17ae:	2f 5f       	subi	r18, 0xFF	; 255
    17b0:	3f 4f       	sbci	r19, 0xFF	; 255
    17b2:	28 30       	cpi	r18, 0x08	; 8
    17b4:	31 05       	cpc	r19, r1
    17b6:	b1 f7       	brne	.-20     	; 0x17a4 <_ZN9MaxMatrix9shiftUpLLEbb+0x64>
                MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] >>= 1;
            /* last module wrap around saved matrix top row */
            if(Module == MAXMATRIX_NUMBER_OF_MODULES - 1) {
    17b8:	83 e0       	ldi	r24, 0x03	; 3
    17ba:	f8 12       	cpse	r15, r24
    17bc:	1d c0       	rjmp	.+58     	; 0x17f8 <_ZN9MaxMatrix9shiftUpLLEbb+0xb8>
                if(Rotate) setRowLL(Module, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, MatrixTopRow);
    17be:	e1 10       	cpse	r14, r1
    17c0:	17 c0       	rjmp	.+46     	; 0x17f0 <_ZN9MaxMatrix9shiftUpLLEbb+0xb0>
    17c2:	88 e0       	ldi	r24, 0x08	; 8
    17c4:	c8 0e       	add	r12, r24
    17c6:	d1 1c       	adc	r13, r1
    byte MatrixTopRow = 0;

    /* should we shift the state to the next module? */
    if(ShiftToNeighbourModule) {
        /* shift to neighbor module is more complicated, we have to iterate over every module */
        for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++)
    17c8:	84 e0       	ldi	r24, 0x04	; 4
    17ca:	b8 12       	cpse	r11, r24
    17cc:	0f c0       	rjmp	.+30     	; 0x17ec <_ZN9MaxMatrix9shiftUpLLEbb+0xac>
            MatrixBuffer[Column] >>= 1;
            /* wrap around saved top row to bottom row */
            if(Rotate) bitWrite(MatrixBuffer[Column], MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, TopBit);
        }
    }
    reload();
    17ce:	c8 01       	movw	r24, r16
    17d0:	0e 94 c3 05 	call	0xb86	; 0xb86 <_ZN9MaxMatrix6reloadEv>
} /* shiftModuleUpLL */
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	ff 90       	pop	r15
    17e2:	ef 90       	pop	r14
    17e4:	df 90       	pop	r13
    17e6:	cf 90       	pop	r12
    17e8:	bf 90       	pop	r11
    17ea:	08 95       	ret
    17ec:	fb 2c       	mov	r15, r11
    17ee:	c0 cf       	rjmp	.-128    	; 0x1770 <_ZN9MaxMatrix9shiftUpLLEbb+0x30>
            /* shift every bit in column one step right conforms to shift up */
            for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; Column++) 
                MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] >>= 1;
            /* last module wrap around saved matrix top row */
            if(Module == MAXMATRIX_NUMBER_OF_MODULES - 1) {
                if(Rotate) setRowLL(Module, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, MatrixTopRow);
    17f0:	29 81       	ldd	r18, Y+1	; 0x01
    17f2:	47 e0       	ldi	r20, 0x07	; 7
    17f4:	63 e0       	ldi	r22, 0x03	; 3
    17f6:	03 c0       	rjmp	.+6      	; 0x17fe <_ZN9MaxMatrix9shiftUpLLEbb+0xbe>
            /* for all other modules set saved module top row */
            } else {
                setRowLL(Module, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, ModuleTopRow);
    17f8:	2a 81       	ldd	r18, Y+2	; 0x02
    17fa:	47 e0       	ldi	r20, 0x07	; 7
    17fc:	6f 2d       	mov	r22, r15
    17fe:	c8 01       	movw	r24, r16
    1800:	0e 94 84 09 	call	0x1308	; 0x1308 <_ZN9MaxMatrix8setRowLLEhhh>
    1804:	de cf       	rjmp	.-68     	; 0x17c2 <_ZN9MaxMatrix9shiftUpLLEbb+0x82>
    1806:	fc 01       	movw	r30, r24
    1808:	ac 01       	movw	r20, r24
    180a:	40 5e       	subi	r20, 0xE0	; 224
    180c:	5f 4f       	sbci	r21, 0xFF	; 255
    } else {
        /* iterate over all Columns and shift the bits */
        for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS; Column++) 
        {
            /* save top row, will be wrapped around later if rotation is active */
            bool TopBit = bitRead(MatrixBuffer[Column], 0);
    180e:	25 81       	ldd	r18, Z+5	; 0x05
            /* shift every bit one step right conforms to shift up */
            MatrixBuffer[Column] >>= 1;
    1810:	82 2f       	mov	r24, r18
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	95 95       	asr	r25
    1816:	87 95       	ror	r24
            /* wrap around saved top row to bottom row */
            if(Rotate) bitWrite(MatrixBuffer[Column], MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, TopBit);
    1818:	ee 20       	and	r14, r14
    181a:	11 f0       	breq	.+4      	; 0x1820 <_ZN9MaxMatrix9shiftUpLLEbb+0xe0>
    181c:	20 fd       	sbrc	r18, 0
    181e:	80 68       	ori	r24, 0x80	; 128
    1820:	85 83       	std	Z+5, r24	; 0x05
    1822:	31 96       	adiw	r30, 0x01	; 1
                setRowLL(Module, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, ModuleTopRow);
            }
        }
    } else {
        /* iterate over all Columns and shift the bits */
        for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS; Column++) 
    1824:	4e 17       	cp	r20, r30
    1826:	5f 07       	cpc	r21, r31
    1828:	91 f7       	brne	.-28     	; 0x180e <_ZN9MaxMatrix9shiftUpLLEbb+0xce>
    182a:	d1 cf       	rjmp	.-94     	; 0x17ce <_ZN9MaxMatrix9shiftUpLLEbb+0x8e>

0000182c <_ZN9MaxMatrix11shiftDownLLEbb>:
 *  \param[in]      Rotate                      activate rotation of the matrix LED states
 *  \param[in]      ShiftToNeighbourModule      shift led states to neighbor module
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftDownLL(bool Rotate, bool ShiftToNeighbourModule)
{
    182c:	af 92       	push	r10
    182e:	bf 92       	push	r11
    1830:	df 92       	push	r13
    1832:	ef 92       	push	r14
    1834:	ff 92       	push	r15
    1836:	0f 93       	push	r16
    1838:	1f 93       	push	r17
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	00 d0       	rcall	.+0      	; 0x1840 <_ZN9MaxMatrix11shiftDownLLEbb+0x14>
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	8c 01       	movw	r16, r24
    1846:	e6 2e       	mov	r14, r22
    byte ModuleBottomRow = 0;
    1848:	1a 82       	std	Y+2, r1	; 0x02
    byte MatrixBottomRow = 0;
    184a:	19 82       	std	Y+1, r1	; 0x01

    /* should we shift the state to the next module? */
    if(ShiftToNeighbourModule) {
    184c:	44 23       	and	r20, r20
    184e:	09 f4       	brne	.+2      	; 0x1852 <_ZN9MaxMatrix11shiftDownLLEbb+0x26>
    1850:	4d c0       	rjmp	.+154    	; 0x18ec <_ZN9MaxMatrix11shiftDownLLEbb+0xc0>
    1852:	5c 01       	movw	r10, r24
    1854:	85 e0       	ldi	r24, 0x05	; 5
    1856:	a8 0e       	add	r10, r24
    1858:	b1 1c       	adc	r11, r1
    185a:	f1 2c       	mov	r15, r1
        /* shift to neighbor module is more complicated, we have to iterate over every module */
        for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++)
        {
            /* save matrix bottom row, will be wrapped around later if rotation is active */
            if(Module == 0 && Rotate) getRowLL(0, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, &MatrixBottomRow);
    185c:	f1 10       	cpse	r15, r1
    185e:	0a c0       	rjmp	.+20     	; 0x1874 <_ZN9MaxMatrix11shiftDownLLEbb+0x48>
    1860:	ee 20       	and	r14, r14
    1862:	41 f0       	breq	.+16     	; 0x1874 <_ZN9MaxMatrix11shiftDownLLEbb+0x48>
    1864:	9e 01       	movw	r18, r28
    1866:	2f 5f       	subi	r18, 0xFF	; 255
    1868:	3f 4f       	sbci	r19, 0xFF	; 255
    186a:	47 e0       	ldi	r20, 0x07	; 7
    186c:	60 e0       	ldi	r22, 0x00	; 0
    186e:	c8 01       	movw	r24, r16
    1870:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZN9MaxMatrix8getRowLLEhhPh>
            /* save module top row will be set to next module later */
            getRowLL(Module + 1, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, &ModuleBottomRow);
    1874:	dd 24       	eor	r13, r13
    1876:	d3 94       	inc	r13
    1878:	df 0c       	add	r13, r15
    187a:	9e 01       	movw	r18, r28
    187c:	2e 5f       	subi	r18, 0xFE	; 254
    187e:	3f 4f       	sbci	r19, 0xFF	; 255
    1880:	47 e0       	ldi	r20, 0x07	; 7
    1882:	6d 2d       	mov	r22, r13
    1884:	c8 01       	movw	r24, r16
    1886:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZN9MaxMatrix8getRowLLEhhPh>
    188a:	f5 01       	movw	r30, r10
            /* shift every bit in column one step left conforms to shift down */
            for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; Column++)
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	90 e0       	ldi	r25, 0x00	; 0
                MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] <<= 1;
    1890:	20 81       	ld	r18, Z
    1892:	22 0f       	add	r18, r18
    1894:	21 93       	st	Z+, r18
            /* save matrix bottom row, will be wrapped around later if rotation is active */
            if(Module == 0 && Rotate) getRowLL(0, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, &MatrixBottomRow);
            /* save module top row will be set to next module later */
            getRowLL(Module + 1, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, &ModuleBottomRow);
            /* shift every bit in column one step left conforms to shift down */
            for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; Column++)
    1896:	01 96       	adiw	r24, 0x01	; 1
    1898:	88 30       	cpi	r24, 0x08	; 8
    189a:	91 05       	cpc	r25, r1
    189c:	c9 f7       	brne	.-14     	; 0x1890 <_ZN9MaxMatrix11shiftDownLLEbb+0x64>
                MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] <<= 1;
            /* last module wrap around saved matrix bottom row */
            if(Module == MAXMATRIX_NUMBER_OF_MODULES - 1) {
    189e:	83 e0       	ldi	r24, 0x03	; 3
    18a0:	f8 12       	cpse	r15, r24
    18a2:	1d c0       	rjmp	.+58     	; 0x18de <_ZN9MaxMatrix11shiftDownLLEbb+0xb2>
                if(Rotate) setRowLL(Module, 0, MatrixBottomRow);
    18a4:	e1 10       	cpse	r14, r1
    18a6:	17 c0       	rjmp	.+46     	; 0x18d6 <_ZN9MaxMatrix11shiftDownLLEbb+0xaa>
    18a8:	88 e0       	ldi	r24, 0x08	; 8
    18aa:	a8 0e       	add	r10, r24
    18ac:	b1 1c       	adc	r11, r1
    byte MatrixBottomRow = 0;

    /* should we shift the state to the next module? */
    if(ShiftToNeighbourModule) {
        /* shift to neighbor module is more complicated, we have to iterate over every module */
        for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++)
    18ae:	84 e0       	ldi	r24, 0x04	; 4
    18b0:	d8 12       	cpse	r13, r24
    18b2:	0f c0       	rjmp	.+30     	; 0x18d2 <_ZN9MaxMatrix11shiftDownLLEbb+0xa6>
            MatrixBuffer[Column] <<= 1;
            /* wrap around saved bottom row to top row */
            if(Rotate) bitWrite(MatrixBuffer[Column], 0, BottomBit);
        }
    }
    reload();
    18b4:	c8 01       	movw	r24, r16
    18b6:	0e 94 c3 05 	call	0xb86	; 0xb86 <_ZN9MaxMatrix6reloadEv>
} /* shiftDownLL */
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	df 91       	pop	r29
    18c0:	cf 91       	pop	r28
    18c2:	1f 91       	pop	r17
    18c4:	0f 91       	pop	r16
    18c6:	ff 90       	pop	r15
    18c8:	ef 90       	pop	r14
    18ca:	df 90       	pop	r13
    18cc:	bf 90       	pop	r11
    18ce:	af 90       	pop	r10
    18d0:	08 95       	ret
    18d2:	fd 2c       	mov	r15, r13
    18d4:	c3 cf       	rjmp	.-122    	; 0x185c <_ZN9MaxMatrix11shiftDownLLEbb+0x30>
            /* shift every bit in column one step left conforms to shift down */
            for(int Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; Column++)
                MatrixBuffer[Column + (MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module)] <<= 1;
            /* last module wrap around saved matrix bottom row */
            if(Module == MAXMATRIX_NUMBER_OF_MODULES - 1) {
                if(Rotate) setRowLL(Module, 0, MatrixBottomRow);
    18d6:	29 81       	ldd	r18, Y+1	; 0x01
    18d8:	40 e0       	ldi	r20, 0x00	; 0
    18da:	63 e0       	ldi	r22, 0x03	; 3
    18dc:	03 c0       	rjmp	.+6      	; 0x18e4 <_ZN9MaxMatrix11shiftDownLLEbb+0xb8>
            } else {
            /* for all other modules set saved module bottom row */
                setRowLL(Module, 0, ModuleBottomRow);
    18de:	2a 81       	ldd	r18, Y+2	; 0x02
    18e0:	40 e0       	ldi	r20, 0x00	; 0
    18e2:	6f 2d       	mov	r22, r15
    18e4:	c8 01       	movw	r24, r16
    18e6:	0e 94 84 09 	call	0x1308	; 0x1308 <_ZN9MaxMatrix8setRowLLEhhh>
    18ea:	de cf       	rjmp	.-68     	; 0x18a8 <_ZN9MaxMatrix11shiftDownLLEbb+0x7c>
    18ec:	fc 01       	movw	r30, r24
    18ee:	9c 01       	movw	r18, r24
    18f0:	20 5e       	subi	r18, 0xE0	; 224
    18f2:	3f 4f       	sbci	r19, 0xFF	; 255
    } else {
        /* iterate over all Columns and shift the bits */
        for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS; Column++) 
        {
            /* save bottom row, will be wrapped around later if rotation is active */
            bool BottomBit = bitRead(MatrixBuffer[Column], MAXMATRIX_ROW_NUMBER_OF_MODULE - 1);
    18f4:	95 81       	ldd	r25, Z+5	; 0x05
            /* shift every bit one step left conforms to shift down */
            MatrixBuffer[Column] <<= 1;
    18f6:	89 2f       	mov	r24, r25
    18f8:	88 0f       	add	r24, r24
    18fa:	85 83       	std	Z+5, r24	; 0x05
            /* wrap around saved bottom row to top row */
            if(Rotate) bitWrite(MatrixBuffer[Column], 0, BottomBit);
    18fc:	ee 20       	and	r14, r14
    18fe:	21 f0       	breq	.+8      	; 0x1908 <_ZN9MaxMatrix11shiftDownLLEbb+0xdc>
    1900:	97 ff       	sbrs	r25, 7
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <_ZN9MaxMatrix11shiftDownLLEbb+0xdc>
    1904:	81 60       	ori	r24, 0x01	; 1
    1906:	85 83       	std	Z+5, r24	; 0x05
    1908:	31 96       	adiw	r30, 0x01	; 1
                setRowLL(Module, 0, ModuleBottomRow);
            }
        }
    } else {
        /* iterate over all Columns and shift the bits */
        for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS; Column++) 
    190a:	2e 17       	cp	r18, r30
    190c:	3f 07       	cpc	r19, r31
    190e:	91 f7       	brne	.-28     	; 0x18f4 <_ZN9MaxMatrix11shiftDownLLEbb+0xc8>
    1910:	d1 cf       	rjmp	.-94     	; 0x18b4 <_ZN9MaxMatrix11shiftDownLLEbb+0x88>

00001912 <_ZN9MaxMatrix9shiftLeftEbb>:
 *  \param[in]      Rotate          activate rotation of the matrix LED states
 *  \param[in]      FillWithZero    initialize the column on the right side with zero.
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftLeft(bool Rotate, bool FillWithZero)
{
    1912:	0f 93       	push	r16
    1914:	1f 93       	push	r17
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	ec 01       	movw	r28, r24
    191c:	16 2f       	mov	r17, r22
    191e:	04 2f       	mov	r16, r20
    if(Orientation == MAXMATRIX_MODULE_ORIENTATION_0) shiftLeftLL(Rotate, FillWithZero, true);
    1920:	8c 81       	ldd	r24, Y+4	; 0x04
    1922:	81 11       	cpse	r24, r1
    1924:	04 c0       	rjmp	.+8      	; 0x192e <_ZN9MaxMatrix9shiftLeftEbb+0x1c>
    1926:	21 e0       	ldi	r18, 0x01	; 1
    1928:	ce 01       	movw	r24, r28
    192a:	0e 94 30 0b 	call	0x1660	; 0x1660 <_ZN9MaxMatrix11shiftLeftLLEbbb>
    if(Orientation == MAXMATRIX_MODULE_ORIENTATION_90) shiftUpLL(Rotate, true);
    192e:	8c 81       	ldd	r24, Y+4	; 0x04
    1930:	81 30       	cpi	r24, 0x01	; 1
    1932:	29 f4       	brne	.+10     	; 0x193e <_ZN9MaxMatrix9shiftLeftEbb+0x2c>
    1934:	41 e0       	ldi	r20, 0x01	; 1
    1936:	61 2f       	mov	r22, r17
    1938:	ce 01       	movw	r24, r28
    193a:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN9MaxMatrix9shiftUpLLEbb>
    if(Orientation == MAXMATRIX_MODULE_ORIENTATION_180) shiftRightLL(Rotate, FillWithZero, true);
    193e:	8c 81       	ldd	r24, Y+4	; 0x04
    1940:	82 30       	cpi	r24, 0x02	; 2
    1942:	31 f4       	brne	.+12     	; 0x1950 <_ZN9MaxMatrix9shiftLeftEbb+0x3e>
    1944:	21 e0       	ldi	r18, 0x01	; 1
    1946:	40 2f       	mov	r20, r16
    1948:	61 2f       	mov	r22, r17
    194a:	ce 01       	movw	r24, r28
    194c:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <_ZN9MaxMatrix12shiftRightLLEbbb>
    if(Orientation == MAXMATRIX_MODULE_ORIENTATION_270) shiftDownLL(Rotate, true);
    1950:	8c 81       	ldd	r24, Y+4	; 0x04
    1952:	83 30       	cpi	r24, 0x03	; 3
    1954:	49 f4       	brne	.+18     	; 0x1968 <_ZN9MaxMatrix9shiftLeftEbb+0x56>
    1956:	41 e0       	ldi	r20, 0x01	; 1
    1958:	61 2f       	mov	r22, r17
    195a:	ce 01       	movw	r24, r28
} /* shiftLeft */
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	1f 91       	pop	r17
    1962:	0f 91       	pop	r16
void MaxMatrix::shiftLeft(bool Rotate, bool FillWithZero)
{
    if(Orientation == MAXMATRIX_MODULE_ORIENTATION_0) shiftLeftLL(Rotate, FillWithZero, true);
    if(Orientation == MAXMATRIX_MODULE_ORIENTATION_90) shiftUpLL(Rotate, true);
    if(Orientation == MAXMATRIX_MODULE_ORIENTATION_180) shiftRightLL(Rotate, FillWithZero, true);
    if(Orientation == MAXMATRIX_MODULE_ORIENTATION_270) shiftDownLL(Rotate, true);
    1964:	0c 94 16 0c 	jmp	0x182c	; 0x182c <_ZN9MaxMatrix11shiftDownLLEbb>
} /* shiftLeft */
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	1f 91       	pop	r17
    196e:	0f 91       	pop	r16
    1970:	08 95       	ret

00001972 <_ZN9MaxMatrix13charShiftTaskEv>:
 *                  MAXMATRIX_STATE_CHAR_SHIFT or MAXMATRIX_STATE_STRING_SHIFT to MAXMATRIX_STATE_READY
 *  \return         -
 *  \pre            has to be called from shiftTask()
 *****************************************************************************************************************************************************/
void MaxMatrix::charShiftTask()
{
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	ec 01       	movw	r28, r24
    shiftLeft(false, true);
    1978:	41 e0       	ldi	r20, 0x01	; 1
    197a:	60 e0       	ldi	r22, 0x00	; 0
    197c:	0e 94 89 0c 	call	0x1912	; 0x1912 <_ZN9MaxMatrix9shiftLeftEbb>
    SpriteShiftCounter++;
    1980:	9c a5       	ldd	r25, Y+44	; 0x2c
    1982:	9f 5f       	subi	r25, 0xFF	; 255
    1984:	9c a7       	std	Y+44, r25	; 0x2c
    
    /* if sprite is completed set only spaces */
    if(SpriteShiftCounter <= SpriteBuffer[ASCII_TABLE_SPRITE_WIDTH]) {
    1986:	8d a1       	ldd	r24, Y+37	; 0x25
    1988:	49 2f       	mov	r20, r25
    198a:	50 e0       	ldi	r21, 0x00	; 0
    198c:	89 17       	cp	r24, r25
    198e:	70 f0       	brcs	.+28     	; 0x19ac <_ZN9MaxMatrix13charShiftTaskEv+0x3a>
        setSprite(MAXMATRIX_NUMBER_OF_COLUMNS - SpriteShiftCounter, 0, SpriteBuffer);
    1990:	9e 01       	movw	r18, r28
    1992:	2b 5d       	subi	r18, 0xDB	; 219
    1994:	3f 4f       	sbci	r19, 0xFF	; 255
    1996:	60 e2       	ldi	r22, 0x20	; 32
    1998:	70 e0       	ldi	r23, 0x00	; 0
    199a:	64 1b       	sub	r22, r20
    199c:	75 0b       	sbc	r23, r21
    199e:	40 e0       	ldi	r20, 0x00	; 0
    19a0:	50 e0       	ldi	r21, 0x00	; 0
    19a2:	ce 01       	movw	r24, r28
    /* if sprite and spaces are completed task has finished */
    else if(SpriteShiftCounter == SpriteBuffer[ASCII_TABLE_SPRITE_WIDTH] + SpaceBetweenChars + 1) {
        if(MAXMATRIX_STATE_CHAR_SHIFT == State) State = MAXMATRIX_STATE_READY;
        SpriteShiftCounter = MAXMATRIX_SPRITE_SHIFT_STATE_READY;
    }
} /* charShiftTask */
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    shiftLeft(false, true);
    SpriteShiftCounter++;
    
    /* if sprite is completed set only spaces */
    if(SpriteShiftCounter <= SpriteBuffer[ASCII_TABLE_SPRITE_WIDTH]) {
        setSprite(MAXMATRIX_NUMBER_OF_COLUMNS - SpriteShiftCounter, 0, SpriteBuffer);
    19a8:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <_ZN9MaxMatrix9setSpriteEiiPKh>
    }
    /* if sprite and spaces are completed task has finished */
    else if(SpriteShiftCounter == SpriteBuffer[ASCII_TABLE_SPRITE_WIDTH] + SpaceBetweenChars + 1) {
    19ac:	2d a5       	ldd	r18, Y+45	; 0x2d
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	82 0f       	add	r24, r18
    19b2:	91 1d       	adc	r25, r1
    19b4:	01 96       	adiw	r24, 0x01	; 1
    19b6:	48 17       	cp	r20, r24
    19b8:	59 07       	cpc	r21, r25
    19ba:	31 f4       	brne	.+12     	; 0x19c8 <_ZN9MaxMatrix13charShiftTaskEv+0x56>
        if(MAXMATRIX_STATE_CHAR_SHIFT == State) State = MAXMATRIX_STATE_READY;
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	84 30       	cpi	r24, 0x04	; 4
    19c0:	11 f4       	brne	.+4      	; 0x19c6 <_ZN9MaxMatrix13charShiftTaskEv+0x54>
    19c2:	82 e0       	ldi	r24, 0x02	; 2
    19c4:	8b 83       	std	Y+3, r24	; 0x03
        SpriteShiftCounter = MAXMATRIX_SPRITE_SHIFT_STATE_READY;
    19c6:	1c a6       	std	Y+44, r1	; 0x2c
    }
} /* charShiftTask */
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	08 95       	ret

000019ce <_ZN9MaxMatrix15stringShiftTaskEv>:
 *                  MAXMATRIX_STATE_CHAR_SHIFT or MAXMATRIX_STATE_STRING_SHIFT to MAXMATRIX_STATE_READY
 *  \return         -
 *  \pre            has to be called from shiftTask()
 *****************************************************************************************************************************************************/
void MaxMatrix::stringShiftTask()
{
    19ce:	0f 93       	push	r16
    19d0:	1f 93       	push	r17
    19d2:	cf 93       	push	r28
    19d4:	df 93       	push	r29
    19d6:	1f 92       	push	r1
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	8c 01       	movw	r16, r24
    spriteIndexType SpriteIndex;
    
    /* has char shift task finished shifting sprite or char */
    if(SpriteShiftCounter == MAXMATRIX_SPRITE_SHIFT_STATE_READY)
    19de:	dc 01       	movw	r26, r24
    19e0:	9c 96       	adiw	r26, 0x2c	; 44
    19e2:	8c 91       	ld	r24, X
    19e4:	9c 97       	sbiw	r26, 0x2c	; 44
    19e6:	81 11       	cpse	r24, r1
    19e8:	2e c0       	rjmp	.+92     	; 0x1a46 <_ZN9MaxMatrix15stringShiftTaskEv+0x78>
    {
        /* If end of string is not reached, load next char */
        if(*String != STD_NULL_CHARACTER) {
    19ea:	9e 96       	adiw	r26, 0x2e	; 46
    19ec:	ed 91       	ld	r30, X+
    19ee:	fc 91       	ld	r31, X
    19f0:	9f 97       	sbiw	r26, 0x2f	; 47
    19f2:	60 81       	ld	r22, Z
    19f4:	66 23       	and	r22, r22
    19f6:	f1 f0       	breq	.+60     	; 0x1a34 <_ZN9MaxMatrix15stringShiftTaskEv+0x66>
            convertCharToSprite(*String, &SpriteIndex);
    19f8:	ae 01       	movw	r20, r28
    19fa:	4f 5f       	subi	r20, 0xFF	; 255
    19fc:	5f 4f       	sbci	r21, 0xFF	; 255
    19fe:	c8 01       	movw	r24, r16
    1a00:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_ZN9MaxMatrix19convertCharToSpriteEcPh>
            getSprite(SpriteIndex, &SpriteBuffer);
    1a04:	a8 01       	movw	r20, r16
    1a06:	4b 5d       	subi	r20, 0xDB	; 219
    1a08:	5f 4f       	sbci	r21, 0xFF	; 255
    1a0a:	69 81       	ldd	r22, Y+1	; 0x01
    1a0c:	c8 01       	movw	r24, r16
    1a0e:	0e 94 9a 05 	call	0xb34	; 0xb34 <_ZN9MaxMatrix9getSpriteEhPA7_h>
            SpriteShiftCounter = MAXMATRIX_SPRITE_SHIFT_STATE_RUNNING;
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	f8 01       	movw	r30, r16
    1a16:	84 a7       	std	Z+44, r24	; 0x2c
            charShiftTask();
    1a18:	c8 01       	movw	r24, r16
    1a1a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <_ZN9MaxMatrix13charShiftTaskEv>
            String++;
    1a1e:	d8 01       	movw	r26, r16
    1a20:	9e 96       	adiw	r26, 0x2e	; 46
    1a22:	8d 91       	ld	r24, X+
    1a24:	9c 91       	ld	r25, X
    1a26:	9f 97       	sbiw	r26, 0x2f	; 47
    1a28:	01 96       	adiw	r24, 0x01	; 1
    1a2a:	9f 96       	adiw	r26, 0x2f	; 47
    1a2c:	9c 93       	st	X, r25
    1a2e:	8e 93       	st	-X, r24
    1a30:	9e 97       	sbiw	r26, 0x2e	; 46
    1a32:	0c c0       	rjmp	.+24     	; 0x1a4c <_ZN9MaxMatrix15stringShiftTaskEv+0x7e>
        } else { /* otherwise task has finished */
            State = MAXMATRIX_STATE_READY;
    1a34:	82 e0       	ldi	r24, 0x02	; 2
    1a36:	f8 01       	movw	r30, r16
    1a38:	83 83       	std	Z+3, r24	; 0x03
            shiftLeft(false, true);
    1a3a:	41 e0       	ldi	r20, 0x01	; 1
    1a3c:	60 e0       	ldi	r22, 0x00	; 0
    1a3e:	c8 01       	movw	r24, r16
    1a40:	0e 94 89 0c 	call	0x1912	; 0x1912 <_ZN9MaxMatrix9shiftLeftEbb>
    1a44:	03 c0       	rjmp	.+6      	; 0x1a4c <_ZN9MaxMatrix15stringShiftTaskEv+0x7e>
        }
    } else {
        /* go on shifting Sprite */
        charShiftTask();
    1a46:	c8 01       	movw	r24, r16
    1a48:	0e 94 b9 0c 	call	0x1972	; 0x1972 <_ZN9MaxMatrix13charShiftTaskEv>
    }
} /* stringShiftTask */
    1a4c:	0f 90       	pop	r0
    1a4e:	df 91       	pop	r29
    1a50:	cf 91       	pop	r28
    1a52:	1f 91       	pop	r17
    1a54:	0f 91       	pop	r16
    1a56:	08 95       	ret

00001a58 <_ZN9MaxMatrix9shiftTaskEv>:
 *                  MAXMATRIX_STATE_CHAR_SHIFT or MAXMATRIX_STATE_STRING_SHIFT to MAXMATRIX_STATE_READY
 *  \return         -
 *  \pre            setCharWithShift or setTextWithShift must be called first
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftTask()
{
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	ec 01       	movw	r28, r24
    if(MAXMATRIX_STATE_STRING_SHIFT == State) stringShiftTask();
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	83 30       	cpi	r24, 0x03	; 3
    1a62:	19 f4       	brne	.+6      	; 0x1a6a <_ZN9MaxMatrix9shiftTaskEv+0x12>
    1a64:	ce 01       	movw	r24, r28
    1a66:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <_ZN9MaxMatrix15stringShiftTaskEv>
    if(MAXMATRIX_STATE_CHAR_SHIFT == State) charShiftTask();
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	84 30       	cpi	r24, 0x04	; 4
    1a6e:	29 f4       	brne	.+10     	; 0x1a7a <_ZN9MaxMatrix9shiftTaskEv+0x22>
    1a70:	ce 01       	movw	r24, r28
} /* shiftTask */
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
 *  \pre            setCharWithShift or setTextWithShift must be called first
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftTask()
{
    if(MAXMATRIX_STATE_STRING_SHIFT == State) stringShiftTask();
    if(MAXMATRIX_STATE_CHAR_SHIFT == State) charShiftTask();
    1a76:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <_ZN9MaxMatrix13charShiftTaskEv>
} /* shiftTask */
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	08 95       	ret

00001a80 <__vector_13>:
  else if(pin == 2 || pin == 10) {
    DDRB |= _BV(PORTB2);
    TCCR1A |= _BV(COM1B1);
  }
  setPwmDuty(pin, duty);
  resume();			// Lex - make sure the clock is running.  We don't want to restart the count, in case we are starting the second WGM
    1a80:	1f 92       	push	r1
    1a82:	0f 92       	push	r0
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	0f 92       	push	r0
    1a88:	11 24       	eor	r1, r1
    1a8a:	2f 93       	push	r18
    1a8c:	3f 93       	push	r19
    1a8e:	4f 93       	push	r20
    1a90:	5f 93       	push	r21
    1a92:	6f 93       	push	r22
    1a94:	7f 93       	push	r23
    1a96:	8f 93       	push	r24
    1a98:	9f 93       	push	r25
    1a9a:	af 93       	push	r26
    1a9c:	bf 93       	push	r27
    1a9e:	ef 93       	push	r30
    1aa0:	ff 93       	push	r31
    1aa2:	e0 91 59 02 	lds	r30, 0x0259	; 0x800259 <Timer1+0x4>
    1aa6:	f0 91 5a 02 	lds	r31, 0x025A	; 0x80025a <Timer1+0x5>
    1aaa:	09 95       	icall
    1aac:	ff 91       	pop	r31
    1aae:	ef 91       	pop	r30
    1ab0:	bf 91       	pop	r27
    1ab2:	af 91       	pop	r26
    1ab4:	9f 91       	pop	r25
    1ab6:	8f 91       	pop	r24
    1ab8:	7f 91       	pop	r23
    1aba:	6f 91       	pop	r22
    1abc:	5f 91       	pop	r21
    1abe:	4f 91       	pop	r20
    1ac0:	3f 91       	pop	r19
    1ac2:	2f 91       	pop	r18
    1ac4:	0f 90       	pop	r0
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	0f 90       	pop	r0
    1aca:	1f 90       	pop	r1
    1acc:	18 95       	reti

00001ace <_ZN8TimerOne9setPeriodEl>:
    1ace:	fc 01       	movw	r30, r24
    1ad0:	a3 e0       	ldi	r26, 0x03	; 3
    1ad2:	44 0f       	add	r20, r20
    1ad4:	55 1f       	adc	r21, r21
    1ad6:	66 1f       	adc	r22, r22
    1ad8:	77 1f       	adc	r23, r23
    1ada:	aa 95       	dec	r26
    1adc:	d1 f7       	brne	.-12     	; 0x1ad2 <_ZN8TimerOne9setPeriodEl+0x4>
    1ade:	41 15       	cp	r20, r1
    1ae0:	51 05       	cpc	r21, r1
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	68 07       	cpc	r22, r24
    1ae6:	71 05       	cpc	r23, r1
    1ae8:	14 f4       	brge	.+4      	; 0x1aee <_ZN8TimerOne9setPeriodEl+0x20>
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	0e c0       	rjmp	.+28     	; 0x1b0a <_ZN8TimerOne9setPeriodEl+0x3c>
    1aee:	33 e0       	ldi	r19, 0x03	; 3
    1af0:	75 95       	asr	r23
    1af2:	67 95       	ror	r22
    1af4:	57 95       	ror	r21
    1af6:	47 95       	ror	r20
    1af8:	3a 95       	dec	r19
    1afa:	d1 f7       	brne	.-12     	; 0x1af0 <_ZN8TimerOne9setPeriodEl+0x22>
    1afc:	41 15       	cp	r20, r1
    1afe:	51 05       	cpc	r21, r1
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	68 07       	cpc	r22, r24
    1b04:	71 05       	cpc	r23, r1
    1b06:	1c f4       	brge	.+6      	; 0x1b0e <_ZN8TimerOne9setPeriodEl+0x40>
    1b08:	82 e0       	ldi	r24, 0x02	; 2
    1b0a:	82 83       	std	Z+2, r24	; 0x02
    1b0c:	31 c0       	rjmp	.+98     	; 0x1b70 <_ZN8TimerOne9setPeriodEl+0xa2>
    1b0e:	23 e0       	ldi	r18, 0x03	; 3
    1b10:	75 95       	asr	r23
    1b12:	67 95       	ror	r22
    1b14:	57 95       	ror	r21
    1b16:	47 95       	ror	r20
    1b18:	2a 95       	dec	r18
    1b1a:	d1 f7       	brne	.-12     	; 0x1b10 <_ZN8TimerOne9setPeriodEl+0x42>
    1b1c:	41 15       	cp	r20, r1
    1b1e:	51 05       	cpc	r21, r1
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	68 07       	cpc	r22, r24
    1b24:	71 05       	cpc	r23, r1
    1b26:	14 f4       	brge	.+4      	; 0x1b2c <_ZN8TimerOne9setPeriodEl+0x5e>
    1b28:	83 e0       	ldi	r24, 0x03	; 3
    1b2a:	ef cf       	rjmp	.-34     	; 0x1b0a <_ZN8TimerOne9setPeriodEl+0x3c>
    1b2c:	92 e0       	ldi	r25, 0x02	; 2
    1b2e:	75 95       	asr	r23
    1b30:	67 95       	ror	r22
    1b32:	57 95       	ror	r21
    1b34:	47 95       	ror	r20
    1b36:	9a 95       	dec	r25
    1b38:	d1 f7       	brne	.-12     	; 0x1b2e <_ZN8TimerOne9setPeriodEl+0x60>
    1b3a:	41 15       	cp	r20, r1
    1b3c:	51 05       	cpc	r21, r1
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	68 07       	cpc	r22, r24
    1b42:	71 05       	cpc	r23, r1
    1b44:	14 f4       	brge	.+4      	; 0x1b4a <_ZN8TimerOne9setPeriodEl+0x7c>
    1b46:	84 e0       	ldi	r24, 0x04	; 4
    1b48:	e0 cf       	rjmp	.-64     	; 0x1b0a <_ZN8TimerOne9setPeriodEl+0x3c>
    1b4a:	82 e0       	ldi	r24, 0x02	; 2
    1b4c:	75 95       	asr	r23
    1b4e:	67 95       	ror	r22
    1b50:	57 95       	ror	r21
    1b52:	47 95       	ror	r20
    1b54:	8a 95       	dec	r24
    1b56:	d1 f7       	brne	.-12     	; 0x1b4c <_ZN8TimerOne9setPeriodEl+0x7e>
    1b58:	85 e0       	ldi	r24, 0x05	; 5
    1b5a:	82 83       	std	Z+2, r24	; 0x02
    1b5c:	41 15       	cp	r20, r1
    1b5e:	51 05       	cpc	r21, r1
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	68 07       	cpc	r22, r24
    1b64:	71 05       	cpc	r23, r1
    1b66:	24 f0       	brlt	.+8      	; 0x1b70 <_ZN8TimerOne9setPeriodEl+0xa2>
    1b68:	4f ef       	ldi	r20, 0xFF	; 255
    1b6a:	5f ef       	ldi	r21, 0xFF	; 255
    1b6c:	60 e0       	ldi	r22, 0x00	; 0
    1b6e:	70 e0       	ldi	r23, 0x00	; 0
    1b70:	8f b7       	in	r24, 0x3f	; 63
    1b72:	83 83       	std	Z+3, r24	; 0x03
    1b74:	f8 94       	cli
    1b76:	51 83       	std	Z+1, r21	; 0x01
    1b78:	40 83       	st	Z, r20
    1b7a:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1b7e:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    1b82:	83 81       	ldd	r24, Z+3	; 0x03
    1b84:	8f bf       	out	0x3f, r24	; 63
    1b86:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1b8a:	88 7f       	andi	r24, 0xF8	; 248
    1b8c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1b90:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1b94:	82 81       	ldd	r24, Z+2	; 0x02
    1b96:	89 2b       	or	r24, r25
    1b98:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1b9c:	08 95       	ret

00001b9e <_ZN8TimerOne10initializeEl>:
    1b9e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1ba2:	20 e1       	ldi	r18, 0x10	; 16
    1ba4:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1ba8:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <_ZN8TimerOne9setPeriodEl>

00001bac <_ZN8TimerOne6resumeEv>:
    1bac:	e1 e8       	ldi	r30, 0x81	; 129
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	20 81       	ld	r18, Z
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	12 96       	adiw	r26, 0x02	; 2
    1bb6:	8c 91       	ld	r24, X
    1bb8:	82 2b       	or	r24, r18
    1bba:	80 83       	st	Z, r24
    1bbc:	08 95       	ret

00001bbe <_ZN8TimerOne15attachInterruptEPFvvEl>:
  if(pin == 1 || pin == 9)       TCCR1A &= ~_BV(COM1A1);   // clear the bit that enables pwm on PB1
  else if(pin == 2 || pin == 10) TCCR1A &= ~_BV(COM1B1);   // clear the bit that enables pwm on PB2
}

void TimerOne::attachInterrupt(void (*isr)(), long microseconds)
{
    1bbe:	0f 93       	push	r16
    1bc0:	1f 93       	push	r17
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	ec 01       	movw	r28, r24
    1bc8:	8b 01       	movw	r16, r22
    1bca:	ba 01       	movw	r22, r20
    1bcc:	a9 01       	movw	r20, r18
  if(microseconds > 0) setPeriod(microseconds);
    1bce:	14 16       	cp	r1, r20
    1bd0:	15 06       	cpc	r1, r21
    1bd2:	16 06       	cpc	r1, r22
    1bd4:	17 06       	cpc	r1, r23
    1bd6:	14 f4       	brge	.+4      	; 0x1bdc <_ZN8TimerOne15attachInterruptEPFvvEl+0x1e>
    1bd8:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_ZN8TimerOne9setPeriodEl>
  isrCallback = isr;                                       // register the user's callback with the real ISR
    1bdc:	1d 83       	std	Y+5, r17	; 0x05
    1bde:	0c 83       	std	Y+4, r16	; 0x04
  TIMSK1 = _BV(TOIE1);                                     // sets the timer overflow interrupt enable bit
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	// might be running with interrupts disabled (eg inside an ISR), so don't touch the global state
//  sei();
  resume();												
    1be6:	ce 01       	movw	r24, r28
}
    1be8:	df 91       	pop	r29
    1bea:	cf 91       	pop	r28
    1bec:	1f 91       	pop	r17
    1bee:	0f 91       	pop	r16
  if(microseconds > 0) setPeriod(microseconds);
  isrCallback = isr;                                       // register the user's callback with the real ISR
  TIMSK1 = _BV(TOIE1);                                     // sets the timer overflow interrupt enable bit
	// might be running with interrupts disabled (eg inside an ISR), so don't touch the global state
//  sei();
  resume();												
    1bf0:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <_ZN8TimerOne6resumeEv>

00001bf4 <__vector_9>:

/******************************************************************************************************************************************************
  I S R   F U N C T I O N S
******************************************************************************************************************************************************/
ISR(TIMER2_OVF_vect)
{
    1bf4:	1f 92       	push	r1
    1bf6:	0f 92       	push	r0
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	0f 92       	push	r0
    1bfc:	11 24       	eor	r1, r1
    1bfe:	2f 93       	push	r18
    1c00:	3f 93       	push	r19
    1c02:	4f 93       	push	r20
    1c04:	5f 93       	push	r21
    1c06:	6f 93       	push	r22
    1c08:	7f 93       	push	r23
    1c0a:	8f 93       	push	r24
    1c0c:	9f 93       	push	r25
    1c0e:	af 93       	push	r26
    1c10:	bf 93       	push	r27
    1c12:	ef 93       	push	r30
    1c14:	ff 93       	push	r31
	Timer2.TimerOverflowCallback();
    1c16:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <Timer2+0x4>
    1c1a:	f0 91 60 02 	lds	r31, 0x0260	; 0x800260 <Timer2+0x5>
    1c1e:	09 95       	icall
}
    1c20:	ff 91       	pop	r31
    1c22:	ef 91       	pop	r30
    1c24:	bf 91       	pop	r27
    1c26:	af 91       	pop	r26
    1c28:	9f 91       	pop	r25
    1c2a:	8f 91       	pop	r24
    1c2c:	7f 91       	pop	r23
    1c2e:	6f 91       	pop	r22
    1c30:	5f 91       	pop	r21
    1c32:	4f 91       	pop	r20
    1c34:	3f 91       	pop	r19
    1c36:	2f 91       	pop	r18
    1c38:	0f 90       	pop	r0
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	0f 90       	pop	r0
    1c3e:	1f 90       	pop	r1
    1c40:	18 95       	reti

00001c42 <_GLOBAL__sub_I_Timer2>:
 *    
 *  \return         -
 *****************************************************************************************************************************************************/
TimerTwo::TimerTwo()
{
	State = TIMERTWO_STATE_NONE;
    1c42:	eb e5       	ldi	r30, 0x5B	; 91
    1c44:	f2 e0       	ldi	r31, 0x02	; 2
    1c46:	10 82       	st	Z, r1
	TimerOverflowCallback = NULL;
    1c48:	15 82       	std	Z+5, r1	; 0x05
    1c4a:	14 82       	std	Z+4, r1	; 0x04
	ClockSelectBitGroup = TIMERTWO_REG_CS_NO_CLOCK;
    1c4c:	11 82       	std	Z+1, r1	; 0x01
    1c4e:	08 95       	ret

00001c50 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1c50:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1c52:	91 8d       	ldd	r25, Z+25	; 0x19
    1c54:	22 8d       	ldd	r18, Z+26	; 0x1a
    1c56:	89 2f       	mov	r24, r25
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	80 5c       	subi	r24, 0xC0	; 192
    1c5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5e:	82 1b       	sub	r24, r18
    1c60:	91 09       	sbc	r25, r1
}
    1c62:	8f 73       	andi	r24, 0x3F	; 63
    1c64:	99 27       	eor	r25, r25
    1c66:	08 95       	ret

00001c68 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1c68:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1c6a:	91 8d       	ldd	r25, Z+25	; 0x19
    1c6c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c6e:	98 17       	cp	r25, r24
    1c70:	31 f0       	breq	.+12     	; 0x1c7e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1c72:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c74:	e8 0f       	add	r30, r24
    1c76:	f1 1d       	adc	r31, r1
    1c78:	85 8d       	ldd	r24, Z+29	; 0x1d
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1c7e:	8f ef       	ldi	r24, 0xFF	; 255
    1c80:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1c82:	08 95       	ret

00001c84 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1c84:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1c86:	91 8d       	ldd	r25, Z+25	; 0x19
    1c88:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c8a:	98 17       	cp	r25, r24
    1c8c:	61 f0       	breq	.+24     	; 0x1ca6 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1c8e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c90:	df 01       	movw	r26, r30
    1c92:	a8 0f       	add	r26, r24
    1c94:	b1 1d       	adc	r27, r1
    1c96:	5d 96       	adiw	r26, 0x1d	; 29
    1c98:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1c9a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c9c:	9f 5f       	subi	r25, 0xFF	; 255
    1c9e:	9f 73       	andi	r25, 0x3F	; 63
    1ca0:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1ca6:	8f ef       	ldi	r24, 0xFF	; 255
    1ca8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1caa:	08 95       	ret

00001cac <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1cac:	8c ea       	ldi	r24, 0xAC	; 172
    1cae:	9f e0       	ldi	r25, 0x0F	; 15
    1cb0:	89 2b       	or	r24, r25
    1cb2:	49 f0       	breq	.+18     	; 0x1cc6 <_Z14serialEventRunv+0x1a>
    1cb4:	81 e1       	ldi	r24, 0x11	; 17
    1cb6:	95 e0       	ldi	r25, 0x05	; 5
    1cb8:	89 2b       	or	r24, r25
    1cba:	29 f0       	breq	.+10     	; 0x1cc6 <_Z14serialEventRunv+0x1a>
    1cbc:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_Z17Serial0_availablev>
    1cc0:	81 11       	cpse	r24, r1
    1cc2:	0c 94 11 05 	jmp	0xa22	; 0xa22 <_Z11serialEventv>
    1cc6:	08 95       	ret

00001cc8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1cc8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1cca:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ccc:	df 01       	movw	r26, r30
    1cce:	a8 0f       	add	r26, r24
    1cd0:	b1 1d       	adc	r27, r1
    1cd2:	a3 5a       	subi	r26, 0xA3	; 163
    1cd4:	bf 4f       	sbci	r27, 0xFF	; 255
    1cd6:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1cd8:	84 8d       	ldd	r24, Z+28	; 0x1c
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	01 96       	adiw	r24, 0x01	; 1
    1cde:	8f 73       	andi	r24, 0x3F	; 63
    1ce0:	99 27       	eor	r25, r25
    1ce2:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1ce4:	a6 89       	ldd	r26, Z+22	; 0x16
    1ce6:	b7 89       	ldd	r27, Z+23	; 0x17
    1ce8:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1cea:	a0 89       	ldd	r26, Z+16	; 0x10
    1cec:	b1 89       	ldd	r27, Z+17	; 0x11
    1cee:	8c 91       	ld	r24, X
    1cf0:	80 64       	ori	r24, 0x40	; 64
    1cf2:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1cf4:	93 8d       	ldd	r25, Z+27	; 0x1b
    1cf6:	84 8d       	ldd	r24, Z+28	; 0x1c
    1cf8:	98 13       	cpse	r25, r24
    1cfa:	06 c0       	rjmp	.+12     	; 0x1d08 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1cfc:	02 88       	ldd	r0, Z+18	; 0x12
    1cfe:	f3 89       	ldd	r31, Z+19	; 0x13
    1d00:	e0 2d       	mov	r30, r0
    1d02:	80 81       	ld	r24, Z
    1d04:	8f 7d       	andi	r24, 0xDF	; 223
    1d06:	80 83       	st	Z, r24
    1d08:	08 95       	ret

00001d0a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1d0a:	ef 92       	push	r14
    1d0c:	ff 92       	push	r15
    1d0e:	0f 93       	push	r16
    1d10:	1f 93       	push	r17
    1d12:	cf 93       	push	r28
    1d14:	df 93       	push	r29
    1d16:	ec 01       	movw	r28, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1d18:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d1a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d1c:	98 13       	cpse	r25, r24
    1d1e:	05 c0       	rjmp	.+10     	; 0x1d2a <_ZN14HardwareSerial5writeEh+0x20>
    1d20:	e8 89       	ldd	r30, Y+16	; 0x10
    1d22:	f9 89       	ldd	r31, Y+17	; 0x11
    1d24:	80 81       	ld	r24, Z
    1d26:	85 fd       	sbrc	r24, 5
    1d28:	27 c0       	rjmp	.+78     	; 0x1d78 <_ZN14HardwareSerial5writeEh+0x6e>
    1d2a:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1d2c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1d2e:	10 e0       	ldi	r17, 0x00	; 0
    1d30:	0f 5f       	subi	r16, 0xFF	; 255
    1d32:	1f 4f       	sbci	r17, 0xFF	; 255
    1d34:	0f 73       	andi	r16, 0x3F	; 63
    1d36:	11 27       	eor	r17, r17
    1d38:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1d3a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d3c:	e8 12       	cpse	r14, r24
    1d3e:	0c c0       	rjmp	.+24     	; 0x1d58 <_ZN14HardwareSerial5writeEh+0x4e>
    if (bit_is_clear(SREG, SREG_I)) {
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	07 fc       	sbrc	r0, 7
    1d44:	fa cf       	rjmp	.-12     	; 0x1d3a <_ZN14HardwareSerial5writeEh+0x30>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1d46:	e8 89       	ldd	r30, Y+16	; 0x10
    1d48:	f9 89       	ldd	r31, Y+17	; 0x11
    1d4a:	80 81       	ld	r24, Z
    1d4c:	85 ff       	sbrs	r24, 5
    1d4e:	f5 cf       	rjmp	.-22     	; 0x1d3a <_ZN14HardwareSerial5writeEh+0x30>
	_tx_udr_empty_irq();
    1d50:	ce 01       	movw	r24, r28
    1d52:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1d56:	f1 cf       	rjmp	.-30     	; 0x1d3a <_ZN14HardwareSerial5writeEh+0x30>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1d58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	e8 0f       	add	r30, r24
    1d5e:	f1 1d       	adc	r31, r1
    1d60:	e3 5a       	subi	r30, 0xA3	; 163
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1d66:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1d68:	ea 89       	ldd	r30, Y+18	; 0x12
    1d6a:	fb 89       	ldd	r31, Y+19	; 0x13
    1d6c:	80 81       	ld	r24, Z
    1d6e:	80 62       	ori	r24, 0x20	; 32
    1d70:	80 83       	st	Z, r24
  _written = true;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	88 8f       	std	Y+24, r24	; 0x18
    1d76:	08 c0       	rjmp	.+16     	; 0x1d88 <_ZN14HardwareSerial5writeEh+0x7e>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1d78:	ee 89       	ldd	r30, Y+22	; 0x16
    1d7a:	ff 89       	ldd	r31, Y+23	; 0x17
    1d7c:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1d7e:	e8 89       	ldd	r30, Y+16	; 0x10
    1d80:	f9 89       	ldd	r31, Y+17	; 0x11
    1d82:	80 81       	ld	r24, Z
    1d84:	80 64       	ori	r24, 0x40	; 64
    1d86:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	1f 91       	pop	r17
    1d92:	0f 91       	pop	r16
    1d94:	ff 90       	pop	r15
    1d96:	ef 90       	pop	r14
    1d98:	08 95       	ret

00001d9a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1d9a:	cf 93       	push	r28
    1d9c:	df 93       	push	r29
    1d9e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1da0:	88 8d       	ldd	r24, Y+24	; 0x18
    1da2:	88 23       	and	r24, r24
    1da4:	c9 f0       	breq	.+50     	; 0x1dd8 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1da6:	ea 89       	ldd	r30, Y+18	; 0x12
    1da8:	fb 89       	ldd	r31, Y+19	; 0x13
    1daa:	80 81       	ld	r24, Z
    1dac:	85 fd       	sbrc	r24, 5
    1dae:	05 c0       	rjmp	.+10     	; 0x1dba <_ZN14HardwareSerial5flushEv+0x20>
    1db0:	a8 89       	ldd	r26, Y+16	; 0x10
    1db2:	b9 89       	ldd	r27, Y+17	; 0x11
    1db4:	8c 91       	ld	r24, X
    1db6:	86 fd       	sbrc	r24, 6
    1db8:	0f c0       	rjmp	.+30     	; 0x1dd8 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1dba:	0f b6       	in	r0, 0x3f	; 63
    1dbc:	07 fc       	sbrc	r0, 7
    1dbe:	f5 cf       	rjmp	.-22     	; 0x1daa <_ZN14HardwareSerial5flushEv+0x10>
    1dc0:	80 81       	ld	r24, Z
    1dc2:	85 ff       	sbrs	r24, 5
    1dc4:	f2 cf       	rjmp	.-28     	; 0x1daa <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1dc6:	a8 89       	ldd	r26, Y+16	; 0x10
    1dc8:	b9 89       	ldd	r27, Y+17	; 0x11
    1dca:	8c 91       	ld	r24, X
    1dcc:	85 ff       	sbrs	r24, 5
    1dce:	ed cf       	rjmp	.-38     	; 0x1daa <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1dd0:	ce 01       	movw	r24, r28
    1dd2:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1dd6:	e7 cf       	rjmp	.-50     	; 0x1da6 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1dd8:	df 91       	pop	r29
    1dda:	cf 91       	pop	r28
    1ddc:	08 95       	ret

00001dde <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1dde:	cf 92       	push	r12
    1de0:	df 92       	push	r13
    1de2:	ef 92       	push	r14
    1de4:	ff 92       	push	r15
    1de6:	1f 93       	push	r17
    1de8:	cf 93       	push	r28
    1dea:	df 93       	push	r29
    1dec:	ec 01       	movw	r28, r24
    1dee:	6a 01       	movw	r12, r20
    1df0:	7b 01       	movw	r14, r22
    1df2:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1df4:	e8 89       	ldd	r30, Y+16	; 0x10
    1df6:	f9 89       	ldd	r31, Y+17	; 0x11
    1df8:	82 e0       	ldi	r24, 0x02	; 2
    1dfa:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1dfc:	41 15       	cp	r20, r1
    1dfe:	51 4e       	sbci	r21, 0xE1	; 225
    1e00:	61 05       	cpc	r22, r1
    1e02:	71 05       	cpc	r23, r1
    1e04:	b1 f0       	breq	.+44     	; 0x1e32 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1e06:	60 e0       	ldi	r22, 0x00	; 0
    1e08:	79 e0       	ldi	r23, 0x09	; 9
    1e0a:	8d e3       	ldi	r24, 0x3D	; 61
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	a7 01       	movw	r20, r14
    1e10:	96 01       	movw	r18, r12
    1e12:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__udivmodsi4>
    1e16:	da 01       	movw	r26, r20
    1e18:	c9 01       	movw	r24, r18
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	a1 09       	sbc	r26, r1
    1e1e:	b1 09       	sbc	r27, r1
    1e20:	b6 95       	lsr	r27
    1e22:	a7 95       	ror	r26
    1e24:	97 95       	ror	r25
    1e26:	87 95       	ror	r24
    1e28:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1e2a:	21 15       	cp	r18, r1
    1e2c:	80 e1       	ldi	r24, 0x10	; 16
    1e2e:	38 07       	cpc	r19, r24
    1e30:	a8 f0       	brcs	.+42     	; 0x1e5c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1e32:	e8 89       	ldd	r30, Y+16	; 0x10
    1e34:	f9 89       	ldd	r31, Y+17	; 0x11
    1e36:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1e38:	60 e8       	ldi	r22, 0x80	; 128
    1e3a:	74 e8       	ldi	r23, 0x84	; 132
    1e3c:	8e e1       	ldi	r24, 0x1E	; 30
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	a7 01       	movw	r20, r14
    1e42:	96 01       	movw	r18, r12
    1e44:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__udivmodsi4>
    1e48:	da 01       	movw	r26, r20
    1e4a:	c9 01       	movw	r24, r18
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	a1 09       	sbc	r26, r1
    1e50:	b1 09       	sbc	r27, r1
    1e52:	b6 95       	lsr	r27
    1e54:	a7 95       	ror	r26
    1e56:	97 95       	ror	r25
    1e58:	87 95       	ror	r24
    1e5a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1e5c:	ec 85       	ldd	r30, Y+12	; 0x0c
    1e5e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1e60:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1e62:	ee 85       	ldd	r30, Y+14	; 0x0e
    1e64:	ff 85       	ldd	r31, Y+15	; 0x0f
    1e66:	20 83       	st	Z, r18

  _written = false;
    1e68:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1e6a:	ec 89       	ldd	r30, Y+20	; 0x14
    1e6c:	fd 89       	ldd	r31, Y+21	; 0x15
    1e6e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1e70:	ea 89       	ldd	r30, Y+18	; 0x12
    1e72:	fb 89       	ldd	r31, Y+19	; 0x13
    1e74:	80 81       	ld	r24, Z
    1e76:	80 61       	ori	r24, 0x10	; 16
    1e78:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1e7a:	ea 89       	ldd	r30, Y+18	; 0x12
    1e7c:	fb 89       	ldd	r31, Y+19	; 0x13
    1e7e:	80 81       	ld	r24, Z
    1e80:	88 60       	ori	r24, 0x08	; 8
    1e82:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1e84:	ea 89       	ldd	r30, Y+18	; 0x12
    1e86:	fb 89       	ldd	r31, Y+19	; 0x13
    1e88:	80 81       	ld	r24, Z
    1e8a:	80 68       	ori	r24, 0x80	; 128
    1e8c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1e8e:	ea 89       	ldd	r30, Y+18	; 0x12
    1e90:	fb 89       	ldd	r31, Y+19	; 0x13
    1e92:	80 81       	ld	r24, Z
    1e94:	8f 7d       	andi	r24, 0xDF	; 223
    1e96:	80 83       	st	Z, r24
}
    1e98:	df 91       	pop	r29
    1e9a:	cf 91       	pop	r28
    1e9c:	1f 91       	pop	r17
    1e9e:	ff 90       	pop	r15
    1ea0:	ef 90       	pop	r14
    1ea2:	df 90       	pop	r13
    1ea4:	cf 90       	pop	r12
    1ea6:	08 95       	ret

00001ea8 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1ea8:	1f 92       	push	r1
    1eaa:	0f 92       	push	r0
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	0f 92       	push	r0
    1eb0:	11 24       	eor	r1, r1
    1eb2:	2f 93       	push	r18
    1eb4:	8f 93       	push	r24
    1eb6:	9f 93       	push	r25
    1eb8:	ef 93       	push	r30
    1eba:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1ebc:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <Serial+0x10>
    1ec0:	f0 91 72 02 	lds	r31, 0x0272	; 0x800272 <Serial+0x11>
    1ec4:	80 81       	ld	r24, Z
    1ec6:	e0 91 77 02 	lds	r30, 0x0277	; 0x800277 <Serial+0x16>
    1eca:	f0 91 78 02 	lds	r31, 0x0278	; 0x800278 <Serial+0x17>
    1ece:	82 fd       	sbrc	r24, 2
    1ed0:	12 c0       	rjmp	.+36     	; 0x1ef6 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1ed2:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1ed4:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <Serial+0x19>
    1ed8:	8f 5f       	subi	r24, 0xFF	; 255
    1eda:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1edc:	20 91 7b 02 	lds	r18, 0x027B	; 0x80027b <Serial+0x1a>
    1ee0:	82 17       	cp	r24, r18
    1ee2:	51 f0       	breq	.+20     	; 0x1ef8 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1ee4:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <Serial+0x19>
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	ef 59       	subi	r30, 0x9F	; 159
    1eec:	fd 4f       	sbci	r31, 0xFD	; 253
    1eee:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1ef0:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <Serial+0x19>
    1ef4:	01 c0       	rjmp	.+2      	; 0x1ef8 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1ef6:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1ef8:	ff 91       	pop	r31
    1efa:	ef 91       	pop	r30
    1efc:	9f 91       	pop	r25
    1efe:	8f 91       	pop	r24
    1f00:	2f 91       	pop	r18
    1f02:	0f 90       	pop	r0
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	0f 90       	pop	r0
    1f08:	1f 90       	pop	r1
    1f0a:	18 95       	reti

00001f0c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1f0c:	1f 92       	push	r1
    1f0e:	0f 92       	push	r0
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	0f 92       	push	r0
    1f14:	11 24       	eor	r1, r1
    1f16:	2f 93       	push	r18
    1f18:	3f 93       	push	r19
    1f1a:	4f 93       	push	r20
    1f1c:	5f 93       	push	r21
    1f1e:	6f 93       	push	r22
    1f20:	7f 93       	push	r23
    1f22:	8f 93       	push	r24
    1f24:	9f 93       	push	r25
    1f26:	af 93       	push	r26
    1f28:	bf 93       	push	r27
    1f2a:	ef 93       	push	r30
    1f2c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1f2e:	81 e6       	ldi	r24, 0x61	; 97
    1f30:	92 e0       	ldi	r25, 0x02	; 2
    1f32:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1f36:	ff 91       	pop	r31
    1f38:	ef 91       	pop	r30
    1f3a:	bf 91       	pop	r27
    1f3c:	af 91       	pop	r26
    1f3e:	9f 91       	pop	r25
    1f40:	8f 91       	pop	r24
    1f42:	7f 91       	pop	r23
    1f44:	6f 91       	pop	r22
    1f46:	5f 91       	pop	r21
    1f48:	4f 91       	pop	r20
    1f4a:	3f 91       	pop	r19
    1f4c:	2f 91       	pop	r18
    1f4e:	0f 90       	pop	r0
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	0f 90       	pop	r0
    1f54:	1f 90       	pop	r1
    1f56:	18 95       	reti

00001f58 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1f58:	81 e6       	ldi	r24, 0x61	; 97
    1f5a:	92 e0       	ldi	r25, 0x02	; 2
    1f5c:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <_ZN14HardwareSerial9availableEv>
    1f60:	21 e0       	ldi	r18, 0x01	; 1
    1f62:	89 2b       	or	r24, r25
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <_Z17Serial0_availablev+0x10>
    1f66:	20 e0       	ldi	r18, 0x00	; 0
}
    1f68:	82 2f       	mov	r24, r18
    1f6a:	08 95       	ret

00001f6c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1f6c:	e1 e6       	ldi	r30, 0x61	; 97
    1f6e:	f2 e0       	ldi	r31, 0x02	; 2
    1f70:	13 82       	std	Z+3, r1	; 0x03
    1f72:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1f74:	88 ee       	ldi	r24, 0xE8	; 232
    1f76:	93 e0       	ldi	r25, 0x03	; 3
    1f78:	a0 e0       	ldi	r26, 0x00	; 0
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	84 83       	std	Z+4, r24	; 0x04
    1f7e:	95 83       	std	Z+5, r25	; 0x05
    1f80:	a6 83       	std	Z+6, r26	; 0x06
    1f82:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1f84:	85 e5       	ldi	r24, 0x55	; 85
    1f86:	91 e0       	ldi	r25, 0x01	; 1
    1f88:	91 83       	std	Z+1, r25	; 0x01
    1f8a:	80 83       	st	Z, r24
    1f8c:	85 ec       	ldi	r24, 0xC5	; 197
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	95 87       	std	Z+13, r25	; 0x0d
    1f92:	84 87       	std	Z+12, r24	; 0x0c
    1f94:	84 ec       	ldi	r24, 0xC4	; 196
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	97 87       	std	Z+15, r25	; 0x0f
    1f9a:	86 87       	std	Z+14, r24	; 0x0e
    1f9c:	80 ec       	ldi	r24, 0xC0	; 192
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	91 8b       	std	Z+17, r25	; 0x11
    1fa2:	80 8b       	std	Z+16, r24	; 0x10
    1fa4:	81 ec       	ldi	r24, 0xC1	; 193
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	93 8b       	std	Z+19, r25	; 0x13
    1faa:	82 8b       	std	Z+18, r24	; 0x12
    1fac:	82 ec       	ldi	r24, 0xC2	; 194
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	95 8b       	std	Z+21, r25	; 0x15
    1fb2:	84 8b       	std	Z+20, r24	; 0x14
    1fb4:	86 ec       	ldi	r24, 0xC6	; 198
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	97 8b       	std	Z+23, r25	; 0x17
    1fba:	86 8b       	std	Z+22, r24	; 0x16
    1fbc:	11 8e       	std	Z+25, r1	; 0x19
    1fbe:	12 8e       	std	Z+26, r1	; 0x1a
    1fc0:	13 8e       	std	Z+27, r1	; 0x1b
    1fc2:	14 8e       	std	Z+28, r1	; 0x1c
    1fc4:	08 95       	ret

00001fc6 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1fc6:	08 95       	ret

00001fc8 <main>:

int main(void)
{
	init();
    1fc8:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <init>

	initVariant();
    1fcc:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1fd0:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1fd4:	c6 e5       	ldi	r28, 0x56	; 86
    1fd6:	de e0       	ldi	r29, 0x0E	; 14
#endif
	
	setup();
    
	for (;;) {
		loop();
    1fd8:	0e 94 de 04 	call	0x9bc	; 0x9bc <loop>
		if (serialEventRun) serialEventRun();
    1fdc:	20 97       	sbiw	r28, 0x00	; 0
    1fde:	e1 f3       	breq	.-8      	; 0x1fd8 <main+0x10>
    1fe0:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_Z14serialEventRunv>
    1fe4:	f9 cf       	rjmp	.-14     	; 0x1fd8 <main+0x10>

00001fe6 <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
    1fe6:	cf 92       	push	r12
    1fe8:	df 92       	push	r13
    1fea:	ef 92       	push	r14
    1fec:	ff 92       	push	r15
    1fee:	0f 93       	push	r16
    1ff0:	1f 93       	push	r17
    1ff2:	cf 93       	push	r28
    1ff4:	df 93       	push	r29
    1ff6:	6c 01       	movw	r12, r24
    1ff8:	eb 01       	movw	r28, r22
    1ffa:	7b 01       	movw	r14, r22
    1ffc:	e4 0e       	add	r14, r20
    1ffe:	f5 1e       	adc	r15, r21
    2000:	00 e0       	ldi	r16, 0x00	; 0
    2002:	10 e0       	ldi	r17, 0x00	; 0
    2004:	ce 15       	cp	r28, r14
    2006:	df 05       	cpc	r29, r15
    2008:	61 f0       	breq	.+24     	; 0x2022 <_ZN5Print5writeEPKhj+0x3c>
    200a:	69 91       	ld	r22, Y+
    200c:	d6 01       	movw	r26, r12
    200e:	ed 91       	ld	r30, X+
    2010:	fc 91       	ld	r31, X
    2012:	01 90       	ld	r0, Z+
    2014:	f0 81       	ld	r31, Z
    2016:	e0 2d       	mov	r30, r0
    2018:	c6 01       	movw	r24, r12
    201a:	09 95       	icall
    201c:	08 0f       	add	r16, r24
    201e:	19 1f       	adc	r17, r25
    2020:	f1 cf       	rjmp	.-30     	; 0x2004 <_ZN5Print5writeEPKhj+0x1e>
    2022:	c8 01       	movw	r24, r16
    2024:	df 91       	pop	r29
    2026:	cf 91       	pop	r28
    2028:	1f 91       	pop	r17
    202a:	0f 91       	pop	r16
    202c:	ff 90       	pop	r15
    202e:	ef 90       	pop	r14
    2030:	df 90       	pop	r13
    2032:	cf 90       	pop	r12
    2034:	08 95       	ret

00002036 <_ZN5Print5writeEPKc>:
    2036:	61 15       	cp	r22, r1
    2038:	71 05       	cpc	r23, r1
    203a:	79 f0       	breq	.+30     	; 0x205a <_ZN5Print5writeEPKc+0x24>
    203c:	fb 01       	movw	r30, r22
    203e:	01 90       	ld	r0, Z+
    2040:	00 20       	and	r0, r0
    2042:	e9 f7       	brne	.-6      	; 0x203e <_ZN5Print5writeEPKc+0x8>
    2044:	31 97       	sbiw	r30, 0x01	; 1
    2046:	af 01       	movw	r20, r30
    2048:	46 1b       	sub	r20, r22
    204a:	57 0b       	sbc	r21, r23
    204c:	dc 01       	movw	r26, r24
    204e:	ed 91       	ld	r30, X+
    2050:	fc 91       	ld	r31, X
    2052:	02 80       	ldd	r0, Z+2	; 0x02
    2054:	f3 81       	ldd	r31, Z+3	; 0x03
    2056:	e0 2d       	mov	r30, r0
    2058:	09 94       	ijmp
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	08 95       	ret

00002060 <_ZN5Print5printEPK19__FlashStringHelper>:
    2060:	ef 92       	push	r14
    2062:	ff 92       	push	r15
    2064:	0f 93       	push	r16
    2066:	1f 93       	push	r17
    2068:	cf 93       	push	r28
    206a:	df 93       	push	r29
    206c:	7c 01       	movw	r14, r24
    206e:	fb 01       	movw	r30, r22
    2070:	00 e0       	ldi	r16, 0x00	; 0
    2072:	10 e0       	ldi	r17, 0x00	; 0
    2074:	64 91       	lpm	r22, Z
    2076:	ef 01       	movw	r28, r30
    2078:	21 96       	adiw	r28, 0x01	; 1
    207a:	66 23       	and	r22, r22
    207c:	61 f0       	breq	.+24     	; 0x2096 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    207e:	d7 01       	movw	r26, r14
    2080:	ed 91       	ld	r30, X+
    2082:	fc 91       	ld	r31, X
    2084:	01 90       	ld	r0, Z+
    2086:	f0 81       	ld	r31, Z
    2088:	e0 2d       	mov	r30, r0
    208a:	c7 01       	movw	r24, r14
    208c:	09 95       	icall
    208e:	08 0f       	add	r16, r24
    2090:	19 1f       	adc	r17, r25
    2092:	fe 01       	movw	r30, r28
    2094:	ef cf       	rjmp	.-34     	; 0x2074 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    2096:	c8 01       	movw	r24, r16
    2098:	df 91       	pop	r29
    209a:	cf 91       	pop	r28
    209c:	1f 91       	pop	r17
    209e:	0f 91       	pop	r16
    20a0:	ff 90       	pop	r15
    20a2:	ef 90       	pop	r14
    20a4:	08 95       	ret

000020a6 <_ZN5Print5printEc>:
    20a6:	dc 01       	movw	r26, r24
    20a8:	ed 91       	ld	r30, X+
    20aa:	fc 91       	ld	r31, X
    20ac:	01 90       	ld	r0, Z+
    20ae:	f0 81       	ld	r31, Z
    20b0:	e0 2d       	mov	r30, r0
    20b2:	09 94       	ijmp

000020b4 <_ZN5Print7printlnEv>:
    20b4:	0f 93       	push	r16
    20b6:	1f 93       	push	r17
    20b8:	cf 93       	push	r28
    20ba:	df 93       	push	r29
    20bc:	ec 01       	movw	r28, r24
    20be:	6d e0       	ldi	r22, 0x0D	; 13
    20c0:	0e 94 53 10 	call	0x20a6	; 0x20a6 <_ZN5Print5printEc>
    20c4:	8c 01       	movw	r16, r24
    20c6:	6a e0       	ldi	r22, 0x0A	; 10
    20c8:	ce 01       	movw	r24, r28
    20ca:	0e 94 53 10 	call	0x20a6	; 0x20a6 <_ZN5Print5printEc>
    20ce:	80 0f       	add	r24, r16
    20d0:	91 1f       	adc	r25, r17
    20d2:	df 91       	pop	r29
    20d4:	cf 91       	pop	r28
    20d6:	1f 91       	pop	r17
    20d8:	0f 91       	pop	r16
    20da:	08 95       	ret

000020dc <_ZN5Print7printlnEPK19__FlashStringHelper>:
    20dc:	0f 93       	push	r16
    20de:	1f 93       	push	r17
    20e0:	cf 93       	push	r28
    20e2:	df 93       	push	r29
    20e4:	ec 01       	movw	r28, r24
    20e6:	0e 94 30 10 	call	0x2060	; 0x2060 <_ZN5Print5printEPK19__FlashStringHelper>
    20ea:	8c 01       	movw	r16, r24
    20ec:	ce 01       	movw	r24, r28
    20ee:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <_ZN5Print7printlnEv>
    20f2:	80 0f       	add	r24, r16
    20f4:	91 1f       	adc	r25, r17
    20f6:	df 91       	pop	r29
    20f8:	cf 91       	pop	r28
    20fa:	1f 91       	pop	r17
    20fc:	0f 91       	pop	r16
    20fe:	08 95       	ret

00002100 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    2100:	0f 93       	push	r16
    2102:	1f 93       	push	r17
    2104:	cf 93       	push	r28
    2106:	df 93       	push	r29
    2108:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    210a:	0e 94 1b 10 	call	0x2036	; 0x2036 <_ZN5Print5writeEPKc>
    210e:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    2110:	ce 01       	movw	r24, r28
    2112:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <_ZN5Print7printlnEv>
  return n;
}
    2116:	80 0f       	add	r24, r16
    2118:	91 1f       	adc	r25, r17
    211a:	df 91       	pop	r29
    211c:	cf 91       	pop	r28
    211e:	1f 91       	pop	r17
    2120:	0f 91       	pop	r16
    2122:	08 95       	ret

00002124 <__vector_16>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    2124:	1f 92       	push	r1
    2126:	0f 92       	push	r0
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	0f 92       	push	r0
    212c:	11 24       	eor	r1, r1
    212e:	2f 93       	push	r18
    2130:	3f 93       	push	r19
    2132:	8f 93       	push	r24
    2134:	9f 93       	push	r25
    2136:	af 93       	push	r26
    2138:	bf 93       	push	r27
    213a:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <timer0_millis>
    213e:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <timer0_millis+0x1>
    2142:	a0 91 01 03 	lds	r26, 0x0301	; 0x800301 <timer0_millis+0x2>
    2146:	b0 91 02 03 	lds	r27, 0x0302	; 0x800302 <timer0_millis+0x3>
    214a:	30 91 fe 02 	lds	r19, 0x02FE	; 0x8002fe <timer0_fract>
    214e:	23 e0       	ldi	r18, 0x03	; 3
    2150:	23 0f       	add	r18, r19
    2152:	2d 37       	cpi	r18, 0x7D	; 125
    2154:	20 f4       	brcc	.+8      	; 0x215e <__vector_16+0x3a>
    2156:	01 96       	adiw	r24, 0x01	; 1
    2158:	a1 1d       	adc	r26, r1
    215a:	b1 1d       	adc	r27, r1
    215c:	05 c0       	rjmp	.+10     	; 0x2168 <__vector_16+0x44>
    215e:	26 e8       	ldi	r18, 0x86	; 134
    2160:	23 0f       	add	r18, r19
    2162:	02 96       	adiw	r24, 0x02	; 2
    2164:	a1 1d       	adc	r26, r1
    2166:	b1 1d       	adc	r27, r1
    2168:	20 93 fe 02 	sts	0x02FE, r18	; 0x8002fe <timer0_fract>
    216c:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <timer0_millis>
    2170:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <timer0_millis+0x1>
    2174:	a0 93 01 03 	sts	0x0301, r26	; 0x800301 <timer0_millis+0x2>
    2178:	b0 93 02 03 	sts	0x0302, r27	; 0x800302 <timer0_millis+0x3>
    217c:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <timer0_overflow_count>
    2180:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <timer0_overflow_count+0x1>
    2184:	a0 91 05 03 	lds	r26, 0x0305	; 0x800305 <timer0_overflow_count+0x2>
    2188:	b0 91 06 03 	lds	r27, 0x0306	; 0x800306 <timer0_overflow_count+0x3>
    218c:	01 96       	adiw	r24, 0x01	; 1
    218e:	a1 1d       	adc	r26, r1
    2190:	b1 1d       	adc	r27, r1
    2192:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <timer0_overflow_count>
    2196:	90 93 04 03 	sts	0x0304, r25	; 0x800304 <timer0_overflow_count+0x1>
    219a:	a0 93 05 03 	sts	0x0305, r26	; 0x800305 <timer0_overflow_count+0x2>
    219e:	b0 93 06 03 	sts	0x0306, r27	; 0x800306 <timer0_overflow_count+0x3>
    21a2:	bf 91       	pop	r27
    21a4:	af 91       	pop	r26
    21a6:	9f 91       	pop	r25
    21a8:	8f 91       	pop	r24
    21aa:	3f 91       	pop	r19
    21ac:	2f 91       	pop	r18
    21ae:	0f 90       	pop	r0
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	0f 90       	pop	r0
    21b4:	1f 90       	pop	r1
    21b6:	18 95       	reti

000021b8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    21b8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    21ba:	84 b5       	in	r24, 0x24	; 36
    21bc:	82 60       	ori	r24, 0x02	; 2
    21be:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    21c0:	84 b5       	in	r24, 0x24	; 36
    21c2:	81 60       	ori	r24, 0x01	; 1
    21c4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    21c6:	85 b5       	in	r24, 0x25	; 37
    21c8:	82 60       	ori	r24, 0x02	; 2
    21ca:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    21cc:	85 b5       	in	r24, 0x25	; 37
    21ce:	81 60       	ori	r24, 0x01	; 1
    21d0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    21d2:	ee e6       	ldi	r30, 0x6E	; 110
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	81 60       	ori	r24, 0x01	; 1
    21da:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    21dc:	e1 e8       	ldi	r30, 0x81	; 129
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    21e2:	80 81       	ld	r24, Z
    21e4:	82 60       	ori	r24, 0x02	; 2
    21e6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    21e8:	80 81       	ld	r24, Z
    21ea:	81 60       	ori	r24, 0x01	; 1
    21ec:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    21ee:	e0 e8       	ldi	r30, 0x80	; 128
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	81 60       	ori	r24, 0x01	; 1
    21f6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    21f8:	e1 eb       	ldi	r30, 0xB1	; 177
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	84 60       	ori	r24, 0x04	; 4
    2200:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2202:	e0 eb       	ldi	r30, 0xB0	; 176
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	81 60       	ori	r24, 0x01	; 1
    220a:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    220c:	ea e7       	ldi	r30, 0x7A	; 122
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	84 60       	ori	r24, 0x04	; 4
    2214:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    2216:	80 81       	ld	r24, Z
    2218:	82 60       	ori	r24, 0x02	; 2
    221a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    221c:	80 81       	ld	r24, Z
    221e:	81 60       	ori	r24, 0x01	; 1
    2220:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2222:	80 81       	ld	r24, Z
    2224:	80 68       	ori	r24, 0x80	; 128
    2226:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2228:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    222c:	08 95       	ret

0000222e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    222e:	83 30       	cpi	r24, 0x03	; 3
    2230:	81 f0       	breq	.+32     	; 0x2252 <turnOffPWM+0x24>
    2232:	28 f4       	brcc	.+10     	; 0x223e <turnOffPWM+0x10>
    2234:	81 30       	cpi	r24, 0x01	; 1
    2236:	99 f0       	breq	.+38     	; 0x225e <turnOffPWM+0x30>
    2238:	82 30       	cpi	r24, 0x02	; 2
    223a:	a1 f0       	breq	.+40     	; 0x2264 <turnOffPWM+0x36>
    223c:	08 95       	ret
    223e:	87 30       	cpi	r24, 0x07	; 7
    2240:	a9 f0       	breq	.+42     	; 0x226c <turnOffPWM+0x3e>
    2242:	88 30       	cpi	r24, 0x08	; 8
    2244:	b9 f0       	breq	.+46     	; 0x2274 <turnOffPWM+0x46>
    2246:	84 30       	cpi	r24, 0x04	; 4
    2248:	d1 f4       	brne	.+52     	; 0x227e <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    224a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    224e:	8f 7d       	andi	r24, 0xDF	; 223
    2250:	03 c0       	rjmp	.+6      	; 0x2258 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2252:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2256:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2258:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    225c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    225e:	84 b5       	in	r24, 0x24	; 36
    2260:	8f 77       	andi	r24, 0x7F	; 127
    2262:	02 c0       	rjmp	.+4      	; 0x2268 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2264:	84 b5       	in	r24, 0x24	; 36
    2266:	8f 7d       	andi	r24, 0xDF	; 223
    2268:	84 bd       	out	0x24, r24	; 36
    226a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    226c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2270:	8f 77       	andi	r24, 0x7F	; 127
    2272:	03 c0       	rjmp	.+6      	; 0x227a <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2274:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2278:	8f 7d       	andi	r24, 0xDF	; 223
    227a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    227e:	08 95       	ret

00002280 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2280:	cf 93       	push	r28
    2282:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	fc 01       	movw	r30, r24
    2288:	e1 5f       	subi	r30, 0xF1	; 241
    228a:	fa 4f       	sbci	r31, 0xFA	; 250
    228c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    228e:	fc 01       	movw	r30, r24
    2290:	ed 5d       	subi	r30, 0xDD	; 221
    2292:	fa 4f       	sbci	r31, 0xFA	; 250
    2294:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2296:	88 23       	and	r24, r24
    2298:	61 f1       	breq	.+88     	; 0x22f2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	88 0f       	add	r24, r24
    229e:	99 1f       	adc	r25, r25
    22a0:	fc 01       	movw	r30, r24
    22a2:	ef 5b       	subi	r30, 0xBF	; 191
    22a4:	fa 4f       	sbci	r31, 0xFA	; 250
    22a6:	c5 91       	lpm	r28, Z+
    22a8:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    22aa:	fc 01       	movw	r30, r24
    22ac:	e9 5c       	subi	r30, 0xC9	; 201
    22ae:	fa 4f       	sbci	r31, 0xFA	; 250
    22b0:	a5 91       	lpm	r26, Z+
    22b2:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    22b4:	61 11       	cpse	r22, r1
    22b6:	09 c0       	rjmp	.+18     	; 0x22ca <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    22b8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    22ba:	f8 94       	cli
		*reg &= ~bit;
    22bc:	88 81       	ld	r24, Y
    22be:	20 95       	com	r18
    22c0:	82 23       	and	r24, r18
    22c2:	88 83       	st	Y, r24
		*out &= ~bit;
    22c4:	ec 91       	ld	r30, X
    22c6:	2e 23       	and	r18, r30
    22c8:	0b c0       	rjmp	.+22     	; 0x22e0 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    22ca:	62 30       	cpi	r22, 0x02	; 2
    22cc:	61 f4       	brne	.+24     	; 0x22e6 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    22ce:	9f b7       	in	r25, 0x3f	; 63
                cli();
    22d0:	f8 94       	cli
		*reg &= ~bit;
    22d2:	88 81       	ld	r24, Y
    22d4:	32 2f       	mov	r19, r18
    22d6:	30 95       	com	r19
    22d8:	83 23       	and	r24, r19
    22da:	88 83       	st	Y, r24
		*out |= bit;
    22dc:	ec 91       	ld	r30, X
    22de:	2e 2b       	or	r18, r30
    22e0:	2c 93       	st	X, r18
		SREG = oldSREG;
    22e2:	9f bf       	out	0x3f, r25	; 63
    22e4:	06 c0       	rjmp	.+12     	; 0x22f2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    22e6:	8f b7       	in	r24, 0x3f	; 63
                cli();
    22e8:	f8 94       	cli
		*reg |= bit;
    22ea:	e8 81       	ld	r30, Y
    22ec:	2e 2b       	or	r18, r30
    22ee:	28 83       	st	Y, r18
		SREG = oldSREG;
    22f0:	8f bf       	out	0x3f, r24	; 63
	}
}
    22f2:	df 91       	pop	r29
    22f4:	cf 91       	pop	r28
    22f6:	08 95       	ret

000022f8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    22f8:	1f 93       	push	r17
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    22fe:	28 2f       	mov	r18, r24
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	f9 01       	movw	r30, r18
    2304:	e5 50       	subi	r30, 0x05	; 5
    2306:	fb 4f       	sbci	r31, 0xFB	; 251
    2308:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    230a:	f9 01       	movw	r30, r18
    230c:	e1 5f       	subi	r30, 0xF1	; 241
    230e:	fa 4f       	sbci	r31, 0xFA	; 250
    2310:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2312:	f9 01       	movw	r30, r18
    2314:	ed 5d       	subi	r30, 0xDD	; 221
    2316:	fa 4f       	sbci	r31, 0xFA	; 250
    2318:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    231a:	cc 23       	and	r28, r28
    231c:	c1 f0       	breq	.+48     	; 0x234e <digitalWrite+0x56>
    231e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2320:	81 11       	cpse	r24, r1
    2322:	0e 94 17 11 	call	0x222e	; 0x222e <turnOffPWM>

	out = portOutputRegister(port);
    2326:	ec 2f       	mov	r30, r28
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	ee 0f       	add	r30, r30
    232c:	ff 1f       	adc	r31, r31
    232e:	e9 5c       	subi	r30, 0xC9	; 201
    2330:	fa 4f       	sbci	r31, 0xFA	; 250
    2332:	a5 91       	lpm	r26, Z+
    2334:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2336:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2338:	f8 94       	cli

	if (val == LOW) {
    233a:	11 11       	cpse	r17, r1
    233c:	04 c0       	rjmp	.+8      	; 0x2346 <digitalWrite+0x4e>
		*out &= ~bit;
    233e:	8c 91       	ld	r24, X
    2340:	d0 95       	com	r29
    2342:	d8 23       	and	r29, r24
    2344:	02 c0       	rjmp	.+4      	; 0x234a <digitalWrite+0x52>
	} else {
		*out |= bit;
    2346:	ec 91       	ld	r30, X
    2348:	de 2b       	or	r29, r30
    234a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    234c:	9f bf       	out	0x3f, r25	; 63
}
    234e:	df 91       	pop	r29
    2350:	cf 91       	pop	r28
    2352:	1f 91       	pop	r17
    2354:	08 95       	ret

00002356 <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    2356:	bf 92       	push	r11
    2358:	cf 92       	push	r12
    235a:	df 92       	push	r13
    235c:	ef 92       	push	r14
    235e:	ff 92       	push	r15
    2360:	0f 93       	push	r16
    2362:	1f 93       	push	r17
    2364:	cf 93       	push	r28
    2366:	df 93       	push	r29
    2368:	c8 2e       	mov	r12, r24
    236a:	d6 2e       	mov	r13, r22
    236c:	b4 2e       	mov	r11, r20
    236e:	c7 e0       	ldi	r28, 0x07	; 7
    2370:	d0 e0       	ldi	r29, 0x00	; 0
    2372:	02 2f       	mov	r16, r18
    2374:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
    2376:	87 e0       	ldi	r24, 0x07	; 7
    2378:	e8 2e       	mov	r14, r24
    237a:	f1 2c       	mov	r15, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    237c:	b1 10       	cpse	r11, r1
    237e:	05 c0       	rjmp	.+10     	; 0x238a <shiftOut+0x34>
			digitalWrite(dataPin, !!(val & (1 << i)));
    2380:	c7 01       	movw	r24, r14
    2382:	8c 1b       	sub	r24, r28
    2384:	9d 0b       	sbc	r25, r29
    2386:	b8 01       	movw	r22, r16
    2388:	02 c0       	rjmp	.+4      	; 0x238e <shiftOut+0x38>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    238a:	b8 01       	movw	r22, r16
    238c:	8c 2f       	mov	r24, r28
    238e:	02 c0       	rjmp	.+4      	; 0x2394 <shiftOut+0x3e>
    2390:	75 95       	asr	r23
    2392:	67 95       	ror	r22
    2394:	8a 95       	dec	r24
    2396:	e2 f7       	brpl	.-8      	; 0x2390 <shiftOut+0x3a>
    2398:	61 70       	andi	r22, 0x01	; 1
    239a:	8c 2d       	mov	r24, r12
    239c:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    23a0:	61 e0       	ldi	r22, 0x01	; 1
    23a2:	8d 2d       	mov	r24, r13
    23a4:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <digitalWrite>
		digitalWrite(clockPin, LOW);		
    23a8:	60 e0       	ldi	r22, 0x00	; 0
    23aa:	8d 2d       	mov	r24, r13
    23ac:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <digitalWrite>
    23b0:	21 97       	sbiw	r28, 0x01	; 1
    23b2:	20 f7       	brcc	.-56     	; 0x237c <shiftOut+0x26>
	}
}
    23b4:	df 91       	pop	r29
    23b6:	cf 91       	pop	r28
    23b8:	1f 91       	pop	r17
    23ba:	0f 91       	pop	r16
    23bc:	ff 90       	pop	r15
    23be:	ef 90       	pop	r14
    23c0:	df 90       	pop	r13
    23c2:	cf 90       	pop	r12
    23c4:	bf 90       	pop	r11
    23c6:	08 95       	ret

000023c8 <__udivmodsi4>:
    23c8:	a1 e2       	ldi	r26, 0x21	; 33
    23ca:	1a 2e       	mov	r1, r26
    23cc:	aa 1b       	sub	r26, r26
    23ce:	bb 1b       	sub	r27, r27
    23d0:	fd 01       	movw	r30, r26
    23d2:	0d c0       	rjmp	.+26     	; 0x23ee <__udivmodsi4_ep>

000023d4 <__udivmodsi4_loop>:
    23d4:	aa 1f       	adc	r26, r26
    23d6:	bb 1f       	adc	r27, r27
    23d8:	ee 1f       	adc	r30, r30
    23da:	ff 1f       	adc	r31, r31
    23dc:	a2 17       	cp	r26, r18
    23de:	b3 07       	cpc	r27, r19
    23e0:	e4 07       	cpc	r30, r20
    23e2:	f5 07       	cpc	r31, r21
    23e4:	20 f0       	brcs	.+8      	; 0x23ee <__udivmodsi4_ep>
    23e6:	a2 1b       	sub	r26, r18
    23e8:	b3 0b       	sbc	r27, r19
    23ea:	e4 0b       	sbc	r30, r20
    23ec:	f5 0b       	sbc	r31, r21

000023ee <__udivmodsi4_ep>:
    23ee:	66 1f       	adc	r22, r22
    23f0:	77 1f       	adc	r23, r23
    23f2:	88 1f       	adc	r24, r24
    23f4:	99 1f       	adc	r25, r25
    23f6:	1a 94       	dec	r1
    23f8:	69 f7       	brne	.-38     	; 0x23d4 <__udivmodsi4_loop>
    23fa:	60 95       	com	r22
    23fc:	70 95       	com	r23
    23fe:	80 95       	com	r24
    2400:	90 95       	com	r25
    2402:	9b 01       	movw	r18, r22
    2404:	ac 01       	movw	r20, r24
    2406:	bd 01       	movw	r22, r26
    2408:	cf 01       	movw	r24, r30
    240a:	08 95       	ret

0000240c <__usmulhisi3>:
    240c:	0e 94 13 12 	call	0x2426	; 0x2426 <__umulhisi3>

00002410 <__usmulhisi3_tail>:
    2410:	b7 ff       	sbrs	r27, 7
    2412:	08 95       	ret
    2414:	82 1b       	sub	r24, r18
    2416:	93 0b       	sbc	r25, r19
    2418:	08 95       	ret

0000241a <__tablejump2__>:
    241a:	ee 0f       	add	r30, r30
    241c:	ff 1f       	adc	r31, r31
    241e:	05 90       	lpm	r0, Z+
    2420:	f4 91       	lpm	r31, Z
    2422:	e0 2d       	mov	r30, r0
    2424:	09 94       	ijmp

00002426 <__umulhisi3>:
    2426:	a2 9f       	mul	r26, r18
    2428:	b0 01       	movw	r22, r0
    242a:	b3 9f       	mul	r27, r19
    242c:	c0 01       	movw	r24, r0
    242e:	a3 9f       	mul	r26, r19
    2430:	70 0d       	add	r23, r0
    2432:	81 1d       	adc	r24, r1
    2434:	11 24       	eor	r1, r1
    2436:	91 1d       	adc	r25, r1
    2438:	b2 9f       	mul	r27, r18
    243a:	70 0d       	add	r23, r0
    243c:	81 1d       	adc	r24, r1
    243e:	11 24       	eor	r1, r1
    2440:	91 1d       	adc	r25, r1
    2442:	08 95       	ret

00002444 <atoi>:
    2444:	fc 01       	movw	r30, r24
    2446:	88 27       	eor	r24, r24
    2448:	99 27       	eor	r25, r25
    244a:	e8 94       	clt
    244c:	21 91       	ld	r18, Z+
    244e:	20 32       	cpi	r18, 0x20	; 32
    2450:	e9 f3       	breq	.-6      	; 0x244c <atoi+0x8>
    2452:	29 30       	cpi	r18, 0x09	; 9
    2454:	10 f0       	brcs	.+4      	; 0x245a <atoi+0x16>
    2456:	2e 30       	cpi	r18, 0x0E	; 14
    2458:	c8 f3       	brcs	.-14     	; 0x244c <atoi+0x8>
    245a:	2b 32       	cpi	r18, 0x2B	; 43
    245c:	41 f0       	breq	.+16     	; 0x246e <atoi+0x2a>
    245e:	2d 32       	cpi	r18, 0x2D	; 45
    2460:	39 f4       	brne	.+14     	; 0x2470 <atoi+0x2c>
    2462:	68 94       	set
    2464:	04 c0       	rjmp	.+8      	; 0x246e <atoi+0x2a>
    2466:	0e 94 98 12 	call	0x2530	; 0x2530 <__mulhi_const_10>
    246a:	82 0f       	add	r24, r18
    246c:	91 1d       	adc	r25, r1
    246e:	21 91       	ld	r18, Z+
    2470:	20 53       	subi	r18, 0x30	; 48
    2472:	2a 30       	cpi	r18, 0x0A	; 10
    2474:	c0 f3       	brcs	.-16     	; 0x2466 <atoi+0x22>
    2476:	1e f4       	brtc	.+6      	; 0x247e <atoi+0x3a>
    2478:	90 95       	com	r25
    247a:	81 95       	neg	r24
    247c:	9f 4f       	sbci	r25, 0xFF	; 255
    247e:	08 95       	ret

00002480 <memcpy_P>:
    2480:	fb 01       	movw	r30, r22
    2482:	dc 01       	movw	r26, r24
    2484:	02 c0       	rjmp	.+4      	; 0x248a <memcpy_P+0xa>
    2486:	05 90       	lpm	r0, Z+
    2488:	0d 92       	st	X+, r0
    248a:	41 50       	subi	r20, 0x01	; 1
    248c:	50 40       	sbci	r21, 0x00	; 0
    248e:	d8 f7       	brcc	.-10     	; 0x2486 <memcpy_P+0x6>
    2490:	08 95       	ret

00002492 <strtok>:
    2492:	42 e6       	ldi	r20, 0x62	; 98
    2494:	51 e0       	ldi	r21, 0x01	; 1
    2496:	0e 94 71 12 	call	0x24e2	; 0x24e2 <strtok_r>
    249a:	08 95       	ret

0000249c <strchr>:
    249c:	fc 01       	movw	r30, r24
    249e:	81 91       	ld	r24, Z+
    24a0:	86 17       	cp	r24, r22
    24a2:	21 f0       	breq	.+8      	; 0x24ac <strchr+0x10>
    24a4:	88 23       	and	r24, r24
    24a6:	d9 f7       	brne	.-10     	; 0x249e <strchr+0x2>
    24a8:	99 27       	eor	r25, r25
    24aa:	08 95       	ret
    24ac:	31 97       	sbiw	r30, 0x01	; 1
    24ae:	cf 01       	movw	r24, r30
    24b0:	08 95       	ret

000024b2 <strcmp>:
    24b2:	fb 01       	movw	r30, r22
    24b4:	dc 01       	movw	r26, r24
    24b6:	8d 91       	ld	r24, X+
    24b8:	01 90       	ld	r0, Z+
    24ba:	80 19       	sub	r24, r0
    24bc:	01 10       	cpse	r0, r1
    24be:	d9 f3       	breq	.-10     	; 0x24b6 <strcmp+0x4>
    24c0:	99 0b       	sbc	r25, r25
    24c2:	08 95       	ret

000024c4 <strncpy>:
    24c4:	fb 01       	movw	r30, r22
    24c6:	dc 01       	movw	r26, r24
    24c8:	41 50       	subi	r20, 0x01	; 1
    24ca:	50 40       	sbci	r21, 0x00	; 0
    24cc:	48 f0       	brcs	.+18     	; 0x24e0 <strncpy+0x1c>
    24ce:	01 90       	ld	r0, Z+
    24d0:	0d 92       	st	X+, r0
    24d2:	00 20       	and	r0, r0
    24d4:	c9 f7       	brne	.-14     	; 0x24c8 <strncpy+0x4>
    24d6:	01 c0       	rjmp	.+2      	; 0x24da <strncpy+0x16>
    24d8:	1d 92       	st	X+, r1
    24da:	41 50       	subi	r20, 0x01	; 1
    24dc:	50 40       	sbci	r21, 0x00	; 0
    24de:	e0 f7       	brcc	.-8      	; 0x24d8 <strncpy+0x14>
    24e0:	08 95       	ret

000024e2 <strtok_r>:
    24e2:	fa 01       	movw	r30, r20
    24e4:	a1 91       	ld	r26, Z+
    24e6:	b0 81       	ld	r27, Z
    24e8:	00 97       	sbiw	r24, 0x00	; 0
    24ea:	19 f4       	brne	.+6      	; 0x24f2 <strtok_r+0x10>
    24ec:	10 97       	sbiw	r26, 0x00	; 0
    24ee:	e1 f0       	breq	.+56     	; 0x2528 <strtok_r+0x46>
    24f0:	cd 01       	movw	r24, r26
    24f2:	dc 01       	movw	r26, r24
    24f4:	cd 01       	movw	r24, r26
    24f6:	0d 90       	ld	r0, X+
    24f8:	00 20       	and	r0, r0
    24fa:	11 f4       	brne	.+4      	; 0x2500 <strtok_r+0x1e>
    24fc:	c0 01       	movw	r24, r0
    24fe:	13 c0       	rjmp	.+38     	; 0x2526 <strtok_r+0x44>
    2500:	fb 01       	movw	r30, r22
    2502:	21 91       	ld	r18, Z+
    2504:	22 23       	and	r18, r18
    2506:	19 f0       	breq	.+6      	; 0x250e <strtok_r+0x2c>
    2508:	20 15       	cp	r18, r0
    250a:	d9 f7       	brne	.-10     	; 0x2502 <strtok_r+0x20>
    250c:	f3 cf       	rjmp	.-26     	; 0x24f4 <strtok_r+0x12>
    250e:	fb 01       	movw	r30, r22
    2510:	21 91       	ld	r18, Z+
    2512:	20 15       	cp	r18, r0
    2514:	19 f4       	brne	.+6      	; 0x251c <strtok_r+0x3a>
    2516:	1e 92       	st	-X, r1
    2518:	11 96       	adiw	r26, 0x01	; 1
    251a:	06 c0       	rjmp	.+12     	; 0x2528 <strtok_r+0x46>
    251c:	22 23       	and	r18, r18
    251e:	c1 f7       	brne	.-16     	; 0x2510 <strtok_r+0x2e>
    2520:	0d 90       	ld	r0, X+
    2522:	00 20       	and	r0, r0
    2524:	a1 f7       	brne	.-24     	; 0x250e <strtok_r+0x2c>
    2526:	d0 01       	movw	r26, r0
    2528:	fa 01       	movw	r30, r20
    252a:	a1 93       	st	Z+, r26
    252c:	b0 83       	st	Z, r27
    252e:	08 95       	ret

00002530 <__mulhi_const_10>:
    2530:	7a e0       	ldi	r23, 0x0A	; 10
    2532:	97 9f       	mul	r25, r23
    2534:	90 2d       	mov	r25, r0
    2536:	87 9f       	mul	r24, r23
    2538:	80 2d       	mov	r24, r0
    253a:	91 0d       	add	r25, r1
    253c:	11 24       	eor	r1, r1
    253e:	08 95       	ret

00002540 <__do_global_dtors>:
    2540:	12 e0       	ldi	r17, 0x02	; 2
    2542:	c9 ea       	ldi	r28, 0xA9	; 169
    2544:	d2 e0       	ldi	r29, 0x02	; 2
    2546:	04 c0       	rjmp	.+8      	; 0x2550 <__do_global_dtors+0x10>
    2548:	fe 01       	movw	r30, r28
    254a:	0e 94 0d 12 	call	0x241a	; 0x241a <__tablejump2__>
    254e:	21 96       	adiw	r28, 0x01	; 1
    2550:	ca 3a       	cpi	r28, 0xAA	; 170
    2552:	d1 07       	cpc	r29, r17
    2554:	c9 f7       	brne	.-14     	; 0x2548 <__do_global_dtors+0x8>
    2556:	f8 94       	cli

00002558 <__stop_program>:
    2558:	ff cf       	rjmp	.-2      	; 0x2558 <__stop_program>
