
Led_Anzeige.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00002402  00002496  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002402  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000116  00800150  00800150  000024e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000024e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002518  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004b8  00000000  00000000  00002558  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ba36  00000000  00000000  00002a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a46  00000000  00000000  0000e446  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002f19  00000000  00000000  0000fe8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001134  00000000  00000000  00012da8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000280a  00000000  00000000  00013edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007950  00000000  00000000  000166e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000720  00000000  00000000  0001e036  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__dtors_end>
       4:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
       8:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
       c:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      10:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      14:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      18:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      1c:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      20:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      24:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      28:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      2c:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      30:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      34:	0c 94 bf 0c 	jmp	0x197e	; 0x197e <__vector_13>
      38:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      3c:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      40:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <__vector_16>
      44:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      48:	0c 94 a5 0e 	jmp	0x1d4a	; 0x1d4a <__vector_18>
      4c:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__vector_19>
      50:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      54:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      58:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      5c:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      60:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>
      64:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	45 78       	andi	r20, 0x85	; 133
      6a:	61 6d       	ori	r22, 0xD1	; 209
      6c:	70 6c       	ori	r23, 0xC0	; 192
      6e:	65 3a       	cpi	r22, 0xA5	; 165
      70:	20 74       	andi	r18, 0x40	; 64
      72:	65 78       	andi	r22, 0x85	; 133
      74:	74 3d       	cpi	r23, 0xD4	; 212
      76:	65 78       	andi	r22, 0x85	; 133
      78:	61 6d       	ori	r22, 0xD1	; 209
      7a:	70 6c       	ori	r23, 0xC0	; 192
      7c:	65 20       	and	r6, r5
      7e:	74 65       	ori	r23, 0x54	; 84
      80:	78 74       	andi	r23, 0x48	; 72
	...

00000083 <_ZZ9printHelpvE3__c_1>:
      83:	63 6f 6d 6d 61 6e 64 20 61 6e 64 20 76 61 6c 75     command and valu
      93:	65 20 68 61 73 20 74 6f 20 62 65 20 73 65 70 61     e has to be sepa
      a3:	72 61 74 65 64 20 62 79 20 61 6e 20 65 71 75 61     rated by an equa
      b3:	6c 20 73 69 67 6e 00                                l sign.

000000ba <_ZZ9printHelpvE3__c_0>:
      ba:	6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 73 20 61     known commands a
      ca:	72 65 3a 20 74 65 78 74 2c 20 69 6e 74 65 6e 73     re: text, intens
      da:	69 74 79 20 61 6e 64 20 73 70 65 65 64 00           ity and speed.

000000e8 <_ZZ9printHelpvE3__c>:
      e8:	63 6f 6d 6d 61 6e 64 20 64 6f 65 73 20 6e 6f 74     command does not
      f8:	20 6d 61 74 63 68 00                                 match.

000000ff <_ZZ15uartInputHandlevE3__c_2>:
      ff:	73 70 65 65 64 20 72 61 6e 67 65 20 4d 41 58 4d     speed range MAXM
     10f:	41 54 52 49 58 5f 53 50 45 45 44 5f 4d 49 4e 5f     ATRIX_SPEED_MIN_
     11f:	56 41 4c 55 45 20 2e 2e 2e 20 4d 41 58 4d 41 54     VALUE ... MAXMAT
     12f:	52 49 58 5f 53 50 45 45 44 5f 4d 41 58 5f 56 41     RIX_SPEED_MAX_VA
     13f:	4c 55 45 00                                         LUE.

00000143 <_ZZ15uartInputHandlevE3__c_1>:
     143:	76 61 6c 75 65 20 6f 75 74 20 6f 66 20 72 61 6e     value out of ran
     153:	67 65 00                                            ge.

00000156 <_ZZ15uartInputHandlevE3__c_0>:
     156:	69 6e 74 65 6e 73 69 74 79 20 72 61 6e 67 65 20     intensity range 
     166:	4d 41 58 4d 41 54 52 49 58 5f 49 4e 54 45 4e 53     MAXMATRIX_INTENS
     176:	49 54 59 5f 4d 49 4e 5f 56 41 4c 55 45 20 2e 2e     ITY_MIN_VALUE ..
     186:	2e 20 4d 41 58 4d 41 54 52 49 58 5f 49 4e 54 45     . MAXMATRIX_INTE
     196:	4e 53 49 54 59 5f 4d 41 58 5f 56 41 4c 55 45 00     NSITY_MAX_VALUE.

000001a6 <_ZZ15uartInputHandlevE3__c>:
     1a6:	76 61 6c 75 65 20 6f 75 74 20 6f 66 20 72 61 6e     value out of ran
     1b6:	67 65 00                                            ge.

000001b9 <_ZL11SpriteTable>:
     1b9:	03 08 00 00 00 00 00 01 08 5f 00 00 00 00 03 08     ........._......
     1c9:	03 00 03 00 00 05 08 14 3e 14 3e 14 04 08 24 6a     ........>.>...$j
     1d9:	2b 12 00 05 08 63 13 08 64 63 05 08 36 49 56 20     +....c..dc..6IV 
     1e9:	50 01 08 03 00 00 00 00 03 08 1c 22 41 00 00 03     P.........."A...
     1f9:	08 41 22 1c 00 00 05 08 28 18 0e 18 28 05 08 08     .A".....(...(...
     209:	08 3e 08 08 02 08 b0 70 00 00 00 04 08 08 08 08     .>.....p........
     219:	08 00 02 08 60 60 00 00 00 04 08 60 18 06 01 00     ....``.....`....
     229:	04 08 3e 41 41 3e 00 03 08 42 7f 40 00 00 04 08     ..>AA>...B.@....
     239:	62 51 49 46 00 04 08 22 41 49 36 00 04 08 18 14     bQIF..."AI6.....
     249:	12 7f 00 04 08 27 45 45 39 00 04 08 3e 49 49 30     .....'EE9...>II0
     259:	00 04 08 61 11 09 07 00 04 08 36 49 49 36 00 04     ...a......6II6..
     269:	08 06 49 49 3e 00 02 08 50 00 00 00 00 02 08 80     ..II>...P.......
     279:	50 00 00 00 03 08 10 28 44 00 00 03 08 14 14 14     P......(D.......
     289:	00 00 03 08 44 28 10 00 00 04 08 02 59 09 06 00     ....D(......Y...
     299:	05 08 3e 49 55 5d 0e 04 08 7e 11 11 7e 00 04 08     ..>IU]...~..~...
     2a9:	7f 49 49 36 00 04 08 3e 41 41 22 00 04 08 7f 41     .II6...>AA"....A
     2b9:	41 3e 00 04 08 7f 49 49 41 00 04 08 7f 09 09 01     A>....IIA.......
     2c9:	00 04 08 3e 41 49 7a 00 04 08 7f 08 08 7f 00 03     ...>AIz.........
     2d9:	08 41 7f 41 00 00 04 08 30 40 41 3f 00 04 08 7f     .A.A....0@A?....
     2e9:	08 14 63 00 04 08 7f 40 40 40 00 05 08 7f 02 0c     ..c....@@@......
     2f9:	02 7f 05 08 7f 04 08 10 7f 04 08 3e 41 41 3e 00     ...........>AA>.
     309:	04 08 7f 09 09 06 00 04 08 3e 41 41 be 00 04 08     .........>AA....
     319:	7f 09 09 76 00 04 08 46 49 49 32 00 05 08 01 01     ...v...FII2.....
     329:	7f 01 01 04 08 3f 40 40 3f 00 05 08 0f 30 40 30     .....?@@?....0@0
     339:	0f 05 08 3f 40 38 40 3f 05 08 63 14 08 14 63 05     ...?@8@?..c...c.
     349:	08 07 08 70 08 07 04 08 61 51 49 47 00 02 08 7f     ...p....aQIG....
     359:	41 00 00 00 04 08 01 06 18 60 00 03 08 02 01 02     A........`......
     369:	00 00 04 08 40 40 40 40 00 02 08 01 02 00 00 00     ....@@@@........
     379:	04 08 20 54 54 78 00 04 08 7f 44 44 38 00 04 08     .. TTx....DD8...
     389:	38 44 44 28 00 04 08 38 44 44 7f 00 04 08 38 54     8DD(...8DD....8T
     399:	54 18 00 03 08 04 7e 05 00 00 04 08 98 a4 a4 78     T.....~........x
     3a9:	00 04 08 7f 04 04 78 00 03 08 44 7d 40 00 00 04     ......x...D}@...
     3b9:	08 40 80 84 7d 00 04 08 7f 10 28 44 00 03 08 41     .@..}.....(D...A
     3c9:	7f 40 00 00 05 08 7c 04 7c 04 78 04 08 7c 04 04     .@....|.|.x..|..
     3d9:	78 00 04 08 38 44 44 38 00 04 08 fc 24 24 18 00     x...8DD8....$$..
     3e9:	04 08 18 24 24 fc 00 04 08 7c 08 04 04 00 04 08     ...$$....|......
     3f9:	48 54 54 24 00 03 08 04 3f 44 00 00 04 08 3c 40     HTT$....?D....<@
     409:	40 7c 00 05 08 1c 20 40 20 1c 05 08 3c 40 3c 40     @|.... @ ...<@<@
     419:	3c 05 08 44 28 10 28 44 04 08 9c a0 a0 7c 00 03     <..D(.(D.....|..
     429:	08 64 54 4c 00 00 03 08 08 36 41 00 00 01 08 7f     .dTL.....6A.....
     439:	00 00 00 00 03 08 41 36 08 00 00 04 08 08 04 08     ......A6........
     449:	04 00 04 08 7c 13 13 7c 00 04 08 3c 43 43 3c 00     ....|..|...<CC<.
     459:	04 08 3e 41 41 3e 00 04 08 20 56 56 78 00 04 08     ..>AA>... VVx...
     469:	38 46 46 38 00 04 08 3c 42 42 7c 00                 8FF8...<BB|.

00000475 <digital_pin_to_timer_PGM>:
     475:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     485:	00 00 00 00                                         ....

00000489 <digital_pin_to_bit_mask_PGM>:
     489:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     499:	04 08 10 20                                         ... 

0000049d <digital_pin_to_port_PGM>:
     49d:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     4ad:	03 03 03 03                                         ....

000004b1 <port_to_output_PGM>:
     4b1:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000004bb <port_to_mode_PGM>:
     4bb:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000004c6 <__ctors_start>:
     4c6:	7a 04       	cpc	r7, r10
     4c8:	07 0f       	add	r16, r23

000004ca <__ctors_end>:
     4ca:	81 04       	cpc	r8, r1

000004cc <__dtors_end>:
     4cc:	11 24       	eor	r1, r1
     4ce:	1f be       	out	0x3f, r1	; 63
     4d0:	cf ef       	ldi	r28, 0xFF	; 255
     4d2:	d8 e0       	ldi	r29, 0x08	; 8
     4d4:	de bf       	out	0x3e, r29	; 62
     4d6:	cd bf       	out	0x3d, r28	; 61

000004d8 <__do_copy_data>:
     4d8:	11 e0       	ldi	r17, 0x01	; 1
     4da:	a0 e0       	ldi	r26, 0x00	; 0
     4dc:	b1 e0       	ldi	r27, 0x01	; 1
     4de:	e2 e0       	ldi	r30, 0x02	; 2
     4e0:	f4 e2       	ldi	r31, 0x24	; 36
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <__do_copy_data+0x10>
     4e4:	05 90       	lpm	r0, Z+
     4e6:	0d 92       	st	X+, r0
     4e8:	a0 35       	cpi	r26, 0x50	; 80
     4ea:	b1 07       	cpc	r27, r17
     4ec:	d9 f7       	brne	.-10     	; 0x4e4 <__do_copy_data+0xc>

000004ee <__do_clear_bss>:
     4ee:	22 e0       	ldi	r18, 0x02	; 2
     4f0:	a0 e5       	ldi	r26, 0x50	; 80
     4f2:	b1 e0       	ldi	r27, 0x01	; 1
     4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <.do_clear_bss_start>

000004f6 <.do_clear_bss_loop>:
     4f6:	1d 92       	st	X+, r1

000004f8 <.do_clear_bss_start>:
     4f8:	a6 36       	cpi	r26, 0x66	; 102
     4fa:	b2 07       	cpc	r27, r18
     4fc:	e1 f7       	brne	.-8      	; 0x4f6 <.do_clear_bss_loop>

000004fe <__do_global_ctors>:
     4fe:	12 e0       	ldi	r17, 0x02	; 2
     500:	c5 e6       	ldi	r28, 0x65	; 101
     502:	d2 e0       	ldi	r29, 0x02	; 2
     504:	04 c0       	rjmp	.+8      	; 0x50e <__do_global_ctors+0x10>
     506:	21 97       	sbiw	r28, 0x01	; 1
     508:	fe 01       	movw	r30, r28
     50a:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__tablejump2__>
     50e:	c3 36       	cpi	r28, 0x63	; 99
     510:	d1 07       	cpc	r29, r17
     512:	c9 f7       	brne	.-14     	; 0x506 <__do_global_ctors+0x8>
     514:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <main>
     518:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__do_global_dtors>

0000051c <__bad_interrupt>:
     51c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000520 <_Z8systTickv>:
 *                  Will be called from interrupt context
 *                  
 *********************************************************************************************************************/
void systTick()
{
    Timer1Overflow = true;
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <Timer1Overflow>
     526:	08 95       	ret

00000528 <setup>:
/**********************************************************************************************************************
 *  ARDUINO setup
 *********************************************************************************************************************/
void setup()
{
    Timer1.initialize(200000);
     528:	40 e4       	ldi	r20, 0x40	; 64
     52a:	5d e0       	ldi	r21, 0x0D	; 13
     52c:	63 e0       	ldi	r22, 0x03	; 3
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	8a eb       	ldi	r24, 0xBA	; 186
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN8TimerOne10initializeEl>
    Timer1.attachInterrupt(systTick);
     538:	2f ef       	ldi	r18, 0xFF	; 255
     53a:	3f ef       	ldi	r19, 0xFF	; 255
     53c:	a9 01       	movw	r20, r18
     53e:	60 e9       	ldi	r22, 0x90	; 144
     540:	72 e0       	ldi	r23, 0x02	; 2
     542:	8a eb       	ldi	r24, 0xBA	; 186
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <_ZN8TimerOne15attachInterruptEPFvvEl>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     54a:	26 e0       	ldi	r18, 0x06	; 6
     54c:	40 e8       	ldi	r20, 0x80	; 128
     54e:	55 e2       	ldi	r21, 0x25	; 37
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	80 ec       	ldi	r24, 0xC0	; 192
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <_ZN14HardwareSerial5beginEmh>
    Serial.begin(9600);
    Matrix.init();
     55c:	83 e5       	ldi	r24, 0x53	; 83
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN9MaxMatrix4initEv>
    
    Matrix.setOrientation(MAXMATRIX_MODULE_ORIENTATION_90);
     564:	61 e0       	ldi	r22, 0x01	; 1
     566:	83 e5       	ldi	r24, 0x53	; 83
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType>
    Matrix.setText("Andreas");
     56e:	60 e0       	ldi	r22, 0x00	; 0
     570:	71 e0       	ldi	r23, 0x01	; 1
     572:	83 e5       	ldi	r24, 0x53	; 83
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	0e 94 b6 0a 	call	0x156c	; 0x156c <_ZN9MaxMatrix7setTextEPc>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *********************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     57a:	4d e1       	ldi	r20, 0x1D	; 29
     57c:	50 e0       	ldi	r21, 0x00	; 0
     57e:	68 e0       	ldi	r22, 0x08	; 8
     580:	71 e0       	ldi	r23, 0x01	; 1
     582:	83 e7       	ldi	r24, 0x73	; 115
     584:	91 e0       	ldi	r25, 0x01	; 1
     586:	0e 94 b6 11 	call	0x236c	; 0x236c <strncpy>
    Destination[Length-1] = '\0';
     58a:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <MaxMatrixText+0x1d>
    Matrix.init();
    
    Matrix.setOrientation(MAXMATRIX_MODULE_ORIENTATION_90);
    Matrix.setText("Andreas");
    stringCopy(MaxMatrixText, "Andreas Burnickl", sizeof(MaxMatrixText));
    UartInputComplete = false;
     58e:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <UartInputComplete>
    Timer1Overflow = false;
     592:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <Timer1Overflow>
    
    State = LEDMATRIX_STATE_READY;
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <State>
     59c:	08 95       	ret

0000059e <_Z9printHelpv>:
 *  \details        this function prints usage of Led Matrix over UART
 *                  
 *********************************************************************************************************************/
void printHelp()
{
    Serial.println(F("command does not match"));
     59e:	68 ee       	ldi	r22, 0xE8	; 232
     5a0:	70 e0       	ldi	r23, 0x00	; 0
     5a2:	80 ec       	ldi	r24, 0xC0	; 192
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(F("known commands are: text, intensity and speed"));
     5aa:	6a eb       	ldi	r22, 0xBA	; 186
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	80 ec       	ldi	r24, 0xC0	; 192
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(F("command and value has to be separated by an equal sign"));
     5b6:	63 e8       	ldi	r22, 0x83	; 131
     5b8:	70 e0       	ldi	r23, 0x00	; 0
     5ba:	80 ec       	ldi	r24, 0xC0	; 192
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(F("Example: text=example text"));
     5c2:	68 e6       	ldi	r22, 0x68	; 104
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	80 ec       	ldi	r24, 0xC0	; 192
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <_ZN5Print7printlnEPK19__FlashStringHelper>

000005ce <_Z15uartInputHandlev>:
 *  \details        this function handles and validates the incoming data. After splitting the data into
 *                  command and value a specific action will be called.
 *                 
 *********************************************************************************************************************/
void uartInputHandle()
{
     5ce:	0f 93       	push	r16
     5d0:	1f 93       	push	r17
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	cd b7       	in	r28, 0x3d	; 61
     5d8:	de b7       	in	r29, 0x3e	; 62
     5da:	e6 97       	sbiw	r28, 0x36	; 54
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	f8 94       	cli
     5e0:	de bf       	out	0x3e, r29	; 62
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	cd bf       	out	0x3d, r28	; 61
    char command[COMMAND_MAX_LENGTH] = "";
     5e6:	1f 8e       	std	Y+31, r1	; 0x1f
     5e8:	18 a2       	std	Y+32, r1	; 0x20
     5ea:	19 a2       	std	Y+33, r1	; 0x21
     5ec:	1a a2       	std	Y+34, r1	; 0x22
     5ee:	fe 01       	movw	r30, r28
     5f0:	b3 96       	adiw	r30, 0x23	; 35
     5f2:	86 e0       	ldi	r24, 0x06	; 6
     5f4:	df 01       	movw	r26, r30
     5f6:	1d 92       	st	X+, r1
     5f8:	8a 95       	dec	r24
     5fa:	e9 f7       	brne	.-6      	; 0x5f6 <_Z15uartInputHandlev+0x28>
    char valueASCII[MAXMATRIX_MAX_TEXT_LENGTH] = "";
     5fc:	19 82       	std	Y+1, r1	; 0x01
     5fe:	1a 82       	std	Y+2, r1	; 0x02
     600:	1b 82       	std	Y+3, r1	; 0x03
     602:	1c 82       	std	Y+4, r1	; 0x04
     604:	7e 97       	sbiw	r30, 0x1e	; 30
     606:	8a e1       	ldi	r24, 0x1A	; 26
     608:	df 01       	movw	r26, r30
     60a:	1d 92       	st	X+, r1
     60c:	8a 95       	dec	r24
     60e:	e9 f7       	brne	.-6      	; 0x60a <_Z15uartInputHandlev+0x3c>
    int value = 0;
    const char delimiterCommand[] = "=";
     610:	8d e3       	ldi	r24, 0x3D	; 61
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	9d ab       	std	Y+53, r25	; 0x35
     616:	8c ab       	std	Y+52, r24	; 0x34
    const char delimiterValue[] = ",";
     618:	8c e2       	ldi	r24, 0x2C	; 44
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	9b ab       	std	Y+51, r25	; 0x33
     61e:	8a ab       	std	Y+50, r24	; 0x32
    char *token = NULL;

    if(strchr(UartInput, delimiterCommand[0]))
     620:	6d e3       	ldi	r22, 0x3D	; 61
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	82 e9       	ldi	r24, 0x92	; 146
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	0e 94 a2 11 	call	0x2344	; 0x2344 <strchr>
     62c:	89 2b       	or	r24, r25
     62e:	09 f4       	brne	.+2      	; 0x632 <_Z15uartInputHandlev+0x64>
     630:	26 c1       	rjmp	.+588    	; 0x87e <_Z15uartInputHandlev+0x2b0>
    {
        token = strtok(UartInput, delimiterCommand);
     632:	be 01       	movw	r22, r28
     634:	6c 5c       	subi	r22, 0xCC	; 204
     636:	7f 4f       	sbci	r23, 0xFF	; 255
     638:	82 e9       	ldi	r24, 0x92	; 146
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	0e 94 9d 11 	call	0x233a	; 0x233a <strtok>
        if(token != NULL) stringCopy(command, token, sizeof(command));
     640:	00 97       	sbiw	r24, 0x00	; 0
     642:	41 f0       	breq	.+16     	; 0x654 <_Z15uartInputHandlev+0x86>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *********************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     644:	49 e0       	ldi	r20, 0x09	; 9
     646:	50 e0       	ldi	r21, 0x00	; 0
     648:	bc 01       	movw	r22, r24
     64a:	ce 01       	movw	r24, r28
     64c:	4f 96       	adiw	r24, 0x1f	; 31
     64e:	0e 94 b6 11 	call	0x236c	; 0x236c <strncpy>
    Destination[Length-1] = '\0';
     652:	18 a6       	std	Y+40, r1	; 0x28

    if(strchr(UartInput, delimiterCommand[0]))
    {
        token = strtok(UartInput, delimiterCommand);
        if(token != NULL) stringCopy(command, token, sizeof(command));
        token = strtok(NULL, delimiterCommand);
     654:	be 01       	movw	r22, r28
     656:	6c 5c       	subi	r22, 0xCC	; 204
     658:	7f 4f       	sbci	r23, 0xFF	; 255
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 9d 11 	call	0x233a	; 0x233a <strtok>
        if(token != NULL) stringCopy(valueASCII, token, sizeof(valueASCII));
     662:	00 97       	sbiw	r24, 0x00	; 0
     664:	41 f0       	breq	.+16     	; 0x676 <_Z15uartInputHandlev+0xa8>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *********************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     666:	4d e1       	ldi	r20, 0x1D	; 29
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	bc 01       	movw	r22, r24
     66c:	ce 01       	movw	r24, r28
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	0e 94 b6 11 	call	0x236c	; 0x236c <strncpy>
    Destination[Length-1] = '\0';
     674:	1e 8e       	std	Y+30, r1	; 0x1e
        token = strtok(UartInput, delimiterCommand);
        if(token != NULL) stringCopy(command, token, sizeof(command));
        token = strtok(NULL, delimiterCommand);
        if(token != NULL) stringCopy(valueASCII, token, sizeof(valueASCII));

        if(strcmp(command, "textShift") == 0) {
     676:	69 e1       	ldi	r22, 0x19	; 25
     678:	71 e0       	ldi	r23, 0x01	; 1
     67a:	ce 01       	movw	r24, r28
     67c:	4f 96       	adiw	r24, 0x1f	; 31
     67e:	0e 94 ad 11 	call	0x235a	; 0x235a <strcmp>
     682:	89 2b       	or	r24, r25
     684:	e9 f4       	brne	.+58     	; 0x6c0 <_Z15uartInputHandlev+0xf2>
            if(LEDMATRIX_STATE_STRING_SHIFT != State) State = LEDMATRIX_STATE_STRING_SHIFT;
     686:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <State>
     68a:	82 30       	cpi	r24, 0x02	; 2
     68c:	19 f0       	breq	.+6      	; 0x694 <_Z15uartInputHandlev+0xc6>
     68e:	82 e0       	ldi	r24, 0x02	; 2
     690:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <State>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *********************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     694:	4d e1       	ldi	r20, 0x1D	; 29
     696:	50 e0       	ldi	r21, 0x00	; 0
     698:	be 01       	movw	r22, r28
     69a:	6f 5f       	subi	r22, 0xFF	; 255
     69c:	7f 4f       	sbci	r23, 0xFF	; 255
     69e:	83 e7       	ldi	r24, 0x73	; 115
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	0e 94 b6 11 	call	0x236c	; 0x236c <strncpy>
    Destination[Length-1] = '\0';
     6a6:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <MaxMatrixText+0x1d>
        if(token != NULL) stringCopy(valueASCII, token, sizeof(valueASCII));

        if(strcmp(command, "textShift") == 0) {
            if(LEDMATRIX_STATE_STRING_SHIFT != State) State = LEDMATRIX_STATE_STRING_SHIFT;
            stringCopy(MaxMatrixText, valueASCII, sizeof(MaxMatrixText));
            Matrix.clear();
     6aa:	83 e5       	ldi	r24, 0x53	; 83
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <_ZN9MaxMatrix5clearEv>
            Matrix.setTextWithShift(MaxMatrixText);
     6b2:	63 e7       	ldi	r22, 0x73	; 115
     6b4:	71 e0       	ldi	r23, 0x01	; 1
     6b6:	83 e5       	ldi	r24, 0x53	; 83
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	0e 94 02 05 	call	0xa04	; 0xa04 <_ZN9MaxMatrix16setTextWithShiftEPc>
     6be:	e8 c0       	rjmp	.+464    	; 0x890 <_Z15uartInputHandlev+0x2c2>
        }
        else if(strcmp(command, "text") == 0) {
     6c0:	63 e2       	ldi	r22, 0x23	; 35
     6c2:	71 e0       	ldi	r23, 0x01	; 1
     6c4:	ce 01       	movw	r24, r28
     6c6:	4f 96       	adiw	r24, 0x1f	; 31
     6c8:	0e 94 ad 11 	call	0x235a	; 0x235a <strcmp>
     6cc:	89 2b       	or	r24, r25
     6ce:	e9 f4       	brne	.+58     	; 0x70a <_Z15uartInputHandlev+0x13c>
            if(LEDMATRIX_STATE_READY != State) State = LEDMATRIX_STATE_READY;
     6d0:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <State>
     6d4:	81 30       	cpi	r24, 0x01	; 1
     6d6:	19 f0       	breq	.+6      	; 0x6de <_Z15uartInputHandlev+0x110>
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <State>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *********************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     6de:	4d e1       	ldi	r20, 0x1D	; 29
     6e0:	50 e0       	ldi	r21, 0x00	; 0
     6e2:	be 01       	movw	r22, r28
     6e4:	6f 5f       	subi	r22, 0xFF	; 255
     6e6:	7f 4f       	sbci	r23, 0xFF	; 255
     6e8:	83 e7       	ldi	r24, 0x73	; 115
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	0e 94 b6 11 	call	0x236c	; 0x236c <strncpy>
    Destination[Length-1] = '\0';
     6f0:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <MaxMatrixText+0x1d>
            Matrix.setTextWithShift(MaxMatrixText);
        }
        else if(strcmp(command, "text") == 0) {
            if(LEDMATRIX_STATE_READY != State) State = LEDMATRIX_STATE_READY;
            stringCopy(MaxMatrixText, valueASCII, sizeof(MaxMatrixText));
            Matrix.clear();
     6f4:	83 e5       	ldi	r24, 0x53	; 83
     6f6:	91 e0       	ldi	r25, 0x01	; 1
     6f8:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <_ZN9MaxMatrix5clearEv>
            Matrix.setText(MaxMatrixText);
     6fc:	63 e7       	ldi	r22, 0x73	; 115
     6fe:	71 e0       	ldi	r23, 0x01	; 1
     700:	83 e5       	ldi	r24, 0x53	; 83
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	0e 94 b6 0a 	call	0x156c	; 0x156c <_ZN9MaxMatrix7setTextEPc>
     708:	c3 c0       	rjmp	.+390    	; 0x890 <_Z15uartInputHandlev+0x2c2>
        }
        else if(strcmp(command, "intensity") == 0) {
     70a:	68 e2       	ldi	r22, 0x28	; 40
     70c:	71 e0       	ldi	r23, 0x01	; 1
     70e:	ce 01       	movw	r24, r28
     710:	4f 96       	adiw	r24, 0x1f	; 31
     712:	0e 94 ad 11 	call	0x235a	; 0x235a <strcmp>
     716:	89 2b       	or	r24, r25
     718:	d1 f4       	brne	.+52     	; 0x74e <_Z15uartInputHandlev+0x180>
            value = atoi(valueASCII);
     71a:	ce 01       	movw	r24, r28
     71c:	01 96       	adiw	r24, 0x01	; 1
     71e:	0e 94 76 11 	call	0x22ec	; 0x22ec <atoi>
            if(value >= MAXMATRIX_INTENSITY_MIN_VALUE && value <= MAXMATRIX_INTENSITY_MAX_VALUE) {
     722:	9c 01       	movw	r18, r24
     724:	21 50       	subi	r18, 0x01	; 1
     726:	31 09       	sbc	r19, r1
     728:	20 31       	cpi	r18, 0x10	; 16
     72a:	31 05       	cpc	r19, r1
     72c:	38 f4       	brcc	.+14     	; 0x73c <_Z15uartInputHandlev+0x16e>
                Matrix.setIntensity(value-1);
     72e:	6f ef       	ldi	r22, 0xFF	; 255
     730:	68 0f       	add	r22, r24
     732:	83 e5       	ldi	r24, 0x53	; 83
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <_ZN9MaxMatrix12setIntensityEh>
     73a:	aa c0       	rjmp	.+340    	; 0x890 <_Z15uartInputHandlev+0x2c2>
            } else {
                Serial.println(F("value out of range"));
     73c:	66 ea       	ldi	r22, 0xA6	; 166
     73e:	71 e0       	ldi	r23, 0x01	; 1
     740:	80 ec       	ldi	r24, 0xC0	; 192
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <_ZN5Print7printlnEPK19__FlashStringHelper>
                Serial.println(F("intensity range "TOSTRING(MAXMATRIX_INTENSITY_MIN_VALUE)" ... "TOSTRING(MAXMATRIX_INTENSITY_MAX_VALUE)));
     748:	66 e5       	ldi	r22, 0x56	; 86
     74a:	71 e0       	ldi	r23, 0x01	; 1
     74c:	29 c0       	rjmp	.+82     	; 0x7a0 <_Z15uartInputHandlev+0x1d2>
            }
        }
        else if(strcmp(command, "speed") == 0) {
     74e:	62 e3       	ldi	r22, 0x32	; 50
     750:	71 e0       	ldi	r23, 0x01	; 1
     752:	ce 01       	movw	r24, r28
     754:	4f 96       	adiw	r24, 0x1f	; 31
     756:	0e 94 ad 11 	call	0x235a	; 0x235a <strcmp>
     75a:	89 2b       	or	r24, r25
     75c:	31 f5       	brne	.+76     	; 0x7aa <_Z15uartInputHandlev+0x1dc>
            value = atoi(valueASCII);
     75e:	ce 01       	movw	r24, r28
     760:	01 96       	adiw	r24, 0x01	; 1
     762:	0e 94 76 11 	call	0x22ec	; 0x22ec <atoi>
            if(value >= MAXMATRIX_SPEED_MIN_VALUE && value <= MAXMATRIX_SPEED_MAX_VALUE) {
     766:	9c 01       	movw	r18, r24
     768:	21 50       	subi	r18, 0x01	; 1
     76a:	31 09       	sbc	r19, r1
     76c:	24 31       	cpi	r18, 0x14	; 20
     76e:	31 05       	cpc	r19, r1
     770:	78 f4       	brcc	.+30     	; 0x790 <_Z15uartInputHandlev+0x1c2>
                Timer1.setPeriod(((long)(MAXMATRIX_SPEED_MAX_VALUE-value+1)*5) * 10000);
     772:	a5 e1       	ldi	r26, 0x15	; 21
     774:	b0 e0       	ldi	r27, 0x00	; 0
     776:	a8 1b       	sub	r26, r24
     778:	b9 0b       	sbc	r27, r25
     77a:	20 e5       	ldi	r18, 0x50	; 80
     77c:	33 ec       	ldi	r19, 0xC3	; 195
     77e:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__usmulhisi3>
     782:	ab 01       	movw	r20, r22
     784:	bc 01       	movw	r22, r24
     786:	8a eb       	ldi	r24, 0xBA	; 186
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <_ZN8TimerOne9setPeriodEl>
     78e:	80 c0       	rjmp	.+256    	; 0x890 <_Z15uartInputHandlev+0x2c2>
            } else {
                Serial.println(F("value out of range"));
     790:	63 e4       	ldi	r22, 0x43	; 67
     792:	71 e0       	ldi	r23, 0x01	; 1
     794:	80 ec       	ldi	r24, 0xC0	; 192
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <_ZN5Print7printlnEPK19__FlashStringHelper>
                Serial.println(F("speed range "TOSTRING(MAXMATRIX_SPEED_MIN_VALUE)" ... "TOSTRING(MAXMATRIX_SPEED_MAX_VALUE)));
     79c:	6f ef       	ldi	r22, 0xFF	; 255
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 ec       	ldi	r24, 0xC0	; 192
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <_ZN5Print7printlnEPK19__FlashStringHelper>
     7a8:	73 c0       	rjmp	.+230    	; 0x890 <_Z15uartInputHandlev+0x2c2>
            }
        }
        else if(strcmp(command, "setDot") == 0) {
     7aa:	68 e3       	ldi	r22, 0x38	; 56
     7ac:	71 e0       	ldi	r23, 0x01	; 1
     7ae:	ce 01       	movw	r24, r28
     7b0:	4f 96       	adiw	r24, 0x1f	; 31
     7b2:	0e 94 ad 11 	call	0x235a	; 0x235a <strcmp>
     7b6:	89 2b       	or	r24, r25
     7b8:	09 f0       	breq	.+2      	; 0x7bc <_Z15uartInputHandlev+0x1ee>
     7ba:	61 c0       	rjmp	.+194    	; 0x87e <_Z15uartInputHandlev+0x2b0>
            if(LEDMATRIX_STATE_READY != State) {
     7bc:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <State>
     7c0:	81 30       	cpi	r24, 0x01	; 1
     7c2:	39 f0       	breq	.+14     	; 0x7d2 <_Z15uartInputHandlev+0x204>
                State = LEDMATRIX_STATE_READY;
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <State>
                Matrix.clear();
     7ca:	83 e5       	ldi	r24, 0x53	; 83
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <_ZN9MaxMatrix5clearEv>
            }
            char columnASCII[3] = "", rowASCII[3] = "", valueDotASCII[3] = "";
     7d2:	1f a6       	std	Y+47, r1	; 0x2f
     7d4:	18 aa       	std	Y+48, r1	; 0x30
     7d6:	19 aa       	std	Y+49, r1	; 0x31
     7d8:	1c a6       	std	Y+44, r1	; 0x2c
     7da:	1d a6       	std	Y+45, r1	; 0x2d
     7dc:	1e a6       	std	Y+46, r1	; 0x2e
     7de:	19 a6       	std	Y+41, r1	; 0x29
     7e0:	1a a6       	std	Y+42, r1	; 0x2a
     7e2:	1b a6       	std	Y+43, r1	; 0x2b
            byte column = 0, row = 0, valueDot = 0;
            token = strtok(valueASCII, delimiterValue);
     7e4:	be 01       	movw	r22, r28
     7e6:	6e 5c       	subi	r22, 0xCE	; 206
     7e8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ea:	ce 01       	movw	r24, r28
     7ec:	01 96       	adiw	r24, 0x01	; 1
     7ee:	0e 94 9d 11 	call	0x233a	; 0x233a <strtok>
            if(token != NULL) stringCopy(columnASCII, token, sizeof(columnASCII));
     7f2:	00 97       	sbiw	r24, 0x00	; 0
     7f4:	41 f0       	breq	.+16     	; 0x806 <_Z15uartInputHandlev+0x238>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *********************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     7f6:	42 e0       	ldi	r20, 0x02	; 2
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	bc 01       	movw	r22, r24
     7fc:	ce 01       	movw	r24, r28
     7fe:	8f 96       	adiw	r24, 0x2f	; 47
     800:	0e 94 b6 11 	call	0x236c	; 0x236c <strncpy>
    Destination[Length-1] = '\0';
     804:	19 aa       	std	Y+49, r1	; 0x31
            }
            char columnASCII[3] = "", rowASCII[3] = "", valueDotASCII[3] = "";
            byte column = 0, row = 0, valueDot = 0;
            token = strtok(valueASCII, delimiterValue);
            if(token != NULL) stringCopy(columnASCII, token, sizeof(columnASCII));
            token = strtok(NULL, delimiterValue);
     806:	be 01       	movw	r22, r28
     808:	6e 5c       	subi	r22, 0xCE	; 206
     80a:	7f 4f       	sbci	r23, 0xFF	; 255
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	0e 94 9d 11 	call	0x233a	; 0x233a <strtok>
            if(token != NULL) stringCopy(rowASCII, token, sizeof(rowASCII));
     814:	00 97       	sbiw	r24, 0x00	; 0
     816:	41 f0       	breq	.+16     	; 0x828 <_Z15uartInputHandlev+0x25a>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *********************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     818:	42 e0       	ldi	r20, 0x02	; 2
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	bc 01       	movw	r22, r24
     81e:	ce 01       	movw	r24, r28
     820:	8c 96       	adiw	r24, 0x2c	; 44
     822:	0e 94 b6 11 	call	0x236c	; 0x236c <strncpy>
    Destination[Length-1] = '\0';
     826:	1e a6       	std	Y+46, r1	; 0x2e
            byte column = 0, row = 0, valueDot = 0;
            token = strtok(valueASCII, delimiterValue);
            if(token != NULL) stringCopy(columnASCII, token, sizeof(columnASCII));
            token = strtok(NULL, delimiterValue);
            if(token != NULL) stringCopy(rowASCII, token, sizeof(rowASCII));
            token = strtok(NULL, delimiterValue);
     828:	be 01       	movw	r22, r28
     82a:	6e 5c       	subi	r22, 0xCE	; 206
     82c:	7f 4f       	sbci	r23, 0xFF	; 255
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	0e 94 9d 11 	call	0x233a	; 0x233a <strtok>
            if(token != NULL) stringCopy(valueDotASCII, token, sizeof(valueDotASCII));
     836:	00 97       	sbiw	r24, 0x00	; 0
     838:	41 f0       	breq	.+16     	; 0x84a <_Z15uartInputHandlev+0x27c>
 *  \param[in]      Length              maximum characters to copy
 *                  
 *********************************************************************************************************************/
inline void stringCopy(char *Destination, const char *Source, int Length)
{
    strncpy(Destination, Source, Length-1);
     83a:	42 e0       	ldi	r20, 0x02	; 2
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	bc 01       	movw	r22, r24
     840:	ce 01       	movw	r24, r28
     842:	89 96       	adiw	r24, 0x29	; 41
     844:	0e 94 b6 11 	call	0x236c	; 0x236c <strncpy>
    Destination[Length-1] = '\0';
     848:	1b a6       	std	Y+43, r1	; 0x2b
            if(token != NULL) stringCopy(columnASCII, token, sizeof(columnASCII));
            token = strtok(NULL, delimiterValue);
            if(token != NULL) stringCopy(rowASCII, token, sizeof(rowASCII));
            token = strtok(NULL, delimiterValue);
            if(token != NULL) stringCopy(valueDotASCII, token, sizeof(valueDotASCII));
            Matrix.setDot(atoi(columnASCII), atoi(rowASCII), atoi(valueDotASCII));
     84a:	ce 01       	movw	r24, r28
     84c:	89 96       	adiw	r24, 0x29	; 41
     84e:	0e 94 76 11 	call	0x22ec	; 0x22ec <atoi>
     852:	8c 01       	movw	r16, r24
     854:	ce 01       	movw	r24, r28
     856:	8c 96       	adiw	r24, 0x2c	; 44
     858:	0e 94 76 11 	call	0x22ec	; 0x22ec <atoi>
     85c:	48 2f       	mov	r20, r24
     85e:	ce 01       	movw	r24, r28
     860:	8f 96       	adiw	r24, 0x2f	; 47
     862:	4e ab       	std	Y+54, r20	; 0x36
     864:	0e 94 76 11 	call	0x22ec	; 0x22ec <atoi>
     868:	68 2f       	mov	r22, r24
     86a:	21 e0       	ldi	r18, 0x01	; 1
     86c:	4e a9       	ldd	r20, Y+54	; 0x36
     86e:	01 2b       	or	r16, r17
     870:	09 f4       	brne	.+2      	; 0x874 <_Z15uartInputHandlev+0x2a6>
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	83 e5       	ldi	r24, 0x53	; 83
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN9MaxMatrix6setDotEhhb>
     87c:	09 c0       	rjmp	.+18     	; 0x890 <_Z15uartInputHandlev+0x2c2>
        }
        else {
            Serial.println(command);
     87e:	be 01       	movw	r22, r28
     880:	61 5e       	subi	r22, 0xE1	; 225
     882:	7f 4f       	sbci	r23, 0xFF	; 255
     884:	80 ec       	ldi	r24, 0xC0	; 192
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <_ZN5Print7printlnEPKc>
            printHelp(); 
     88c:	0e 94 cf 02 	call	0x59e	; 0x59e <_Z9printHelpv>
        }
    } else {
        Serial.println(command);
        printHelp(); 
    }
}
     890:	e6 96       	adiw	r28, 0x36	; 54
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	f8 94       	cli
     896:	de bf       	out	0x3e, r29	; 62
     898:	0f be       	out	0x3f, r0	; 63
     89a:	cd bf       	out	0x3d, r28	; 61
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	1f 91       	pop	r17
     8a2:	0f 91       	pop	r16
     8a4:	08 95       	ret

000008a6 <loop>:
/**********************************************************************************************************************
 *  ARDUINO loop
 *********************************************************************************************************************/
void loop()
{ 
    if (UartInputComplete)
     8a6:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <UartInputComplete>
     8aa:	88 23       	and	r24, r24
     8ac:	31 f0       	breq	.+12     	; 0x8ba <loop+0x14>
    {
        uartInputHandle();
     8ae:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_Z15uartInputHandlev>
        // clear the string:
        UartInput[0] = '\0';
     8b2:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <UartInput>
        UartInputComplete = false;
     8b6:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <UartInputComplete>
    }

    if(Timer1Overflow && State == LEDMATRIX_STATE_STRING_SHIFT)
     8ba:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <Timer1Overflow>
     8be:	88 23       	and	r24, r24
     8c0:	c1 f0       	breq	.+48     	; 0x8f2 <loop+0x4c>
     8c2:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <State>
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <loop+0x4c>
    {
        if(Matrix.getState() == MAXMATRIX_STATE_STRING_SHIFT)
     8ca:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <Matrix+0x3>
     8ce:	83 30       	cpi	r24, 0x03	; 3
     8d0:	21 f4       	brne	.+8      	; 0x8da <loop+0x34>
            Matrix.shiftTask();
     8d2:	83 e5       	ldi	r24, 0x53	; 83
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN9MaxMatrix9shiftTaskEv>
        if(Matrix.getState() == MAXMATRIX_STATE_READY)
     8da:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <Matrix+0x3>
     8de:	82 30       	cpi	r24, 0x02	; 2
     8e0:	31 f4       	brne	.+12     	; 0x8ee <loop+0x48>
        {
            Matrix.setTextWithShift(MaxMatrixText);
     8e2:	63 e7       	ldi	r22, 0x73	; 115
     8e4:	71 e0       	ldi	r23, 0x01	; 1
     8e6:	83 e5       	ldi	r24, 0x53	; 83
     8e8:	91 e0       	ldi	r25, 0x01	; 1
     8ea:	0e 94 02 05 	call	0xa04	; 0xa04 <_ZN9MaxMatrix16setTextWithShiftEPc>
        }
        Timer1Overflow = false;
     8ee:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <Timer1Overflow>
     8f2:	08 95       	ret

000008f4 <_GLOBAL__sub_I_UartInput>:
 **********************************************************************************************************************/
char UartInput[UART_INPUT_LENGTH];                  // buffer for incoming UART data
boolean UartInputComplete;                          // flag UART string is complete
char MaxMatrixText[MAXMATRIX_MAX_TEXT_LENGTH];      // current Matrix Text
bool Timer1Overflow;                                // flag Timer1 overflow
MaxMatrix Matrix(MAXMATRIX_DATA_PIN, MAXMATRIX_CS_PIN, MAXMATRIX_CLOCK_PIN);
     8f4:	2b e0       	ldi	r18, 0x0B	; 11
     8f6:	4a e0       	ldi	r20, 0x0A	; 10
     8f8:	6c e0       	ldi	r22, 0x0C	; 12
     8fa:	83 e5       	ldi	r24, 0x53	; 83
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	0c 94 ad 04 	jmp	0x95a	; 0x95a <_ZN9MaxMatrixC1Ehhh>

00000902 <_GLOBAL__sub_D_UartInput>:
     902:	83 e5       	ldi	r24, 0x53	; 83
     904:	91 e0       	ldi	r25, 0x01	; 1
     906:	0c 94 c8 04 	jmp	0x990	; 0x990 <_ZN9MaxMatrixD1Ev>

0000090a <_Z11serialEventv>:
 *  \details        this function saves incoming UART signs into UART buffer.
 *                  After receiving new line, string is complete and flag will be set.
 *  \pre            will be called at the end of the main function             
 *********************************************************************************************************************/
void serialEvent() 
{
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
        // if the incoming character is a newline, set a flag
        if (inChar == '\n') {
            UartInputComplete = true;
        } else {
            // check for free space in buffer
            int UartInputLength = strlen(UartInput);
     910:	c2 e9       	ldi	r28, 0x92	; 146
     912:	d1 e0       	ldi	r29, 0x01	; 1
    {
        // get the new byte from UART
        char inChar = (char) Serial.read();
        // if the incoming character is a newline, set a flag
        if (inChar == '\n') {
            UartInputComplete = true;
     914:	11 e0       	ldi	r17, 0x01	; 1
 *                  After receiving new line, string is complete and flag will be set.
 *  \pre            will be called at the end of the main function             
 *********************************************************************************************************************/
void serialEvent() 
{
    while (Serial.available()) 
     916:	80 ec       	ldi	r24, 0xC0	; 192
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <_ZN14HardwareSerial9availableEv>
     91e:	89 2b       	or	r24, r25
     920:	c1 f0       	breq	.+48     	; 0x952 <_Z11serialEventv+0x48>
    {
        // get the new byte from UART
        char inChar = (char) Serial.read();
     922:	80 ec       	ldi	r24, 0xC0	; 192
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <_ZN14HardwareSerial4readEv>
        // if the incoming character is a newline, set a flag
        if (inChar == '\n') {
     92a:	8a 30       	cpi	r24, 0x0A	; 10
     92c:	19 f4       	brne	.+6      	; 0x934 <_Z11serialEventv+0x2a>
            UartInputComplete = true;
     92e:	10 93 91 01 	sts	0x0191, r17	; 0x800191 <UartInputComplete>
     932:	f1 cf       	rjmp	.-30     	; 0x916 <_Z11serialEventv+0xc>
        } else {
            // check for free space in buffer
            int UartInputLength = strlen(UartInput);
     934:	fe 01       	movw	r30, r28
     936:	01 90       	ld	r0, Z+
     938:	00 20       	and	r0, r0
     93a:	e9 f7       	brne	.-6      	; 0x936 <_Z11serialEventv+0x2c>
     93c:	31 97       	sbiw	r30, 0x01	; 1
     93e:	e2 59       	subi	r30, 0x92	; 146
     940:	f1 40       	sbci	r31, 0x01	; 1
            if(UartInputLength < UART_INPUT_LENGTH-1)
     942:	e7 32       	cpi	r30, 0x27	; 39
     944:	f1 05       	cpc	r31, r1
     946:	3c f7       	brge	.-50     	; 0x916 <_Z11serialEventv+0xc>
            {
                // save new char
                UartInput[UartInputLength] = inChar;
     948:	ee 56       	subi	r30, 0x6E	; 110
     94a:	fe 4f       	sbci	r31, 0xFE	; 254
     94c:	80 83       	st	Z, r24
                UartInput[UartInputLength+1] = '\0';
     94e:	11 82       	std	Z+1, r1	; 0x01
     950:	e2 cf       	rjmp	.-60     	; 0x916 <_Z11serialEventv+0xc>
            }
        }
    }
} /* serialEvent */
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	1f 91       	pop	r17
     958:	08 95       	ret

0000095a <_ZN9MaxMatrixC1Ehhh>:
		}
		return E_OK;
	} else {
		return E_NOT_OK;
	}
} /* setRowOnAllModulesLL */
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	fc 01       	movw	r30, r24
     960:	60 83       	st	Z, r22
     962:	41 83       	std	Z+1, r20	; 0x01
     964:	22 83       	std	Z+2, r18	; 0x02
     966:	16 8e       	std	Z+30, r1	; 0x1e
     968:	15 8e       	std	Z+29, r1	; 0x1d
     96a:	14 8e       	std	Z+28, r1	; 0x1c
     96c:	14 82       	std	Z+4, r1	; 0x04
     96e:	13 82       	std	Z+3, r1	; 0x03
     970:	ec 01       	movw	r28, r24
     972:	25 96       	adiw	r28, 0x05	; 5
     974:	dc 01       	movw	r26, r24
     976:	55 96       	adiw	r26, 0x15	; 21
     978:	19 92       	st	Y+, r1
     97a:	ca 17       	cp	r28, r26
     97c:	db 07       	cpc	r29, r27
     97e:	e1 f7       	brne	.-8      	; 0x978 <_ZN9MaxMatrixC1Ehhh+0x1e>
     980:	7c 96       	adiw	r30, 0x1c	; 28
     982:	1d 92       	st	X+, r1
     984:	ae 17       	cp	r26, r30
     986:	bf 07       	cpc	r27, r31
     988:	e1 f7       	brne	.-8      	; 0x982 <_ZN9MaxMatrixC1Ehhh+0x28>
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	08 95       	ret

00000990 <_ZN9MaxMatrixD1Ev>:
     990:	08 95       	ret

00000992 <_ZN9MaxMatrix13RegisterWriteEhh>:
     992:	ef 92       	push	r14
     994:	ff 92       	push	r15
     996:	0f 93       	push	r16
     998:	1f 93       	push	r17
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	ec 01       	movw	r28, r24
     9a0:	e6 2e       	mov	r14, r22
     9a2:	f4 2e       	mov	r15, r20
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	89 81       	ldd	r24, Y+1	; 0x01
     9a8:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
     9ac:	02 e0       	ldi	r16, 0x02	; 2
     9ae:	10 e0       	ldi	r17, 0x00	; 0
     9b0:	2e 2d       	mov	r18, r14
     9b2:	41 e0       	ldi	r20, 0x01	; 1
     9b4:	6a 81       	ldd	r22, Y+2	; 0x02
     9b6:	88 81       	ld	r24, Y
     9b8:	0e 94 fd 10 	call	0x21fa	; 0x21fa <shiftOut>
     9bc:	2f 2d       	mov	r18, r15
     9be:	41 e0       	ldi	r20, 0x01	; 1
     9c0:	6a 81       	ldd	r22, Y+2	; 0x02
     9c2:	88 81       	ld	r24, Y
     9c4:	0e 94 fd 10 	call	0x21fa	; 0x21fa <shiftOut>
     9c8:	01 30       	cpi	r16, 0x01	; 1
     9ca:	11 05       	cpc	r17, r1
     9cc:	19 f0       	breq	.+6      	; 0x9d4 <_ZN9MaxMatrix13RegisterWriteEhh+0x42>
     9ce:	01 e0       	ldi	r16, 0x01	; 1
     9d0:	10 e0       	ldi	r17, 0x00	; 0
     9d2:	ee cf       	rjmp	.-36     	; 0x9b0 <_ZN9MaxMatrix13RegisterWriteEhh+0x1e>
     9d4:	60 e0       	ldi	r22, 0x00	; 0
     9d6:	89 81       	ldd	r24, Y+1	; 0x01
     9d8:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
     9dc:	61 e0       	ldi	r22, 0x01	; 1
     9de:	89 81       	ldd	r24, Y+1	; 0x01
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	0f 91       	pop	r16
     9e8:	ff 90       	pop	r15
     9ea:	ef 90       	pop	r14
     9ec:	0c 94 cd 10 	jmp	0x219a	; 0x219a <digitalWrite>

000009f0 <_ZN9MaxMatrix12setIntensityEh>:
     9f0:	60 31       	cpi	r22, 0x10	; 16
     9f2:	30 f4       	brcc	.+12     	; 0xa00 <_ZN9MaxMatrix12setIntensityEh+0x10>
     9f4:	46 2f       	mov	r20, r22
     9f6:	6a e0       	ldi	r22, 0x0A	; 10
     9f8:	0e 94 c9 04 	call	0x992	; 0x992 <_ZN9MaxMatrix13RegisterWriteEhh>
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	08 95       	ret
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	08 95       	ret

00000a04 <_ZN9MaxMatrix16setTextWithShiftEPc>:
     a04:	fc 01       	movw	r30, r24
     a06:	61 15       	cp	r22, r1
     a08:	71 05       	cpc	r23, r1
     a0a:	39 f0       	breq	.+14     	; 0xa1a <_ZN9MaxMatrix16setTextWithShiftEPc+0x16>
     a0c:	14 8e       	std	Z+28, r1	; 0x1c
     a0e:	76 8f       	std	Z+30, r23	; 0x1e
     a10:	65 8f       	std	Z+29, r22	; 0x1d
     a12:	83 e0       	ldi	r24, 0x03	; 3
     a14:	83 83       	std	Z+3, r24	; 0x03
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	08 95       	ret
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	08 95       	ret

00000a1e <_ZN9MaxMatrix9getSpriteEhPA7_h>:
     a1e:	64 36       	cpi	r22, 0x64	; 100
     a20:	68 f4       	brcc	.+26     	; 0xa3c <_ZN9MaxMatrix9getSpriteEhPA7_h+0x1e>
     a22:	ca 01       	movw	r24, r20
     a24:	27 e0       	ldi	r18, 0x07	; 7
     a26:	62 9f       	mul	r22, r18
     a28:	b0 01       	movw	r22, r0
     a2a:	11 24       	eor	r1, r1
     a2c:	67 54       	subi	r22, 0x47	; 71
     a2e:	7e 4f       	sbci	r23, 0xFE	; 254
     a30:	47 e0       	ldi	r20, 0x07	; 7
     a32:	50 e0       	ldi	r21, 0x00	; 0
     a34:	0e 94 94 11 	call	0x2328	; 0x2328 <memcpy_P>
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	08 95       	ret
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	08 95       	ret

00000a40 <_ZN9MaxMatrix11reverseByteEh>:
     a40:	62 95       	swap	r22
     a42:	96 2f       	mov	r25, r22
     a44:	93 73       	andi	r25, 0x33	; 51
     a46:	84 e0       	ldi	r24, 0x04	; 4
     a48:	98 9f       	mul	r25, r24
     a4a:	90 01       	movw	r18, r0
     a4c:	11 24       	eor	r1, r1
     a4e:	6c 7c       	andi	r22, 0xCC	; 204
     a50:	66 95       	lsr	r22
     a52:	66 95       	lsr	r22
     a54:	26 2b       	or	r18, r22
     a56:	82 2f       	mov	r24, r18
     a58:	85 75       	andi	r24, 0x55	; 85
     a5a:	88 0f       	add	r24, r24
     a5c:	2a 7a       	andi	r18, 0xAA	; 170
     a5e:	26 95       	lsr	r18
     a60:	82 2b       	or	r24, r18
     a62:	08 95       	ret

00000a64 <_ZN9MaxMatrix6reloadEv>:
     a64:	df 92       	push	r13
     a66:	ef 92       	push	r14
     a68:	ff 92       	push	r15
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	ec 01       	movw	r28, r24
     a74:	00 e0       	ldi	r16, 0x00	; 0
     a76:	10 e0       	ldi	r17, 0x00	; 0
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	89 81       	ldd	r24, Y+1	; 0x01
     a7c:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
     a80:	e1 2c       	mov	r14, r1
     a82:	f1 2c       	mov	r15, r1
     a84:	dd 24       	eor	r13, r13
     a86:	d3 94       	inc	r13
     a88:	d0 0e       	add	r13, r16
     a8a:	2d 2d       	mov	r18, r13
     a8c:	41 e0       	ldi	r20, 0x01	; 1
     a8e:	6a 81       	ldd	r22, Y+2	; 0x02
     a90:	88 81       	ld	r24, Y
     a92:	0e 94 fd 10 	call	0x21fa	; 0x21fa <shiftOut>
     a96:	f7 01       	movw	r30, r14
     a98:	e0 0f       	add	r30, r16
     a9a:	f1 1f       	adc	r31, r17
     a9c:	ec 0f       	add	r30, r28
     a9e:	fd 1f       	adc	r31, r29
     aa0:	25 81       	ldd	r18, Z+5	; 0x05
     aa2:	41 e0       	ldi	r20, 0x01	; 1
     aa4:	6a 81       	ldd	r22, Y+2	; 0x02
     aa6:	88 81       	ld	r24, Y
     aa8:	0e 94 fd 10 	call	0x21fa	; 0x21fa <shiftOut>
     aac:	88 e0       	ldi	r24, 0x08	; 8
     aae:	e8 0e       	add	r14, r24
     ab0:	f1 1c       	adc	r15, r1
     ab2:	80 e1       	ldi	r24, 0x10	; 16
     ab4:	e8 16       	cp	r14, r24
     ab6:	f1 04       	cpc	r15, r1
     ab8:	41 f7       	brne	.-48     	; 0xa8a <_ZN9MaxMatrix6reloadEv+0x26>
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
     ac2:	61 e0       	ldi	r22, 0x01	; 1
     ac4:	89 81       	ldd	r24, Y+1	; 0x01
     ac6:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
     aca:	0f 5f       	subi	r16, 0xFF	; 255
     acc:	1f 4f       	sbci	r17, 0xFF	; 255
     ace:	08 30       	cpi	r16, 0x08	; 8
     ad0:	11 05       	cpc	r17, r1
     ad2:	91 f6       	brne	.-92     	; 0xa78 <_ZN9MaxMatrix6reloadEv+0x14>
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	df 90       	pop	r13
     ae2:	08 95       	ret

00000ae4 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType>:
     ae4:	2f 92       	push	r2
     ae6:	3f 92       	push	r3
     ae8:	4f 92       	push	r4
     aea:	5f 92       	push	r5
     aec:	6f 92       	push	r6
     aee:	7f 92       	push	r7
     af0:	8f 92       	push	r8
     af2:	9f 92       	push	r9
     af4:	af 92       	push	r10
     af6:	bf 92       	push	r11
     af8:	cf 92       	push	r12
     afa:	df 92       	push	r13
     afc:	ef 92       	push	r14
     afe:	ff 92       	push	r15
     b00:	0f 93       	push	r16
     b02:	1f 93       	push	r17
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	cd b7       	in	r28, 0x3d	; 61
     b0a:	de b7       	in	r29, 0x3e	; 62
     b0c:	68 97       	sbiw	r28, 0x18	; 24
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	f8 94       	cli
     b12:	de bf       	out	0x3e, r29	; 62
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	cd bf       	out	0x3d, r28	; 61
     b18:	fc 01       	movw	r30, r24
     b1a:	84 81       	ldd	r24, Z+4	; 0x04
     b1c:	68 17       	cp	r22, r24
     b1e:	09 f4       	brne	.+2      	; 0xb22 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x3e>
     b20:	07 c2       	rjmp	.+1038   	; 0xf30 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x44c>
     b22:	81 11       	cpse	r24, r1
     b24:	04 c0       	rjmp	.+8      	; 0xb2e <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x4a>
     b26:	61 30       	cpi	r22, 0x01	; 1
     b28:	99 f0       	breq	.+38     	; 0xb50 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x6c>
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	aa c0       	rjmp	.+340    	; 0xc82 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x19e>
     b2e:	81 30       	cpi	r24, 0x01	; 1
     b30:	21 f4       	brne	.+8      	; 0xb3a <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x56>
     b32:	62 30       	cpi	r22, 0x02	; 2
     b34:	69 f0       	breq	.+26     	; 0xb50 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x6c>
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	ab c0       	rjmp	.+342    	; 0xc90 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1ac>
     b3a:	82 30       	cpi	r24, 0x02	; 2
     b3c:	21 f4       	brne	.+8      	; 0xb46 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x62>
     b3e:	63 30       	cpi	r22, 0x03	; 3
     b40:	39 f0       	breq	.+14     	; 0xb50 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x6c>
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	ac c0       	rjmp	.+344    	; 0xc9e <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1ba>
     b46:	83 30       	cpi	r24, 0x03	; 3
     b48:	09 f0       	breq	.+2      	; 0xb4c <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x68>
     b4a:	9f c0       	rjmp	.+318    	; 0xc8a <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1a6>
     b4c:	61 11       	cpse	r22, r1
     b4e:	04 c1       	rjmp	.+520    	; 0xd58 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x274>
     b50:	9e 01       	movw	r18, r28
     b52:	2f 5f       	subi	r18, 0xFF	; 255
     b54:	3f 4f       	sbci	r19, 0xFF	; 255
     b56:	3a 8b       	std	Y+18, r19	; 0x12
     b58:	29 8b       	std	Y+17, r18	; 0x11
     b5a:	07 e0       	ldi	r16, 0x07	; 7
     b5c:	10 e0       	ldi	r17, 0x00	; 0
     b5e:	79 01       	movw	r14, r18
     b60:	cc 24       	eor	r12, r12
     b62:	c3 94       	inc	r12
     b64:	d1 2c       	mov	r13, r1
     b66:	41 2c       	mov	r4, r1
     b68:	51 2c       	mov	r5, r1
     b6a:	32 01       	movw	r6, r4
     b6c:	43 94       	inc	r4
     b6e:	16 01       	movw	r2, r12
     b70:	00 2e       	mov	r0, r16
     b72:	02 c0       	rjmp	.+4      	; 0xb78 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x94>
     b74:	22 0c       	add	r2, r2
     b76:	33 1c       	adc	r3, r3
     b78:	0a 94       	dec	r0
     b7a:	e2 f7       	brpl	.-8      	; 0xb74 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x90>
     b7c:	28 e0       	ldi	r18, 0x08	; 8
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	9f ef       	ldi	r25, 0xFF	; 255
     b82:	92 0f       	add	r25, r18
     b84:	21 15       	cp	r18, r1
     b86:	31 05       	cpc	r19, r1
     b88:	61 f1       	breq	.+88     	; 0xbe2 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0xfe>
     b8a:	af 01       	movw	r20, r30
     b8c:	42 0f       	add	r20, r18
     b8e:	53 1f       	adc	r21, r19
     b90:	da 01       	movw	r26, r20
     b92:	14 96       	adiw	r26, 0x04	; 4
     b94:	4c 91       	ld	r20, X
     b96:	50 e0       	ldi	r21, 0x00	; 0
     b98:	42 21       	and	r20, r2
     b9a:	53 21       	and	r21, r3
     b9c:	45 2b       	or	r20, r21
     b9e:	81 f4       	brne	.+32     	; 0xbc0 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0xdc>
     ba0:	53 01       	movw	r10, r6
     ba2:	42 01       	movw	r8, r4
     ba4:	04 c0       	rjmp	.+8      	; 0xbae <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0xca>
     ba6:	88 0c       	add	r8, r8
     ba8:	99 1c       	adc	r9, r9
     baa:	aa 1c       	adc	r10, r10
     bac:	bb 1c       	adc	r11, r11
     bae:	9a 95       	dec	r25
     bb0:	d2 f7       	brpl	.-12     	; 0xba6 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0xc2>
     bb2:	98 2d       	mov	r25, r8
     bb4:	90 95       	com	r25
     bb6:	a9 89       	ldd	r26, Y+17	; 0x11
     bb8:	ba 89       	ldd	r27, Y+18	; 0x12
     bba:	4c 91       	ld	r20, X
     bbc:	94 23       	and	r25, r20
     bbe:	0d c0       	rjmp	.+26     	; 0xbda <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0xf6>
     bc0:	53 01       	movw	r10, r6
     bc2:	42 01       	movw	r8, r4
     bc4:	04 c0       	rjmp	.+8      	; 0xbce <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0xea>
     bc6:	88 0c       	add	r8, r8
     bc8:	99 1c       	adc	r9, r9
     bca:	aa 1c       	adc	r10, r10
     bcc:	bb 1c       	adc	r11, r11
     bce:	9a 95       	dec	r25
     bd0:	d2 f7       	brpl	.-12     	; 0xbc6 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0xe2>
     bd2:	a9 89       	ldd	r26, Y+17	; 0x11
     bd4:	ba 89       	ldd	r27, Y+18	; 0x12
     bd6:	9c 91       	ld	r25, X
     bd8:	98 29       	or	r25, r8
     bda:	9c 93       	st	X, r25
     bdc:	21 50       	subi	r18, 0x01	; 1
     bde:	31 09       	sbc	r19, r1
     be0:	cf cf       	rjmp	.-98     	; 0xb80 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x9c>
     be2:	01 50       	subi	r16, 0x01	; 1
     be4:	11 09       	sbc	r17, r1
     be6:	29 89       	ldd	r18, Y+17	; 0x11
     be8:	3a 89       	ldd	r19, Y+18	; 0x12
     bea:	2f 5f       	subi	r18, 0xFF	; 255
     bec:	3f 4f       	sbci	r19, 0xFF	; 255
     bee:	3a 8b       	std	Y+18, r19	; 0x12
     bf0:	29 8b       	std	Y+17, r18	; 0x11
     bf2:	0f 3f       	cpi	r16, 0xFF	; 255
     bf4:	3f ef       	ldi	r19, 0xFF	; 255
     bf6:	13 07       	cpc	r17, r19
     bf8:	09 f0       	breq	.+2      	; 0xbfc <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x118>
     bfa:	b9 cf       	rjmp	.-142    	; 0xb6e <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x8a>
     bfc:	27 e0       	ldi	r18, 0x07	; 7
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	7f e0       	ldi	r23, 0x0F	; 15
     c02:	cc 24       	eor	r12, r12
     c04:	c3 94       	inc	r12
     c06:	d1 2c       	mov	r13, r1
     c08:	41 2c       	mov	r4, r1
     c0a:	51 2c       	mov	r5, r1
     c0c:	32 01       	movw	r6, r4
     c0e:	43 94       	inc	r4
     c10:	16 01       	movw	r2, r12
     c12:	02 2e       	mov	r0, r18
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x136>
     c16:	22 0c       	add	r2, r2
     c18:	33 1c       	adc	r3, r3
     c1a:	0a 94       	dec	r0
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x132>
     c1e:	40 e1       	ldi	r20, 0x10	; 16
     c20:	50 e0       	ldi	r21, 0x00	; 0
     c22:	97 2f       	mov	r25, r23
     c24:	92 1b       	sub	r25, r18
     c26:	87 01       	movw	r16, r14
     c28:	09 0f       	add	r16, r25
     c2a:	11 1d       	adc	r17, r1
     c2c:	97 ef       	ldi	r25, 0xF7	; 247
     c2e:	94 0f       	add	r25, r20
     c30:	48 30       	cpi	r20, 0x08	; 8
     c32:	51 05       	cpc	r21, r1
     c34:	01 f1       	breq	.+64     	; 0xc76 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x192>
     c36:	df 01       	movw	r26, r30
     c38:	a4 0f       	add	r26, r20
     c3a:	b5 1f       	adc	r27, r21
     c3c:	14 96       	adiw	r26, 0x04	; 4
     c3e:	ac 91       	ld	r26, X
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	a2 21       	and	r26, r2
     c44:	b3 21       	and	r27, r3
     c46:	53 01       	movw	r10, r6
     c48:	42 01       	movw	r8, r4
     c4a:	04 c0       	rjmp	.+8      	; 0xc54 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x170>
     c4c:	88 0c       	add	r8, r8
     c4e:	99 1c       	adc	r9, r9
     c50:	aa 1c       	adc	r10, r10
     c52:	bb 1c       	adc	r11, r11
     c54:	9a 95       	dec	r25
     c56:	d2 f7       	brpl	.-12     	; 0xc4c <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x168>
     c58:	ab 2b       	or	r26, r27
     c5a:	21 f0       	breq	.+8      	; 0xc64 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x180>
     c5c:	d8 01       	movw	r26, r16
     c5e:	9c 91       	ld	r25, X
     c60:	98 29       	or	r25, r8
     c62:	05 c0       	rjmp	.+10     	; 0xc6e <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x18a>
     c64:	98 2d       	mov	r25, r8
     c66:	90 95       	com	r25
     c68:	d8 01       	movw	r26, r16
     c6a:	bc 90       	ld	r11, X
     c6c:	9b 21       	and	r25, r11
     c6e:	9c 93       	st	X, r25
     c70:	41 50       	subi	r20, 0x01	; 1
     c72:	51 09       	sbc	r21, r1
     c74:	db cf       	rjmp	.-74     	; 0xc2c <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x148>
     c76:	21 50       	subi	r18, 0x01	; 1
     c78:	31 09       	sbc	r19, r1
     c7a:	50 f6       	brcc	.-108    	; 0xc10 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x12c>
     c7c:	90 e1       	ldi	r25, 0x10	; 16
     c7e:	81 11       	cpse	r24, r1
     c80:	05 c0       	rjmp	.+10     	; 0xc8c <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1a8>
     c82:	62 30       	cpi	r22, 0x02	; 2
     c84:	09 f0       	breq	.+2      	; 0xc88 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1a4>
     c86:	b1 c0       	rjmp	.+354    	; 0xdea <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x306>
     c88:	0c c0       	rjmp	.+24     	; 0xca2 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1be>
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	81 30       	cpi	r24, 0x01	; 1
     c8e:	21 f4       	brne	.+8      	; 0xc98 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1b4>
     c90:	63 30       	cpi	r22, 0x03	; 3
     c92:	09 f0       	breq	.+2      	; 0xc96 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1b2>
     c94:	b0 c0       	rjmp	.+352    	; 0xdf6 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x312>
     c96:	05 c0       	rjmp	.+10     	; 0xca2 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1be>
     c98:	82 30       	cpi	r24, 0x02	; 2
     c9a:	09 f0       	breq	.+2      	; 0xc9e <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1ba>
     c9c:	5f c0       	rjmp	.+190    	; 0xd5c <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x278>
     c9e:	61 11       	cpse	r22, r1
     ca0:	af c0       	rjmp	.+350    	; 0xe00 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x31c>
     ca2:	48 e0       	ldi	r20, 0x08	; 8
     ca4:	50 e0       	ldi	r21, 0x00	; 0
     ca6:	78 e0       	ldi	r23, 0x08	; 8
     ca8:	79 0f       	add	r23, r25
     caa:	27 e0       	ldi	r18, 0x07	; 7
     cac:	72 2e       	mov	r7, r18
     cae:	81 2c       	mov	r8, r1
     cb0:	91 2c       	mov	r9, r1
     cb2:	54 01       	movw	r10, r8
     cb4:	83 94       	inc	r8
     cb6:	d7 2e       	mov	r13, r23
     cb8:	d4 1a       	sub	r13, r20
     cba:	41 15       	cp	r20, r1
     cbc:	51 05       	cpc	r21, r1
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1de>
     cc0:	41 c0       	rjmp	.+130    	; 0xd44 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x260>
     cc2:	9f 01       	movw	r18, r30
     cc4:	24 0f       	add	r18, r20
     cc6:	35 1f       	adc	r19, r21
     cc8:	d9 01       	movw	r26, r18
     cca:	14 96       	adiw	r26, 0x04	; 4
     ccc:	0c 91       	ld	r16, X
     cce:	10 e0       	ldi	r17, 0x00	; 0
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	a1 e0       	ldi	r26, 0x01	; 1
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	ac 0f       	add	r26, r28
     cda:	bd 1f       	adc	r27, r29
     cdc:	ad 0d       	add	r26, r13
     cde:	b1 1d       	adc	r27, r1
     ce0:	d7 2c       	mov	r13, r7
     ce2:	d2 1a       	sub	r13, r18
     ce4:	78 01       	movw	r14, r16
     ce6:	02 2e       	mov	r0, r18
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x20a>
     cea:	f5 94       	asr	r15
     cec:	e7 94       	ror	r14
     cee:	0a 94       	dec	r0
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x206>
     cf2:	e0 fc       	sbrc	r14, 0
     cf4:	18 c0       	rjmp	.+48     	; 0xd26 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x242>
     cf6:	14 01       	movw	r2, r8
     cf8:	25 01       	movw	r4, r10
     cfa:	04 c0       	rjmp	.+8      	; 0xd04 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x220>
     cfc:	22 0c       	add	r2, r2
     cfe:	33 1c       	adc	r3, r3
     d00:	44 1c       	adc	r4, r4
     d02:	55 1c       	adc	r5, r5
     d04:	da 94       	dec	r13
     d06:	d2 f7       	brpl	.-12     	; 0xcfc <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x218>
     d08:	72 01       	movw	r14, r4
     d0a:	61 01       	movw	r12, r2
     d0c:	c0 94       	com	r12
     d0e:	ec 90       	ld	r14, X
     d10:	fc 2c       	mov	r15, r12
     d12:	fe 20       	and	r15, r14
     d14:	fc 92       	st	X, r15
     d16:	2f 5f       	subi	r18, 0xFF	; 255
     d18:	3f 4f       	sbci	r19, 0xFF	; 255
     d1a:	28 30       	cpi	r18, 0x08	; 8
     d1c:	31 05       	cpc	r19, r1
     d1e:	01 f7       	brne	.-64     	; 0xce0 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1fc>
     d20:	41 50       	subi	r20, 0x01	; 1
     d22:	51 09       	sbc	r21, r1
     d24:	c8 cf       	rjmp	.-112    	; 0xcb6 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1d2>
     d26:	14 01       	movw	r2, r8
     d28:	25 01       	movw	r4, r10
     d2a:	04 c0       	rjmp	.+8      	; 0xd34 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x250>
     d2c:	22 0c       	add	r2, r2
     d2e:	33 1c       	adc	r3, r3
     d30:	44 1c       	adc	r4, r4
     d32:	55 1c       	adc	r5, r5
     d34:	da 94       	dec	r13
     d36:	d2 f7       	brpl	.-12     	; 0xd2c <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x248>
     d38:	72 01       	movw	r14, r4
     d3a:	61 01       	movw	r12, r2
     d3c:	6c 90       	ld	r6, X
     d3e:	c6 28       	or	r12, r6
     d40:	cc 92       	st	X, r12
     d42:	e9 cf       	rjmp	.-46     	; 0xd16 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x232>
     d44:	40 e1       	ldi	r20, 0x10	; 16
     d46:	50 e0       	ldi	r21, 0x00	; 0
     d48:	70 5f       	subi	r23, 0xF0	; 240
     d4a:	17 e0       	ldi	r17, 0x07	; 7
     d4c:	71 2e       	mov	r7, r17
     d4e:	81 2c       	mov	r8, r1
     d50:	91 2c       	mov	r9, r1
     d52:	54 01       	movw	r10, r8
     d54:	83 94       	inc	r8
     d56:	29 c0       	rjmp	.+82     	; 0xdaa <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x2c6>
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	03 c0       	rjmp	.+6      	; 0xd62 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x27e>
     d5c:	83 30       	cpi	r24, 0x03	; 3
     d5e:	09 f0       	breq	.+2      	; 0xd62 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x27e>
     d60:	42 c0       	rjmp	.+132    	; 0xde6 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x302>
     d62:	61 30       	cpi	r22, 0x01	; 1
     d64:	09 f0       	breq	.+2      	; 0xd68 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x284>
     d66:	59 c0       	rjmp	.+178    	; 0xe1a <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x336>
     d68:	9c cf       	rjmp	.-200    	; 0xca2 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x1be>
     d6a:	d7 2c       	mov	r13, r7
     d6c:	d2 1a       	sub	r13, r18
     d6e:	78 01       	movw	r14, r16
     d70:	02 2e       	mov	r0, r18
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x294>
     d74:	f5 94       	asr	r15
     d76:	e7 94       	ror	r14
     d78:	0a 94       	dec	r0
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x290>
     d7c:	14 01       	movw	r2, r8
     d7e:	25 01       	movw	r4, r10
     d80:	04 c0       	rjmp	.+8      	; 0xd8a <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x2a6>
     d82:	22 0c       	add	r2, r2
     d84:	33 1c       	adc	r3, r3
     d86:	44 1c       	adc	r4, r4
     d88:	55 1c       	adc	r5, r5
     d8a:	da 94       	dec	r13
     d8c:	d2 f7       	brpl	.-12     	; 0xd82 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x29e>
     d8e:	e0 fe       	sbrs	r14, 0
     d90:	21 c0       	rjmp	.+66     	; 0xdd4 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x2f0>
     d92:	72 01       	movw	r14, r4
     d94:	61 01       	movw	r12, r2
     d96:	6c 90       	ld	r6, X
     d98:	c6 28       	or	r12, r6
     d9a:	cc 92       	st	X, r12
     d9c:	2f 5f       	subi	r18, 0xFF	; 255
     d9e:	3f 4f       	sbci	r19, 0xFF	; 255
     da0:	28 30       	cpi	r18, 0x08	; 8
     da2:	31 05       	cpc	r19, r1
     da4:	11 f7       	brne	.-60     	; 0xd6a <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x286>
     da6:	41 50       	subi	r20, 0x01	; 1
     da8:	51 09       	sbc	r21, r1
     daa:	d7 2e       	mov	r13, r23
     dac:	d4 1a       	sub	r13, r20
     dae:	48 30       	cpi	r20, 0x08	; 8
     db0:	51 05       	cpc	r21, r1
     db2:	c1 f0       	breq	.+48     	; 0xde4 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x300>
     db4:	9f 01       	movw	r18, r30
     db6:	24 0f       	add	r18, r20
     db8:	35 1f       	adc	r19, r21
     dba:	d9 01       	movw	r26, r18
     dbc:	14 96       	adiw	r26, 0x04	; 4
     dbe:	0c 91       	ld	r16, X
     dc0:	10 e0       	ldi	r17, 0x00	; 0
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	a1 e0       	ldi	r26, 0x01	; 1
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	ac 0f       	add	r26, r28
     dcc:	bd 1f       	adc	r27, r29
     dce:	ad 0d       	add	r26, r13
     dd0:	b1 1d       	adc	r27, r1
     dd2:	cb cf       	rjmp	.-106    	; 0xd6a <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x286>
     dd4:	72 01       	movw	r14, r4
     dd6:	61 01       	movw	r12, r2
     dd8:	c0 94       	com	r12
     dda:	ec 90       	ld	r14, X
     ddc:	fc 2c       	mov	r15, r12
     dde:	fe 20       	and	r15, r14
     de0:	fc 92       	st	X, r15
     de2:	dc cf       	rjmp	.-72     	; 0xd9c <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x2b8>
     de4:	90 5f       	subi	r25, 0xF0	; 240
     de6:	81 11       	cpse	r24, r1
     de8:	04 c0       	rjmp	.+8      	; 0xdf2 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x30e>
     dea:	63 30       	cpi	r22, 0x03	; 3
     dec:	09 f0       	breq	.+2      	; 0xdf0 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x30c>
     dee:	73 c0       	rjmp	.+230    	; 0xed6 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x3f2>
     df0:	0a c0       	rjmp	.+20     	; 0xe06 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x322>
     df2:	81 30       	cpi	r24, 0x01	; 1
     df4:	19 f4       	brne	.+6      	; 0xdfc <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x318>
     df6:	66 23       	and	r22, r22
     df8:	31 f0       	breq	.+12     	; 0xe06 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x322>
     dfa:	6d c0       	rjmp	.+218    	; 0xed6 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x3f2>
     dfc:	82 30       	cpi	r24, 0x02	; 2
     dfe:	51 f4       	brne	.+20     	; 0xe14 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x330>
     e00:	61 30       	cpi	r22, 0x01	; 1
     e02:	09 f0       	breq	.+2      	; 0xe06 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x322>
     e04:	68 c0       	rjmp	.+208    	; 0xed6 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x3f2>
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	41 2c       	mov	r4, r1
     e0c:	51 2c       	mov	r5, r1
     e0e:	32 01       	movw	r6, r4
     e10:	43 94       	inc	r4
     e12:	2e c0       	rjmp	.+92     	; 0xe70 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x38c>
     e14:	83 30       	cpi	r24, 0x03	; 3
     e16:	09 f0       	breq	.+2      	; 0xe1a <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x336>
     e18:	5e c0       	rjmp	.+188    	; 0xed6 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x3f2>
     e1a:	62 30       	cpi	r22, 0x02	; 2
     e1c:	09 f0       	breq	.+2      	; 0xe20 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x33c>
     e1e:	5b c0       	rjmp	.+182    	; 0xed6 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x3f2>
     e20:	f2 cf       	rjmp	.-28     	; 0xe06 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x322>
     e22:	aa 24       	eor	r10, r10
     e24:	a3 94       	inc	r10
     e26:	b1 2c       	mov	r11, r1
     e28:	0f 88       	ldd	r0, Y+23	; 0x17
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x34c>
     e2c:	aa 0c       	add	r10, r10
     e2e:	bb 1c       	adc	r11, r11
     e30:	0a 94       	dec	r0
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x348>
     e34:	be 8a       	std	Y+22, r11	; 0x16
     e36:	ad 8a       	std	Y+21, r10	; 0x15
     e38:	49 2d       	mov	r20, r9
     e3a:	58 2d       	mov	r21, r8
     e3c:	8f 89       	ldd	r24, Y+23	; 0x17
     e3e:	87 0f       	add	r24, r23
     e40:	ee 24       	eor	r14, r14
     e42:	e3 94       	inc	r14
     e44:	f1 2c       	mov	r15, r1
     e46:	ec 0e       	add	r14, r28
     e48:	fd 1e       	adc	r15, r29
     e4a:	e8 0e       	add	r14, r24
     e4c:	f1 1c       	adc	r15, r1
     e4e:	83 2d       	mov	r24, r3
     e50:	84 1b       	sub	r24, r20
     e52:	42 17       	cp	r20, r18
     e54:	53 07       	cpc	r21, r19
     e56:	c1 f4       	brne	.+48     	; 0xe88 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x3a4>
     e58:	4f 89       	ldd	r20, Y+23	; 0x17
     e5a:	58 8d       	ldd	r21, Y+24	; 0x18
     e5c:	4f 5f       	subi	r20, 0xFF	; 255
     e5e:	5f 4f       	sbci	r21, 0xFF	; 255
     e60:	58 8f       	std	Y+24, r21	; 0x18
     e62:	4f 8b       	std	Y+23, r20	; 0x17
     e64:	48 30       	cpi	r20, 0x08	; 8
     e66:	51 05       	cpc	r21, r1
     e68:	e1 f6       	brne	.-72     	; 0xe22 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x33e>
     e6a:	20 31       	cpi	r18, 0x10	; 16
     e6c:	31 05       	cpc	r19, r1
     e6e:	99 f1       	breq	.+102    	; 0xed6 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x3f2>
     e70:	79 2f       	mov	r23, r25
     e72:	72 0f       	add	r23, r18
     e74:	92 2e       	mov	r9, r18
     e76:	83 2e       	mov	r8, r19
     e78:	18 8e       	std	Y+24, r1	; 0x18
     e7a:	1f 8a       	std	Y+23, r1	; 0x17
     e7c:	47 e0       	ldi	r20, 0x07	; 7
     e7e:	34 2e       	mov	r3, r20
     e80:	32 0e       	add	r3, r18
     e82:	28 5f       	subi	r18, 0xF8	; 248
     e84:	3f 4f       	sbci	r19, 0xFF	; 255
     e86:	cd cf       	rjmp	.-102    	; 0xe22 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x33e>
     e88:	8f 01       	movw	r16, r30
     e8a:	04 0f       	add	r16, r20
     e8c:	15 1f       	adc	r17, r21
     e8e:	d8 01       	movw	r26, r16
     e90:	15 96       	adiw	r26, 0x05	; 5
     e92:	0c 91       	ld	r16, X
     e94:	10 e0       	ldi	r17, 0x00	; 0
     e96:	ad 88       	ldd	r10, Y+21	; 0x15
     e98:	be 88       	ldd	r11, Y+22	; 0x16
     e9a:	0a 21       	and	r16, r10
     e9c:	1b 21       	and	r17, r11
     e9e:	63 01       	movw	r12, r6
     ea0:	52 01       	movw	r10, r4
     ea2:	04 c0       	rjmp	.+8      	; 0xeac <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x3c8>
     ea4:	aa 0c       	add	r10, r10
     ea6:	bb 1c       	adc	r11, r11
     ea8:	cc 1c       	adc	r12, r12
     eaa:	dd 1c       	adc	r13, r13
     eac:	8a 95       	dec	r24
     eae:	d2 f7       	brpl	.-12     	; 0xea4 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x3c0>
     eb0:	a9 8a       	std	Y+17, r10	; 0x11
     eb2:	ba 8a       	std	Y+18, r11	; 0x12
     eb4:	cb 8a       	std	Y+19, r12	; 0x13
     eb6:	dc 8a       	std	Y+20, r13	; 0x14
     eb8:	01 2b       	or	r16, r17
     eba:	21 f0       	breq	.+8      	; 0xec4 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x3e0>
     ebc:	d7 01       	movw	r26, r14
     ebe:	8c 91       	ld	r24, X
     ec0:	8a 29       	or	r24, r10
     ec2:	05 c0       	rjmp	.+10     	; 0xece <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x3ea>
     ec4:	1a 2d       	mov	r17, r10
     ec6:	10 95       	com	r17
     ec8:	d7 01       	movw	r26, r14
     eca:	8c 91       	ld	r24, X
     ecc:	81 23       	and	r24, r17
     ece:	8c 93       	st	X, r24
     ed0:	4f 5f       	subi	r20, 0xFF	; 255
     ed2:	5f 4f       	sbci	r21, 0xFF	; 255
     ed4:	bc cf       	rjmp	.-136    	; 0xe4e <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x36a>
     ed6:	64 83       	std	Z+4, r22	; 0x04
     ed8:	be 01       	movw	r22, r28
     eda:	6f 5f       	subi	r22, 0xFF	; 255
     edc:	7f 4f       	sbci	r23, 0xFF	; 255
     ede:	cf 01       	movw	r24, r30
     ee0:	05 96       	adiw	r24, 0x05	; 5
     ee2:	9e 01       	movw	r18, r28
     ee4:	2f 5e       	subi	r18, 0xEF	; 239
     ee6:	3f 4f       	sbci	r19, 0xFF	; 255
     ee8:	db 01       	movw	r26, r22
     eea:	4d 91       	ld	r20, X+
     eec:	bd 01       	movw	r22, r26
     eee:	dc 01       	movw	r26, r24
     ef0:	4d 93       	st	X+, r20
     ef2:	cd 01       	movw	r24, r26
     ef4:	62 17       	cp	r22, r18
     ef6:	73 07       	cpc	r23, r19
     ef8:	b9 f7       	brne	.-18     	; 0xee8 <_ZN9MaxMatrix14setOrientationE30MaxMatrixModuleOrientationType+0x404>
     efa:	cf 01       	movw	r24, r30
     efc:	68 96       	adiw	r28, 0x18	; 24
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	f8 94       	cli
     f02:	de bf       	out	0x3e, r29	; 62
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	cd bf       	out	0x3d, r28	; 61
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	ff 90       	pop	r15
     f12:	ef 90       	pop	r14
     f14:	df 90       	pop	r13
     f16:	cf 90       	pop	r12
     f18:	bf 90       	pop	r11
     f1a:	af 90       	pop	r10
     f1c:	9f 90       	pop	r9
     f1e:	8f 90       	pop	r8
     f20:	7f 90       	pop	r7
     f22:	6f 90       	pop	r6
     f24:	5f 90       	pop	r5
     f26:	4f 90       	pop	r4
     f28:	3f 90       	pop	r3
     f2a:	2f 90       	pop	r2
     f2c:	0c 94 32 05 	jmp	0xa64	; 0xa64 <_ZN9MaxMatrix6reloadEv>
     f30:	68 96       	adiw	r28, 0x18	; 24
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	f8 94       	cli
     f36:	de bf       	out	0x3e, r29	; 62
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	cd bf       	out	0x3d, r28	; 61
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	ff 90       	pop	r15
     f46:	ef 90       	pop	r14
     f48:	df 90       	pop	r13
     f4a:	cf 90       	pop	r12
     f4c:	bf 90       	pop	r11
     f4e:	af 90       	pop	r10
     f50:	9f 90       	pop	r9
     f52:	8f 90       	pop	r8
     f54:	7f 90       	pop	r7
     f56:	6f 90       	pop	r6
     f58:	5f 90       	pop	r5
     f5a:	4f 90       	pop	r4
     f5c:	3f 90       	pop	r3
     f5e:	2f 90       	pop	r2
     f60:	08 95       	ret

00000f62 <_ZN9MaxMatrix19convertCharToSpriteEcPh>:
     f62:	fa 01       	movw	r30, r20
     f64:	64 3c       	cpi	r22, 0xC4	; 196
     f66:	11 f4       	brne	.+4      	; 0xf6c <_ZN9MaxMatrix19convertCharToSpriteEcPh+0xa>
     f68:	8f e5       	ldi	r24, 0x5F	; 95
     f6a:	13 c0       	rjmp	.+38     	; 0xf92 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     f6c:	66 3d       	cpi	r22, 0xD6	; 214
     f6e:	11 f4       	brne	.+4      	; 0xf74 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x12>
     f70:	80 e6       	ldi	r24, 0x60	; 96
     f72:	0f c0       	rjmp	.+30     	; 0xf92 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     f74:	6c 3d       	cpi	r22, 0xDC	; 220
     f76:	11 f4       	brne	.+4      	; 0xf7c <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x1a>
     f78:	81 e6       	ldi	r24, 0x61	; 97
     f7a:	0b c0       	rjmp	.+22     	; 0xf92 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     f7c:	64 3e       	cpi	r22, 0xE4	; 228
     f7e:	11 f4       	brne	.+4      	; 0xf84 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x22>
     f80:	82 e6       	ldi	r24, 0x62	; 98
     f82:	07 c0       	rjmp	.+14     	; 0xf92 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     f84:	66 3f       	cpi	r22, 0xF6	; 246
     f86:	11 f4       	brne	.+4      	; 0xf8c <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x2a>
     f88:	83 e6       	ldi	r24, 0x63	; 99
     f8a:	03 c0       	rjmp	.+6      	; 0xf92 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
     f8c:	6c 3f       	cpi	r22, 0xFC	; 252
     f8e:	19 f4       	brne	.+6      	; 0xf96 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x34>
     f90:	84 e6       	ldi	r24, 0x64	; 100
     f92:	80 83       	st	Z, r24
     f94:	04 c0       	rjmp	.+8      	; 0xf9e <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x3c>
     f96:	60 52       	subi	r22, 0x20	; 32
     f98:	6f 35       	cpi	r22, 0x5F	; 95
     f9a:	18 f4       	brcc	.+6      	; 0xfa2 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x40>
     f9c:	60 83       	st	Z, r22
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	08 95       	ret
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	08 95       	ret

00000fa6 <_ZN9MaxMatrix8getRowLLEhhPh>:
     fa6:	7f 92       	push	r7
     fa8:	8f 92       	push	r8
     faa:	9f 92       	push	r9
     fac:	af 92       	push	r10
     fae:	bf 92       	push	r11
     fb0:	cf 92       	push	r12
     fb2:	df 92       	push	r13
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	e9 01       	movw	r28, r18
     fc2:	28 e0       	ldi	r18, 0x08	; 8
     fc4:	62 9f       	mul	r22, r18
     fc6:	b0 01       	movw	r22, r0
     fc8:	11 24       	eor	r1, r1
     fca:	a1 e0       	ldi	r26, 0x01	; 1
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <_ZN9MaxMatrix8getRowLLEhhPh+0x2e>
     fd0:	aa 0f       	add	r26, r26
     fd2:	bb 1f       	adc	r27, r27
     fd4:	4a 95       	dec	r20
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <_ZN9MaxMatrix8getRowLLEhhPh+0x2a>
     fd8:	40 e0       	ldi	r20, 0x00	; 0
     fda:	50 e0       	ldi	r21, 0x00	; 0
     fdc:	c1 2c       	mov	r12, r1
     fde:	d1 2c       	mov	r13, r1
     fe0:	76 01       	movw	r14, r12
     fe2:	c3 94       	inc	r12
     fe4:	fa 01       	movw	r30, r20
     fe6:	e6 0f       	add	r30, r22
     fe8:	f7 1f       	adc	r31, r23
     fea:	e8 0f       	add	r30, r24
     fec:	f9 1f       	adc	r31, r25
     fee:	e5 81       	ldd	r30, Z+5	; 0x05
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	ea 23       	and	r30, r26
     ff4:	fb 23       	and	r31, r27
     ff6:	78 80       	ld	r7, Y
     ff8:	46 01       	movw	r8, r12
     ffa:	57 01       	movw	r10, r14
     ffc:	04 2e       	mov	r0, r20
     ffe:	04 c0       	rjmp	.+8      	; 0x1008 <_ZN9MaxMatrix8getRowLLEhhPh+0x62>
    1000:	88 0c       	add	r8, r8
    1002:	99 1c       	adc	r9, r9
    1004:	aa 1c       	adc	r10, r10
    1006:	bb 1c       	adc	r11, r11
    1008:	0a 94       	dec	r0
    100a:	d2 f7       	brpl	.-12     	; 0x1000 <_ZN9MaxMatrix8getRowLLEhhPh+0x5a>
    100c:	ef 2b       	or	r30, r31
    100e:	19 f0       	breq	.+6      	; 0x1016 <_ZN9MaxMatrix8getRowLLEhhPh+0x70>
    1010:	87 28       	or	r8, r7
    1012:	88 82       	st	Y, r8
    1014:	05 c0       	rjmp	.+10     	; 0x1020 <_ZN9MaxMatrix8getRowLLEhhPh+0x7a>
    1016:	95 01       	movw	r18, r10
    1018:	84 01       	movw	r16, r8
    101a:	00 95       	com	r16
    101c:	07 21       	and	r16, r7
    101e:	08 83       	st	Y, r16
    1020:	4f 5f       	subi	r20, 0xFF	; 255
    1022:	5f 4f       	sbci	r21, 0xFF	; 255
    1024:	48 30       	cpi	r20, 0x08	; 8
    1026:	51 05       	cpc	r21, r1
    1028:	e9 f6       	brne	.-70     	; 0xfe4 <_ZN9MaxMatrix8getRowLLEhhPh+0x3e>
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	ff 90       	pop	r15
    1034:	ef 90       	pop	r14
    1036:	df 90       	pop	r13
    1038:	cf 90       	pop	r12
    103a:	bf 90       	pop	r11
    103c:	af 90       	pop	r10
    103e:	9f 90       	pop	r9
    1040:	8f 90       	pop	r8
    1042:	7f 90       	pop	r7
    1044:	08 95       	ret

00001046 <_ZN9MaxMatrix9getColumnEhPh>:
    1046:	76 2f       	mov	r23, r22
    1048:	9a 01       	movw	r18, r20
    104a:	fc 01       	movw	r30, r24
    104c:	54 81       	ldd	r21, Z+4	; 0x04
    104e:	51 11       	cpse	r21, r1
    1050:	03 c0       	rjmp	.+6      	; 0x1058 <_ZN9MaxMatrix9getColumnEhPh+0x12>
    1052:	e6 0f       	add	r30, r22
    1054:	f1 1d       	adc	r31, r1
    1056:	0e c0       	rjmp	.+28     	; 0x1074 <_ZN9MaxMatrix9getColumnEhPh+0x2e>
    1058:	66 95       	lsr	r22
    105a:	66 95       	lsr	r22
    105c:	66 95       	lsr	r22
    105e:	47 2f       	mov	r20, r23
    1060:	47 70       	andi	r20, 0x07	; 7
    1062:	51 30       	cpi	r21, 0x01	; 1
    1064:	81 f0       	breq	.+32     	; 0x1086 <_ZN9MaxMatrix9getColumnEhPh+0x40>
    1066:	52 30       	cpi	r21, 0x02	; 2
    1068:	49 f4       	brne	.+18     	; 0x107c <_ZN9MaxMatrix9getColumnEhPh+0x36>
    106a:	4f e0       	ldi	r20, 0x0F	; 15
    106c:	47 1b       	sub	r20, r23
    106e:	fc 01       	movw	r30, r24
    1070:	e4 0f       	add	r30, r20
    1072:	f1 1d       	adc	r31, r1
    1074:	85 81       	ldd	r24, Z+5	; 0x05
    1076:	f9 01       	movw	r30, r18
    1078:	80 83       	st	Z, r24
    107a:	07 c0       	rjmp	.+14     	; 0x108a <_ZN9MaxMatrix9getColumnEhPh+0x44>
    107c:	53 30       	cpi	r21, 0x03	; 3
    107e:	29 f4       	brne	.+10     	; 0x108a <_ZN9MaxMatrix9getColumnEhPh+0x44>
    1080:	57 e0       	ldi	r21, 0x07	; 7
    1082:	54 1b       	sub	r21, r20
    1084:	45 2f       	mov	r20, r21
    1086:	0c 94 d3 07 	jmp	0xfa6	; 0xfa6 <_ZN9MaxMatrix8getRowLLEhhPh>
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	08 95       	ret

0000108e <_ZN9MaxMatrix11setColumnLLEhh>:
    108e:	bf 92       	push	r11
    1090:	cf 92       	push	r12
    1092:	df 92       	push	r13
    1094:	ef 92       	push	r14
    1096:	ff 92       	push	r15
    1098:	0f 93       	push	r16
    109a:	1f 93       	push	r17
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	60 31       	cpi	r22, 0x10	; 16
    10a2:	e8 f5       	brcc	.+122    	; 0x111e <_ZN9MaxMatrix11setColumnLLEhh+0x90>
    10a4:	04 2f       	mov	r16, r20
    10a6:	16 2f       	mov	r17, r22
    10a8:	ec 01       	movw	r28, r24
    10aa:	c6 2e       	mov	r12, r22
    10ac:	c6 94       	lsr	r12
    10ae:	c6 94       	lsr	r12
    10b0:	c6 94       	lsr	r12
    10b2:	d1 2c       	mov	r13, r1
    10b4:	86 2f       	mov	r24, r22
    10b6:	87 70       	andi	r24, 0x07	; 7
    10b8:	b8 2e       	mov	r11, r24
    10ba:	60 e0       	ldi	r22, 0x00	; 0
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
    10c2:	e1 2c       	mov	r14, r1
    10c4:	f1 2c       	mov	r15, r1
    10c6:	b3 94       	inc	r11
    10c8:	ec 14       	cp	r14, r12
    10ca:	fd 04       	cpc	r15, r13
    10cc:	41 f4       	brne	.+16     	; 0x10de <_ZN9MaxMatrix11setColumnLLEhh+0x50>
    10ce:	2b 2d       	mov	r18, r11
    10d0:	41 e0       	ldi	r20, 0x01	; 1
    10d2:	6a 81       	ldd	r22, Y+2	; 0x02
    10d4:	88 81       	ld	r24, Y
    10d6:	0e 94 fd 10 	call	0x21fa	; 0x21fa <shiftOut>
    10da:	20 2f       	mov	r18, r16
    10dc:	07 c0       	rjmp	.+14     	; 0x10ec <_ZN9MaxMatrix11setColumnLLEhh+0x5e>
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	41 e0       	ldi	r20, 0x01	; 1
    10e2:	6a 81       	ldd	r22, Y+2	; 0x02
    10e4:	88 81       	ld	r24, Y
    10e6:	0e 94 fd 10 	call	0x21fa	; 0x21fa <shiftOut>
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	41 e0       	ldi	r20, 0x01	; 1
    10ee:	6a 81       	ldd	r22, Y+2	; 0x02
    10f0:	88 81       	ld	r24, Y
    10f2:	0e 94 fd 10 	call	0x21fa	; 0x21fa <shiftOut>
    10f6:	ea 94       	dec	r14
    10f8:	ef 28       	or	r14, r15
    10fa:	21 f0       	breq	.+8      	; 0x1104 <_ZN9MaxMatrix11setColumnLLEhh+0x76>
    10fc:	ee 24       	eor	r14, r14
    10fe:	e3 94       	inc	r14
    1100:	f1 2c       	mov	r15, r1
    1102:	e2 cf       	rjmp	.-60     	; 0x10c8 <_ZN9MaxMatrix11setColumnLLEhh+0x3a>
    1104:	60 e0       	ldi	r22, 0x00	; 0
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
    110c:	61 e0       	ldi	r22, 0x01	; 1
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
    1114:	c1 0f       	add	r28, r17
    1116:	d1 1d       	adc	r29, r1
    1118:	0d 83       	std	Y+5, r16	; 0x05
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	01 c0       	rjmp	.+2      	; 0x1120 <_ZN9MaxMatrix11setColumnLLEhh+0x92>
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	1f 91       	pop	r17
    1126:	0f 91       	pop	r16
    1128:	ff 90       	pop	r15
    112a:	ef 90       	pop	r14
    112c:	df 90       	pop	r13
    112e:	cf 90       	pop	r12
    1130:	bf 90       	pop	r11
    1132:	08 95       	ret

00001134 <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh>:
    1134:	af 92       	push	r10
    1136:	bf 92       	push	r11
    1138:	cf 92       	push	r12
    113a:	df 92       	push	r13
    113c:	ef 92       	push	r14
    113e:	ff 92       	push	r15
    1140:	0f 93       	push	r16
    1142:	1f 93       	push	r17
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	68 30       	cpi	r22, 0x08	; 8
    114a:	90 f5       	brcc	.+100    	; 0x11b0 <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh+0x7c>
    114c:	04 2f       	mov	r16, r20
    114e:	16 2f       	mov	r17, r22
    1150:	ec 01       	movw	r28, r24
    1152:	60 e0       	ldi	r22, 0x00	; 0
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
    115a:	a1 2e       	mov	r10, r17
    115c:	b1 2c       	mov	r11, r1
    115e:	7e 01       	movw	r14, r28
    1160:	85 e0       	ldi	r24, 0x05	; 5
    1162:	e8 0e       	add	r14, r24
    1164:	f1 1c       	adc	r15, r1
    1166:	92 e0       	ldi	r25, 0x02	; 2
    1168:	c9 2e       	mov	r12, r25
    116a:	d1 2c       	mov	r13, r1
    116c:	1f 5f       	subi	r17, 0xFF	; 255
    116e:	21 2f       	mov	r18, r17
    1170:	41 e0       	ldi	r20, 0x01	; 1
    1172:	6a 81       	ldd	r22, Y+2	; 0x02
    1174:	88 81       	ld	r24, Y
    1176:	0e 94 fd 10 	call	0x21fa	; 0x21fa <shiftOut>
    117a:	20 2f       	mov	r18, r16
    117c:	41 e0       	ldi	r20, 0x01	; 1
    117e:	6a 81       	ldd	r22, Y+2	; 0x02
    1180:	88 81       	ld	r24, Y
    1182:	0e 94 fd 10 	call	0x21fa	; 0x21fa <shiftOut>
    1186:	f7 01       	movw	r30, r14
    1188:	00 83       	st	Z, r16
    118a:	ea 0c       	add	r14, r10
    118c:	fb 1c       	adc	r15, r11
    118e:	ca 94       	dec	r12
    1190:	cd 28       	or	r12, r13
    1192:	21 f0       	breq	.+8      	; 0x119c <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh+0x68>
    1194:	cc 24       	eor	r12, r12
    1196:	c3 94       	inc	r12
    1198:	d1 2c       	mov	r13, r1
    119a:	e9 cf       	rjmp	.-46     	; 0x116e <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh+0x3a>
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
    11a4:	61 e0       	ldi	r22, 0x01	; 1
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	01 c0       	rjmp	.+2      	; 0x11b2 <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh+0x7e>
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	1f 91       	pop	r17
    11b8:	0f 91       	pop	r16
    11ba:	ff 90       	pop	r15
    11bc:	ef 90       	pop	r14
    11be:	df 90       	pop	r13
    11c0:	cf 90       	pop	r12
    11c2:	bf 90       	pop	r11
    11c4:	af 90       	pop	r10
    11c6:	08 95       	ret

000011c8 <_ZN9MaxMatrix5clearEv>:
    11c8:	1f 93       	push	r17
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	ec 01       	movw	r28, r24
    11d0:	10 e0       	ldi	r17, 0x00	; 0
    11d2:	40 e0       	ldi	r20, 0x00	; 0
    11d4:	61 2f       	mov	r22, r17
    11d6:	ce 01       	movw	r24, r28
    11d8:	0e 94 9a 08 	call	0x1134	; 0x1134 <_ZN9MaxMatrix23setColumnOnAllModulesLLEhh>
    11dc:	1f 5f       	subi	r17, 0xFF	; 255
    11de:	18 30       	cpi	r17, 0x08	; 8
    11e0:	c1 f7       	brne	.-16     	; 0x11d2 <_ZN9MaxMatrix5clearEv+0xa>
    11e2:	fe 01       	movw	r30, r28
    11e4:	35 96       	adiw	r30, 0x05	; 5
    11e6:	65 96       	adiw	r28, 0x15	; 21
    11e8:	11 92       	st	Z+, r1
    11ea:	ec 17       	cp	r30, r28
    11ec:	fd 07       	cpc	r31, r29
    11ee:	e1 f7       	brne	.-8      	; 0x11e8 <_ZN9MaxMatrix5clearEv+0x20>
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	1f 91       	pop	r17
    11f6:	08 95       	ret

000011f8 <_ZN9MaxMatrix4initEv>:
    11f8:	cf 93       	push	r28
    11fa:	df 93       	push	r29
    11fc:	ec 01       	movw	r28, r24
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	8b 83       	std	Y+3, r24	; 0x03
    1202:	61 e0       	ldi	r22, 0x01	; 1
    1204:	88 81       	ld	r24, Y
    1206:	0e 94 91 10 	call	0x2122	; 0x2122 <pinMode>
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	0e 94 91 10 	call	0x2122	; 0x2122 <pinMode>
    1212:	61 e0       	ldi	r22, 0x01	; 1
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	0e 94 91 10 	call	0x2122	; 0x2122 <pinMode>
    121a:	61 e0       	ldi	r22, 0x01	; 1
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
    1222:	47 e0       	ldi	r20, 0x07	; 7
    1224:	6b e0       	ldi	r22, 0x0B	; 11
    1226:	ce 01       	movw	r24, r28
    1228:	0e 94 c9 04 	call	0x992	; 0x992 <_ZN9MaxMatrix13RegisterWriteEhh>
    122c:	40 e0       	ldi	r20, 0x00	; 0
    122e:	69 e0       	ldi	r22, 0x09	; 9
    1230:	ce 01       	movw	r24, r28
    1232:	0e 94 c9 04 	call	0x992	; 0x992 <_ZN9MaxMatrix13RegisterWriteEhh>
    1236:	41 e0       	ldi	r20, 0x01	; 1
    1238:	6c e0       	ldi	r22, 0x0C	; 12
    123a:	ce 01       	movw	r24, r28
    123c:	0e 94 c9 04 	call	0x992	; 0x992 <_ZN9MaxMatrix13RegisterWriteEhh>
    1240:	40 e0       	ldi	r20, 0x00	; 0
    1242:	6f e0       	ldi	r22, 0x0F	; 15
    1244:	ce 01       	movw	r24, r28
    1246:	0e 94 c9 04 	call	0x992	; 0x992 <_ZN9MaxMatrix13RegisterWriteEhh>
    124a:	ce 01       	movw	r24, r28
    124c:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <_ZN9MaxMatrix5clearEv>
    1250:	64 e0       	ldi	r22, 0x04	; 4
    1252:	ce 01       	movw	r24, r28
    1254:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <_ZN9MaxMatrix12setIntensityEh>
    1258:	82 e0       	ldi	r24, 0x02	; 2
    125a:	8b 83       	std	Y+3, r24	; 0x03
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	08 95       	ret

00001262 <_ZN9MaxMatrix8setRowLLEhhh>:
    1262:	af 92       	push	r10
    1264:	bf 92       	push	r11
    1266:	cf 92       	push	r12
    1268:	df 92       	push	r13
    126a:	ef 92       	push	r14
    126c:	ff 92       	push	r15
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	62 30       	cpi	r22, 0x02	; 2
    1278:	08 f0       	brcs	.+2      	; 0x127c <_ZN9MaxMatrix8setRowLLEhhh+0x1a>
    127a:	42 c0       	rjmp	.+132    	; 0x1300 <_ZN9MaxMatrix8setRowLLEhhh+0x9e>
    127c:	48 30       	cpi	r20, 0x08	; 8
    127e:	08 f0       	brcs	.+2      	; 0x1282 <_ZN9MaxMatrix8setRowLLEhhh+0x20>
    1280:	3f c0       	rjmp	.+126    	; 0x1300 <_ZN9MaxMatrix8setRowLLEhhh+0x9e>
    1282:	c6 2f       	mov	r28, r22
    1284:	8c 01       	movw	r16, r24
    1286:	f6 2e       	mov	r15, r22
    1288:	ff 0c       	add	r15, r15
    128a:	ff 0c       	add	r15, r15
    128c:	ff 0c       	add	r15, r15
    128e:	d0 e0       	ldi	r29, 0x00	; 0
    1290:	21 96       	adiw	r28, 0x01	; 1
    1292:	83 e0       	ldi	r24, 0x03	; 3
    1294:	cc 0f       	add	r28, r28
    1296:	dd 1f       	adc	r29, r29
    1298:	8a 95       	dec	r24
    129a:	e1 f7       	brne	.-8      	; 0x1294 <_ZN9MaxMatrix8setRowLLEhhh+0x32>
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	a0 e0       	ldi	r26, 0x00	; 0
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	04 c0       	rjmp	.+8      	; 0x12ae <_ZN9MaxMatrix8setRowLLEhhh+0x4c>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	aa 1f       	adc	r26, r26
    12ac:	bb 1f       	adc	r27, r27
    12ae:	4a 95       	dec	r20
    12b0:	d2 f7       	brpl	.-12     	; 0x12a6 <_ZN9MaxMatrix8setRowLLEhhh+0x44>
    12b2:	a8 2e       	mov	r10, r24
    12b4:	e8 2e       	mov	r14, r24
    12b6:	e0 94       	com	r14
    12b8:	97 e0       	ldi	r25, 0x07	; 7
    12ba:	b9 2e       	mov	r11, r25
    12bc:	c2 2e       	mov	r12, r18
    12be:	d1 2c       	mov	r13, r1
    12c0:	ef 2d       	mov	r30, r15
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	ec 17       	cp	r30, r28
    12c6:	fd 07       	cpc	r31, r29
    12c8:	cc f4       	brge	.+50     	; 0x12fc <_ZN9MaxMatrix8setRowLLEhhh+0x9a>
    12ca:	e0 0f       	add	r30, r16
    12cc:	f1 1f       	adc	r31, r17
    12ce:	c6 01       	movw	r24, r12
    12d0:	0b 2c       	mov	r0, r11
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <_ZN9MaxMatrix8setRowLLEhhh+0x76>
    12d4:	95 95       	asr	r25
    12d6:	87 95       	ror	r24
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <_ZN9MaxMatrix8setRowLLEhhh+0x72>
    12dc:	80 ff       	sbrs	r24, 0
    12de:	03 c0       	rjmp	.+6      	; 0x12e6 <_ZN9MaxMatrix8setRowLLEhhh+0x84>
    12e0:	85 81       	ldd	r24, Z+5	; 0x05
    12e2:	8a 29       	or	r24, r10
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <_ZN9MaxMatrix8setRowLLEhhh+0x88>
    12e6:	85 81       	ldd	r24, Z+5	; 0x05
    12e8:	8e 21       	and	r24, r14
    12ea:	85 83       	std	Z+5, r24	; 0x05
    12ec:	45 81       	ldd	r20, Z+5	; 0x05
    12ee:	6f 2d       	mov	r22, r15
    12f0:	c8 01       	movw	r24, r16
    12f2:	0e 94 47 08 	call	0x108e	; 0x108e <_ZN9MaxMatrix11setColumnLLEhh>
    12f6:	ba 94       	dec	r11
    12f8:	f3 94       	inc	r15
    12fa:	e2 cf       	rjmp	.-60     	; 0x12c0 <_ZN9MaxMatrix8setRowLLEhhh+0x5e>
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	01 c0       	rjmp	.+2      	; 0x1302 <_ZN9MaxMatrix8setRowLLEhhh+0xa0>
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	0f 91       	pop	r16
    130a:	ff 90       	pop	r15
    130c:	ef 90       	pop	r14
    130e:	df 90       	pop	r13
    1310:	cf 90       	pop	r12
    1312:	bf 90       	pop	r11
    1314:	af 90       	pop	r10
    1316:	08 95       	ret

00001318 <_ZN9MaxMatrix9setColumnEhh>:
    1318:	ef 92       	push	r14
    131a:	ff 92       	push	r15
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29
    1324:	1f 92       	push	r1
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	fc 01       	movw	r30, r24
    132c:	24 2f       	mov	r18, r20
    132e:	06 2f       	mov	r16, r22
    1330:	06 95       	lsr	r16
    1332:	06 95       	lsr	r16
    1334:	06 95       	lsr	r16
    1336:	46 2f       	mov	r20, r22
    1338:	47 70       	andi	r20, 0x07	; 7
    133a:	94 81       	ldd	r25, Z+4	; 0x04
    133c:	91 11       	cpse	r25, r1
    133e:	03 c0       	rjmp	.+6      	; 0x1346 <_ZN9MaxMatrix9setColumnEhh+0x2e>
    1340:	42 2f       	mov	r20, r18
    1342:	cf 01       	movw	r24, r30
    1344:	11 c0       	rjmp	.+34     	; 0x1368 <_ZN9MaxMatrix9setColumnEhh+0x50>
    1346:	91 30       	cpi	r25, 0x01	; 1
    1348:	19 f4       	brne	.+6      	; 0x1350 <_ZN9MaxMatrix9setColumnEhh+0x38>
    134a:	60 2f       	mov	r22, r16
    134c:	cf 01       	movw	r24, r30
    134e:	23 c0       	rjmp	.+70     	; 0x1396 <_ZN9MaxMatrix9setColumnEhh+0x7e>
    1350:	16 2f       	mov	r17, r22
    1352:	7f 01       	movw	r14, r30
    1354:	92 30       	cpi	r25, 0x02	; 2
    1356:	89 f4       	brne	.+34     	; 0x137a <_ZN9MaxMatrix9setColumnEhh+0x62>
    1358:	62 2f       	mov	r22, r18
    135a:	cf 01       	movw	r24, r30
    135c:	0e 94 20 05 	call	0xa40	; 0xa40 <_ZN9MaxMatrix11reverseByteEh>
    1360:	6f e0       	ldi	r22, 0x0F	; 15
    1362:	61 1b       	sub	r22, r17
    1364:	48 2f       	mov	r20, r24
    1366:	c7 01       	movw	r24, r14
    1368:	0f 90       	pop	r0
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	1f 91       	pop	r17
    1370:	0f 91       	pop	r16
    1372:	ff 90       	pop	r15
    1374:	ef 90       	pop	r14
    1376:	0c 94 47 08 	jmp	0x108e	; 0x108e <_ZN9MaxMatrix11setColumnLLEhh>
    137a:	93 30       	cpi	r25, 0x03	; 3
    137c:	a9 f4       	brne	.+42     	; 0x13a8 <_ZN9MaxMatrix9setColumnEhh+0x90>
    137e:	62 2f       	mov	r22, r18
    1380:	cf 01       	movw	r24, r30
    1382:	49 83       	std	Y+1, r20	; 0x01
    1384:	0e 94 20 05 	call	0xa40	; 0xa40 <_ZN9MaxMatrix11reverseByteEh>
    1388:	97 e0       	ldi	r25, 0x07	; 7
    138a:	49 81       	ldd	r20, Y+1	; 0x01
    138c:	94 1b       	sub	r25, r20
    138e:	49 2f       	mov	r20, r25
    1390:	28 2f       	mov	r18, r24
    1392:	60 2f       	mov	r22, r16
    1394:	c7 01       	movw	r24, r14
    1396:	0f 90       	pop	r0
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	ff 90       	pop	r15
    13a2:	ef 90       	pop	r14
    13a4:	0c 94 31 09 	jmp	0x1262	; 0x1262 <_ZN9MaxMatrix8setRowLLEhhh>
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	0f 90       	pop	r0
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	1f 91       	pop	r17
    13b2:	0f 91       	pop	r16
    13b4:	ff 90       	pop	r15
    13b6:	ef 90       	pop	r14
    13b8:	08 95       	ret

000013ba <_ZN9MaxMatrix6setDotEhhb>:
    13ba:	df 92       	push	r13
    13bc:	ef 92       	push	r14
    13be:	ff 92       	push	r15
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	1f 92       	push	r1
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	60 31       	cpi	r22, 0x10	; 16
    13d0:	80 f5       	brcc	.+96     	; 0x1432 <_ZN9MaxMatrix6setDotEhhb+0x78>
    13d2:	48 30       	cpi	r20, 0x08	; 8
    13d4:	70 f5       	brcc	.+92     	; 0x1432 <_ZN9MaxMatrix6setDotEhhb+0x78>
    13d6:	d2 2e       	mov	r13, r18
    13d8:	e4 2e       	mov	r14, r20
    13da:	f6 2e       	mov	r15, r22
    13dc:	8c 01       	movw	r16, r24
    13de:	ae 01       	movw	r20, r28
    13e0:	4f 5f       	subi	r20, 0xFF	; 255
    13e2:	5f 4f       	sbci	r21, 0xFF	; 255
    13e4:	0e 94 23 08 	call	0x1046	; 0x1046 <_ZN9MaxMatrix9getColumnEhPh>
    13e8:	29 81       	ldd	r18, Y+1	; 0x01
    13ea:	dd 20       	and	r13, r13
    13ec:	71 f0       	breq	.+28     	; 0x140a <_ZN9MaxMatrix6setDotEhhb+0x50>
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	a0 e0       	ldi	r26, 0x00	; 0
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	04 c0       	rjmp	.+8      	; 0x1400 <_ZN9MaxMatrix6setDotEhhb+0x46>
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	aa 1f       	adc	r26, r26
    13fe:	bb 1f       	adc	r27, r27
    1400:	ea 94       	dec	r14
    1402:	d2 f7       	brpl	.-12     	; 0x13f8 <_ZN9MaxMatrix6setDotEhhb+0x3e>
    1404:	82 2b       	or	r24, r18
    1406:	89 83       	std	Y+1, r24	; 0x01
    1408:	0e c0       	rjmp	.+28     	; 0x1426 <_ZN9MaxMatrix6setDotEhhb+0x6c>
    140a:	41 e0       	ldi	r20, 0x01	; 1
    140c:	50 e0       	ldi	r21, 0x00	; 0
    140e:	60 e0       	ldi	r22, 0x00	; 0
    1410:	70 e0       	ldi	r23, 0x00	; 0
    1412:	04 c0       	rjmp	.+8      	; 0x141c <_ZN9MaxMatrix6setDotEhhb+0x62>
    1414:	44 0f       	add	r20, r20
    1416:	55 1f       	adc	r21, r21
    1418:	66 1f       	adc	r22, r22
    141a:	77 1f       	adc	r23, r23
    141c:	ea 94       	dec	r14
    141e:	d2 f7       	brpl	.-12     	; 0x1414 <_ZN9MaxMatrix6setDotEhhb+0x5a>
    1420:	40 95       	com	r20
    1422:	42 23       	and	r20, r18
    1424:	49 83       	std	Y+1, r20	; 0x01
    1426:	49 81       	ldd	r20, Y+1	; 0x01
    1428:	6f 2d       	mov	r22, r15
    142a:	c8 01       	movw	r24, r16
    142c:	0e 94 8c 09 	call	0x1318	; 0x1318 <_ZN9MaxMatrix9setColumnEhh>
    1430:	01 c0       	rjmp	.+2      	; 0x1434 <_ZN9MaxMatrix6setDotEhhb+0x7a>
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	0f 90       	pop	r0
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	1f 91       	pop	r17
    143c:	0f 91       	pop	r16
    143e:	ff 90       	pop	r15
    1440:	ef 90       	pop	r14
    1442:	df 90       	pop	r13
    1444:	08 95       	ret

00001446 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh>:
    1446:	2f 92       	push	r2
    1448:	3f 92       	push	r3
    144a:	4f 92       	push	r4
    144c:	5f 92       	push	r5
    144e:	6f 92       	push	r6
    1450:	7f 92       	push	r7
    1452:	8f 92       	push	r8
    1454:	9f 92       	push	r9
    1456:	af 92       	push	r10
    1458:	bf 92       	push	r11
    145a:	cf 92       	push	r12
    145c:	df 92       	push	r13
    145e:	ef 92       	push	r14
    1460:	ff 92       	push	r15
    1462:	0f 93       	push	r16
    1464:	1f 93       	push	r17
    1466:	cf 93       	push	r28
    1468:	df 93       	push	r29
    146a:	00 d0       	rcall	.+0      	; 0x146c <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x26>
    146c:	00 d0       	rcall	.+0      	; 0x146e <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x28>
    146e:	1f 92       	push	r1
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	4c 01       	movw	r8, r24
    1476:	6b 01       	movw	r12, r22
    1478:	3a 01       	movw	r6, r20
    147a:	59 01       	movw	r10, r18
    147c:	f9 01       	movw	r30, r18
    147e:	40 80       	ld	r4, Z
    1480:	51 2c       	mov	r5, r1
    1482:	e1 80       	ldd	r14, Z+1	; 0x01
    1484:	f1 2c       	mov	r15, r1
    1486:	f8 e0       	ldi	r31, 0x08	; 8
    1488:	ef 16       	cp	r14, r31
    148a:	f1 04       	cpc	r15, r1
    148c:	c9 f4       	brne	.+50     	; 0x14c0 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x7a>
    148e:	45 2b       	or	r20, r21
    1490:	b9 f4       	brne	.+46     	; 0x14c0 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x7a>
    1492:	00 e0       	ldi	r16, 0x00	; 0
    1494:	10 e0       	ldi	r17, 0x00	; 0
    1496:	04 15       	cp	r16, r4
    1498:	15 05       	cpc	r17, r5
    149a:	0c f0       	brlt	.+2      	; 0x149e <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x58>
    149c:	4f c0       	rjmp	.+158    	; 0x153c <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xf6>
    149e:	c8 01       	movw	r24, r16
    14a0:	8c 0d       	add	r24, r12
    14a2:	9d 1d       	adc	r25, r13
    14a4:	40 97       	sbiw	r24, 0x10	; 16
    14a6:	48 f4       	brcc	.+18     	; 0x14ba <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x74>
    14a8:	f5 01       	movw	r30, r10
    14aa:	e0 0f       	add	r30, r16
    14ac:	f1 1f       	adc	r31, r17
    14ae:	42 81       	ldd	r20, Z+2	; 0x02
    14b0:	60 2f       	mov	r22, r16
    14b2:	6c 0d       	add	r22, r12
    14b4:	c4 01       	movw	r24, r8
    14b6:	0e 94 8c 09 	call	0x1318	; 0x1318 <_ZN9MaxMatrix9setColumnEhh>
    14ba:	0f 5f       	subi	r16, 0xFF	; 255
    14bc:	1f 4f       	sbci	r17, 0xFF	; 255
    14be:	eb cf       	rjmp	.-42     	; 0x1496 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x50>
    14c0:	1d 82       	std	Y+5, r1	; 0x05
    14c2:	1c 82       	std	Y+4, r1	; 0x04
    14c4:	8c 81       	ldd	r24, Y+4	; 0x04
    14c6:	9d 81       	ldd	r25, Y+5	; 0x05
    14c8:	84 15       	cp	r24, r4
    14ca:	95 05       	cpc	r25, r5
    14cc:	bc f5       	brge	.+110    	; 0x153c <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xf6>
    14ce:	00 e0       	ldi	r16, 0x00	; 0
    14d0:	10 e0       	ldi	r17, 0x00	; 0
    14d2:	2c 80       	ldd	r2, Y+4	; 0x04
    14d4:	3d 80       	ldd	r3, Y+5	; 0x05
    14d6:	2c 0c       	add	r2, r12
    14d8:	3d 1c       	adc	r3, r13
    14da:	8c 81       	ldd	r24, Y+4	; 0x04
    14dc:	9d 81       	ldd	r25, Y+5	; 0x05
    14de:	8a 0d       	add	r24, r10
    14e0:	9b 1d       	adc	r25, r11
    14e2:	9a 83       	std	Y+2, r25	; 0x02
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	3c 81       	ldd	r19, Y+4	; 0x04
    14e8:	3c 0d       	add	r19, r12
    14ea:	0e 15       	cp	r16, r14
    14ec:	1f 05       	cpc	r17, r15
    14ee:	04 f5       	brge	.+64     	; 0x1530 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xea>
    14f0:	80 e1       	ldi	r24, 0x10	; 16
    14f2:	28 16       	cp	r2, r24
    14f4:	31 04       	cpc	r3, r1
    14f6:	c8 f4       	brcc	.+50     	; 0x152a <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xe4>
    14f8:	c8 01       	movw	r24, r16
    14fa:	86 0d       	add	r24, r6
    14fc:	97 1d       	adc	r25, r7
    14fe:	08 97       	sbiw	r24, 0x08	; 8
    1500:	a0 f4       	brcc	.+40     	; 0x152a <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xe4>
    1502:	e9 81       	ldd	r30, Y+1	; 0x01
    1504:	fa 81       	ldd	r31, Y+2	; 0x02
    1506:	82 81       	ldd	r24, Z+2	; 0x02
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	00 2e       	mov	r0, r16
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xcc>
    150e:	95 95       	asr	r25
    1510:	87 95       	ror	r24
    1512:	0a 94       	dec	r0
    1514:	e2 f7       	brpl	.-8      	; 0x150e <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xc8>
    1516:	28 2f       	mov	r18, r24
    1518:	21 70       	andi	r18, 0x01	; 1
    151a:	40 2f       	mov	r20, r16
    151c:	46 0d       	add	r20, r6
    151e:	63 2f       	mov	r22, r19
    1520:	c4 01       	movw	r24, r8
    1522:	3b 83       	std	Y+3, r19	; 0x03
    1524:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN9MaxMatrix6setDotEhhb>
    1528:	3b 81       	ldd	r19, Y+3	; 0x03
    152a:	0f 5f       	subi	r16, 0xFF	; 255
    152c:	1f 4f       	sbci	r17, 0xFF	; 255
    152e:	dd cf       	rjmp	.-70     	; 0x14ea <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xa4>
    1530:	ec 81       	ldd	r30, Y+4	; 0x04
    1532:	fd 81       	ldd	r31, Y+5	; 0x05
    1534:	31 96       	adiw	r30, 0x01	; 1
    1536:	fd 83       	std	Y+5, r31	; 0x05
    1538:	ec 83       	std	Y+4, r30	; 0x04
    153a:	c4 cf       	rjmp	.-120    	; 0x14c4 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x7e>
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	1f 91       	pop	r17
    154c:	0f 91       	pop	r16
    154e:	ff 90       	pop	r15
    1550:	ef 90       	pop	r14
    1552:	df 90       	pop	r13
    1554:	cf 90       	pop	r12
    1556:	bf 90       	pop	r11
    1558:	af 90       	pop	r10
    155a:	9f 90       	pop	r9
    155c:	8f 90       	pop	r8
    155e:	7f 90       	pop	r7
    1560:	6f 90       	pop	r6
    1562:	5f 90       	pop	r5
    1564:	4f 90       	pop	r4
    1566:	3f 90       	pop	r3
    1568:	2f 90       	pop	r2
    156a:	08 95       	ret

0000156c <_ZN9MaxMatrix7setTextEPc>:
    156c:	cf 92       	push	r12
    156e:	df 92       	push	r13
    1570:	ef 92       	push	r14
    1572:	ff 92       	push	r15
    1574:	0f 93       	push	r16
    1576:	1f 93       	push	r17
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	28 97       	sbiw	r28, 0x08	; 8
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	7c 01       	movw	r14, r24
    158e:	6b 01       	movw	r12, r22
    1590:	00 e0       	ldi	r16, 0x00	; 0
    1592:	10 e0       	ldi	r17, 0x00	; 0
    1594:	f6 01       	movw	r30, r12
    1596:	61 91       	ld	r22, Z+
    1598:	6f 01       	movw	r12, r30
    159a:	66 23       	and	r22, r22
    159c:	29 f1       	breq	.+74     	; 0x15e8 <_ZN9MaxMatrix7setTextEPc+0x7c>
    159e:	ae 01       	movw	r20, r28
    15a0:	48 5f       	subi	r20, 0xF8	; 248
    15a2:	5f 4f       	sbci	r21, 0xFF	; 255
    15a4:	c7 01       	movw	r24, r14
    15a6:	0e 94 b1 07 	call	0xf62	; 0xf62 <_ZN9MaxMatrix19convertCharToSpriteEcPh>
    15aa:	81 30       	cpi	r24, 0x01	; 1
    15ac:	11 f4       	brne	.+4      	; 0x15b2 <_ZN9MaxMatrix7setTextEPc+0x46>
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	1c c0       	rjmp	.+56     	; 0x15ea <_ZN9MaxMatrix7setTextEPc+0x7e>
    15b2:	ae 01       	movw	r20, r28
    15b4:	4f 5f       	subi	r20, 0xFF	; 255
    15b6:	5f 4f       	sbci	r21, 0xFF	; 255
    15b8:	68 85       	ldd	r22, Y+8	; 0x08
    15ba:	c7 01       	movw	r24, r14
    15bc:	0e 94 0f 05 	call	0xa1e	; 0xa1e <_ZN9MaxMatrix9getSpriteEhPA7_h>
    15c0:	81 30       	cpi	r24, 0x01	; 1
    15c2:	a9 f3       	breq	.-22     	; 0x15ae <_ZN9MaxMatrix7setTextEPc+0x42>
    15c4:	9e 01       	movw	r18, r28
    15c6:	2f 5f       	subi	r18, 0xFF	; 255
    15c8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ca:	40 e0       	ldi	r20, 0x00	; 0
    15cc:	50 e0       	ldi	r21, 0x00	; 0
    15ce:	b8 01       	movw	r22, r16
    15d0:	c7 01       	movw	r24, r14
    15d2:	0e 94 23 0a 	call	0x1446	; 0x1446 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh>
    15d6:	29 81       	ldd	r18, Y+1	; 0x01
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	2f 5f       	subi	r18, 0xFF	; 255
    15dc:	3f 4f       	sbci	r19, 0xFF	; 255
    15de:	02 0f       	add	r16, r18
    15e0:	13 1f       	adc	r17, r19
    15e2:	01 31       	cpi	r16, 0x11	; 17
    15e4:	11 05       	cpc	r17, r1
    15e6:	b4 f2       	brlt	.-84     	; 0x1594 <_ZN9MaxMatrix7setTextEPc+0x28>
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	28 96       	adiw	r28, 0x08	; 8
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	f8 94       	cli
    15f0:	de bf       	out	0x3e, r29	; 62
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	cd bf       	out	0x3d, r28	; 61
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	1f 91       	pop	r17
    15fc:	0f 91       	pop	r16
    15fe:	ff 90       	pop	r15
    1600:	ef 90       	pop	r14
    1602:	df 90       	pop	r13
    1604:	cf 90       	pop	r12
    1606:	08 95       	ret

00001608 <_ZN9MaxMatrix11shiftLeftLLEbbb>:
 *  \param[in]      Rotate          activate rotation of the matrix LED states
 *  \param[in]      FillWithZero    initialize the column on the right side with zero.
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftLeftLL(bool Rotate, bool FillWithZero, bool ShiftToNeighbourModule)
{
    1608:	ef 92       	push	r14
    160a:	ff 92       	push	r15
    160c:	0f 93       	push	r16
    160e:	1f 93       	push	r17
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
    1614:	dc 01       	movw	r26, r24
    1616:	15 96       	adiw	r26, 0x05	; 5
    1618:	8c 91       	ld	r24, X
    161a:	15 97       	sbiw	r26, 0x05	; 5
    161c:	fd 01       	movw	r30, r26
    161e:	36 96       	adiw	r30, 0x06	; 6
	if(ShiftToNeighbourModule) {
    1620:	21 11       	cpse	r18, r1
    1622:	30 c0       	rjmp	.+96     	; 0x1684 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x7c>
    1624:	9d 01       	movw	r18, r26
    1626:	22 5f       	subi	r18, 0xF2	; 242
    1628:	3f 4f       	sbci	r19, 0xFF	; 255
		for(int i = 0; i < MAXMATRIX_NUMBER_OF_COLUMNS; i++) MatrixBuffer[i] = MatrixBuffer[i + 1];
		if(Rotate) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = old;
		else if(FillWithZero) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = 0;
	} else {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
			byte old = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module];
    162a:	7f 01       	movw	r14, r30
			for(int i = 0; i < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; i++) MatrixBuffer[i] = MatrixBuffer[i + 1];
    162c:	e7 01       	movw	r28, r14
    162e:	99 91       	ld	r25, Y+
    1630:	7e 01       	movw	r14, r28
    1632:	8e 01       	movw	r16, r28
    1634:	02 50       	subi	r16, 0x02	; 2
    1636:	11 09       	sbc	r17, r1
    1638:	e8 01       	movw	r28, r16
    163a:	98 83       	st	Y, r25
    163c:	e2 16       	cp	r14, r18
    163e:	f3 06       	cpc	r15, r19
    1640:	a9 f7       	brne	.-22     	; 0x162c <_ZN9MaxMatrix11shiftLeftLLEbbb+0x24>
			if(Rotate) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1] = old;
    1642:	61 11       	cpse	r22, r1
    1644:	06 c0       	rjmp	.+12     	; 0x1652 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x4a>
			else if(FillWithZero) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1] = 0;
    1646:	44 23       	and	r20, r20
    1648:	39 f0       	breq	.+14     	; 0x1658 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x50>
    164a:	14 96       	adiw	r26, 0x04	; 4
    164c:	1c 92       	st	X, r1
    164e:	14 97       	sbiw	r26, 0x04	; 4
    1650:	03 c0       	rjmp	.+6      	; 0x1658 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x50>
		else if(FillWithZero) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = 0;
	} else {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
			byte old = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module];
			for(int i = 0; i < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; i++) MatrixBuffer[i] = MatrixBuffer[i + 1];
			if(Rotate) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1] = old;
    1652:	14 96       	adiw	r26, 0x04	; 4
    1654:	8c 93       	st	X, r24
    1656:	14 97       	sbiw	r26, 0x04	; 4
		for(int i = 0; i < MAXMATRIX_NUMBER_OF_COLUMNS; i++) MatrixBuffer[i] = MatrixBuffer[i + 1];
		if(Rotate) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = old;
		else if(FillWithZero) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = 0;
	} else {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
			byte old = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module];
    1658:	1d 96       	adiw	r26, 0x0d	; 13
    165a:	8c 91       	ld	r24, X
    165c:	1d 97       	sbiw	r26, 0x0d	; 13
			for(int i = 0; i < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; i++) MatrixBuffer[i] = MatrixBuffer[i + 1];
    165e:	91 91       	ld	r25, Z+
    1660:	ef 01       	movw	r28, r30
    1662:	22 97       	sbiw	r28, 0x02	; 2
    1664:	98 83       	st	Y, r25
    1666:	e2 17       	cp	r30, r18
    1668:	f3 07       	cpc	r31, r19
    166a:	c9 f7       	brne	.-14     	; 0x165e <_ZN9MaxMatrix11shiftLeftLLEbbb+0x56>
			if(Rotate) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1] = old;
    166c:	61 11       	cpse	r22, r1
    166e:	06 c0       	rjmp	.+12     	; 0x167c <_ZN9MaxMatrix11shiftLeftLLEbbb+0x74>
			else if(FillWithZero) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1] = 0;
    1670:	44 23       	and	r20, r20
    1672:	e9 f0       	breq	.+58     	; 0x16ae <_ZN9MaxMatrix11shiftLeftLLEbbb+0xa6>
    1674:	1c 96       	adiw	r26, 0x0c	; 12
    1676:	1c 92       	st	X, r1
    1678:	1c 97       	sbiw	r26, 0x0c	; 12
    167a:	19 c0       	rjmp	.+50     	; 0x16ae <_ZN9MaxMatrix11shiftLeftLLEbbb+0xa6>
		else if(FillWithZero) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = 0;
	} else {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
			byte old = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module];
			for(int i = 0; i < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; i++) MatrixBuffer[i] = MatrixBuffer[i + 1];
			if(Rotate) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1] = old;
    167c:	1c 96       	adiw	r26, 0x0c	; 12
    167e:	8c 93       	st	X, r24
    1680:	1c 97       	sbiw	r26, 0x0c	; 12
    1682:	15 c0       	rjmp	.+42     	; 0x16ae <_ZN9MaxMatrix11shiftLeftLLEbbb+0xa6>
    1684:	9d 01       	movw	r18, r26
    1686:	2a 5e       	subi	r18, 0xEA	; 234
    1688:	3f 4f       	sbci	r19, 0xFF	; 255
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftLeftLL(bool Rotate, bool FillWithZero, bool ShiftToNeighbourModule)
{
	if(ShiftToNeighbourModule) {
		byte old = MatrixBuffer[0];
		for(int i = 0; i < MAXMATRIX_NUMBER_OF_COLUMNS; i++) MatrixBuffer[i] = MatrixBuffer[i + 1];
    168a:	91 91       	ld	r25, Z+
    168c:	ef 01       	movw	r28, r30
    168e:	22 97       	sbiw	r28, 0x02	; 2
    1690:	98 83       	st	Y, r25
    1692:	e2 17       	cp	r30, r18
    1694:	f3 07       	cpc	r31, r19
    1696:	c9 f7       	brne	.-14     	; 0x168a <_ZN9MaxMatrix11shiftLeftLLEbbb+0x82>
		if(Rotate) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = old;
    1698:	66 23       	and	r22, r22
    169a:	21 f0       	breq	.+8      	; 0x16a4 <_ZN9MaxMatrix11shiftLeftLLEbbb+0x9c>
    169c:	54 96       	adiw	r26, 0x14	; 20
    169e:	8c 93       	st	X, r24
    16a0:	54 97       	sbiw	r26, 0x14	; 20
    16a2:	05 c0       	rjmp	.+10     	; 0x16ae <_ZN9MaxMatrix11shiftLeftLLEbbb+0xa6>
		else if(FillWithZero) MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1] = 0;
    16a4:	44 23       	and	r20, r20
    16a6:	19 f0       	breq	.+6      	; 0x16ae <_ZN9MaxMatrix11shiftLeftLLEbbb+0xa6>
    16a8:	54 96       	adiw	r26, 0x14	; 20
    16aa:	1c 92       	st	X, r1
    16ac:	54 97       	sbiw	r26, 0x14	; 20
			for(int i = 0; i < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; i++) MatrixBuffer[i] = MatrixBuffer[i + 1];
			if(Rotate) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1] = old;
			else if(FillWithZero) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1] = 0;
		}
	}
    reload();
    16ae:	cd 01       	movw	r24, r26
} /* shiftLeftLL */
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	1f 91       	pop	r17
    16b6:	0f 91       	pop	r16
    16b8:	ff 90       	pop	r15
    16ba:	ef 90       	pop	r14
			for(int i = 0; i < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; i++) MatrixBuffer[i] = MatrixBuffer[i + 1];
			if(Rotate) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1] = old;
			else if(FillWithZero) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1] = 0;
		}
	}
    reload();
    16bc:	0c 94 32 05 	jmp	0xa64	; 0xa64 <_ZN9MaxMatrix6reloadEv>

000016c0 <_ZN9MaxMatrix12shiftRightLLEbbb>:
 *  \param[in]      Rotate          activate rotation of the matrix LED states
 *  \param[in]      FillWithZero    initialize the column on the left side with zero.
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftRightLL(bool Rotate, bool FillWithZero, bool ShiftToNeighbourModule)
{
    16c0:	ef 92       	push	r14
    16c2:	ff 92       	push	r15
    16c4:	0f 93       	push	r16
    16c6:	1f 93       	push	r17
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	fc 01       	movw	r30, r24
    16ce:	06 96       	adiw	r24, 0x06	; 6
	if(ShiftToNeighbourModule) {
    16d0:	21 11       	cpse	r18, r1
    16d2:	26 c0       	rjmp	.+76     	; 0x1720 <_ZN9MaxMatrix12shiftRightLLEbbb+0x60>
	    for(int i = MAXMATRIX_NUMBER_OF_COLUMNS - 1; i > 0; i--) MatrixBuffer[i] = MatrixBuffer[i-1];
	    if(Rotate) MatrixBuffer[0] = old;
	    else if(FillWithZero) MatrixBuffer[0] = 0;
	} else {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
			byte old = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module - 1];
    16d4:	24 81       	ldd	r18, Z+4	; 0x04
    16d6:	df 01       	movw	r26, r30
    16d8:	1d 96       	adiw	r26, 0x0d	; 13
    16da:	7d 01       	movw	r14, r26
    16dc:	87 01       	movw	r16, r14
    16de:	02 50       	subi	r16, 0x02	; 2
    16e0:	11 09       	sbc	r17, r1
			for(int i = MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; i > 0; i--) MatrixBuffer[i] = MatrixBuffer[i - 1];
    16e2:	e8 01       	movw	r28, r16
    16e4:	38 81       	ld	r19, Y
    16e6:	e7 01       	movw	r28, r14
    16e8:	3a 93       	st	-Y, r19
    16ea:	7e 01       	movw	r14, r28
    16ec:	c8 17       	cp	r28, r24
    16ee:	d9 07       	cpc	r29, r25
    16f0:	a9 f7       	brne	.-22     	; 0x16dc <_ZN9MaxMatrix12shiftRightLLEbbb+0x1c>
			if(Rotate) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = old;
    16f2:	61 11       	cpse	r22, r1
    16f4:	04 c0       	rjmp	.+8      	; 0x16fe <_ZN9MaxMatrix12shiftRightLLEbbb+0x3e>
			else if(FillWithZero) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = 0;
    16f6:	44 23       	and	r20, r20
    16f8:	19 f0       	breq	.+6      	; 0x1700 <_ZN9MaxMatrix12shiftRightLLEbbb+0x40>
    16fa:	15 82       	std	Z+5, r1	; 0x05
    16fc:	01 c0       	rjmp	.+2      	; 0x1700 <_ZN9MaxMatrix12shiftRightLLEbbb+0x40>
	    else if(FillWithZero) MatrixBuffer[0] = 0;
	} else {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
			byte old = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module - 1];
			for(int i = MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; i > 0; i--) MatrixBuffer[i] = MatrixBuffer[i - 1];
			if(Rotate) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = old;
    16fe:	25 83       	std	Z+5, r18	; 0x05
	    for(int i = MAXMATRIX_NUMBER_OF_COLUMNS - 1; i > 0; i--) MatrixBuffer[i] = MatrixBuffer[i-1];
	    if(Rotate) MatrixBuffer[0] = old;
	    else if(FillWithZero) MatrixBuffer[0] = 0;
	} else {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
			byte old = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module - 1];
    1700:	24 85       	ldd	r18, Z+12	; 0x0c
    1702:	ed 01       	movw	r28, r26
    1704:	22 97       	sbiw	r28, 0x02	; 2
			for(int i = MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; i > 0; i--) MatrixBuffer[i] = MatrixBuffer[i - 1];
    1706:	38 81       	ld	r19, Y
    1708:	3e 93       	st	-X, r19
    170a:	a8 17       	cp	r26, r24
    170c:	b9 07       	cpc	r27, r25
    170e:	c9 f7       	brne	.-14     	; 0x1702 <_ZN9MaxMatrix12shiftRightLLEbbb+0x42>
			if(Rotate) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = old;
    1710:	61 11       	cpse	r22, r1
    1712:	04 c0       	rjmp	.+8      	; 0x171c <_ZN9MaxMatrix12shiftRightLLEbbb+0x5c>
			else if(FillWithZero) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = 0;
    1714:	44 23       	and	r20, r20
    1716:	a1 f0       	breq	.+40     	; 0x1740 <_ZN9MaxMatrix12shiftRightLLEbbb+0x80>
    1718:	15 86       	std	Z+13, r1	; 0x0d
    171a:	12 c0       	rjmp	.+36     	; 0x1740 <_ZN9MaxMatrix12shiftRightLLEbbb+0x80>
	    else if(FillWithZero) MatrixBuffer[0] = 0;
	} else {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) {
			byte old = MatrixBuffer[MAXMATRIX_COLUMN_NUMBER_OF_MODULE * Module - 1];
			for(int i = MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; i > 0; i--) MatrixBuffer[i] = MatrixBuffer[i - 1];
			if(Rotate) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = old;
    171c:	25 87       	std	Z+13, r18	; 0x0d
    171e:	10 c0       	rjmp	.+32     	; 0x1740 <_ZN9MaxMatrix12shiftRightLLEbbb+0x80>
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftRightLL(bool Rotate, bool FillWithZero, bool ShiftToNeighbourModule)
{
	if(ShiftToNeighbourModule) {
	    byte old = MatrixBuffer[MAXMATRIX_NUMBER_OF_COLUMNS - 1];
    1720:	24 89       	ldd	r18, Z+20	; 0x14
    1722:	df 01       	movw	r26, r30
    1724:	55 96       	adiw	r26, 0x15	; 21
    1726:	ed 01       	movw	r28, r26
    1728:	22 97       	sbiw	r28, 0x02	; 2
	    for(int i = MAXMATRIX_NUMBER_OF_COLUMNS - 1; i > 0; i--) MatrixBuffer[i] = MatrixBuffer[i-1];
    172a:	38 81       	ld	r19, Y
    172c:	3e 93       	st	-X, r19
    172e:	a8 17       	cp	r26, r24
    1730:	b9 07       	cpc	r27, r25
    1732:	c9 f7       	brne	.-14     	; 0x1726 <_ZN9MaxMatrix12shiftRightLLEbbb+0x66>
	    if(Rotate) MatrixBuffer[0] = old;
    1734:	66 23       	and	r22, r22
    1736:	11 f0       	breq	.+4      	; 0x173c <_ZN9MaxMatrix12shiftRightLLEbbb+0x7c>
    1738:	25 83       	std	Z+5, r18	; 0x05
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <_ZN9MaxMatrix12shiftRightLLEbbb+0x80>
	    else if(FillWithZero) MatrixBuffer[0] = 0;
    173c:	41 11       	cpse	r20, r1
    173e:	15 82       	std	Z+5, r1	; 0x05
			for(int i = MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; i > 0; i--) MatrixBuffer[i] = MatrixBuffer[i - 1];
			if(Rotate) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = old;
			else if(FillWithZero) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = 0;
		}
	}
    reload();
    1740:	cf 01       	movw	r24, r30
} /* shiftRightLL */
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	1f 91       	pop	r17
    1748:	0f 91       	pop	r16
    174a:	ff 90       	pop	r15
    174c:	ef 90       	pop	r14
			for(int i = MAXMATRIX_COLUMN_NUMBER_OF_MODULE - 1; i > 0; i--) MatrixBuffer[i] = MatrixBuffer[i - 1];
			if(Rotate) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = old;
			else if(FillWithZero) MatrixBuffer[Module * MAXMATRIX_COLUMN_NUMBER_OF_MODULE] = 0;
		}
	}
    reload();
    174e:	0c 94 32 05 	jmp	0xa64	; 0xa64 <_ZN9MaxMatrix6reloadEv>

00001752 <_ZN9MaxMatrix9shiftUpLLEbb>:
 
 *  \param[in]      Rotate          activate rotation of the matrix LED states
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftUpLL(bool Rotate, bool ShiftToNeighbourModule)
{	
    1752:	bf 92       	push	r11
    1754:	cf 92       	push	r12
    1756:	df 92       	push	r13
    1758:	ef 92       	push	r14
    175a:	ff 92       	push	r15
    175c:	0f 93       	push	r16
    175e:	1f 93       	push	r17
    1760:	cf 93       	push	r28
    1762:	df 93       	push	r29
    1764:	1f 92       	push	r1
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	7c 01       	movw	r14, r24
	byte TopRow = 0;
    176c:	19 82       	std	Y+1, r1	; 0x01
    176e:	8c 01       	movw	r16, r24
    1770:	0b 5f       	subi	r16, 0xFB	; 251
    1772:	1f 4f       	sbci	r17, 0xFF	; 255

	if(ShiftToNeighbourModule) {
    1774:	44 23       	and	r20, r20
    1776:	49 f1       	breq	.+82     	; 0x17ca <_ZN9MaxMatrix9shiftUpLLEbb+0x78>
    1778:	b1 2c       	mov	r11, r1
    177a:	6c 01       	movw	r12, r24
    177c:	8d e0       	ldi	r24, 0x0D	; 13
    177e:	c8 0e       	add	r12, r24
    1780:	d1 1c       	adc	r13, r1
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) 
		{
			if(Module == 0) {
				if(Rotate) getRowLL(MAXMATRIX_NUMBER_OF_MODULES - 1, 0, &TopRow);
    1782:	66 23       	and	r22, r22
    1784:	41 f0       	breq	.+16     	; 0x1796 <_ZN9MaxMatrix9shiftUpLLEbb+0x44>
    1786:	9e 01       	movw	r18, r28
    1788:	2f 5f       	subi	r18, 0xFF	; 255
    178a:	3f 4f       	sbci	r19, 0xFF	; 255
    178c:	40 e0       	ldi	r20, 0x00	; 0
    178e:	61 e0       	ldi	r22, 0x01	; 1
    1790:	c7 01       	movw	r24, r14
    1792:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <_ZN9MaxMatrix8getRowLLEhhPh>
    1796:	f8 01       	movw	r30, r16
			} else {
				getRowLL(Module - 1, 0, &TopRow);
			}
			for(byte Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; Column++) MatrixBuffer[Column] >>= 1;
    1798:	80 81       	ld	r24, Z
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	95 95       	asr	r25
    179e:	87 95       	ror	r24
    17a0:	81 93       	st	Z+, r24
    17a2:	ec 15       	cp	r30, r12
    17a4:	fd 05       	cpc	r31, r13
    17a6:	c1 f7       	brne	.-16     	; 0x1798 <_ZN9MaxMatrix9shiftUpLLEbb+0x46>
			setRowLL(Module, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, TopRow);
    17a8:	29 81       	ldd	r18, Y+1	; 0x01
    17aa:	47 e0       	ldi	r20, 0x07	; 7
    17ac:	6b 2d       	mov	r22, r11
    17ae:	c7 01       	movw	r24, r14
    17b0:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN9MaxMatrix8setRowLLEhhh>
void MaxMatrix::shiftUpLL(bool Rotate, bool ShiftToNeighbourModule)
{	
	byte TopRow = 0;

	if(ShiftToNeighbourModule) {
		for(byte Module = 0; Module < MAXMATRIX_NUMBER_OF_MODULES; Module++) 
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	b8 16       	cp	r11, r24
    17b8:	c1 f0       	breq	.+48     	; 0x17ea <_ZN9MaxMatrix9shiftUpLLEbb+0x98>
    17ba:	bb 24       	eor	r11, r11
    17bc:	b3 94       	inc	r11
		{
			if(Module == 0) {
				if(Rotate) getRowLL(MAXMATRIX_NUMBER_OF_MODULES - 1, 0, &TopRow);
			} else {
				getRowLL(Module - 1, 0, &TopRow);
    17be:	9e 01       	movw	r18, r28
    17c0:	2f 5f       	subi	r18, 0xFF	; 255
    17c2:	3f 4f       	sbci	r19, 0xFF	; 255
    17c4:	40 e0       	ldi	r20, 0x00	; 0
    17c6:	60 e0       	ldi	r22, 0x00	; 0
    17c8:	e3 cf       	rjmp	.-58     	; 0x1790 <_ZN9MaxMatrix9shiftUpLLEbb+0x3e>
    17ca:	f8 01       	movw	r30, r16
    17cc:	ac 01       	movw	r20, r24
    17ce:	4b 5e       	subi	r20, 0xEB	; 235
    17d0:	5f 4f       	sbci	r21, 0xFF	; 255
		}
	} else {
		for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS; Column++) 
		{
			//bool b = MatrixBuffer[i] & 1;
			bool b = bitRead(MatrixBuffer[Column], 0);
    17d2:	20 81       	ld	r18, Z
			MatrixBuffer[Column] >>= 1;
    17d4:	82 2f       	mov	r24, r18
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	95 95       	asr	r25
    17da:	87 95       	ror	r24
			if(Rotate) bitWrite(MatrixBuffer[Column], MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, b);
    17dc:	61 11       	cpse	r22, r1
    17de:	13 c0       	rjmp	.+38     	; 0x1806 <_ZN9MaxMatrix9shiftUpLLEbb+0xb4>
    17e0:	80 83       	st	Z, r24
    17e2:	31 96       	adiw	r30, 0x01	; 1
			}
			for(byte Column = 0; Column < MAXMATRIX_COLUMN_NUMBER_OF_MODULE; Column++) MatrixBuffer[Column] >>= 1;
			setRowLL(Module, MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, TopRow);
		}
	} else {
		for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS; Column++) 
    17e4:	e4 17       	cp	r30, r20
    17e6:	f5 07       	cpc	r31, r21
    17e8:	a1 f7       	brne	.-24     	; 0x17d2 <_ZN9MaxMatrix9shiftUpLLEbb+0x80>
			bool b = bitRead(MatrixBuffer[Column], 0);
			MatrixBuffer[Column] >>= 1;
			if(Rotate) bitWrite(MatrixBuffer[Column], MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, b);
		}		
	}
    reload();
    17ea:	c7 01       	movw	r24, r14
    17ec:	0e 94 32 05 	call	0xa64	; 0xa64 <_ZN9MaxMatrix6reloadEv>
} /* shiftModuleUpLL */
    17f0:	0f 90       	pop	r0
    17f2:	df 91       	pop	r29
    17f4:	cf 91       	pop	r28
    17f6:	1f 91       	pop	r17
    17f8:	0f 91       	pop	r16
    17fa:	ff 90       	pop	r15
    17fc:	ef 90       	pop	r14
    17fe:	df 90       	pop	r13
    1800:	cf 90       	pop	r12
    1802:	bf 90       	pop	r11
    1804:	08 95       	ret
		for(int Column = 0; Column < MAXMATRIX_NUMBER_OF_COLUMNS; Column++) 
		{
			//bool b = MatrixBuffer[i] & 1;
			bool b = bitRead(MatrixBuffer[Column], 0);
			MatrixBuffer[Column] >>= 1;
			if(Rotate) bitWrite(MatrixBuffer[Column], MAXMATRIX_ROW_NUMBER_OF_MODULE - 1, b);
    1806:	20 ff       	sbrs	r18, 0
    1808:	eb cf       	rjmp	.-42     	; 0x17e0 <_ZN9MaxMatrix9shiftUpLLEbb+0x8e>
    180a:	80 68       	ori	r24, 0x80	; 128
    180c:	e9 cf       	rjmp	.-46     	; 0x17e0 <_ZN9MaxMatrix9shiftUpLLEbb+0x8e>

0000180e <_ZN9MaxMatrix9shiftLeftEbb>:
 *  \param[in]      Rotate          activate rotation of the matrix LED states
 *  \param[in]      FillWithZero    initialize the column on the right side with zero.
 *  \return         -
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftLeft(bool Rotate, bool FillWithZero)
{
    180e:	0f 93       	push	r16
    1810:	1f 93       	push	r17
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	ec 01       	movw	r28, r24
    1818:	16 2f       	mov	r17, r22
    181a:	04 2f       	mov	r16, r20
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_0) shiftLeftLL(Rotate, FillWithZero, true);
    181c:	8c 81       	ldd	r24, Y+4	; 0x04
    181e:	81 11       	cpse	r24, r1
    1820:	04 c0       	rjmp	.+8      	; 0x182a <_ZN9MaxMatrix9shiftLeftEbb+0x1c>
    1822:	21 e0       	ldi	r18, 0x01	; 1
    1824:	ce 01       	movw	r24, r28
    1826:	0e 94 04 0b 	call	0x1608	; 0x1608 <_ZN9MaxMatrix11shiftLeftLLEbbb>
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_90) shiftUpLL(Rotate, true);
    182a:	8c 81       	ldd	r24, Y+4	; 0x04
    182c:	81 30       	cpi	r24, 0x01	; 1
    182e:	29 f4       	brne	.+10     	; 0x183a <_ZN9MaxMatrix9shiftLeftEbb+0x2c>
    1830:	41 e0       	ldi	r20, 0x01	; 1
    1832:	61 2f       	mov	r22, r17
    1834:	ce 01       	movw	r24, r28
    1836:	0e 94 a9 0b 	call	0x1752	; 0x1752 <_ZN9MaxMatrix9shiftUpLLEbb>
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_180) shiftRightLL(Rotate, FillWithZero, true);
    183a:	8c 81       	ldd	r24, Y+4	; 0x04
    183c:	82 30       	cpi	r24, 0x02	; 2
    183e:	31 f4       	brne	.+12     	; 0x184c <_ZN9MaxMatrix9shiftLeftEbb+0x3e>
    1840:	21 e0       	ldi	r18, 0x01	; 1
    1842:	40 2f       	mov	r20, r16
    1844:	61 2f       	mov	r22, r17
    1846:	ce 01       	movw	r24, r28
    1848:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <_ZN9MaxMatrix12shiftRightLLEbbb>
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_270) shiftDownLL(Rotate, true);
    184c:	8c 81       	ldd	r24, Y+4	; 0x04
    184e:	83 30       	cpi	r24, 0x03	; 3
    1850:	39 f4       	brne	.+14     	; 0x1860 <_ZN9MaxMatrix9shiftLeftEbb+0x52>
		    bool b = bitRead(MatrixBuffer[Column], MAXMATRIX_ROW_NUMBER_OF_MODULE - 1);
		    MatrixBuffer[Column] <<= 1;
		    if(Rotate) bitWrite(MatrixBuffer[Column], 0, b);
		}
	}
    reload();
    1852:	ce 01       	movw	r24, r28
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_0) shiftLeftLL(Rotate, FillWithZero, true);
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_90) shiftUpLL(Rotate, true);
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_180) shiftRightLL(Rotate, FillWithZero, true);
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_270) shiftDownLL(Rotate, true);

} /* shiftLeft */
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	1f 91       	pop	r17
    185a:	0f 91       	pop	r16
		    bool b = bitRead(MatrixBuffer[Column], MAXMATRIX_ROW_NUMBER_OF_MODULE - 1);
		    MatrixBuffer[Column] <<= 1;
		    if(Rotate) bitWrite(MatrixBuffer[Column], 0, b);
		}
	}
    reload();
    185c:	0c 94 32 05 	jmp	0xa64	; 0xa64 <_ZN9MaxMatrix6reloadEv>
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_0) shiftLeftLL(Rotate, FillWithZero, true);
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_90) shiftUpLL(Rotate, true);
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_180) shiftRightLL(Rotate, FillWithZero, true);
	if(Orientation == MAXMATRIX_MODULE_ORIENTATION_270) shiftDownLL(Rotate, true);

} /* shiftLeft */
    1860:	df 91       	pop	r29
    1862:	cf 91       	pop	r28
    1864:	1f 91       	pop	r17
    1866:	0f 91       	pop	r16
    1868:	08 95       	ret

0000186a <_ZN9MaxMatrix13charShiftTaskEv>:
 *                  MAXMATRIX_STATE_CHAR_SHIFT or MAXMATRIX_STATE_STRING_SHIFT to MAXMATRIX_STATE_READY
 *  \return         -
 *  \pre            has to be called from shiftTask()
 *****************************************************************************************************************************************************/
void MaxMatrix::charShiftTask()
{
    186a:	cf 93       	push	r28
    186c:	df 93       	push	r29
    186e:	ec 01       	movw	r28, r24
    if(SpriteShiftCounter <= SpriteBuffer[ASCII_TABLE_SPRITE_WIDTH]) {
    1870:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1872:	8d 89       	ldd	r24, Y+21	; 0x15
    1874:	89 17       	cp	r24, r25
    1876:	b0 f0       	brcs	.+44     	; 0x18a4 <_ZN9MaxMatrix13charShiftTaskEv+0x3a>
        shiftLeft(false, true);
    1878:	41 e0       	ldi	r20, 0x01	; 1
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	ce 01       	movw	r24, r28
    187e:	0e 94 07 0c 	call	0x180e	; 0x180e <_ZN9MaxMatrix9shiftLeftEbb>
        setSprite(MAXMATRIX_NUMBER_OF_COLUMNS-SpriteShiftCounter, 0, &SpriteBuffer);
    1882:	9e 01       	movw	r18, r28
    1884:	2b 5e       	subi	r18, 0xEB	; 235
    1886:	3f 4f       	sbci	r19, 0xFF	; 255
    1888:	8c 8d       	ldd	r24, Y+28	; 0x1c
    188a:	60 e1       	ldi	r22, 0x10	; 16
    188c:	70 e0       	ldi	r23, 0x00	; 0
    188e:	68 1b       	sub	r22, r24
    1890:	71 09       	sbc	r23, r1
    1892:	40 e0       	ldi	r20, 0x00	; 0
    1894:	50 e0       	ldi	r21, 0x00	; 0
    1896:	ce 01       	movw	r24, r28
    1898:	0e 94 23 0a 	call	0x1446	; 0x1446 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh>
        SpriteShiftCounter++;
    189c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    189e:	8f 5f       	subi	r24, 0xFF	; 255
    18a0:	8c 8f       	std	Y+28, r24	; 0x1c
    18a2:	06 c0       	rjmp	.+12     	; 0x18b0 <_ZN9MaxMatrix13charShiftTaskEv+0x46>
    } else {
        if (MAXMATRIX_STATE_CHAR_SHIFT == State) State = MAXMATRIX_STATE_READY;
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	84 30       	cpi	r24, 0x04	; 4
    18a8:	11 f4       	brne	.+4      	; 0x18ae <_ZN9MaxMatrix13charShiftTaskEv+0x44>
    18aa:	82 e0       	ldi	r24, 0x02	; 2
    18ac:	8b 83       	std	Y+3, r24	; 0x03
        SpriteShiftCounter = 0;
    18ae:	1c 8e       	std	Y+28, r1	; 0x1c
    }
} /* charShiftTask */
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	08 95       	ret

000018b6 <_ZN9MaxMatrix15stringShiftTaskEv>:
 *                  MAXMATRIX_STATE_CHAR_SHIFT or MAXMATRIX_STATE_STRING_SHIFT to MAXMATRIX_STATE_READY
 *  \return         -
 *  \pre            has to be called from shiftTask()
 *****************************************************************************************************************************************************/
void MaxMatrix::stringShiftTask()
{
    18b6:	0f 93       	push	r16
    18b8:	1f 93       	push	r17
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	1f 92       	push	r1
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	8c 01       	movw	r16, r24
    spriteIndexType SpriteIndex;
    
    if(SpriteShiftCounter == 0)
    18c6:	dc 01       	movw	r26, r24
    18c8:	5c 96       	adiw	r26, 0x1c	; 28
    18ca:	8c 91       	ld	r24, X
    18cc:	5c 97       	sbiw	r26, 0x1c	; 28
    18ce:	81 11       	cpse	r24, r1
    18d0:	30 c0       	rjmp	.+96     	; 0x1932 <_ZN9MaxMatrix15stringShiftTaskEv+0x7c>
    {
        if(*String != NULL) {
    18d2:	5d 96       	adiw	r26, 0x1d	; 29
    18d4:	ed 91       	ld	r30, X+
    18d6:	fc 91       	ld	r31, X
    18d8:	5e 97       	sbiw	r26, 0x1e	; 30
    18da:	60 81       	ld	r22, Z
    18dc:	66 23       	and	r22, r22
    18de:	21 f1       	breq	.+72     	; 0x1928 <_ZN9MaxMatrix15stringShiftTaskEv+0x72>
            convertCharToSprite(*String, &SpriteIndex);
    18e0:	ae 01       	movw	r20, r28
    18e2:	4f 5f       	subi	r20, 0xFF	; 255
    18e4:	5f 4f       	sbci	r21, 0xFF	; 255
    18e6:	c8 01       	movw	r24, r16
    18e8:	0e 94 b1 07 	call	0xf62	; 0xf62 <_ZN9MaxMatrix19convertCharToSpriteEcPh>
            getSprite(SpriteIndex, &SpriteBuffer);
    18ec:	a8 01       	movw	r20, r16
    18ee:	4b 5e       	subi	r20, 0xEB	; 235
    18f0:	5f 4f       	sbci	r21, 0xFF	; 255
    18f2:	69 81       	ldd	r22, Y+1	; 0x01
    18f4:	c8 01       	movw	r24, r16
    18f6:	0e 94 0f 05 	call	0xa1e	; 0xa1e <_ZN9MaxMatrix9getSpriteEhPA7_h>
            if(SpriteShiftCounter != 0) shiftLeft(false, true);
    18fa:	f8 01       	movw	r30, r16
    18fc:	84 8d       	ldd	r24, Z+28	; 0x1c
    18fe:	88 23       	and	r24, r24
    1900:	29 f0       	breq	.+10     	; 0x190c <_ZN9MaxMatrix15stringShiftTaskEv+0x56>
    1902:	41 e0       	ldi	r20, 0x01	; 1
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	c8 01       	movw	r24, r16
    1908:	0e 94 07 0c 	call	0x180e	; 0x180e <_ZN9MaxMatrix9shiftLeftEbb>
            SpriteShiftCounter = 1;
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	d8 01       	movw	r26, r16
    1910:	5c 96       	adiw	r26, 0x1c	; 28
    1912:	8c 93       	st	X, r24
            charShiftTask();
    1914:	c8 01       	movw	r24, r16
    1916:	0e 94 35 0c 	call	0x186a	; 0x186a <_ZN9MaxMatrix13charShiftTaskEv>
            String++;
    191a:	f8 01       	movw	r30, r16
    191c:	85 8d       	ldd	r24, Z+29	; 0x1d
    191e:	96 8d       	ldd	r25, Z+30	; 0x1e
    1920:	01 96       	adiw	r24, 0x01	; 1
    1922:	96 8f       	std	Z+30, r25	; 0x1e
    1924:	85 8f       	std	Z+29, r24	; 0x1d
    1926:	11 c0       	rjmp	.+34     	; 0x194a <_ZN9MaxMatrix15stringShiftTaskEv+0x94>
        } else {
            State = MAXMATRIX_STATE_READY;
    1928:	82 e0       	ldi	r24, 0x02	; 2
    192a:	d8 01       	movw	r26, r16
    192c:	13 96       	adiw	r26, 0x03	; 3
    192e:	8c 93       	st	X, r24
    1930:	07 c0       	rjmp	.+14     	; 0x1940 <_ZN9MaxMatrix15stringShiftTaskEv+0x8a>
            shiftLeft(false, true);
        }
    } else {
        charShiftTask();
    1932:	c8 01       	movw	r24, r16
    1934:	0e 94 35 0c 	call	0x186a	; 0x186a <_ZN9MaxMatrix13charShiftTaskEv>
        if(SpriteShiftCounter == 0) shiftLeft(false, true);
    1938:	f8 01       	movw	r30, r16
    193a:	84 8d       	ldd	r24, Z+28	; 0x1c
    193c:	81 11       	cpse	r24, r1
    193e:	05 c0       	rjmp	.+10     	; 0x194a <_ZN9MaxMatrix15stringShiftTaskEv+0x94>
    1940:	41 e0       	ldi	r20, 0x01	; 1
    1942:	60 e0       	ldi	r22, 0x00	; 0
    1944:	c8 01       	movw	r24, r16
    1946:	0e 94 07 0c 	call	0x180e	; 0x180e <_ZN9MaxMatrix9shiftLeftEbb>
    }
} /* stringShiftTask */
    194a:	0f 90       	pop	r0
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	1f 91       	pop	r17
    1952:	0f 91       	pop	r16
    1954:	08 95       	ret

00001956 <_ZN9MaxMatrix9shiftTaskEv>:
 *                  MAXMATRIX_STATE_CHAR_SHIFT or MAXMATRIX_STATE_STRING_SHIFT to MAXMATRIX_STATE_READY
 *  \return         -
 *  \pre            setCharWithShift or setTextWithShift must be called first
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftTask()
{
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
    195a:	ec 01       	movw	r28, r24
    //if(MAXMATRIX_STATE_INIT == State) State = MAXMATRIX_STATE_READY;
    if(MAXMATRIX_STATE_STRING_SHIFT == State) stringShiftTask();
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	83 30       	cpi	r24, 0x03	; 3
    1960:	19 f4       	brne	.+6      	; 0x1968 <_ZN9MaxMatrix9shiftTaskEv+0x12>
    1962:	ce 01       	movw	r24, r28
    1964:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <_ZN9MaxMatrix15stringShiftTaskEv>
    if(MAXMATRIX_STATE_CHAR_SHIFT == State) charShiftTask();
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	84 30       	cpi	r24, 0x04	; 4
    196c:	29 f4       	brne	.+10     	; 0x1978 <_ZN9MaxMatrix9shiftTaskEv+0x22>
    196e:	ce 01       	movw	r24, r28
} /* shiftTask */
    1970:	df 91       	pop	r29
    1972:	cf 91       	pop	r28
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftTask()
{
    //if(MAXMATRIX_STATE_INIT == State) State = MAXMATRIX_STATE_READY;
    if(MAXMATRIX_STATE_STRING_SHIFT == State) stringShiftTask();
    if(MAXMATRIX_STATE_CHAR_SHIFT == State) charShiftTask();
    1974:	0c 94 35 0c 	jmp	0x186a	; 0x186a <_ZN9MaxMatrix13charShiftTaskEv>
} /* shiftTask */
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	08 95       	ret

0000197e <__vector_13>:
  else if(pin == 2 || pin == 10) {
    DDRB |= _BV(PORTB2);
    TCCR1A |= _BV(COM1B1);
  }
  setPwmDuty(pin, duty);
  resume();			// Lex - make sure the clock is running.  We don't want to restart the count, in case we are starting the second WGM
    197e:	1f 92       	push	r1
    1980:	0f 92       	push	r0
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	0f 92       	push	r0
    1986:	11 24       	eor	r1, r1
    1988:	2f 93       	push	r18
    198a:	3f 93       	push	r19
    198c:	4f 93       	push	r20
    198e:	5f 93       	push	r21
    1990:	6f 93       	push	r22
    1992:	7f 93       	push	r23
    1994:	8f 93       	push	r24
    1996:	9f 93       	push	r25
    1998:	af 93       	push	r26
    199a:	bf 93       	push	r27
    199c:	ef 93       	push	r30
    199e:	ff 93       	push	r31
    19a0:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <Timer1+0x4>
    19a4:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <Timer1+0x5>
    19a8:	09 95       	icall
    19aa:	ff 91       	pop	r31
    19ac:	ef 91       	pop	r30
    19ae:	bf 91       	pop	r27
    19b0:	af 91       	pop	r26
    19b2:	9f 91       	pop	r25
    19b4:	8f 91       	pop	r24
    19b6:	7f 91       	pop	r23
    19b8:	6f 91       	pop	r22
    19ba:	5f 91       	pop	r21
    19bc:	4f 91       	pop	r20
    19be:	3f 91       	pop	r19
    19c0:	2f 91       	pop	r18
    19c2:	0f 90       	pop	r0
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	0f 90       	pop	r0
    19c8:	1f 90       	pop	r1
    19ca:	18 95       	reti

000019cc <_ZN8TimerOne9setPeriodEl>:
    19cc:	fc 01       	movw	r30, r24
    19ce:	a3 e0       	ldi	r26, 0x03	; 3
    19d0:	44 0f       	add	r20, r20
    19d2:	55 1f       	adc	r21, r21
    19d4:	66 1f       	adc	r22, r22
    19d6:	77 1f       	adc	r23, r23
    19d8:	aa 95       	dec	r26
    19da:	d1 f7       	brne	.-12     	; 0x19d0 <_ZN8TimerOne9setPeriodEl+0x4>
    19dc:	41 15       	cp	r20, r1
    19de:	51 05       	cpc	r21, r1
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	68 07       	cpc	r22, r24
    19e4:	71 05       	cpc	r23, r1
    19e6:	14 f4       	brge	.+4      	; 0x19ec <_ZN8TimerOne9setPeriodEl+0x20>
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	0e c0       	rjmp	.+28     	; 0x1a08 <_ZN8TimerOne9setPeriodEl+0x3c>
    19ec:	33 e0       	ldi	r19, 0x03	; 3
    19ee:	75 95       	asr	r23
    19f0:	67 95       	ror	r22
    19f2:	57 95       	ror	r21
    19f4:	47 95       	ror	r20
    19f6:	3a 95       	dec	r19
    19f8:	d1 f7       	brne	.-12     	; 0x19ee <_ZN8TimerOne9setPeriodEl+0x22>
    19fa:	41 15       	cp	r20, r1
    19fc:	51 05       	cpc	r21, r1
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	68 07       	cpc	r22, r24
    1a02:	71 05       	cpc	r23, r1
    1a04:	1c f4       	brge	.+6      	; 0x1a0c <_ZN8TimerOne9setPeriodEl+0x40>
    1a06:	82 e0       	ldi	r24, 0x02	; 2
    1a08:	82 83       	std	Z+2, r24	; 0x02
    1a0a:	31 c0       	rjmp	.+98     	; 0x1a6e <_ZN8TimerOne9setPeriodEl+0xa2>
    1a0c:	23 e0       	ldi	r18, 0x03	; 3
    1a0e:	75 95       	asr	r23
    1a10:	67 95       	ror	r22
    1a12:	57 95       	ror	r21
    1a14:	47 95       	ror	r20
    1a16:	2a 95       	dec	r18
    1a18:	d1 f7       	brne	.-12     	; 0x1a0e <_ZN8TimerOne9setPeriodEl+0x42>
    1a1a:	41 15       	cp	r20, r1
    1a1c:	51 05       	cpc	r21, r1
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	68 07       	cpc	r22, r24
    1a22:	71 05       	cpc	r23, r1
    1a24:	14 f4       	brge	.+4      	; 0x1a2a <_ZN8TimerOne9setPeriodEl+0x5e>
    1a26:	83 e0       	ldi	r24, 0x03	; 3
    1a28:	ef cf       	rjmp	.-34     	; 0x1a08 <_ZN8TimerOne9setPeriodEl+0x3c>
    1a2a:	92 e0       	ldi	r25, 0x02	; 2
    1a2c:	75 95       	asr	r23
    1a2e:	67 95       	ror	r22
    1a30:	57 95       	ror	r21
    1a32:	47 95       	ror	r20
    1a34:	9a 95       	dec	r25
    1a36:	d1 f7       	brne	.-12     	; 0x1a2c <_ZN8TimerOne9setPeriodEl+0x60>
    1a38:	41 15       	cp	r20, r1
    1a3a:	51 05       	cpc	r21, r1
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	68 07       	cpc	r22, r24
    1a40:	71 05       	cpc	r23, r1
    1a42:	14 f4       	brge	.+4      	; 0x1a48 <_ZN8TimerOne9setPeriodEl+0x7c>
    1a44:	84 e0       	ldi	r24, 0x04	; 4
    1a46:	e0 cf       	rjmp	.-64     	; 0x1a08 <_ZN8TimerOne9setPeriodEl+0x3c>
    1a48:	82 e0       	ldi	r24, 0x02	; 2
    1a4a:	75 95       	asr	r23
    1a4c:	67 95       	ror	r22
    1a4e:	57 95       	ror	r21
    1a50:	47 95       	ror	r20
    1a52:	8a 95       	dec	r24
    1a54:	d1 f7       	brne	.-12     	; 0x1a4a <_ZN8TimerOne9setPeriodEl+0x7e>
    1a56:	85 e0       	ldi	r24, 0x05	; 5
    1a58:	82 83       	std	Z+2, r24	; 0x02
    1a5a:	41 15       	cp	r20, r1
    1a5c:	51 05       	cpc	r21, r1
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	68 07       	cpc	r22, r24
    1a62:	71 05       	cpc	r23, r1
    1a64:	24 f0       	brlt	.+8      	; 0x1a6e <_ZN8TimerOne9setPeriodEl+0xa2>
    1a66:	4f ef       	ldi	r20, 0xFF	; 255
    1a68:	5f ef       	ldi	r21, 0xFF	; 255
    1a6a:	60 e0       	ldi	r22, 0x00	; 0
    1a6c:	70 e0       	ldi	r23, 0x00	; 0
    1a6e:	8f b7       	in	r24, 0x3f	; 63
    1a70:	83 83       	std	Z+3, r24	; 0x03
    1a72:	f8 94       	cli
    1a74:	51 83       	std	Z+1, r21	; 0x01
    1a76:	40 83       	st	Z, r20
    1a78:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1a7c:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    1a80:	83 81       	ldd	r24, Z+3	; 0x03
    1a82:	8f bf       	out	0x3f, r24	; 63
    1a84:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1a88:	88 7f       	andi	r24, 0xF8	; 248
    1a8a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1a8e:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1a92:	82 81       	ldd	r24, Z+2	; 0x02
    1a94:	89 2b       	or	r24, r25
    1a96:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1a9a:	08 95       	ret

00001a9c <_ZN8TimerOne10initializeEl>:
    1a9c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1aa0:	20 e1       	ldi	r18, 0x10	; 16
    1aa2:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1aa6:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <_ZN8TimerOne9setPeriodEl>

00001aaa <_ZN8TimerOne6resumeEv>:
    1aaa:	e1 e8       	ldi	r30, 0x81	; 129
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	20 81       	ld	r18, Z
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	12 96       	adiw	r26, 0x02	; 2
    1ab4:	8c 91       	ld	r24, X
    1ab6:	82 2b       	or	r24, r18
    1ab8:	80 83       	st	Z, r24
    1aba:	08 95       	ret

00001abc <_ZN8TimerOne15attachInterruptEPFvvEl>:
  if(pin == 1 || pin == 9)       TCCR1A &= ~_BV(COM1A1);   // clear the bit that enables pwm on PB1
  else if(pin == 2 || pin == 10) TCCR1A &= ~_BV(COM1B1);   // clear the bit that enables pwm on PB2
}

void TimerOne::attachInterrupt(void (*isr)(), long microseconds)
{
    1abc:	0f 93       	push	r16
    1abe:	1f 93       	push	r17
    1ac0:	cf 93       	push	r28
    1ac2:	df 93       	push	r29
    1ac4:	ec 01       	movw	r28, r24
    1ac6:	8b 01       	movw	r16, r22
    1ac8:	ba 01       	movw	r22, r20
    1aca:	a9 01       	movw	r20, r18
  if(microseconds > 0) setPeriod(microseconds);
    1acc:	14 16       	cp	r1, r20
    1ace:	15 06       	cpc	r1, r21
    1ad0:	16 06       	cpc	r1, r22
    1ad2:	17 06       	cpc	r1, r23
    1ad4:	14 f4       	brge	.+4      	; 0x1ada <_ZN8TimerOne15attachInterruptEPFvvEl+0x1e>
    1ad6:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <_ZN8TimerOne9setPeriodEl>
  isrCallback = isr;                                       // register the user's callback with the real ISR
    1ada:	1d 83       	std	Y+5, r17	; 0x05
    1adc:	0c 83       	std	Y+4, r16	; 0x04
  TIMSK1 = _BV(TOIE1);                                     // sets the timer overflow interrupt enable bit
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	// might be running with interrupts disabled (eg inside an ISR), so don't touch the global state
//  sei();
  resume();												
    1ae4:	ce 01       	movw	r24, r28
}
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	1f 91       	pop	r17
    1aec:	0f 91       	pop	r16
  if(microseconds > 0) setPeriod(microseconds);
  isrCallback = isr;                                       // register the user's callback with the real ISR
  TIMSK1 = _BV(TOIE1);                                     // sets the timer overflow interrupt enable bit
	// might be running with interrupts disabled (eg inside an ISR), so don't touch the global state
//  sei();
  resume();												
    1aee:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <_ZN8TimerOne6resumeEv>

00001af2 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1af2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1af4:	91 8d       	ldd	r25, Z+25	; 0x19
    1af6:	22 8d       	ldd	r18, Z+26	; 0x1a
    1af8:	89 2f       	mov	r24, r25
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	80 5c       	subi	r24, 0xC0	; 192
    1afe:	9f 4f       	sbci	r25, 0xFF	; 255
    1b00:	82 1b       	sub	r24, r18
    1b02:	91 09       	sbc	r25, r1
}
    1b04:	8f 73       	andi	r24, 0x3F	; 63
    1b06:	99 27       	eor	r25, r25
    1b08:	08 95       	ret

00001b0a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1b0a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1b0c:	91 8d       	ldd	r25, Z+25	; 0x19
    1b0e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b10:	98 17       	cp	r25, r24
    1b12:	31 f0       	breq	.+12     	; 0x1b20 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1b14:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b16:	e8 0f       	add	r30, r24
    1b18:	f1 1d       	adc	r31, r1
    1b1a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1b20:	8f ef       	ldi	r24, 0xFF	; 255
    1b22:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1b24:	08 95       	ret

00001b26 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1b26:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1b28:	91 8d       	ldd	r25, Z+25	; 0x19
    1b2a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b2c:	98 17       	cp	r25, r24
    1b2e:	61 f0       	breq	.+24     	; 0x1b48 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1b30:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b32:	df 01       	movw	r26, r30
    1b34:	a8 0f       	add	r26, r24
    1b36:	b1 1d       	adc	r27, r1
    1b38:	5d 96       	adiw	r26, 0x1d	; 29
    1b3a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1b3c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b3e:	9f 5f       	subi	r25, 0xFF	; 255
    1b40:	9f 73       	andi	r25, 0x3F	; 63
    1b42:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1b48:	8f ef       	ldi	r24, 0xFF	; 255
    1b4a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1b4c:	08 95       	ret

00001b4e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1b4e:	8d ef       	ldi	r24, 0xFD	; 253
    1b50:	9e e0       	ldi	r25, 0x0E	; 14
    1b52:	89 2b       	or	r24, r25
    1b54:	49 f0       	breq	.+18     	; 0x1b68 <_Z14serialEventRunv+0x1a>
    1b56:	85 e8       	ldi	r24, 0x85	; 133
    1b58:	94 e0       	ldi	r25, 0x04	; 4
    1b5a:	89 2b       	or	r24, r25
    1b5c:	29 f0       	breq	.+10     	; 0x1b68 <_Z14serialEventRunv+0x1a>
    1b5e:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <_Z17Serial0_availablev>
    1b62:	81 11       	cpse	r24, r1
    1b64:	0c 94 85 04 	jmp	0x90a	; 0x90a <_Z11serialEventv>
    1b68:	08 95       	ret

00001b6a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1b6a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1b6c:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b6e:	df 01       	movw	r26, r30
    1b70:	a8 0f       	add	r26, r24
    1b72:	b1 1d       	adc	r27, r1
    1b74:	a3 5a       	subi	r26, 0xA3	; 163
    1b76:	bf 4f       	sbci	r27, 0xFF	; 255
    1b78:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1b7a:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	01 96       	adiw	r24, 0x01	; 1
    1b80:	8f 73       	andi	r24, 0x3F	; 63
    1b82:	99 27       	eor	r25, r25
    1b84:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1b86:	a6 89       	ldd	r26, Z+22	; 0x16
    1b88:	b7 89       	ldd	r27, Z+23	; 0x17
    1b8a:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1b8c:	a0 89       	ldd	r26, Z+16	; 0x10
    1b8e:	b1 89       	ldd	r27, Z+17	; 0x11
    1b90:	8c 91       	ld	r24, X
    1b92:	80 64       	ori	r24, 0x40	; 64
    1b94:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1b96:	93 8d       	ldd	r25, Z+27	; 0x1b
    1b98:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b9a:	98 13       	cpse	r25, r24
    1b9c:	06 c0       	rjmp	.+12     	; 0x1baa <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1b9e:	02 88       	ldd	r0, Z+18	; 0x12
    1ba0:	f3 89       	ldd	r31, Z+19	; 0x13
    1ba2:	e0 2d       	mov	r30, r0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	8f 7d       	andi	r24, 0xDF	; 223
    1ba8:	80 83       	st	Z, r24
    1baa:	08 95       	ret

00001bac <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1bac:	cf 93       	push	r28
    1bae:	df 93       	push	r29
    1bb0:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1bb2:	88 8d       	ldd	r24, Y+24	; 0x18
    1bb4:	88 23       	and	r24, r24
    1bb6:	c9 f0       	breq	.+50     	; 0x1bea <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1bb8:	ea 89       	ldd	r30, Y+18	; 0x12
    1bba:	fb 89       	ldd	r31, Y+19	; 0x13
    1bbc:	80 81       	ld	r24, Z
    1bbe:	85 fd       	sbrc	r24, 5
    1bc0:	05 c0       	rjmp	.+10     	; 0x1bcc <_ZN14HardwareSerial5flushEv+0x20>
    1bc2:	a8 89       	ldd	r26, Y+16	; 0x10
    1bc4:	b9 89       	ldd	r27, Y+17	; 0x11
    1bc6:	8c 91       	ld	r24, X
    1bc8:	86 fd       	sbrc	r24, 6
    1bca:	0f c0       	rjmp	.+30     	; 0x1bea <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	07 fc       	sbrc	r0, 7
    1bd0:	f5 cf       	rjmp	.-22     	; 0x1bbc <_ZN14HardwareSerial5flushEv+0x10>
    1bd2:	80 81       	ld	r24, Z
    1bd4:	85 ff       	sbrs	r24, 5
    1bd6:	f2 cf       	rjmp	.-28     	; 0x1bbc <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1bd8:	a8 89       	ldd	r26, Y+16	; 0x10
    1bda:	b9 89       	ldd	r27, Y+17	; 0x11
    1bdc:	8c 91       	ld	r24, X
    1bde:	85 ff       	sbrs	r24, 5
    1be0:	ed cf       	rjmp	.-38     	; 0x1bbc <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1be2:	ce 01       	movw	r24, r28
    1be4:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1be8:	e7 cf       	rjmp	.-50     	; 0x1bb8 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1bea:	df 91       	pop	r29
    1bec:	cf 91       	pop	r28
    1bee:	08 95       	ret

00001bf0 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1bf0:	ef 92       	push	r14
    1bf2:	ff 92       	push	r15
    1bf4:	0f 93       	push	r16
    1bf6:	1f 93       	push	r17
    1bf8:	cf 93       	push	r28
    1bfa:	df 93       	push	r29
    1bfc:	ec 01       	movw	r28, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1bfe:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1c00:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c02:	98 13       	cpse	r25, r24
    1c04:	05 c0       	rjmp	.+10     	; 0x1c10 <_ZN14HardwareSerial5writeEh+0x20>
    1c06:	e8 89       	ldd	r30, Y+16	; 0x10
    1c08:	f9 89       	ldd	r31, Y+17	; 0x11
    1c0a:	80 81       	ld	r24, Z
    1c0c:	85 fd       	sbrc	r24, 5
    1c0e:	27 c0       	rjmp	.+78     	; 0x1c5e <_ZN14HardwareSerial5writeEh+0x6e>
    1c10:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1c12:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1c14:	10 e0       	ldi	r17, 0x00	; 0
    1c16:	0f 5f       	subi	r16, 0xFF	; 255
    1c18:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1a:	0f 73       	andi	r16, 0x3F	; 63
    1c1c:	11 27       	eor	r17, r17
    1c1e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1c20:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c22:	e8 12       	cpse	r14, r24
    1c24:	0c c0       	rjmp	.+24     	; 0x1c3e <_ZN14HardwareSerial5writeEh+0x4e>
    if (bit_is_clear(SREG, SREG_I)) {
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	07 fc       	sbrc	r0, 7
    1c2a:	fa cf       	rjmp	.-12     	; 0x1c20 <_ZN14HardwareSerial5writeEh+0x30>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1c2c:	e8 89       	ldd	r30, Y+16	; 0x10
    1c2e:	f9 89       	ldd	r31, Y+17	; 0x11
    1c30:	80 81       	ld	r24, Z
    1c32:	85 ff       	sbrs	r24, 5
    1c34:	f5 cf       	rjmp	.-22     	; 0x1c20 <_ZN14HardwareSerial5writeEh+0x30>
	_tx_udr_empty_irq();
    1c36:	ce 01       	movw	r24, r28
    1c38:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1c3c:	f1 cf       	rjmp	.-30     	; 0x1c20 <_ZN14HardwareSerial5writeEh+0x30>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1c3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c40:	fe 01       	movw	r30, r28
    1c42:	e8 0f       	add	r30, r24
    1c44:	f1 1d       	adc	r31, r1
    1c46:	e3 5a       	subi	r30, 0xA3	; 163
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1c4c:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1c4e:	ea 89       	ldd	r30, Y+18	; 0x12
    1c50:	fb 89       	ldd	r31, Y+19	; 0x13
    1c52:	80 81       	ld	r24, Z
    1c54:	80 62       	ori	r24, 0x20	; 32
    1c56:	80 83       	st	Z, r24
  _written = true;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	88 8f       	std	Y+24, r24	; 0x18
    1c5c:	08 c0       	rjmp	.+16     	; 0x1c6e <_ZN14HardwareSerial5writeEh+0x7e>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1c5e:	ee 89       	ldd	r30, Y+22	; 0x16
    1c60:	ff 89       	ldd	r31, Y+23	; 0x17
    1c62:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1c64:	e8 89       	ldd	r30, Y+16	; 0x10
    1c66:	f9 89       	ldd	r31, Y+17	; 0x11
    1c68:	80 81       	ld	r24, Z
    1c6a:	80 64       	ori	r24, 0x40	; 64
    1c6c:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	df 91       	pop	r29
    1c74:	cf 91       	pop	r28
    1c76:	1f 91       	pop	r17
    1c78:	0f 91       	pop	r16
    1c7a:	ff 90       	pop	r15
    1c7c:	ef 90       	pop	r14
    1c7e:	08 95       	ret

00001c80 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1c80:	cf 92       	push	r12
    1c82:	df 92       	push	r13
    1c84:	ef 92       	push	r14
    1c86:	ff 92       	push	r15
    1c88:	1f 93       	push	r17
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
    1c8e:	ec 01       	movw	r28, r24
    1c90:	6a 01       	movw	r12, r20
    1c92:	7b 01       	movw	r14, r22
    1c94:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1c96:	e8 89       	ldd	r30, Y+16	; 0x10
    1c98:	f9 89       	ldd	r31, Y+17	; 0x11
    1c9a:	82 e0       	ldi	r24, 0x02	; 2
    1c9c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1c9e:	41 15       	cp	r20, r1
    1ca0:	51 4e       	sbci	r21, 0xE1	; 225
    1ca2:	61 05       	cpc	r22, r1
    1ca4:	71 05       	cpc	r23, r1
    1ca6:	b1 f0       	breq	.+44     	; 0x1cd4 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1ca8:	60 e0       	ldi	r22, 0x00	; 0
    1caa:	79 e0       	ldi	r23, 0x09	; 9
    1cac:	8d e3       	ldi	r24, 0x3D	; 61
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	a7 01       	movw	r20, r14
    1cb2:	96 01       	movw	r18, r12
    1cb4:	0e 94 38 11 	call	0x2270	; 0x2270 <__udivmodsi4>
    1cb8:	da 01       	movw	r26, r20
    1cba:	c9 01       	movw	r24, r18
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	a1 09       	sbc	r26, r1
    1cc0:	b1 09       	sbc	r27, r1
    1cc2:	b6 95       	lsr	r27
    1cc4:	a7 95       	ror	r26
    1cc6:	97 95       	ror	r25
    1cc8:	87 95       	ror	r24
    1cca:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1ccc:	41 15       	cp	r20, r1
    1cce:	80 e1       	ldi	r24, 0x10	; 16
    1cd0:	58 07       	cpc	r21, r24
    1cd2:	a8 f0       	brcs	.+42     	; 0x1cfe <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1cd4:	e8 89       	ldd	r30, Y+16	; 0x10
    1cd6:	f9 89       	ldd	r31, Y+17	; 0x11
    1cd8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1cda:	60 e8       	ldi	r22, 0x80	; 128
    1cdc:	74 e8       	ldi	r23, 0x84	; 132
    1cde:	8e e1       	ldi	r24, 0x1E	; 30
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	a7 01       	movw	r20, r14
    1ce4:	96 01       	movw	r18, r12
    1ce6:	0e 94 38 11 	call	0x2270	; 0x2270 <__udivmodsi4>
    1cea:	ba 01       	movw	r22, r20
    1cec:	a9 01       	movw	r20, r18
    1cee:	41 50       	subi	r20, 0x01	; 1
    1cf0:	51 09       	sbc	r21, r1
    1cf2:	61 09       	sbc	r22, r1
    1cf4:	71 09       	sbc	r23, r1
    1cf6:	76 95       	lsr	r23
    1cf8:	67 95       	ror	r22
    1cfa:	57 95       	ror	r21
    1cfc:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1cfe:	ec 85       	ldd	r30, Y+12	; 0x0c
    1d00:	fd 85       	ldd	r31, Y+13	; 0x0d
    1d02:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    1d04:	ee 85       	ldd	r30, Y+14	; 0x0e
    1d06:	ff 85       	ldd	r31, Y+15	; 0x0f
    1d08:	40 83       	st	Z, r20

  _written = false;
    1d0a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1d0c:	ec 89       	ldd	r30, Y+20	; 0x14
    1d0e:	fd 89       	ldd	r31, Y+21	; 0x15
    1d10:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1d12:	ea 89       	ldd	r30, Y+18	; 0x12
    1d14:	fb 89       	ldd	r31, Y+19	; 0x13
    1d16:	80 81       	ld	r24, Z
    1d18:	80 61       	ori	r24, 0x10	; 16
    1d1a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1d1c:	ea 89       	ldd	r30, Y+18	; 0x12
    1d1e:	fb 89       	ldd	r31, Y+19	; 0x13
    1d20:	80 81       	ld	r24, Z
    1d22:	88 60       	ori	r24, 0x08	; 8
    1d24:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1d26:	ea 89       	ldd	r30, Y+18	; 0x12
    1d28:	fb 89       	ldd	r31, Y+19	; 0x13
    1d2a:	80 81       	ld	r24, Z
    1d2c:	80 68       	ori	r24, 0x80	; 128
    1d2e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1d30:	ea 89       	ldd	r30, Y+18	; 0x12
    1d32:	fb 89       	ldd	r31, Y+19	; 0x13
    1d34:	80 81       	ld	r24, Z
    1d36:	8f 7d       	andi	r24, 0xDF	; 223
    1d38:	80 83       	st	Z, r24
}
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	1f 91       	pop	r17
    1d40:	ff 90       	pop	r15
    1d42:	ef 90       	pop	r14
    1d44:	df 90       	pop	r13
    1d46:	cf 90       	pop	r12
    1d48:	08 95       	ret

00001d4a <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1d4a:	1f 92       	push	r1
    1d4c:	0f 92       	push	r0
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	0f 92       	push	r0
    1d52:	11 24       	eor	r1, r1
    1d54:	2f 93       	push	r18
    1d56:	8f 93       	push	r24
    1d58:	9f 93       	push	r25
    1d5a:	ef 93       	push	r30
    1d5c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1d5e:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <Serial+0x10>
    1d62:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <Serial+0x11>
    1d66:	80 81       	ld	r24, Z
    1d68:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <Serial+0x16>
    1d6c:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <Serial+0x17>
    1d70:	82 fd       	sbrc	r24, 2
    1d72:	12 c0       	rjmp	.+36     	; 0x1d98 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1d74:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1d76:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <Serial+0x19>
    1d7a:	8f 5f       	subi	r24, 0xFF	; 255
    1d7c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1d7e:	20 91 da 01 	lds	r18, 0x01DA	; 0x8001da <Serial+0x1a>
    1d82:	82 17       	cp	r24, r18
    1d84:	51 f0       	breq	.+20     	; 0x1d9a <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1d86:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <Serial+0x19>
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	e0 54       	subi	r30, 0x40	; 64
    1d8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d90:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1d92:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <Serial+0x19>
    1d96:	01 c0       	rjmp	.+2      	; 0x1d9a <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1d98:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1d9a:	ff 91       	pop	r31
    1d9c:	ef 91       	pop	r30
    1d9e:	9f 91       	pop	r25
    1da0:	8f 91       	pop	r24
    1da2:	2f 91       	pop	r18
    1da4:	0f 90       	pop	r0
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	0f 90       	pop	r0
    1daa:	1f 90       	pop	r1
    1dac:	18 95       	reti

00001dae <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1dae:	1f 92       	push	r1
    1db0:	0f 92       	push	r0
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	0f 92       	push	r0
    1db6:	11 24       	eor	r1, r1
    1db8:	2f 93       	push	r18
    1dba:	3f 93       	push	r19
    1dbc:	4f 93       	push	r20
    1dbe:	5f 93       	push	r21
    1dc0:	6f 93       	push	r22
    1dc2:	7f 93       	push	r23
    1dc4:	8f 93       	push	r24
    1dc6:	9f 93       	push	r25
    1dc8:	af 93       	push	r26
    1dca:	bf 93       	push	r27
    1dcc:	ef 93       	push	r30
    1dce:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1dd0:	80 ec       	ldi	r24, 0xC0	; 192
    1dd2:	91 e0       	ldi	r25, 0x01	; 1
    1dd4:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1dd8:	ff 91       	pop	r31
    1dda:	ef 91       	pop	r30
    1ddc:	bf 91       	pop	r27
    1dde:	af 91       	pop	r26
    1de0:	9f 91       	pop	r25
    1de2:	8f 91       	pop	r24
    1de4:	7f 91       	pop	r23
    1de6:	6f 91       	pop	r22
    1de8:	5f 91       	pop	r21
    1dea:	4f 91       	pop	r20
    1dec:	3f 91       	pop	r19
    1dee:	2f 91       	pop	r18
    1df0:	0f 90       	pop	r0
    1df2:	0f be       	out	0x3f, r0	; 63
    1df4:	0f 90       	pop	r0
    1df6:	1f 90       	pop	r1
    1df8:	18 95       	reti

00001dfa <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1dfa:	80 ec       	ldi	r24, 0xC0	; 192
    1dfc:	91 e0       	ldi	r25, 0x01	; 1
    1dfe:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <_ZN14HardwareSerial9availableEv>
    1e02:	21 e0       	ldi	r18, 0x01	; 1
    1e04:	89 2b       	or	r24, r25
    1e06:	09 f4       	brne	.+2      	; 0x1e0a <_Z17Serial0_availablev+0x10>
    1e08:	20 e0       	ldi	r18, 0x00	; 0
}
    1e0a:	82 2f       	mov	r24, r18
    1e0c:	08 95       	ret

00001e0e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1e0e:	e0 ec       	ldi	r30, 0xC0	; 192
    1e10:	f1 e0       	ldi	r31, 0x01	; 1
    1e12:	13 82       	std	Z+3, r1	; 0x03
    1e14:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1e16:	88 ee       	ldi	r24, 0xE8	; 232
    1e18:	93 e0       	ldi	r25, 0x03	; 3
    1e1a:	a0 e0       	ldi	r26, 0x00	; 0
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	84 83       	std	Z+4, r24	; 0x04
    1e20:	95 83       	std	Z+5, r25	; 0x05
    1e22:	a6 83       	std	Z+6, r26	; 0x06
    1e24:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1e26:	83 e4       	ldi	r24, 0x43	; 67
    1e28:	91 e0       	ldi	r25, 0x01	; 1
    1e2a:	91 83       	std	Z+1, r25	; 0x01
    1e2c:	80 83       	st	Z, r24
    1e2e:	85 ec       	ldi	r24, 0xC5	; 197
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	95 87       	std	Z+13, r25	; 0x0d
    1e34:	84 87       	std	Z+12, r24	; 0x0c
    1e36:	84 ec       	ldi	r24, 0xC4	; 196
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	97 87       	std	Z+15, r25	; 0x0f
    1e3c:	86 87       	std	Z+14, r24	; 0x0e
    1e3e:	80 ec       	ldi	r24, 0xC0	; 192
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	91 8b       	std	Z+17, r25	; 0x11
    1e44:	80 8b       	std	Z+16, r24	; 0x10
    1e46:	81 ec       	ldi	r24, 0xC1	; 193
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	93 8b       	std	Z+19, r25	; 0x13
    1e4c:	82 8b       	std	Z+18, r24	; 0x12
    1e4e:	82 ec       	ldi	r24, 0xC2	; 194
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	95 8b       	std	Z+21, r25	; 0x15
    1e54:	84 8b       	std	Z+20, r24	; 0x14
    1e56:	86 ec       	ldi	r24, 0xC6	; 198
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	97 8b       	std	Z+23, r25	; 0x17
    1e5c:	86 8b       	std	Z+22, r24	; 0x16
    1e5e:	11 8e       	std	Z+25, r1	; 0x19
    1e60:	12 8e       	std	Z+26, r1	; 0x1a
    1e62:	13 8e       	std	Z+27, r1	; 0x1b
    1e64:	14 8e       	std	Z+28, r1	; 0x1c
    1e66:	08 95       	ret

00001e68 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1e68:	08 95       	ret

00001e6a <main>:

int main(void)
{
	init();
    1e6a:	0e 94 2d 10 	call	0x205a	; 0x205a <init>

	initVariant();
    1e6e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1e72:	0e 94 94 02 	call	0x528	; 0x528 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1e76:	c7 ea       	ldi	r28, 0xA7	; 167
    1e78:	dd e0       	ldi	r29, 0x0D	; 13
#endif
	
	setup();
    
	for (;;) {
		loop();
    1e7a:	0e 94 53 04 	call	0x8a6	; 0x8a6 <loop>
		if (serialEventRun) serialEventRun();
    1e7e:	20 97       	sbiw	r28, 0x00	; 0
    1e80:	e1 f3       	breq	.-8      	; 0x1e7a <main+0x10>
    1e82:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <_Z14serialEventRunv>
    1e86:	f9 cf       	rjmp	.-14     	; 0x1e7a <main+0x10>

00001e88 <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
    1e88:	cf 92       	push	r12
    1e8a:	df 92       	push	r13
    1e8c:	ef 92       	push	r14
    1e8e:	ff 92       	push	r15
    1e90:	0f 93       	push	r16
    1e92:	1f 93       	push	r17
    1e94:	cf 93       	push	r28
    1e96:	df 93       	push	r29
    1e98:	6c 01       	movw	r12, r24
    1e9a:	eb 01       	movw	r28, r22
    1e9c:	7b 01       	movw	r14, r22
    1e9e:	e4 0e       	add	r14, r20
    1ea0:	f5 1e       	adc	r15, r21
    1ea2:	00 e0       	ldi	r16, 0x00	; 0
    1ea4:	10 e0       	ldi	r17, 0x00	; 0
    1ea6:	ce 15       	cp	r28, r14
    1ea8:	df 05       	cpc	r29, r15
    1eaa:	61 f0       	breq	.+24     	; 0x1ec4 <_ZN5Print5writeEPKhj+0x3c>
    1eac:	69 91       	ld	r22, Y+
    1eae:	d6 01       	movw	r26, r12
    1eb0:	ed 91       	ld	r30, X+
    1eb2:	fc 91       	ld	r31, X
    1eb4:	01 90       	ld	r0, Z+
    1eb6:	f0 81       	ld	r31, Z
    1eb8:	e0 2d       	mov	r30, r0
    1eba:	c6 01       	movw	r24, r12
    1ebc:	09 95       	icall
    1ebe:	08 0f       	add	r16, r24
    1ec0:	19 1f       	adc	r17, r25
    1ec2:	f1 cf       	rjmp	.-30     	; 0x1ea6 <_ZN5Print5writeEPKhj+0x1e>
    1ec4:	c8 01       	movw	r24, r16
    1ec6:	df 91       	pop	r29
    1ec8:	cf 91       	pop	r28
    1eca:	1f 91       	pop	r17
    1ecc:	0f 91       	pop	r16
    1ece:	ff 90       	pop	r15
    1ed0:	ef 90       	pop	r14
    1ed2:	df 90       	pop	r13
    1ed4:	cf 90       	pop	r12
    1ed6:	08 95       	ret

00001ed8 <_ZN5Print5writeEPKc>:
    1ed8:	61 15       	cp	r22, r1
    1eda:	71 05       	cpc	r23, r1
    1edc:	79 f0       	breq	.+30     	; 0x1efc <_ZN5Print5writeEPKc+0x24>
    1ede:	fb 01       	movw	r30, r22
    1ee0:	01 90       	ld	r0, Z+
    1ee2:	00 20       	and	r0, r0
    1ee4:	e9 f7       	brne	.-6      	; 0x1ee0 <_ZN5Print5writeEPKc+0x8>
    1ee6:	31 97       	sbiw	r30, 0x01	; 1
    1ee8:	af 01       	movw	r20, r30
    1eea:	46 1b       	sub	r20, r22
    1eec:	57 0b       	sbc	r21, r23
    1eee:	dc 01       	movw	r26, r24
    1ef0:	ed 91       	ld	r30, X+
    1ef2:	fc 91       	ld	r31, X
    1ef4:	02 80       	ldd	r0, Z+2	; 0x02
    1ef6:	f3 81       	ldd	r31, Z+3	; 0x03
    1ef8:	e0 2d       	mov	r30, r0
    1efa:	09 94       	ijmp
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	08 95       	ret

00001f02 <_ZN5Print5printEPK19__FlashStringHelper>:
    1f02:	ef 92       	push	r14
    1f04:	ff 92       	push	r15
    1f06:	0f 93       	push	r16
    1f08:	1f 93       	push	r17
    1f0a:	cf 93       	push	r28
    1f0c:	df 93       	push	r29
    1f0e:	7c 01       	movw	r14, r24
    1f10:	fb 01       	movw	r30, r22
    1f12:	00 e0       	ldi	r16, 0x00	; 0
    1f14:	10 e0       	ldi	r17, 0x00	; 0
    1f16:	64 91       	lpm	r22, Z
    1f18:	ef 01       	movw	r28, r30
    1f1a:	21 96       	adiw	r28, 0x01	; 1
    1f1c:	66 23       	and	r22, r22
    1f1e:	61 f0       	breq	.+24     	; 0x1f38 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    1f20:	d7 01       	movw	r26, r14
    1f22:	ed 91       	ld	r30, X+
    1f24:	fc 91       	ld	r31, X
    1f26:	01 90       	ld	r0, Z+
    1f28:	f0 81       	ld	r31, Z
    1f2a:	e0 2d       	mov	r30, r0
    1f2c:	c7 01       	movw	r24, r14
    1f2e:	09 95       	icall
    1f30:	08 0f       	add	r16, r24
    1f32:	19 1f       	adc	r17, r25
    1f34:	fe 01       	movw	r30, r28
    1f36:	ef cf       	rjmp	.-34     	; 0x1f16 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    1f38:	c8 01       	movw	r24, r16
    1f3a:	df 91       	pop	r29
    1f3c:	cf 91       	pop	r28
    1f3e:	1f 91       	pop	r17
    1f40:	0f 91       	pop	r16
    1f42:	ff 90       	pop	r15
    1f44:	ef 90       	pop	r14
    1f46:	08 95       	ret

00001f48 <_ZN5Print5printEc>:
    1f48:	dc 01       	movw	r26, r24
    1f4a:	ed 91       	ld	r30, X+
    1f4c:	fc 91       	ld	r31, X
    1f4e:	01 90       	ld	r0, Z+
    1f50:	f0 81       	ld	r31, Z
    1f52:	e0 2d       	mov	r30, r0
    1f54:	09 94       	ijmp

00001f56 <_ZN5Print7printlnEv>:
    1f56:	0f 93       	push	r16
    1f58:	1f 93       	push	r17
    1f5a:	cf 93       	push	r28
    1f5c:	df 93       	push	r29
    1f5e:	ec 01       	movw	r28, r24
    1f60:	6d e0       	ldi	r22, 0x0D	; 13
    1f62:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN5Print5printEc>
    1f66:	8c 01       	movw	r16, r24
    1f68:	6a e0       	ldi	r22, 0x0A	; 10
    1f6a:	ce 01       	movw	r24, r28
    1f6c:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN5Print5printEc>
    1f70:	80 0f       	add	r24, r16
    1f72:	91 1f       	adc	r25, r17
    1f74:	df 91       	pop	r29
    1f76:	cf 91       	pop	r28
    1f78:	1f 91       	pop	r17
    1f7a:	0f 91       	pop	r16
    1f7c:	08 95       	ret

00001f7e <_ZN5Print7printlnEPK19__FlashStringHelper>:
    1f7e:	0f 93       	push	r16
    1f80:	1f 93       	push	r17
    1f82:	cf 93       	push	r28
    1f84:	df 93       	push	r29
    1f86:	ec 01       	movw	r28, r24
    1f88:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <_ZN5Print5printEPK19__FlashStringHelper>
    1f8c:	8c 01       	movw	r16, r24
    1f8e:	ce 01       	movw	r24, r28
    1f90:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <_ZN5Print7printlnEv>
    1f94:	80 0f       	add	r24, r16
    1f96:	91 1f       	adc	r25, r17
    1f98:	df 91       	pop	r29
    1f9a:	cf 91       	pop	r28
    1f9c:	1f 91       	pop	r17
    1f9e:	0f 91       	pop	r16
    1fa0:	08 95       	ret

00001fa2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    1fa2:	0f 93       	push	r16
    1fa4:	1f 93       	push	r17
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1fac:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <_ZN5Print5writeEPKc>
    1fb0:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <_ZN5Print7printlnEv>
  return n;
}
    1fb8:	80 0f       	add	r24, r16
    1fba:	91 1f       	adc	r25, r17
    1fbc:	df 91       	pop	r29
    1fbe:	cf 91       	pop	r28
    1fc0:	1f 91       	pop	r17
    1fc2:	0f 91       	pop	r16
    1fc4:	08 95       	ret

00001fc6 <__vector_16>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    1fc6:	1f 92       	push	r1
    1fc8:	0f 92       	push	r0
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	0f 92       	push	r0
    1fce:	11 24       	eor	r1, r1
    1fd0:	2f 93       	push	r18
    1fd2:	3f 93       	push	r19
    1fd4:	8f 93       	push	r24
    1fd6:	9f 93       	push	r25
    1fd8:	af 93       	push	r26
    1fda:	bf 93       	push	r27
    1fdc:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <timer0_millis>
    1fe0:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <timer0_millis+0x1>
    1fe4:	a0 91 60 02 	lds	r26, 0x0260	; 0x800260 <timer0_millis+0x2>
    1fe8:	b0 91 61 02 	lds	r27, 0x0261	; 0x800261 <timer0_millis+0x3>
    1fec:	30 91 5d 02 	lds	r19, 0x025D	; 0x80025d <timer0_fract>
    1ff0:	23 e0       	ldi	r18, 0x03	; 3
    1ff2:	23 0f       	add	r18, r19
    1ff4:	2d 37       	cpi	r18, 0x7D	; 125
    1ff6:	20 f4       	brcc	.+8      	; 0x2000 <__vector_16+0x3a>
    1ff8:	01 96       	adiw	r24, 0x01	; 1
    1ffa:	a1 1d       	adc	r26, r1
    1ffc:	b1 1d       	adc	r27, r1
    1ffe:	05 c0       	rjmp	.+10     	; 0x200a <__vector_16+0x44>
    2000:	26 e8       	ldi	r18, 0x86	; 134
    2002:	23 0f       	add	r18, r19
    2004:	02 96       	adiw	r24, 0x02	; 2
    2006:	a1 1d       	adc	r26, r1
    2008:	b1 1d       	adc	r27, r1
    200a:	20 93 5d 02 	sts	0x025D, r18	; 0x80025d <timer0_fract>
    200e:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <timer0_millis>
    2012:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <timer0_millis+0x1>
    2016:	a0 93 60 02 	sts	0x0260, r26	; 0x800260 <timer0_millis+0x2>
    201a:	b0 93 61 02 	sts	0x0261, r27	; 0x800261 <timer0_millis+0x3>
    201e:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <timer0_overflow_count>
    2022:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <timer0_overflow_count+0x1>
    2026:	a0 91 64 02 	lds	r26, 0x0264	; 0x800264 <timer0_overflow_count+0x2>
    202a:	b0 91 65 02 	lds	r27, 0x0265	; 0x800265 <timer0_overflow_count+0x3>
    202e:	01 96       	adiw	r24, 0x01	; 1
    2030:	a1 1d       	adc	r26, r1
    2032:	b1 1d       	adc	r27, r1
    2034:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <timer0_overflow_count>
    2038:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <timer0_overflow_count+0x1>
    203c:	a0 93 64 02 	sts	0x0264, r26	; 0x800264 <timer0_overflow_count+0x2>
    2040:	b0 93 65 02 	sts	0x0265, r27	; 0x800265 <timer0_overflow_count+0x3>
    2044:	bf 91       	pop	r27
    2046:	af 91       	pop	r26
    2048:	9f 91       	pop	r25
    204a:	8f 91       	pop	r24
    204c:	3f 91       	pop	r19
    204e:	2f 91       	pop	r18
    2050:	0f 90       	pop	r0
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	0f 90       	pop	r0
    2056:	1f 90       	pop	r1
    2058:	18 95       	reti

0000205a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    205a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    205c:	84 b5       	in	r24, 0x24	; 36
    205e:	82 60       	ori	r24, 0x02	; 2
    2060:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2062:	84 b5       	in	r24, 0x24	; 36
    2064:	81 60       	ori	r24, 0x01	; 1
    2066:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2068:	85 b5       	in	r24, 0x25	; 37
    206a:	82 60       	ori	r24, 0x02	; 2
    206c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    206e:	85 b5       	in	r24, 0x25	; 37
    2070:	81 60       	ori	r24, 0x01	; 1
    2072:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2074:	ee e6       	ldi	r30, 0x6E	; 110
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	81 60       	ori	r24, 0x01	; 1
    207c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    207e:	e1 e8       	ldi	r30, 0x81	; 129
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2084:	80 81       	ld	r24, Z
    2086:	82 60       	ori	r24, 0x02	; 2
    2088:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    208a:	80 81       	ld	r24, Z
    208c:	81 60       	ori	r24, 0x01	; 1
    208e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2090:	e0 e8       	ldi	r30, 0x80	; 128
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	81 60       	ori	r24, 0x01	; 1
    2098:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    209a:	e1 eb       	ldi	r30, 0xB1	; 177
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	84 60       	ori	r24, 0x04	; 4
    20a2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    20a4:	e0 eb       	ldi	r30, 0xB0	; 176
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	81 60       	ori	r24, 0x01	; 1
    20ac:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    20ae:	ea e7       	ldi	r30, 0x7A	; 122
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	84 60       	ori	r24, 0x04	; 4
    20b6:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    20b8:	80 81       	ld	r24, Z
    20ba:	82 60       	ori	r24, 0x02	; 2
    20bc:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    20be:	80 81       	ld	r24, Z
    20c0:	81 60       	ori	r24, 0x01	; 1
    20c2:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    20c4:	80 81       	ld	r24, Z
    20c6:	80 68       	ori	r24, 0x80	; 128
    20c8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    20ca:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    20ce:	08 95       	ret

000020d0 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    20d0:	83 30       	cpi	r24, 0x03	; 3
    20d2:	81 f0       	breq	.+32     	; 0x20f4 <turnOffPWM+0x24>
    20d4:	28 f4       	brcc	.+10     	; 0x20e0 <turnOffPWM+0x10>
    20d6:	81 30       	cpi	r24, 0x01	; 1
    20d8:	99 f0       	breq	.+38     	; 0x2100 <turnOffPWM+0x30>
    20da:	82 30       	cpi	r24, 0x02	; 2
    20dc:	a1 f0       	breq	.+40     	; 0x2106 <turnOffPWM+0x36>
    20de:	08 95       	ret
    20e0:	87 30       	cpi	r24, 0x07	; 7
    20e2:	a9 f0       	breq	.+42     	; 0x210e <turnOffPWM+0x3e>
    20e4:	88 30       	cpi	r24, 0x08	; 8
    20e6:	b9 f0       	breq	.+46     	; 0x2116 <turnOffPWM+0x46>
    20e8:	84 30       	cpi	r24, 0x04	; 4
    20ea:	d1 f4       	brne	.+52     	; 0x2120 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    20ec:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    20f0:	8f 7d       	andi	r24, 0xDF	; 223
    20f2:	03 c0       	rjmp	.+6      	; 0x20fa <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    20f4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    20f8:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    20fa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    20fe:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2100:	84 b5       	in	r24, 0x24	; 36
    2102:	8f 77       	andi	r24, 0x7F	; 127
    2104:	02 c0       	rjmp	.+4      	; 0x210a <turnOffPWM+0x3a>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2106:	84 b5       	in	r24, 0x24	; 36
    2108:	8f 7d       	andi	r24, 0xDF	; 223
    210a:	84 bd       	out	0x24, r24	; 36
    210c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    210e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2112:	8f 77       	andi	r24, 0x7F	; 127
    2114:	03 c0       	rjmp	.+6      	; 0x211c <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2116:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    211a:	8f 7d       	andi	r24, 0xDF	; 223
    211c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2120:	08 95       	ret

00002122 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2122:	cf 93       	push	r28
    2124:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	fc 01       	movw	r30, r24
    212a:	e7 57       	subi	r30, 0x77	; 119
    212c:	fb 4f       	sbci	r31, 0xFB	; 251
    212e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2130:	fc 01       	movw	r30, r24
    2132:	e3 56       	subi	r30, 0x63	; 99
    2134:	fb 4f       	sbci	r31, 0xFB	; 251
    2136:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2138:	88 23       	and	r24, r24
    213a:	61 f1       	breq	.+88     	; 0x2194 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	fc 01       	movw	r30, r24
    2144:	e5 54       	subi	r30, 0x45	; 69
    2146:	fb 4f       	sbci	r31, 0xFB	; 251
    2148:	c5 91       	lpm	r28, Z+
    214a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    214c:	fc 01       	movw	r30, r24
    214e:	ef 54       	subi	r30, 0x4F	; 79
    2150:	fb 4f       	sbci	r31, 0xFB	; 251
    2152:	a5 91       	lpm	r26, Z+
    2154:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2156:	61 11       	cpse	r22, r1
    2158:	09 c0       	rjmp	.+18     	; 0x216c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    215a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    215c:	f8 94       	cli
		*reg &= ~bit;
    215e:	88 81       	ld	r24, Y
    2160:	20 95       	com	r18
    2162:	82 23       	and	r24, r18
    2164:	88 83       	st	Y, r24
		*out &= ~bit;
    2166:	ec 91       	ld	r30, X
    2168:	2e 23       	and	r18, r30
    216a:	0b c0       	rjmp	.+22     	; 0x2182 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    216c:	62 30       	cpi	r22, 0x02	; 2
    216e:	61 f4       	brne	.+24     	; 0x2188 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2170:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2172:	f8 94       	cli
		*reg &= ~bit;
    2174:	38 81       	ld	r19, Y
    2176:	82 2f       	mov	r24, r18
    2178:	80 95       	com	r24
    217a:	83 23       	and	r24, r19
    217c:	88 83       	st	Y, r24
		*out |= bit;
    217e:	ec 91       	ld	r30, X
    2180:	2e 2b       	or	r18, r30
    2182:	2c 93       	st	X, r18
		SREG = oldSREG;
    2184:	9f bf       	out	0x3f, r25	; 63
    2186:	06 c0       	rjmp	.+12     	; 0x2194 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2188:	8f b7       	in	r24, 0x3f	; 63
                cli();
    218a:	f8 94       	cli
		*reg |= bit;
    218c:	e8 81       	ld	r30, Y
    218e:	2e 2b       	or	r18, r30
    2190:	28 83       	st	Y, r18
		SREG = oldSREG;
    2192:	8f bf       	out	0x3f, r24	; 63
	}
}
    2194:	df 91       	pop	r29
    2196:	cf 91       	pop	r28
    2198:	08 95       	ret

0000219a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    219a:	1f 93       	push	r17
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    21a0:	28 2f       	mov	r18, r24
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	f9 01       	movw	r30, r18
    21a6:	eb 58       	subi	r30, 0x8B	; 139
    21a8:	fb 4f       	sbci	r31, 0xFB	; 251
    21aa:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    21ac:	f9 01       	movw	r30, r18
    21ae:	e7 57       	subi	r30, 0x77	; 119
    21b0:	fb 4f       	sbci	r31, 0xFB	; 251
    21b2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    21b4:	f9 01       	movw	r30, r18
    21b6:	e3 56       	subi	r30, 0x63	; 99
    21b8:	fb 4f       	sbci	r31, 0xFB	; 251
    21ba:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    21bc:	cc 23       	and	r28, r28
    21be:	c9 f0       	breq	.+50     	; 0x21f2 <digitalWrite+0x58>
    21c0:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    21c2:	81 11       	cpse	r24, r1
    21c4:	0e 94 68 10 	call	0x20d0	; 0x20d0 <turnOffPWM>

	out = portOutputRegister(port);
    21c8:	ec 2f       	mov	r30, r28
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	ee 0f       	add	r30, r30
    21ce:	ff 1f       	adc	r31, r31
    21d0:	ef 54       	subi	r30, 0x4F	; 79
    21d2:	fb 4f       	sbci	r31, 0xFB	; 251
    21d4:	a5 91       	lpm	r26, Z+
    21d6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    21d8:	8f b7       	in	r24, 0x3f	; 63
	cli();
    21da:	f8 94       	cli

	if (val == LOW) {
    21dc:	11 11       	cpse	r17, r1
    21de:	05 c0       	rjmp	.+10     	; 0x21ea <digitalWrite+0x50>
		*out &= ~bit;
    21e0:	9c 91       	ld	r25, X
    21e2:	ed 2f       	mov	r30, r29
    21e4:	e0 95       	com	r30
    21e6:	e9 23       	and	r30, r25
    21e8:	02 c0       	rjmp	.+4      	; 0x21ee <digitalWrite+0x54>
	} else {
		*out |= bit;
    21ea:	ec 91       	ld	r30, X
    21ec:	ed 2b       	or	r30, r29
    21ee:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    21f0:	8f bf       	out	0x3f, r24	; 63
}
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	1f 91       	pop	r17
    21f8:	08 95       	ret

000021fa <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    21fa:	bf 92       	push	r11
    21fc:	cf 92       	push	r12
    21fe:	df 92       	push	r13
    2200:	ef 92       	push	r14
    2202:	ff 92       	push	r15
    2204:	0f 93       	push	r16
    2206:	1f 93       	push	r17
    2208:	cf 93       	push	r28
    220a:	df 93       	push	r29
    220c:	c8 2e       	mov	r12, r24
    220e:	d6 2e       	mov	r13, r22
    2210:	b4 2e       	mov	r11, r20
    2212:	c7 e0       	ldi	r28, 0x07	; 7
    2214:	d0 e0       	ldi	r29, 0x00	; 0
    2216:	02 2f       	mov	r16, r18
    2218:	10 e0       	ldi	r17, 0x00	; 0
    221a:	87 e0       	ldi	r24, 0x07	; 7
    221c:	e8 2e       	mov	r14, r24
    221e:	f1 2c       	mov	r15, r1
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    2220:	b1 10       	cpse	r11, r1
    2222:	05 c0       	rjmp	.+10     	; 0x222e <shiftOut+0x34>
    2224:	c7 01       	movw	r24, r14
    2226:	8c 1b       	sub	r24, r28
    2228:	9d 0b       	sbc	r25, r29
			digitalWrite(dataPin, !!(val & (1 << i)));
    222a:	98 01       	movw	r18, r16
    222c:	02 c0       	rjmp	.+4      	; 0x2232 <shiftOut+0x38>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    222e:	98 01       	movw	r18, r16
    2230:	8c 2f       	mov	r24, r28
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <shiftOut+0x3e>
    2234:	35 95       	asr	r19
    2236:	27 95       	ror	r18
    2238:	8a 95       	dec	r24
    223a:	e2 f7       	brpl	.-8      	; 0x2234 <shiftOut+0x3a>
    223c:	b9 01       	movw	r22, r18
    223e:	61 70       	andi	r22, 0x01	; 1
    2240:	77 27       	eor	r23, r23
    2242:	8c 2d       	mov	r24, r12
    2244:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    2248:	61 e0       	ldi	r22, 0x01	; 1
    224a:	8d 2d       	mov	r24, r13
    224c:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
		digitalWrite(clockPin, LOW);		
    2250:	60 e0       	ldi	r22, 0x00	; 0
    2252:	8d 2d       	mov	r24, r13
    2254:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
    2258:	21 97       	sbiw	r28, 0x01	; 1
    225a:	10 f7       	brcc	.-60     	; 0x2220 <shiftOut+0x26>
	}
}
    225c:	df 91       	pop	r29
    225e:	cf 91       	pop	r28
    2260:	1f 91       	pop	r17
    2262:	0f 91       	pop	r16
    2264:	ff 90       	pop	r15
    2266:	ef 90       	pop	r14
    2268:	df 90       	pop	r13
    226a:	cf 90       	pop	r12
    226c:	bf 90       	pop	r11
    226e:	08 95       	ret

00002270 <__udivmodsi4>:
    2270:	a1 e2       	ldi	r26, 0x21	; 33
    2272:	1a 2e       	mov	r1, r26
    2274:	aa 1b       	sub	r26, r26
    2276:	bb 1b       	sub	r27, r27
    2278:	fd 01       	movw	r30, r26
    227a:	0d c0       	rjmp	.+26     	; 0x2296 <__udivmodsi4_ep>

0000227c <__udivmodsi4_loop>:
    227c:	aa 1f       	adc	r26, r26
    227e:	bb 1f       	adc	r27, r27
    2280:	ee 1f       	adc	r30, r30
    2282:	ff 1f       	adc	r31, r31
    2284:	a2 17       	cp	r26, r18
    2286:	b3 07       	cpc	r27, r19
    2288:	e4 07       	cpc	r30, r20
    228a:	f5 07       	cpc	r31, r21
    228c:	20 f0       	brcs	.+8      	; 0x2296 <__udivmodsi4_ep>
    228e:	a2 1b       	sub	r26, r18
    2290:	b3 0b       	sbc	r27, r19
    2292:	e4 0b       	sbc	r30, r20
    2294:	f5 0b       	sbc	r31, r21

00002296 <__udivmodsi4_ep>:
    2296:	66 1f       	adc	r22, r22
    2298:	77 1f       	adc	r23, r23
    229a:	88 1f       	adc	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	1a 94       	dec	r1
    22a0:	69 f7       	brne	.-38     	; 0x227c <__udivmodsi4_loop>
    22a2:	60 95       	com	r22
    22a4:	70 95       	com	r23
    22a6:	80 95       	com	r24
    22a8:	90 95       	com	r25
    22aa:	9b 01       	movw	r18, r22
    22ac:	ac 01       	movw	r20, r24
    22ae:	bd 01       	movw	r22, r26
    22b0:	cf 01       	movw	r24, r30
    22b2:	08 95       	ret

000022b4 <__usmulhisi3>:
    22b4:	0e 94 67 11 	call	0x22ce	; 0x22ce <__umulhisi3>

000022b8 <__usmulhisi3_tail>:
    22b8:	b7 ff       	sbrs	r27, 7
    22ba:	08 95       	ret
    22bc:	82 1b       	sub	r24, r18
    22be:	93 0b       	sbc	r25, r19
    22c0:	08 95       	ret

000022c2 <__tablejump2__>:
    22c2:	ee 0f       	add	r30, r30
    22c4:	ff 1f       	adc	r31, r31
    22c6:	05 90       	lpm	r0, Z+
    22c8:	f4 91       	lpm	r31, Z
    22ca:	e0 2d       	mov	r30, r0
    22cc:	09 94       	ijmp

000022ce <__umulhisi3>:
    22ce:	a2 9f       	mul	r26, r18
    22d0:	b0 01       	movw	r22, r0
    22d2:	b3 9f       	mul	r27, r19
    22d4:	c0 01       	movw	r24, r0
    22d6:	a3 9f       	mul	r26, r19
    22d8:	70 0d       	add	r23, r0
    22da:	81 1d       	adc	r24, r1
    22dc:	11 24       	eor	r1, r1
    22de:	91 1d       	adc	r25, r1
    22e0:	b2 9f       	mul	r27, r18
    22e2:	70 0d       	add	r23, r0
    22e4:	81 1d       	adc	r24, r1
    22e6:	11 24       	eor	r1, r1
    22e8:	91 1d       	adc	r25, r1
    22ea:	08 95       	ret

000022ec <atoi>:
    22ec:	fc 01       	movw	r30, r24
    22ee:	88 27       	eor	r24, r24
    22f0:	99 27       	eor	r25, r25
    22f2:	e8 94       	clt
    22f4:	21 91       	ld	r18, Z+
    22f6:	20 32       	cpi	r18, 0x20	; 32
    22f8:	e9 f3       	breq	.-6      	; 0x22f4 <atoi+0x8>
    22fa:	29 30       	cpi	r18, 0x09	; 9
    22fc:	10 f0       	brcs	.+4      	; 0x2302 <atoi+0x16>
    22fe:	2e 30       	cpi	r18, 0x0E	; 14
    2300:	c8 f3       	brcs	.-14     	; 0x22f4 <atoi+0x8>
    2302:	2b 32       	cpi	r18, 0x2B	; 43
    2304:	41 f0       	breq	.+16     	; 0x2316 <atoi+0x2a>
    2306:	2d 32       	cpi	r18, 0x2D	; 45
    2308:	39 f4       	brne	.+14     	; 0x2318 <atoi+0x2c>
    230a:	68 94       	set
    230c:	04 c0       	rjmp	.+8      	; 0x2316 <atoi+0x2a>
    230e:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__mulhi_const_10>
    2312:	82 0f       	add	r24, r18
    2314:	91 1d       	adc	r25, r1
    2316:	21 91       	ld	r18, Z+
    2318:	20 53       	subi	r18, 0x30	; 48
    231a:	2a 30       	cpi	r18, 0x0A	; 10
    231c:	c0 f3       	brcs	.-16     	; 0x230e <atoi+0x22>
    231e:	1e f4       	brtc	.+6      	; 0x2326 <atoi+0x3a>
    2320:	90 95       	com	r25
    2322:	81 95       	neg	r24
    2324:	9f 4f       	sbci	r25, 0xFF	; 255
    2326:	08 95       	ret

00002328 <memcpy_P>:
    2328:	fb 01       	movw	r30, r22
    232a:	dc 01       	movw	r26, r24
    232c:	02 c0       	rjmp	.+4      	; 0x2332 <memcpy_P+0xa>
    232e:	05 90       	lpm	r0, Z+
    2330:	0d 92       	st	X+, r0
    2332:	41 50       	subi	r20, 0x01	; 1
    2334:	50 40       	sbci	r21, 0x00	; 0
    2336:	d8 f7       	brcc	.-10     	; 0x232e <memcpy_P+0x6>
    2338:	08 95       	ret

0000233a <strtok>:
    233a:	40 e5       	ldi	r20, 0x50	; 80
    233c:	51 e0       	ldi	r21, 0x01	; 1
    233e:	0e 94 c5 11 	call	0x238a	; 0x238a <strtok_r>
    2342:	08 95       	ret

00002344 <strchr>:
    2344:	fc 01       	movw	r30, r24
    2346:	81 91       	ld	r24, Z+
    2348:	86 17       	cp	r24, r22
    234a:	21 f0       	breq	.+8      	; 0x2354 <strchr+0x10>
    234c:	88 23       	and	r24, r24
    234e:	d9 f7       	brne	.-10     	; 0x2346 <strchr+0x2>
    2350:	99 27       	eor	r25, r25
    2352:	08 95       	ret
    2354:	31 97       	sbiw	r30, 0x01	; 1
    2356:	cf 01       	movw	r24, r30
    2358:	08 95       	ret

0000235a <strcmp>:
    235a:	fb 01       	movw	r30, r22
    235c:	dc 01       	movw	r26, r24
    235e:	8d 91       	ld	r24, X+
    2360:	01 90       	ld	r0, Z+
    2362:	80 19       	sub	r24, r0
    2364:	01 10       	cpse	r0, r1
    2366:	d9 f3       	breq	.-10     	; 0x235e <strcmp+0x4>
    2368:	99 0b       	sbc	r25, r25
    236a:	08 95       	ret

0000236c <strncpy>:
    236c:	fb 01       	movw	r30, r22
    236e:	dc 01       	movw	r26, r24
    2370:	41 50       	subi	r20, 0x01	; 1
    2372:	50 40       	sbci	r21, 0x00	; 0
    2374:	48 f0       	brcs	.+18     	; 0x2388 <strncpy+0x1c>
    2376:	01 90       	ld	r0, Z+
    2378:	0d 92       	st	X+, r0
    237a:	00 20       	and	r0, r0
    237c:	c9 f7       	brne	.-14     	; 0x2370 <strncpy+0x4>
    237e:	01 c0       	rjmp	.+2      	; 0x2382 <strncpy+0x16>
    2380:	1d 92       	st	X+, r1
    2382:	41 50       	subi	r20, 0x01	; 1
    2384:	50 40       	sbci	r21, 0x00	; 0
    2386:	e0 f7       	brcc	.-8      	; 0x2380 <strncpy+0x14>
    2388:	08 95       	ret

0000238a <strtok_r>:
    238a:	fa 01       	movw	r30, r20
    238c:	a1 91       	ld	r26, Z+
    238e:	b0 81       	ld	r27, Z
    2390:	00 97       	sbiw	r24, 0x00	; 0
    2392:	19 f4       	brne	.+6      	; 0x239a <strtok_r+0x10>
    2394:	10 97       	sbiw	r26, 0x00	; 0
    2396:	e1 f0       	breq	.+56     	; 0x23d0 <strtok_r+0x46>
    2398:	cd 01       	movw	r24, r26
    239a:	dc 01       	movw	r26, r24
    239c:	cd 01       	movw	r24, r26
    239e:	0d 90       	ld	r0, X+
    23a0:	00 20       	and	r0, r0
    23a2:	11 f4       	brne	.+4      	; 0x23a8 <strtok_r+0x1e>
    23a4:	c0 01       	movw	r24, r0
    23a6:	13 c0       	rjmp	.+38     	; 0x23ce <strtok_r+0x44>
    23a8:	fb 01       	movw	r30, r22
    23aa:	21 91       	ld	r18, Z+
    23ac:	22 23       	and	r18, r18
    23ae:	19 f0       	breq	.+6      	; 0x23b6 <strtok_r+0x2c>
    23b0:	20 15       	cp	r18, r0
    23b2:	d9 f7       	brne	.-10     	; 0x23aa <strtok_r+0x20>
    23b4:	f3 cf       	rjmp	.-26     	; 0x239c <strtok_r+0x12>
    23b6:	fb 01       	movw	r30, r22
    23b8:	21 91       	ld	r18, Z+
    23ba:	20 15       	cp	r18, r0
    23bc:	19 f4       	brne	.+6      	; 0x23c4 <strtok_r+0x3a>
    23be:	1e 92       	st	-X, r1
    23c0:	11 96       	adiw	r26, 0x01	; 1
    23c2:	06 c0       	rjmp	.+12     	; 0x23d0 <strtok_r+0x46>
    23c4:	22 23       	and	r18, r18
    23c6:	c1 f7       	brne	.-16     	; 0x23b8 <strtok_r+0x2e>
    23c8:	0d 90       	ld	r0, X+
    23ca:	00 20       	and	r0, r0
    23cc:	a1 f7       	brne	.-24     	; 0x23b6 <strtok_r+0x2c>
    23ce:	d0 01       	movw	r26, r0
    23d0:	fa 01       	movw	r30, r20
    23d2:	a1 93       	st	Z+, r26
    23d4:	b0 83       	st	Z, r27
    23d6:	08 95       	ret

000023d8 <__mulhi_const_10>:
    23d8:	7a e0       	ldi	r23, 0x0A	; 10
    23da:	97 9f       	mul	r25, r23
    23dc:	90 2d       	mov	r25, r0
    23de:	87 9f       	mul	r24, r23
    23e0:	80 2d       	mov	r24, r0
    23e2:	91 0d       	add	r25, r1
    23e4:	11 24       	eor	r1, r1
    23e6:	08 95       	ret

000023e8 <__do_global_dtors>:
    23e8:	12 e0       	ldi	r17, 0x02	; 2
    23ea:	c5 e6       	ldi	r28, 0x65	; 101
    23ec:	d2 e0       	ldi	r29, 0x02	; 2
    23ee:	04 c0       	rjmp	.+8      	; 0x23f8 <__do_global_dtors+0x10>
    23f0:	fe 01       	movw	r30, r28
    23f2:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__tablejump2__>
    23f6:	21 96       	adiw	r28, 0x01	; 1
    23f8:	c6 36       	cpi	r28, 0x66	; 102
    23fa:	d1 07       	cpc	r29, r17
    23fc:	c9 f7       	brne	.-14     	; 0x23f0 <__do_global_dtors+0x8>
    23fe:	f8 94       	cli

00002400 <__stop_program>:
    2400:	ff cf       	rjmp	.-2      	; 0x2400 <__stop_program>
