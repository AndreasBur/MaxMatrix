
Led_Anzeige.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000d2e  00000dc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800118  00800118  00000dda  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dda  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004049  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca4  00000000  00000000  0000512d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000179e  00000000  00000000  00005dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000888  00000000  00000000  00007570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010b4  00000000  00000000  00007df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003386  00000000  00000000  00008eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  0000c232  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 c0 01 	jmp	0x380	; 0x380 <__dtors_end>
   4:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
   8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
   c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  34:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__vector_13>
  38:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  40:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__vector_16>
  44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  54:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  58:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  5c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  60:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  64:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	03 08       	sbc	r0, r3
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 01       	movw	r0, r0
  70:	08 5f       	subi	r16, 0xF8	; 248
  72:	00 00       	nop
  74:	00 00       	nop
  76:	03 08       	sbc	r0, r3
  78:	03 00       	.word	0x0003	; ????
  7a:	03 00       	.word	0x0003	; ????
  7c:	00 05       	cpc	r16, r0
  7e:	08 14       	cp	r0, r8
  80:	3e 14       	cp	r3, r14
  82:	3e 14       	cp	r3, r14
  84:	04 08       	sbc	r0, r4
  86:	24 6a       	ori	r18, 0xA4	; 164
  88:	2b 12       	cpse	r2, r27
  8a:	00 05       	cpc	r16, r0
  8c:	08 63       	ori	r16, 0x38	; 56
  8e:	13 08       	sbc	r1, r3
  90:	64 63       	ori	r22, 0x34	; 52
  92:	05 08       	sbc	r0, r5
  94:	36 49       	sbci	r19, 0x96	; 150
  96:	56 20       	and	r5, r6
  98:	50 01       	movw	r10, r0
  9a:	08 03       	fmul	r16, r16
  9c:	00 00       	nop
  9e:	00 00       	nop
  a0:	03 08       	sbc	r0, r3
  a2:	1c 22       	and	r1, r28
  a4:	41 00       	.word	0x0041	; ????
  a6:	00 03       	mulsu	r16, r16
  a8:	08 41       	sbci	r16, 0x18	; 24
  aa:	22 1c       	adc	r2, r2
  ac:	00 00       	nop
  ae:	05 08       	sbc	r0, r5
  b0:	28 18       	sub	r2, r8
  b2:	0e 18       	sub	r0, r14
  b4:	28 05       	cpc	r18, r8
  b6:	08 08       	sbc	r0, r8
  b8:	08 3e       	cpi	r16, 0xE8	; 232
  ba:	08 08       	sbc	r0, r8
  bc:	02 08       	sbc	r0, r2
  be:	b0 70       	andi	r27, 0x00	; 0
  c0:	00 00       	nop
  c2:	00 04       	cpc	r0, r0
  c4:	08 08       	sbc	r0, r8
  c6:	08 08       	sbc	r0, r8
  c8:	08 00       	.word	0x0008	; ????
  ca:	02 08       	sbc	r0, r2
  cc:	60 60       	ori	r22, 0x00	; 0
  ce:	00 00       	nop
  d0:	00 04       	cpc	r0, r0
  d2:	08 60       	ori	r16, 0x08	; 8
  d4:	18 06       	cpc	r1, r24
  d6:	01 00       	.word	0x0001	; ????
  d8:	04 08       	sbc	r0, r4
  da:	3e 41       	sbci	r19, 0x1E	; 30
  dc:	41 3e       	cpi	r20, 0xE1	; 225
  de:	00 03       	mulsu	r16, r16
  e0:	08 42       	sbci	r16, 0x28	; 40
  e2:	7f 40       	sbci	r23, 0x0F	; 15
  e4:	00 00       	nop
  e6:	04 08       	sbc	r0, r4
  e8:	62 51       	subi	r22, 0x12	; 18
  ea:	49 46       	sbci	r20, 0x69	; 105
  ec:	00 04       	cpc	r0, r0
  ee:	08 22       	and	r0, r24
  f0:	41 49       	sbci	r20, 0x91	; 145
  f2:	36 00       	.word	0x0036	; ????
  f4:	04 08       	sbc	r0, r4
  f6:	18 14       	cp	r1, r8
  f8:	12 7f       	andi	r17, 0xF2	; 242
  fa:	00 04       	cpc	r0, r0
  fc:	08 27       	eor	r16, r24
  fe:	45 45       	sbci	r20, 0x55	; 85
 100:	39 00       	.word	0x0039	; ????
 102:	04 08       	sbc	r0, r4
 104:	3e 49       	sbci	r19, 0x9E	; 158
 106:	49 30       	cpi	r20, 0x09	; 9
 108:	00 04       	cpc	r0, r0
 10a:	08 61       	ori	r16, 0x18	; 24
 10c:	11 09       	sbc	r17, r1
 10e:	07 00       	.word	0x0007	; ????
 110:	04 08       	sbc	r0, r4
 112:	36 49       	sbci	r19, 0x96	; 150
 114:	49 36       	cpi	r20, 0x69	; 105
 116:	00 04       	cpc	r0, r0
 118:	08 06       	cpc	r0, r24
 11a:	49 49       	sbci	r20, 0x99	; 153
 11c:	3e 00       	.word	0x003e	; ????
 11e:	02 08       	sbc	r0, r2
 120:	50 00       	.word	0x0050	; ????
 122:	00 00       	nop
 124:	00 02       	muls	r16, r16
 126:	08 80       	ld	r0, Y
 128:	50 00       	.word	0x0050	; ????
 12a:	00 00       	nop
 12c:	03 08       	sbc	r0, r3
 12e:	10 28       	or	r1, r0
 130:	44 00       	.word	0x0044	; ????
 132:	00 03       	mulsu	r16, r16
 134:	08 14       	cp	r0, r8
 136:	14 14       	cp	r1, r4
 138:	00 00       	nop
 13a:	03 08       	sbc	r0, r3
 13c:	44 28       	or	r4, r4
 13e:	10 00       	.word	0x0010	; ????
 140:	00 04       	cpc	r0, r0
 142:	08 02       	muls	r16, r24
 144:	59 09       	sbc	r21, r9
 146:	06 00       	.word	0x0006	; ????
 148:	05 08       	sbc	r0, r5
 14a:	3e 49       	sbci	r19, 0x9E	; 158
 14c:	55 5d       	subi	r21, 0xD5	; 213
 14e:	0e 04       	cpc	r0, r14
 150:	08 7e       	andi	r16, 0xE8	; 232
 152:	11 11       	cpse	r17, r1
 154:	7e 00       	.word	0x007e	; ????
 156:	04 08       	sbc	r0, r4
 158:	7f 49       	sbci	r23, 0x9F	; 159
 15a:	49 36       	cpi	r20, 0x69	; 105
 15c:	00 04       	cpc	r0, r0
 15e:	08 3e       	cpi	r16, 0xE8	; 232
 160:	41 41       	sbci	r20, 0x11	; 17
 162:	22 00       	.word	0x0022	; ????
 164:	04 08       	sbc	r0, r4
 166:	7f 41       	sbci	r23, 0x1F	; 31
 168:	41 3e       	cpi	r20, 0xE1	; 225
 16a:	00 04       	cpc	r0, r0
 16c:	08 7f       	andi	r16, 0xF8	; 248
 16e:	49 49       	sbci	r20, 0x99	; 153
 170:	41 00       	.word	0x0041	; ????
 172:	04 08       	sbc	r0, r4
 174:	7f 09       	sbc	r23, r15
 176:	09 01       	movw	r0, r18
 178:	00 04       	cpc	r0, r0
 17a:	08 3e       	cpi	r16, 0xE8	; 232
 17c:	41 49       	sbci	r20, 0x91	; 145
 17e:	7a 00       	.word	0x007a	; ????
 180:	04 08       	sbc	r0, r4
 182:	7f 08       	sbc	r7, r15
 184:	08 7f       	andi	r16, 0xF8	; 248
 186:	00 03       	mulsu	r16, r16
 188:	08 41       	sbci	r16, 0x18	; 24
 18a:	7f 41       	sbci	r23, 0x1F	; 31
 18c:	00 00       	nop
 18e:	04 08       	sbc	r0, r4
 190:	30 40       	sbci	r19, 0x00	; 0
 192:	41 3f       	cpi	r20, 0xF1	; 241
 194:	00 04       	cpc	r0, r0
 196:	08 7f       	andi	r16, 0xF8	; 248
 198:	08 14       	cp	r0, r8
 19a:	63 00       	.word	0x0063	; ????
 19c:	04 08       	sbc	r0, r4
 19e:	7f 40       	sbci	r23, 0x0F	; 15
 1a0:	40 40       	sbci	r20, 0x00	; 0
 1a2:	00 05       	cpc	r16, r0
 1a4:	08 7f       	andi	r16, 0xF8	; 248
 1a6:	02 0c       	add	r0, r2
 1a8:	02 7f       	andi	r16, 0xF2	; 242
 1aa:	05 08       	sbc	r0, r5
 1ac:	7f 04       	cpc	r7, r15
 1ae:	08 10       	cpse	r0, r8
 1b0:	7f 04       	cpc	r7, r15
 1b2:	08 3e       	cpi	r16, 0xE8	; 232
 1b4:	41 41       	sbci	r20, 0x11	; 17
 1b6:	3e 00       	.word	0x003e	; ????
 1b8:	04 08       	sbc	r0, r4
 1ba:	7f 09       	sbc	r23, r15
 1bc:	09 06       	cpc	r0, r25
 1be:	00 04       	cpc	r0, r0
 1c0:	08 3e       	cpi	r16, 0xE8	; 232
 1c2:	41 41       	sbci	r20, 0x11	; 17
 1c4:	be 00       	.word	0x00be	; ????
 1c6:	04 08       	sbc	r0, r4
 1c8:	7f 09       	sbc	r23, r15
 1ca:	09 76       	andi	r16, 0x69	; 105
 1cc:	00 04       	cpc	r0, r0
 1ce:	08 46       	sbci	r16, 0x68	; 104
 1d0:	49 49       	sbci	r20, 0x99	; 153
 1d2:	32 00       	.word	0x0032	; ????
 1d4:	05 08       	sbc	r0, r5
 1d6:	01 01       	movw	r0, r2
 1d8:	7f 01       	movw	r14, r30
 1da:	01 04       	cpc	r0, r1
 1dc:	08 3f       	cpi	r16, 0xF8	; 248
 1de:	40 40       	sbci	r20, 0x00	; 0
 1e0:	3f 00       	.word	0x003f	; ????
 1e2:	05 08       	sbc	r0, r5
 1e4:	0f 30       	cpi	r16, 0x0F	; 15
 1e6:	40 30       	cpi	r20, 0x00	; 0
 1e8:	0f 05       	cpc	r16, r15
 1ea:	08 3f       	cpi	r16, 0xF8	; 248
 1ec:	40 38       	cpi	r20, 0x80	; 128
 1ee:	40 3f       	cpi	r20, 0xF0	; 240
 1f0:	05 08       	sbc	r0, r5
 1f2:	63 14       	cp	r6, r3
 1f4:	08 14       	cp	r0, r8
 1f6:	63 05       	cpc	r22, r3
 1f8:	08 07       	cpc	r16, r24
 1fa:	08 70       	andi	r16, 0x08	; 8
 1fc:	08 07       	cpc	r16, r24
 1fe:	04 08       	sbc	r0, r4
 200:	61 51       	subi	r22, 0x11	; 17
 202:	49 47       	sbci	r20, 0x79	; 121
 204:	00 02       	muls	r16, r16
 206:	08 7f       	andi	r16, 0xF8	; 248
 208:	41 00       	.word	0x0041	; ????
 20a:	00 00       	nop
 20c:	04 08       	sbc	r0, r4
 20e:	01 06       	cpc	r0, r17
 210:	18 60       	ori	r17, 0x08	; 8
 212:	00 02       	muls	r16, r16
 214:	08 41       	sbci	r16, 0x18	; 24
 216:	7f 00       	.word	0x007f	; ????
 218:	00 00       	nop
 21a:	03 08       	sbc	r0, r3
 21c:	02 01       	movw	r0, r4
 21e:	02 00       	.word	0x0002	; ????
 220:	00 04       	cpc	r0, r0
 222:	08 40       	sbci	r16, 0x08	; 8
 224:	40 40       	sbci	r20, 0x00	; 0
 226:	40 00       	.word	0x0040	; ????
 228:	02 08       	sbc	r0, r2
 22a:	01 02       	muls	r16, r17
 22c:	00 00       	nop
 22e:	00 04       	cpc	r0, r0
 230:	08 20       	and	r0, r8
 232:	54 54       	subi	r21, 0x44	; 68
 234:	78 00       	.word	0x0078	; ????
 236:	04 08       	sbc	r0, r4
 238:	7f 44       	sbci	r23, 0x4F	; 79
 23a:	44 38       	cpi	r20, 0x84	; 132
 23c:	00 04       	cpc	r0, r0
 23e:	08 38       	cpi	r16, 0x88	; 136
 240:	44 44       	sbci	r20, 0x44	; 68
 242:	28 00       	.word	0x0028	; ????
 244:	04 08       	sbc	r0, r4
 246:	38 44       	sbci	r19, 0x48	; 72
 248:	44 7f       	andi	r20, 0xF4	; 244
 24a:	00 04       	cpc	r0, r0
 24c:	08 38       	cpi	r16, 0x88	; 136
 24e:	54 54       	subi	r21, 0x44	; 68
 250:	18 00       	.word	0x0018	; ????
 252:	03 08       	sbc	r0, r3
 254:	04 7e       	andi	r16, 0xE4	; 228
 256:	05 00       	.word	0x0005	; ????
 258:	00 04       	cpc	r0, r0
 25a:	08 98       	cbi	0x01, 0	; 1
 25c:	a4 a4       	ldd	r10, Z+44	; 0x2c
 25e:	78 00       	.word	0x0078	; ????
 260:	04 08       	sbc	r0, r4
 262:	7f 04       	cpc	r7, r15
 264:	04 78       	andi	r16, 0x84	; 132
 266:	00 03       	mulsu	r16, r16
 268:	08 44       	sbci	r16, 0x48	; 72
 26a:	7d 40       	sbci	r23, 0x0D	; 13
 26c:	00 00       	nop
 26e:	04 08       	sbc	r0, r4
 270:	40 80       	ld	r4, Z
 272:	84 7d       	andi	r24, 0xD4	; 212
 274:	00 04       	cpc	r0, r0
 276:	08 7f       	andi	r16, 0xF8	; 248
 278:	10 28       	or	r1, r0
 27a:	44 00       	.word	0x0044	; ????
 27c:	03 08       	sbc	r0, r3
 27e:	41 7f       	andi	r20, 0xF1	; 241
 280:	40 00       	.word	0x0040	; ????
 282:	00 05       	cpc	r16, r0
 284:	08 7c       	andi	r16, 0xC8	; 200
 286:	04 7c       	andi	r16, 0xC4	; 196
 288:	04 78       	andi	r16, 0x84	; 132
 28a:	04 08       	sbc	r0, r4
 28c:	7c 04       	cpc	r7, r12
 28e:	04 78       	andi	r16, 0x84	; 132
 290:	00 04       	cpc	r0, r0
 292:	08 38       	cpi	r16, 0x88	; 136
 294:	44 44       	sbci	r20, 0x44	; 68
 296:	38 00       	.word	0x0038	; ????
 298:	04 08       	sbc	r0, r4
 29a:	fc 24       	eor	r15, r12
 29c:	24 18       	sub	r2, r4
 29e:	00 04       	cpc	r0, r0
 2a0:	08 18       	sub	r0, r8
 2a2:	24 24       	eor	r2, r4
 2a4:	fc 00       	.word	0x00fc	; ????
 2a6:	04 08       	sbc	r0, r4
 2a8:	7c 08       	sbc	r7, r12
 2aa:	04 04       	cpc	r0, r4
 2ac:	00 04       	cpc	r0, r0
 2ae:	08 48       	sbci	r16, 0x88	; 136
 2b0:	54 54       	subi	r21, 0x44	; 68
 2b2:	24 00       	.word	0x0024	; ????
 2b4:	03 08       	sbc	r0, r3
 2b6:	04 3f       	cpi	r16, 0xF4	; 244
 2b8:	44 00       	.word	0x0044	; ????
 2ba:	00 04       	cpc	r0, r0
 2bc:	08 3c       	cpi	r16, 0xC8	; 200
 2be:	40 40       	sbci	r20, 0x00	; 0
 2c0:	7c 00       	.word	0x007c	; ????
 2c2:	05 08       	sbc	r0, r5
 2c4:	1c 20       	and	r1, r12
 2c6:	40 20       	and	r4, r0
 2c8:	1c 05       	cpc	r17, r12
 2ca:	08 3c       	cpi	r16, 0xC8	; 200
 2cc:	40 3c       	cpi	r20, 0xC0	; 192
 2ce:	40 3c       	cpi	r20, 0xC0	; 192
 2d0:	05 08       	sbc	r0, r5
 2d2:	44 28       	or	r4, r4
 2d4:	10 28       	or	r1, r0
 2d6:	44 04       	cpc	r4, r4
 2d8:	08 9c       	mul	r0, r8
 2da:	a0 a0       	ldd	r10, Z+32	; 0x20
 2dc:	7c 00       	.word	0x007c	; ????
 2de:	03 08       	sbc	r0, r3
 2e0:	64 54       	subi	r22, 0x44	; 68
 2e2:	4c 00       	.word	0x004c	; ????
 2e4:	00 03       	mulsu	r16, r16
 2e6:	08 08       	sbc	r0, r8
 2e8:	36 41       	sbci	r19, 0x16	; 22
 2ea:	00 00       	nop
 2ec:	01 08       	sbc	r0, r1
 2ee:	7f 00       	.word	0x007f	; ????
 2f0:	00 00       	nop
 2f2:	00 03       	mulsu	r16, r16
 2f4:	08 41       	sbci	r16, 0x18	; 24
 2f6:	36 08       	sbc	r3, r6
 2f8:	00 00       	nop
 2fa:	04 08       	sbc	r0, r4
 2fc:	08 04       	cpc	r0, r8
 2fe:	08 04       	cpc	r0, r8
 300:	00 04       	cpc	r0, r0
 302:	08 7c       	andi	r16, 0xC8	; 200
 304:	13 13       	cpse	r17, r19
 306:	7c 00       	.word	0x007c	; ????
 308:	04 08       	sbc	r0, r4
 30a:	3c 43       	sbci	r19, 0x3C	; 60
 30c:	43 3c       	cpi	r20, 0xC3	; 195
 30e:	00 04       	cpc	r0, r0
 310:	08 3e       	cpi	r16, 0xE8	; 232
 312:	41 41       	sbci	r20, 0x11	; 17
 314:	3e 00       	.word	0x003e	; ????
 316:	04 08       	sbc	r0, r4
 318:	20 56       	subi	r18, 0x60	; 96
 31a:	56 78       	andi	r21, 0x86	; 134
 31c:	00 04       	cpc	r0, r0
 31e:	08 38       	cpi	r16, 0x88	; 136
 320:	46 46       	sbci	r20, 0x66	; 102
 322:	38 00       	.word	0x0038	; ????
 324:	04 08       	sbc	r0, r4
 326:	3c 42       	sbci	r19, 0x2C	; 44
 328:	42 7c       	andi	r20, 0xC2	; 194
	...

0000032b <digital_pin_to_timer_PGM>:
 32b:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
 33b:	00 00 00 00                                         ....

0000033f <digital_pin_to_bit_mask_PGM>:
 33f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
 34f:	04 08 10 20                                         ... 

00000353 <digital_pin_to_port_PGM>:
 353:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
 363:	03 03 03 03                                         ....

00000367 <port_to_output_PGM>:
 367:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000371 <port_to_mode_PGM>:
 371:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

0000037c <__ctors_start>:
 37c:	09 02       	muls	r16, r25

0000037e <__ctors_end>:
 37e:	13 02       	muls	r17, r19

00000380 <__dtors_end>:
 380:	11 24       	eor	r1, r1
 382:	1f be       	out	0x3f, r1	; 63
 384:	cf ef       	ldi	r28, 0xFF	; 255
 386:	d8 e0       	ldi	r29, 0x08	; 8
 388:	de bf       	out	0x3e, r29	; 62
 38a:	cd bf       	out	0x3d, r28	; 61

0000038c <__do_copy_data>:
 38c:	11 e0       	ldi	r17, 0x01	; 1
 38e:	a0 e0       	ldi	r26, 0x00	; 0
 390:	b1 e0       	ldi	r27, 0x01	; 1
 392:	ee e2       	ldi	r30, 0x2E	; 46
 394:	fd e0       	ldi	r31, 0x0D	; 13
 396:	02 c0       	rjmp	.+4      	; 0x39c <__do_copy_data+0x10>
 398:	05 90       	lpm	r0, Z+
 39a:	0d 92       	st	X+, r0
 39c:	a8 31       	cpi	r26, 0x18	; 24
 39e:	b1 07       	cpc	r27, r17
 3a0:	d9 f7       	brne	.-10     	; 0x398 <__do_copy_data+0xc>

000003a2 <__do_clear_bss>:
 3a2:	21 e0       	ldi	r18, 0x01	; 1
 3a4:	a8 e1       	ldi	r26, 0x18	; 24
 3a6:	b1 e0       	ldi	r27, 0x01	; 1
 3a8:	01 c0       	rjmp	.+2      	; 0x3ac <.do_clear_bss_start>

000003aa <.do_clear_bss_loop>:
 3aa:	1d 92       	st	X+, r1

000003ac <.do_clear_bss_start>:
 3ac:	ad 33       	cpi	r26, 0x3D	; 61
 3ae:	b2 07       	cpc	r27, r18
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <.do_clear_bss_loop>

000003b2 <__do_global_ctors>:
 3b2:	11 e0       	ldi	r17, 0x01	; 1
 3b4:	cf eb       	ldi	r28, 0xBF	; 191
 3b6:	d1 e0       	ldi	r29, 0x01	; 1
 3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <__do_global_ctors+0x10>
 3ba:	21 97       	sbiw	r28, 0x01	; 1
 3bc:	fe 01       	movw	r30, r28
 3be:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__tablejump2__>
 3c2:	ce 3b       	cpi	r28, 0xBE	; 190
 3c4:	d1 07       	cpc	r29, r17
 3c6:	c9 f7       	brne	.-14     	; 0x3ba <__do_global_ctors+0x8>
 3c8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <main>
 3cc:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__do_global_dtors>

000003d0 <__bad_interrupt>:
 3d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d4 <setup>:
/**********************************************************************************************************************
 *  ARDUINO setup
 *********************************************************************************************************************/
void setup()
{
    Matrix.init();          // module initialize
 3d4:	88 e1       	ldi	r24, 0x18	; 24
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <_ZN9MaxMatrix4initEv>
    Matrix.setIntensity(5); // dot matrix intensity 0-15
 3dc:	65 e0       	ldi	r22, 0x05	; 5
 3de:	88 e1       	ldi	r24, 0x18	; 24
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <_ZN9MaxMatrix12setIntensityEh>

000003e6 <loop>:
/**********************************************************************************************************************
 *  ARDUINO loop
 *********************************************************************************************************************/
void loop() 
{
    Matrix.shiftTask();
 3e6:	88 e1       	ldi	r24, 0x18	; 24
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_ZN9MaxMatrix9shiftTaskEv>
    if(Matrix.getState() == MAXMATRIX_STATE_READY)
 3ee:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <__data_end+0x3>
 3f2:	82 30       	cpi	r24, 0x02	; 2
 3f4:	51 f4       	brne	.+20     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
    {
        Matrix.clear();
 3f6:	88 e1       	ldi	r24, 0x18	; 24
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	0e 94 c3 02 	call	0x586	; 0x586 <_ZN9MaxMatrix5clearEv>
        Matrix.setTextWithShift("Andreas Burnickl");
 3fe:	66 e0       	ldi	r22, 0x06	; 6
 400:	71 e0       	ldi	r23, 0x01	; 1
 402:	88 e1       	ldi	r24, 0x18	; 24
 404:	91 e0       	ldi	r25, 0x01	; 1
 406:	0e 94 3f 03 	call	0x67e	; 0x67e <_ZN9MaxMatrix16setTextWithShiftEPc>
    }
    delayMicroseconds(500);
 40a:	84 ef       	ldi	r24, 0xF4	; 244
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	0c 94 66 05 	jmp	0xacc	; 0xacc <delayMicroseconds>

00000412 <_GLOBAL__sub_I_data>:
 *  GLOBAL DATA TYPES AND STRUCTURES
 *********************************************************************************************************************/
int data = 12;    // DIN pin of MAX7219 module
int load = 10;    // CS pin of MAX7219 module
int clock = 11;   // CLK pin of MAX7219 module
MaxMatrix Matrix(data, load, clock);
 412:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 416:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <load>
 41a:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <data>
 41e:	88 e1       	ldi	r24, 0x18	; 24
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	0c 94 17 02 	jmp	0x42e	; 0x42e <_ZN9MaxMatrixC1Ehhh>

00000426 <_GLOBAL__sub_D_data>:
 426:	88 e1       	ldi	r24, 0x18	; 24
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	0c 94 31 02 	jmp	0x462	; 0x462 <_ZN9MaxMatrixD1Ev>

0000042e <_ZN9MaxMatrixC1Ehhh>:
			if(CharColumn > MAXMATRIX_NUMBER_OF_COLUMNS) break;
		}
		String++;
	}
	return E_OK;
} /* setText */
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	fc 01       	movw	r30, r24
 434:	60 83       	st	Z, r22
 436:	41 83       	std	Z+1, r20	; 0x01
 438:	22 83       	std	Z+2, r18	; 0x02
 43a:	15 8a       	std	Z+21, r1	; 0x15
 43c:	14 8a       	std	Z+20, r1	; 0x14
 43e:	13 8a       	std	Z+19, r1	; 0x13
 440:	13 82       	std	Z+3, r1	; 0x03
 442:	ec 01       	movw	r28, r24
 444:	24 96       	adiw	r28, 0x04	; 4
 446:	dc 01       	movw	r26, r24
 448:	1c 96       	adiw	r26, 0x0c	; 12
 44a:	19 92       	st	Y+, r1
 44c:	ca 17       	cp	r28, r26
 44e:	db 07       	cpc	r29, r27
 450:	e1 f7       	brne	.-8      	; 0x44a <_ZN9MaxMatrixC1Ehhh+0x1c>
 452:	73 96       	adiw	r30, 0x13	; 19
 454:	1d 92       	st	X+, r1
 456:	ae 17       	cp	r26, r30
 458:	bf 07       	cpc	r27, r31
 45a:	e1 f7       	brne	.-8      	; 0x454 <_ZN9MaxMatrixC1Ehhh+0x26>
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <_ZN9MaxMatrixD1Ev>:
 462:	08 95       	ret

00000464 <_ZN9MaxMatrix13RegisterWriteEhh>:
 464:	ef 92       	push	r14
 466:	ff 92       	push	r15
 468:	1f 93       	push	r17
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	1f 92       	push	r1
 470:	cd b7       	in	r28, 0x3d	; 61
 472:	de b7       	in	r29, 0x3e	; 62
 474:	7c 01       	movw	r14, r24
 476:	26 2f       	mov	r18, r22
 478:	14 2f       	mov	r17, r20
 47a:	60 e0       	ldi	r22, 0x00	; 0
 47c:	fc 01       	movw	r30, r24
 47e:	81 81       	ldd	r24, Z+1	; 0x01
 480:	29 83       	std	Y+1, r18	; 0x01
 482:	0e 94 10 06 	call	0xc20	; 0xc20 <digitalWrite>
 486:	29 81       	ldd	r18, Y+1	; 0x01
 488:	41 e0       	ldi	r20, 0x01	; 1
 48a:	f7 01       	movw	r30, r14
 48c:	62 81       	ldd	r22, Z+2	; 0x02
 48e:	80 81       	ld	r24, Z
 490:	0e 94 40 06 	call	0xc80	; 0xc80 <shiftOut>
 494:	21 2f       	mov	r18, r17
 496:	41 e0       	ldi	r20, 0x01	; 1
 498:	f7 01       	movw	r30, r14
 49a:	62 81       	ldd	r22, Z+2	; 0x02
 49c:	80 81       	ld	r24, Z
 49e:	0e 94 40 06 	call	0xc80	; 0xc80 <shiftOut>
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	f7 01       	movw	r30, r14
 4a6:	81 81       	ldd	r24, Z+1	; 0x01
 4a8:	0e 94 10 06 	call	0xc20	; 0xc20 <digitalWrite>
 4ac:	61 e0       	ldi	r22, 0x01	; 1
 4ae:	f7 01       	movw	r30, r14
 4b0:	81 81       	ldd	r24, Z+1	; 0x01
 4b2:	0f 90       	pop	r0
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	1f 91       	pop	r17
 4ba:	ff 90       	pop	r15
 4bc:	ef 90       	pop	r14
 4be:	0c 94 10 06 	jmp	0xc20	; 0xc20 <digitalWrite>

000004c2 <_ZN9MaxMatrix12setIntensityEh>:
 4c2:	60 31       	cpi	r22, 0x10	; 16
 4c4:	30 f4       	brcc	.+12     	; 0x4d2 <_ZN9MaxMatrix12setIntensityEh+0x10>
 4c6:	46 2f       	mov	r20, r22
 4c8:	6a e0       	ldi	r22, 0x0A	; 10
 4ca:	0e 94 32 02 	call	0x464	; 0x464 <_ZN9MaxMatrix13RegisterWriteEhh>
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	08 95       	ret
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	08 95       	ret

000004d6 <_ZN9MaxMatrix9setColumnEhh>:
 4d6:	0f 93       	push	r16
 4d8:	1f 93       	push	r17
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	68 30       	cpi	r22, 0x08	; 8
 4e0:	08 f5       	brcc	.+66     	; 0x524 <_ZN9MaxMatrix9setColumnEhh+0x4e>
 4e2:	04 2f       	mov	r16, r20
 4e4:	16 2f       	mov	r17, r22
 4e6:	ec 01       	movw	r28, r24
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	89 81       	ldd	r24, Y+1	; 0x01
 4ec:	0e 94 10 06 	call	0xc20	; 0xc20 <digitalWrite>
 4f0:	21 e0       	ldi	r18, 0x01	; 1
 4f2:	21 0f       	add	r18, r17
 4f4:	41 e0       	ldi	r20, 0x01	; 1
 4f6:	6a 81       	ldd	r22, Y+2	; 0x02
 4f8:	88 81       	ld	r24, Y
 4fa:	0e 94 40 06 	call	0xc80	; 0xc80 <shiftOut>
 4fe:	20 2f       	mov	r18, r16
 500:	41 e0       	ldi	r20, 0x01	; 1
 502:	6a 81       	ldd	r22, Y+2	; 0x02
 504:	88 81       	ld	r24, Y
 506:	0e 94 40 06 	call	0xc80	; 0xc80 <shiftOut>
 50a:	60 e0       	ldi	r22, 0x00	; 0
 50c:	89 81       	ldd	r24, Y+1	; 0x01
 50e:	0e 94 10 06 	call	0xc20	; 0xc20 <digitalWrite>
 512:	61 e0       	ldi	r22, 0x01	; 1
 514:	89 81       	ldd	r24, Y+1	; 0x01
 516:	0e 94 10 06 	call	0xc20	; 0xc20 <digitalWrite>
 51a:	c1 0f       	add	r28, r17
 51c:	d1 1d       	adc	r29, r1
 51e:	0c 83       	std	Y+4, r16	; 0x04
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	01 c0       	rjmp	.+2      	; 0x526 <_ZN9MaxMatrix9setColumnEhh+0x50>
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	1f 91       	pop	r17
 52c:	0f 91       	pop	r16
 52e:	08 95       	ret

00000530 <_ZN9MaxMatrix21setColumnOnAllModulesEhh>:
 530:	0f 93       	push	r16
 532:	1f 93       	push	r17
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
 538:	68 30       	cpi	r22, 0x08	; 8
 53a:	f8 f4       	brcc	.+62     	; 0x57a <_ZN9MaxMatrix21setColumnOnAllModulesEhh+0x4a>
 53c:	04 2f       	mov	r16, r20
 53e:	16 2f       	mov	r17, r22
 540:	ec 01       	movw	r28, r24
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	89 81       	ldd	r24, Y+1	; 0x01
 546:	0e 94 10 06 	call	0xc20	; 0xc20 <digitalWrite>
 54a:	21 e0       	ldi	r18, 0x01	; 1
 54c:	21 0f       	add	r18, r17
 54e:	41 e0       	ldi	r20, 0x01	; 1
 550:	6a 81       	ldd	r22, Y+2	; 0x02
 552:	88 81       	ld	r24, Y
 554:	0e 94 40 06 	call	0xc80	; 0xc80 <shiftOut>
 558:	20 2f       	mov	r18, r16
 55a:	41 e0       	ldi	r20, 0x01	; 1
 55c:	6a 81       	ldd	r22, Y+2	; 0x02
 55e:	88 81       	ld	r24, Y
 560:	0e 94 40 06 	call	0xc80	; 0xc80 <shiftOut>
 564:	0c 83       	std	Y+4, r16	; 0x04
 566:	60 e0       	ldi	r22, 0x00	; 0
 568:	89 81       	ldd	r24, Y+1	; 0x01
 56a:	0e 94 10 06 	call	0xc20	; 0xc20 <digitalWrite>
 56e:	61 e0       	ldi	r22, 0x01	; 1
 570:	89 81       	ldd	r24, Y+1	; 0x01
 572:	0e 94 10 06 	call	0xc20	; 0xc20 <digitalWrite>
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	01 c0       	rjmp	.+2      	; 0x57c <_ZN9MaxMatrix21setColumnOnAllModulesEhh+0x4c>
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	1f 91       	pop	r17
 582:	0f 91       	pop	r16
 584:	08 95       	ret

00000586 <_ZN9MaxMatrix5clearEv>:
 586:	1f 93       	push	r17
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	ec 01       	movw	r28, r24
 58e:	10 e0       	ldi	r17, 0x00	; 0
 590:	40 e0       	ldi	r20, 0x00	; 0
 592:	61 2f       	mov	r22, r17
 594:	ce 01       	movw	r24, r28
 596:	0e 94 98 02 	call	0x530	; 0x530 <_ZN9MaxMatrix21setColumnOnAllModulesEhh>
 59a:	1f 5f       	subi	r17, 0xFF	; 255
 59c:	18 30       	cpi	r17, 0x08	; 8
 59e:	c1 f7       	brne	.-16     	; 0x590 <_ZN9MaxMatrix5clearEv+0xa>
 5a0:	fe 01       	movw	r30, r28
 5a2:	34 96       	adiw	r30, 0x04	; 4
 5a4:	2c 96       	adiw	r28, 0x0c	; 12
 5a6:	11 92       	st	Z+, r1
 5a8:	ec 17       	cp	r30, r28
 5aa:	fd 07       	cpc	r31, r29
 5ac:	e1 f7       	brne	.-8      	; 0x5a6 <_ZN9MaxMatrix5clearEv+0x20>
 5ae:	df 91       	pop	r29
 5b0:	cf 91       	pop	r28
 5b2:	1f 91       	pop	r17
 5b4:	08 95       	ret

000005b6 <_ZN9MaxMatrix4initEv>:
 5b6:	cf 93       	push	r28
 5b8:	df 93       	push	r29
 5ba:	ec 01       	movw	r28, r24
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	8b 83       	std	Y+3, r24	; 0x03
 5c0:	61 e0       	ldi	r22, 0x01	; 1
 5c2:	88 81       	ld	r24, Y
 5c4:	0e 94 d4 05 	call	0xba8	; 0xba8 <pinMode>
 5c8:	61 e0       	ldi	r22, 0x01	; 1
 5ca:	8a 81       	ldd	r24, Y+2	; 0x02
 5cc:	0e 94 d4 05 	call	0xba8	; 0xba8 <pinMode>
 5d0:	61 e0       	ldi	r22, 0x01	; 1
 5d2:	89 81       	ldd	r24, Y+1	; 0x01
 5d4:	0e 94 d4 05 	call	0xba8	; 0xba8 <pinMode>
 5d8:	61 e0       	ldi	r22, 0x01	; 1
 5da:	8a 81       	ldd	r24, Y+2	; 0x02
 5dc:	0e 94 10 06 	call	0xc20	; 0xc20 <digitalWrite>
 5e0:	47 e0       	ldi	r20, 0x07	; 7
 5e2:	6b e0       	ldi	r22, 0x0B	; 11
 5e4:	ce 01       	movw	r24, r28
 5e6:	0e 94 32 02 	call	0x464	; 0x464 <_ZN9MaxMatrix13RegisterWriteEhh>
 5ea:	40 e0       	ldi	r20, 0x00	; 0
 5ec:	69 e0       	ldi	r22, 0x09	; 9
 5ee:	ce 01       	movw	r24, r28
 5f0:	0e 94 32 02 	call	0x464	; 0x464 <_ZN9MaxMatrix13RegisterWriteEhh>
 5f4:	41 e0       	ldi	r20, 0x01	; 1
 5f6:	6c e0       	ldi	r22, 0x0C	; 12
 5f8:	ce 01       	movw	r24, r28
 5fa:	0e 94 32 02 	call	0x464	; 0x464 <_ZN9MaxMatrix13RegisterWriteEhh>
 5fe:	40 e0       	ldi	r20, 0x00	; 0
 600:	6f e0       	ldi	r22, 0x0F	; 15
 602:	ce 01       	movw	r24, r28
 604:	0e 94 32 02 	call	0x464	; 0x464 <_ZN9MaxMatrix13RegisterWriteEhh>
 608:	ce 01       	movw	r24, r28
 60a:	0e 94 c3 02 	call	0x586	; 0x586 <_ZN9MaxMatrix5clearEv>
 60e:	64 e0       	ldi	r22, 0x04	; 4
 610:	ce 01       	movw	r24, r28
 612:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_ZN9MaxMatrix12setIntensityEh>
 616:	82 e0       	ldi	r24, 0x02	; 2
 618:	8b 83       	std	Y+3, r24	; 0x03
 61a:	df 91       	pop	r29
 61c:	cf 91       	pop	r28
 61e:	08 95       	ret

00000620 <_ZN9MaxMatrix6setDotEhhb>:
 620:	cf 93       	push	r28
 622:	36 2f       	mov	r19, r22
 624:	c4 2f       	mov	r28, r20
 626:	68 30       	cpi	r22, 0x08	; 8
 628:	38 f5       	brcc	.+78     	; 0x678 <_ZN9MaxMatrix6setDotEhhb+0x58>
 62a:	48 30       	cpi	r20, 0x08	; 8
 62c:	28 f5       	brcc	.+74     	; 0x678 <_ZN9MaxMatrix6setDotEhhb+0x58>
 62e:	e6 2f       	mov	r30, r22
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	dc 01       	movw	r26, r24
 634:	ae 0f       	add	r26, r30
 636:	bf 1f       	adc	r27, r31
 638:	41 e0       	ldi	r20, 0x01	; 1
 63a:	50 e0       	ldi	r21, 0x00	; 0
 63c:	60 e0       	ldi	r22, 0x00	; 0
 63e:	70 e0       	ldi	r23, 0x00	; 0
 640:	04 c0       	rjmp	.+8      	; 0x64a <_ZN9MaxMatrix6setDotEhhb+0x2a>
 642:	44 0f       	add	r20, r20
 644:	55 1f       	adc	r21, r21
 646:	66 1f       	adc	r22, r22
 648:	77 1f       	adc	r23, r23
 64a:	ca 95       	dec	r28
 64c:	d2 f7       	brpl	.-12     	; 0x642 <_ZN9MaxMatrix6setDotEhhb+0x22>
 64e:	22 23       	and	r18, r18
 650:	29 f0       	breq	.+10     	; 0x65c <_ZN9MaxMatrix6setDotEhhb+0x3c>
 652:	14 96       	adiw	r26, 0x04	; 4
 654:	2c 91       	ld	r18, X
 656:	14 97       	sbiw	r26, 0x04	; 4
 658:	42 2b       	or	r20, r18
 65a:	05 c0       	rjmp	.+10     	; 0x666 <_ZN9MaxMatrix6setDotEhhb+0x46>
 65c:	40 95       	com	r20
 65e:	14 96       	adiw	r26, 0x04	; 4
 660:	2c 91       	ld	r18, X
 662:	14 97       	sbiw	r26, 0x04	; 4
 664:	42 23       	and	r20, r18
 666:	14 96       	adiw	r26, 0x04	; 4
 668:	4c 93       	st	X, r20
 66a:	e8 0f       	add	r30, r24
 66c:	f9 1f       	adc	r31, r25
 66e:	44 81       	ldd	r20, Z+4	; 0x04
 670:	63 2f       	mov	r22, r19
 672:	cf 91       	pop	r28
 674:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <_ZN9MaxMatrix9setColumnEhh>
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	cf 91       	pop	r28
 67c:	08 95       	ret

0000067e <_ZN9MaxMatrix16setTextWithShiftEPc>:
 67e:	fc 01       	movw	r30, r24
 680:	61 15       	cp	r22, r1
 682:	71 05       	cpc	r23, r1
 684:	39 f0       	breq	.+14     	; 0x694 <_ZN9MaxMatrix16setTextWithShiftEPc+0x16>
 686:	13 8a       	std	Z+19, r1	; 0x13
 688:	75 8b       	std	Z+21, r23	; 0x15
 68a:	64 8b       	std	Z+20, r22	; 0x14
 68c:	83 e0       	ldi	r24, 0x03	; 3
 68e:	83 83       	std	Z+3, r24	; 0x03
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	08 95       	ret
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	08 95       	ret

00000698 <_ZN9MaxMatrix9getSpriteEhPA7_h>:
 698:	65 36       	cpi	r22, 0x65	; 101
 69a:	68 f4       	brcc	.+26     	; 0x6b6 <_ZN9MaxMatrix9getSpriteEhPA7_h+0x1e>
 69c:	ca 01       	movw	r24, r20
 69e:	27 e0       	ldi	r18, 0x07	; 7
 6a0:	62 9f       	mul	r22, r18
 6a2:	b0 01       	movw	r22, r0
 6a4:	11 24       	eor	r1, r1
 6a6:	68 59       	subi	r22, 0x98	; 152
 6a8:	7f 4f       	sbci	r23, 0xFF	; 255
 6aa:	47 e0       	ldi	r20, 0x07	; 7
 6ac:	50 e0       	ldi	r21, 0x00	; 0
 6ae:	0e 94 81 06 	call	0xd02	; 0xd02 <memcpy_P>
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	08 95       	ret
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	08 95       	ret

000006ba <_ZN9MaxMatrix9setSpriteEiiPA7_Kh>:
 6ba:	2f 92       	push	r2
 6bc:	3f 92       	push	r3
 6be:	4f 92       	push	r4
 6c0:	5f 92       	push	r5
 6c2:	6f 92       	push	r6
 6c4:	7f 92       	push	r7
 6c6:	8f 92       	push	r8
 6c8:	9f 92       	push	r9
 6ca:	af 92       	push	r10
 6cc:	bf 92       	push	r11
 6ce:	cf 92       	push	r12
 6d0:	df 92       	push	r13
 6d2:	ef 92       	push	r14
 6d4:	ff 92       	push	r15
 6d6:	0f 93       	push	r16
 6d8:	1f 93       	push	r17
 6da:	cf 93       	push	r28
 6dc:	df 93       	push	r29
 6de:	00 d0       	rcall	.+0      	; 0x6e0 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x26>
 6e0:	00 d0       	rcall	.+0      	; 0x6e2 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x28>
 6e2:	1f 92       	push	r1
 6e4:	cd b7       	in	r28, 0x3d	; 61
 6e6:	de b7       	in	r29, 0x3e	; 62
 6e8:	4c 01       	movw	r8, r24
 6ea:	6b 01       	movw	r12, r22
 6ec:	3a 01       	movw	r6, r20
 6ee:	59 01       	movw	r10, r18
 6f0:	f9 01       	movw	r30, r18
 6f2:	40 80       	ld	r4, Z
 6f4:	51 2c       	mov	r5, r1
 6f6:	e1 80       	ldd	r14, Z+1	; 0x01
 6f8:	f1 2c       	mov	r15, r1
 6fa:	f8 e0       	ldi	r31, 0x08	; 8
 6fc:	ef 16       	cp	r14, r31
 6fe:	f1 04       	cpc	r15, r1
 700:	c9 f4       	brne	.+50     	; 0x734 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x7a>
 702:	45 2b       	or	r20, r21
 704:	b9 f4       	brne	.+46     	; 0x734 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x7a>
 706:	00 e0       	ldi	r16, 0x00	; 0
 708:	10 e0       	ldi	r17, 0x00	; 0
 70a:	04 15       	cp	r16, r4
 70c:	15 05       	cpc	r17, r5
 70e:	0c f0       	brlt	.+2      	; 0x712 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x58>
 710:	4f c0       	rjmp	.+158    	; 0x7b0 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xf6>
 712:	c8 01       	movw	r24, r16
 714:	8c 0d       	add	r24, r12
 716:	9d 1d       	adc	r25, r13
 718:	08 97       	sbiw	r24, 0x08	; 8
 71a:	48 f4       	brcc	.+18     	; 0x72e <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x74>
 71c:	f5 01       	movw	r30, r10
 71e:	e0 0f       	add	r30, r16
 720:	f1 1f       	adc	r31, r17
 722:	42 81       	ldd	r20, Z+2	; 0x02
 724:	60 2f       	mov	r22, r16
 726:	6c 0d       	add	r22, r12
 728:	c4 01       	movw	r24, r8
 72a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_ZN9MaxMatrix9setColumnEhh>
 72e:	0f 5f       	subi	r16, 0xFF	; 255
 730:	1f 4f       	sbci	r17, 0xFF	; 255
 732:	eb cf       	rjmp	.-42     	; 0x70a <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x50>
 734:	1d 82       	std	Y+5, r1	; 0x05
 736:	1c 82       	std	Y+4, r1	; 0x04
 738:	8c 81       	ldd	r24, Y+4	; 0x04
 73a:	9d 81       	ldd	r25, Y+5	; 0x05
 73c:	84 15       	cp	r24, r4
 73e:	95 05       	cpc	r25, r5
 740:	bc f5       	brge	.+110    	; 0x7b0 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xf6>
 742:	00 e0       	ldi	r16, 0x00	; 0
 744:	10 e0       	ldi	r17, 0x00	; 0
 746:	2c 80       	ldd	r2, Y+4	; 0x04
 748:	3d 80       	ldd	r3, Y+5	; 0x05
 74a:	2c 0c       	add	r2, r12
 74c:	3d 1c       	adc	r3, r13
 74e:	8c 81       	ldd	r24, Y+4	; 0x04
 750:	9d 81       	ldd	r25, Y+5	; 0x05
 752:	8a 0d       	add	r24, r10
 754:	9b 1d       	adc	r25, r11
 756:	9a 83       	std	Y+2, r25	; 0x02
 758:	89 83       	std	Y+1, r24	; 0x01
 75a:	3c 81       	ldd	r19, Y+4	; 0x04
 75c:	3c 0d       	add	r19, r12
 75e:	0e 15       	cp	r16, r14
 760:	1f 05       	cpc	r17, r15
 762:	04 f5       	brge	.+64     	; 0x7a4 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xea>
 764:	88 e0       	ldi	r24, 0x08	; 8
 766:	28 16       	cp	r2, r24
 768:	31 04       	cpc	r3, r1
 76a:	c8 f4       	brcc	.+50     	; 0x79e <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xe4>
 76c:	c8 01       	movw	r24, r16
 76e:	86 0d       	add	r24, r6
 770:	97 1d       	adc	r25, r7
 772:	08 97       	sbiw	r24, 0x08	; 8
 774:	a0 f4       	brcc	.+40     	; 0x79e <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xe4>
 776:	e9 81       	ldd	r30, Y+1	; 0x01
 778:	fa 81       	ldd	r31, Y+2	; 0x02
 77a:	82 81       	ldd	r24, Z+2	; 0x02
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	00 2e       	mov	r0, r16
 780:	02 c0       	rjmp	.+4      	; 0x786 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xcc>
 782:	95 95       	asr	r25
 784:	87 95       	ror	r24
 786:	0a 94       	dec	r0
 788:	e2 f7       	brpl	.-8      	; 0x782 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xc8>
 78a:	28 2f       	mov	r18, r24
 78c:	21 70       	andi	r18, 0x01	; 1
 78e:	40 2f       	mov	r20, r16
 790:	46 0d       	add	r20, r6
 792:	63 2f       	mov	r22, r19
 794:	c4 01       	movw	r24, r8
 796:	3b 83       	std	Y+3, r19	; 0x03
 798:	0e 94 10 03 	call	0x620	; 0x620 <_ZN9MaxMatrix6setDotEhhb>
 79c:	3b 81       	ldd	r19, Y+3	; 0x03
 79e:	0f 5f       	subi	r16, 0xFF	; 255
 7a0:	1f 4f       	sbci	r17, 0xFF	; 255
 7a2:	dd cf       	rjmp	.-70     	; 0x75e <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0xa4>
 7a4:	ec 81       	ldd	r30, Y+4	; 0x04
 7a6:	fd 81       	ldd	r31, Y+5	; 0x05
 7a8:	31 96       	adiw	r30, 0x01	; 1
 7aa:	fd 83       	std	Y+5, r31	; 0x05
 7ac:	ec 83       	std	Y+4, r30	; 0x04
 7ae:	c4 cf       	rjmp	.-120    	; 0x738 <_ZN9MaxMatrix9setSpriteEiiPA7_Kh+0x7e>
 7b0:	0f 90       	pop	r0
 7b2:	0f 90       	pop	r0
 7b4:	0f 90       	pop	r0
 7b6:	0f 90       	pop	r0
 7b8:	0f 90       	pop	r0
 7ba:	df 91       	pop	r29
 7bc:	cf 91       	pop	r28
 7be:	1f 91       	pop	r17
 7c0:	0f 91       	pop	r16
 7c2:	ff 90       	pop	r15
 7c4:	ef 90       	pop	r14
 7c6:	df 90       	pop	r13
 7c8:	cf 90       	pop	r12
 7ca:	bf 90       	pop	r11
 7cc:	af 90       	pop	r10
 7ce:	9f 90       	pop	r9
 7d0:	8f 90       	pop	r8
 7d2:	7f 90       	pop	r7
 7d4:	6f 90       	pop	r6
 7d6:	5f 90       	pop	r5
 7d8:	4f 90       	pop	r4
 7da:	3f 90       	pop	r3
 7dc:	2f 90       	pop	r2
 7de:	08 95       	ret

000007e0 <_ZN9MaxMatrix6reloadEv>:
 7e0:	ef 92       	push	r14
 7e2:	ff 92       	push	r15
 7e4:	1f 93       	push	r17
 7e6:	cf 93       	push	r28
 7e8:	df 93       	push	r29
 7ea:	ec 01       	movw	r28, r24
 7ec:	7c 01       	movw	r14, r24
 7ee:	84 e0       	ldi	r24, 0x04	; 4
 7f0:	e8 0e       	add	r14, r24
 7f2:	f1 1c       	adc	r15, r1
 7f4:	11 e0       	ldi	r17, 0x01	; 1
 7f6:	60 e0       	ldi	r22, 0x00	; 0
 7f8:	89 81       	ldd	r24, Y+1	; 0x01
 7fa:	0e 94 10 06 	call	0xc20	; 0xc20 <digitalWrite>
 7fe:	21 2f       	mov	r18, r17
 800:	41 e0       	ldi	r20, 0x01	; 1
 802:	6a 81       	ldd	r22, Y+2	; 0x02
 804:	88 81       	ld	r24, Y
 806:	0e 94 40 06 	call	0xc80	; 0xc80 <shiftOut>
 80a:	f7 01       	movw	r30, r14
 80c:	21 91       	ld	r18, Z+
 80e:	7f 01       	movw	r14, r30
 810:	41 e0       	ldi	r20, 0x01	; 1
 812:	6a 81       	ldd	r22, Y+2	; 0x02
 814:	88 81       	ld	r24, Y
 816:	0e 94 40 06 	call	0xc80	; 0xc80 <shiftOut>
 81a:	60 e0       	ldi	r22, 0x00	; 0
 81c:	89 81       	ldd	r24, Y+1	; 0x01
 81e:	0e 94 10 06 	call	0xc20	; 0xc20 <digitalWrite>
 822:	61 e0       	ldi	r22, 0x01	; 1
 824:	89 81       	ldd	r24, Y+1	; 0x01
 826:	0e 94 10 06 	call	0xc20	; 0xc20 <digitalWrite>
 82a:	1f 5f       	subi	r17, 0xFF	; 255
 82c:	19 30       	cpi	r17, 0x09	; 9
 82e:	19 f7       	brne	.-58     	; 0x7f6 <_ZN9MaxMatrix6reloadEv+0x16>
 830:	df 91       	pop	r29
 832:	cf 91       	pop	r28
 834:	1f 91       	pop	r17
 836:	ff 90       	pop	r15
 838:	ef 90       	pop	r14
 83a:	08 95       	ret

0000083c <_ZN9MaxMatrix9shiftLeftEbb>:
 83c:	cf 93       	push	r28
 83e:	df 93       	push	r29
 840:	fc 01       	movw	r30, r24
 842:	24 81       	ldd	r18, Z+4	; 0x04
 844:	35 96       	adiw	r30, 0x05	; 5
 846:	dc 01       	movw	r26, r24
 848:	1d 96       	adiw	r26, 0x0d	; 13
 84a:	31 91       	ld	r19, Z+
 84c:	ef 01       	movw	r28, r30
 84e:	22 97       	sbiw	r28, 0x02	; 2
 850:	38 83       	st	Y, r19
 852:	ea 17       	cp	r30, r26
 854:	fb 07       	cpc	r31, r27
 856:	c9 f7       	brne	.-14     	; 0x84a <_ZN9MaxMatrix9shiftLeftEbb+0xe>
 858:	66 23       	and	r22, r22
 85a:	19 f0       	breq	.+6      	; 0x862 <_ZN9MaxMatrix9shiftLeftEbb+0x26>
 85c:	fc 01       	movw	r30, r24
 85e:	23 87       	std	Z+11, r18	; 0x0b
 860:	04 c0       	rjmp	.+8      	; 0x86a <_ZN9MaxMatrix9shiftLeftEbb+0x2e>
 862:	44 23       	and	r20, r20
 864:	11 f0       	breq	.+4      	; 0x86a <_ZN9MaxMatrix9shiftLeftEbb+0x2e>
 866:	fc 01       	movw	r30, r24
 868:	13 86       	std	Z+11, r1	; 0x0b
 86a:	df 91       	pop	r29
 86c:	cf 91       	pop	r28
 86e:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <_ZN9MaxMatrix6reloadEv>

00000872 <_ZN9MaxMatrix13charShiftTaskEv>:
 872:	cf 93       	push	r28
 874:	df 93       	push	r29
 876:	ec 01       	movw	r28, r24
 878:	9b 89       	ldd	r25, Y+19	; 0x13
 87a:	8c 85       	ldd	r24, Y+12	; 0x0c
 87c:	89 17       	cp	r24, r25
 87e:	b0 f0       	brcs	.+44     	; 0x8ac <_ZN9MaxMatrix13charShiftTaskEv+0x3a>
 880:	41 e0       	ldi	r20, 0x01	; 1
 882:	60 e0       	ldi	r22, 0x00	; 0
 884:	ce 01       	movw	r24, r28
 886:	0e 94 1e 04 	call	0x83c	; 0x83c <_ZN9MaxMatrix9shiftLeftEbb>
 88a:	9e 01       	movw	r18, r28
 88c:	24 5f       	subi	r18, 0xF4	; 244
 88e:	3f 4f       	sbci	r19, 0xFF	; 255
 890:	8b 89       	ldd	r24, Y+19	; 0x13
 892:	68 e0       	ldi	r22, 0x08	; 8
 894:	70 e0       	ldi	r23, 0x00	; 0
 896:	68 1b       	sub	r22, r24
 898:	71 09       	sbc	r23, r1
 89a:	40 e0       	ldi	r20, 0x00	; 0
 89c:	50 e0       	ldi	r21, 0x00	; 0
 89e:	ce 01       	movw	r24, r28
 8a0:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_ZN9MaxMatrix9setSpriteEiiPA7_Kh>
 8a4:	8b 89       	ldd	r24, Y+19	; 0x13
 8a6:	8f 5f       	subi	r24, 0xFF	; 255
 8a8:	8b 8b       	std	Y+19, r24	; 0x13
 8aa:	06 c0       	rjmp	.+12     	; 0x8b8 <_ZN9MaxMatrix13charShiftTaskEv+0x46>
 8ac:	8b 81       	ldd	r24, Y+3	; 0x03
 8ae:	84 30       	cpi	r24, 0x04	; 4
 8b0:	11 f4       	brne	.+4      	; 0x8b6 <_ZN9MaxMatrix13charShiftTaskEv+0x44>
 8b2:	82 e0       	ldi	r24, 0x02	; 2
 8b4:	8b 83       	std	Y+3, r24	; 0x03
 8b6:	1b 8a       	std	Y+19, r1	; 0x13
 8b8:	df 91       	pop	r29
 8ba:	cf 91       	pop	r28
 8bc:	08 95       	ret

000008be <_ZN9MaxMatrix19convertCharToSpriteEcPh>:
 8be:	fa 01       	movw	r30, r20
 8c0:	64 3c       	cpi	r22, 0xC4	; 196
 8c2:	11 f4       	brne	.+4      	; 0x8c8 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0xa>
 8c4:	8f e5       	ldi	r24, 0x5F	; 95
 8c6:	13 c0       	rjmp	.+38     	; 0x8ee <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
 8c8:	66 3d       	cpi	r22, 0xD6	; 214
 8ca:	11 f4       	brne	.+4      	; 0x8d0 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x12>
 8cc:	80 e6       	ldi	r24, 0x60	; 96
 8ce:	0f c0       	rjmp	.+30     	; 0x8ee <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
 8d0:	6c 3d       	cpi	r22, 0xDC	; 220
 8d2:	11 f4       	brne	.+4      	; 0x8d8 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x1a>
 8d4:	81 e6       	ldi	r24, 0x61	; 97
 8d6:	0b c0       	rjmp	.+22     	; 0x8ee <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
 8d8:	64 3e       	cpi	r22, 0xE4	; 228
 8da:	11 f4       	brne	.+4      	; 0x8e0 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x22>
 8dc:	82 e6       	ldi	r24, 0x62	; 98
 8de:	07 c0       	rjmp	.+14     	; 0x8ee <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
 8e0:	66 3f       	cpi	r22, 0xF6	; 246
 8e2:	11 f4       	brne	.+4      	; 0x8e8 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x2a>
 8e4:	83 e6       	ldi	r24, 0x63	; 99
 8e6:	03 c0       	rjmp	.+6      	; 0x8ee <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x30>
 8e8:	6c 3f       	cpi	r22, 0xFC	; 252
 8ea:	19 f4       	brne	.+6      	; 0x8f2 <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x34>
 8ec:	84 e6       	ldi	r24, 0x64	; 100
 8ee:	80 83       	st	Z, r24
 8f0:	04 c0       	rjmp	.+8      	; 0x8fa <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x3c>
 8f2:	60 52       	subi	r22, 0x20	; 32
 8f4:	6f 35       	cpi	r22, 0x5F	; 95
 8f6:	18 f4       	brcc	.+6      	; 0x8fe <_ZN9MaxMatrix19convertCharToSpriteEcPh+0x40>
 8f8:	60 83       	st	Z, r22
 8fa:	80 e0       	ldi	r24, 0x00	; 0
 8fc:	08 95       	ret
 8fe:	81 e0       	ldi	r24, 0x01	; 1
 900:	08 95       	ret

00000902 <_ZN9MaxMatrix15stringShiftTaskEv>:
 *                  MAXMATRIX_STATE_CHAR_SHIFT or MAXMATRIX_STATE_STRING_SHIFT to MAXMATRIX_STATE_READY
 *  \return         -
 *  \pre            has to be called from shiftTask()
 *****************************************************************************************************************************************************/
void MaxMatrix::stringShiftTask()
{
 902:	0f 93       	push	r16
 904:	1f 93       	push	r17
 906:	cf 93       	push	r28
 908:	df 93       	push	r29
 90a:	1f 92       	push	r1
 90c:	cd b7       	in	r28, 0x3d	; 61
 90e:	de b7       	in	r29, 0x3e	; 62
 910:	8c 01       	movw	r16, r24
    spriteIndexType SpriteIndex;
    
    if(SpriteShiftCounter == 0)
 912:	dc 01       	movw	r26, r24
 914:	53 96       	adiw	r26, 0x13	; 19
 916:	8c 91       	ld	r24, X
 918:	53 97       	sbiw	r26, 0x13	; 19
 91a:	81 11       	cpse	r24, r1
 91c:	30 c0       	rjmp	.+96     	; 0x97e <_ZN9MaxMatrix15stringShiftTaskEv+0x7c>
    {
        if(*String != NULL) {
 91e:	54 96       	adiw	r26, 0x14	; 20
 920:	ed 91       	ld	r30, X+
 922:	fc 91       	ld	r31, X
 924:	55 97       	sbiw	r26, 0x15	; 21
 926:	60 81       	ld	r22, Z
 928:	66 23       	and	r22, r22
 92a:	21 f1       	breq	.+72     	; 0x974 <_ZN9MaxMatrix15stringShiftTaskEv+0x72>
            convertCharToSprite(*String, &SpriteIndex);
 92c:	ae 01       	movw	r20, r28
 92e:	4f 5f       	subi	r20, 0xFF	; 255
 930:	5f 4f       	sbci	r21, 0xFF	; 255
 932:	c8 01       	movw	r24, r16
 934:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN9MaxMatrix19convertCharToSpriteEcPh>
            getSprite(SpriteIndex, &SpriteBuffer);
 938:	a8 01       	movw	r20, r16
 93a:	44 5f       	subi	r20, 0xF4	; 244
 93c:	5f 4f       	sbci	r21, 0xFF	; 255
 93e:	69 81       	ldd	r22, Y+1	; 0x01
 940:	c8 01       	movw	r24, r16
 942:	0e 94 4c 03 	call	0x698	; 0x698 <_ZN9MaxMatrix9getSpriteEhPA7_h>
            if(SpriteShiftCounter != 0) shiftLeft(false, true);
 946:	f8 01       	movw	r30, r16
 948:	83 89       	ldd	r24, Z+19	; 0x13
 94a:	88 23       	and	r24, r24
 94c:	29 f0       	breq	.+10     	; 0x958 <_ZN9MaxMatrix15stringShiftTaskEv+0x56>
 94e:	41 e0       	ldi	r20, 0x01	; 1
 950:	60 e0       	ldi	r22, 0x00	; 0
 952:	c8 01       	movw	r24, r16
 954:	0e 94 1e 04 	call	0x83c	; 0x83c <_ZN9MaxMatrix9shiftLeftEbb>
            SpriteShiftCounter = 1;
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	d8 01       	movw	r26, r16
 95c:	53 96       	adiw	r26, 0x13	; 19
 95e:	8c 93       	st	X, r24
            charShiftTask();
 960:	c8 01       	movw	r24, r16
 962:	0e 94 39 04 	call	0x872	; 0x872 <_ZN9MaxMatrix13charShiftTaskEv>
            String++;
 966:	f8 01       	movw	r30, r16
 968:	84 89       	ldd	r24, Z+20	; 0x14
 96a:	95 89       	ldd	r25, Z+21	; 0x15
 96c:	01 96       	adiw	r24, 0x01	; 1
 96e:	95 8b       	std	Z+21, r25	; 0x15
 970:	84 8b       	std	Z+20, r24	; 0x14
 972:	11 c0       	rjmp	.+34     	; 0x996 <_ZN9MaxMatrix15stringShiftTaskEv+0x94>
        } else {
            State = MAXMATRIX_STATE_READY;
 974:	82 e0       	ldi	r24, 0x02	; 2
 976:	d8 01       	movw	r26, r16
 978:	13 96       	adiw	r26, 0x03	; 3
 97a:	8c 93       	st	X, r24
 97c:	07 c0       	rjmp	.+14     	; 0x98c <_ZN9MaxMatrix15stringShiftTaskEv+0x8a>
            shiftLeft(false, true);
        }
    } else {
        charShiftTask();
 97e:	c8 01       	movw	r24, r16
 980:	0e 94 39 04 	call	0x872	; 0x872 <_ZN9MaxMatrix13charShiftTaskEv>
        if(SpriteShiftCounter == 0) shiftLeft(false, true);
 984:	f8 01       	movw	r30, r16
 986:	83 89       	ldd	r24, Z+19	; 0x13
 988:	81 11       	cpse	r24, r1
 98a:	05 c0       	rjmp	.+10     	; 0x996 <_ZN9MaxMatrix15stringShiftTaskEv+0x94>
 98c:	41 e0       	ldi	r20, 0x01	; 1
 98e:	60 e0       	ldi	r22, 0x00	; 0
 990:	c8 01       	movw	r24, r16
 992:	0e 94 1e 04 	call	0x83c	; 0x83c <_ZN9MaxMatrix9shiftLeftEbb>
    }
} /* stringShiftTask */
 996:	0f 90       	pop	r0
 998:	df 91       	pop	r29
 99a:	cf 91       	pop	r28
 99c:	1f 91       	pop	r17
 99e:	0f 91       	pop	r16
 9a0:	08 95       	ret

000009a2 <_ZN9MaxMatrix9shiftTaskEv>:
 *                  MAXMATRIX_STATE_CHAR_SHIFT or MAXMATRIX_STATE_STRING_SHIFT to MAXMATRIX_STATE_READY
 *  \return         -
 *  \pre            setCharWithShift or setTextWithShift must be called first
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftTask()
{
 9a2:	cf 93       	push	r28
 9a4:	df 93       	push	r29
 9a6:	ec 01       	movw	r28, r24
    if(MAXMATRIX_STATE_STRING_SHIFT == State) stringShiftTask();
 9a8:	8b 81       	ldd	r24, Y+3	; 0x03
 9aa:	83 30       	cpi	r24, 0x03	; 3
 9ac:	19 f4       	brne	.+6      	; 0x9b4 <_ZN9MaxMatrix9shiftTaskEv+0x12>
 9ae:	ce 01       	movw	r24, r28
 9b0:	0e 94 81 04 	call	0x902	; 0x902 <_ZN9MaxMatrix15stringShiftTaskEv>
    if(MAXMATRIX_STATE_CHAR_SHIFT == State) charShiftTask();
 9b4:	8b 81       	ldd	r24, Y+3	; 0x03
 9b6:	84 30       	cpi	r24, 0x04	; 4
 9b8:	29 f4       	brne	.+10     	; 0x9c4 <_ZN9MaxMatrix9shiftTaskEv+0x22>
 9ba:	ce 01       	movw	r24, r28
} /* shiftTask */
 9bc:	df 91       	pop	r29
 9be:	cf 91       	pop	r28
 *  \pre            setCharWithShift or setTextWithShift must be called first
 *****************************************************************************************************************************************************/
void MaxMatrix::shiftTask()
{
    if(MAXMATRIX_STATE_STRING_SHIFT == State) stringShiftTask();
    if(MAXMATRIX_STATE_CHAR_SHIFT == State) charShiftTask();
 9c0:	0c 94 39 04 	jmp	0x872	; 0x872 <_ZN9MaxMatrix13charShiftTaskEv>
} /* shiftTask */
 9c4:	df 91       	pop	r29
 9c6:	cf 91       	pop	r28
 9c8:	08 95       	ret

000009ca <__vector_13>:
#include "TimerOne.h"

TimerOne Timer1;              // preinstatiate

ISR(TIMER1_OVF_vect)          // interrupt service routine that wraps a user defined function supplied by attachInterrupt
{
 9ca:	1f 92       	push	r1
 9cc:	0f 92       	push	r0
 9ce:	0f b6       	in	r0, 0x3f	; 63
 9d0:	0f 92       	push	r0
 9d2:	11 24       	eor	r1, r1
 9d4:	2f 93       	push	r18
 9d6:	3f 93       	push	r19
 9d8:	4f 93       	push	r20
 9da:	5f 93       	push	r21
 9dc:	6f 93       	push	r22
 9de:	7f 93       	push	r23
 9e0:	8f 93       	push	r24
 9e2:	9f 93       	push	r25
 9e4:	af 93       	push	r26
 9e6:	bf 93       	push	r27
 9e8:	ef 93       	push	r30
 9ea:	ff 93       	push	r31
  Timer1.isrCallback();
 9ec:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <Timer1+0x4>
 9f0:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <Timer1+0x5>
 9f4:	09 95       	icall
}
 9f6:	ff 91       	pop	r31
 9f8:	ef 91       	pop	r30
 9fa:	bf 91       	pop	r27
 9fc:	af 91       	pop	r26
 9fe:	9f 91       	pop	r25
 a00:	8f 91       	pop	r24
 a02:	7f 91       	pop	r23
 a04:	6f 91       	pop	r22
 a06:	5f 91       	pop	r21
 a08:	4f 91       	pop	r20
 a0a:	3f 91       	pop	r19
 a0c:	2f 91       	pop	r18
 a0e:	0f 90       	pop	r0
 a10:	0f be       	out	0x3f, r0	; 63
 a12:	0f 90       	pop	r0
 a14:	1f 90       	pop	r1
 a16:	18 95       	reti

00000a18 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 a18:	08 95       	ret

00000a1a <main>:

int main(void)
{
	init();
 a1a:	0e 94 70 05 	call	0xae0	; 0xae0 <init>

	initVariant();
 a1e:	0e 94 0c 05 	call	0xa18	; 0xa18 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 a22:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 a26:	c0 e0       	ldi	r28, 0x00	; 0
 a28:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 a2a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <loop>
		if (serialEventRun) serialEventRun();
 a2e:	20 97       	sbiw	r28, 0x00	; 0
 a30:	e1 f3       	breq	.-8      	; 0xa2a <main+0x10>
 a32:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 a36:	f9 cf       	rjmp	.-14     	; 0xa2a <main+0x10>

00000a38 <__vector_16>:
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 a38:	1f 92       	push	r1
 a3a:	0f 92       	push	r0
 a3c:	0f b6       	in	r0, 0x3f	; 63
 a3e:	0f 92       	push	r0
 a40:	11 24       	eor	r1, r1
 a42:	2f 93       	push	r18
 a44:	3f 93       	push	r19
 a46:	8f 93       	push	r24
 a48:	9f 93       	push	r25
 a4a:	af 93       	push	r26
 a4c:	bf 93       	push	r27
 a4e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <timer0_millis>
 a52:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <timer0_millis+0x1>
 a56:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <timer0_millis+0x2>
 a5a:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <timer0_millis+0x3>
 a5e:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <timer0_fract>
 a62:	23 e0       	ldi	r18, 0x03	; 3
 a64:	23 0f       	add	r18, r19
 a66:	2d 37       	cpi	r18, 0x7D	; 125
 a68:	20 f4       	brcc	.+8      	; 0xa72 <__vector_16+0x3a>
 a6a:	01 96       	adiw	r24, 0x01	; 1
 a6c:	a1 1d       	adc	r26, r1
 a6e:	b1 1d       	adc	r27, r1
 a70:	05 c0       	rjmp	.+10     	; 0xa7c <__vector_16+0x44>
 a72:	26 e8       	ldi	r18, 0x86	; 134
 a74:	23 0f       	add	r18, r19
 a76:	02 96       	adiw	r24, 0x02	; 2
 a78:	a1 1d       	adc	r26, r1
 a7a:	b1 1d       	adc	r27, r1
 a7c:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <timer0_fract>
 a80:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <timer0_millis>
 a84:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <timer0_millis+0x1>
 a88:	a0 93 37 01 	sts	0x0137, r26	; 0x800137 <timer0_millis+0x2>
 a8c:	b0 93 38 01 	sts	0x0138, r27	; 0x800138 <timer0_millis+0x3>
 a90:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <timer0_overflow_count>
 a94:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <timer0_overflow_count+0x1>
 a98:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <timer0_overflow_count+0x2>
 a9c:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <timer0_overflow_count+0x3>
 aa0:	01 96       	adiw	r24, 0x01	; 1
 aa2:	a1 1d       	adc	r26, r1
 aa4:	b1 1d       	adc	r27, r1
 aa6:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <timer0_overflow_count>
 aaa:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <timer0_overflow_count+0x1>
 aae:	a0 93 3b 01 	sts	0x013B, r26	; 0x80013b <timer0_overflow_count+0x2>
 ab2:	b0 93 3c 01 	sts	0x013C, r27	; 0x80013c <timer0_overflow_count+0x3>
 ab6:	bf 91       	pop	r27
 ab8:	af 91       	pop	r26
 aba:	9f 91       	pop	r25
 abc:	8f 91       	pop	r24
 abe:	3f 91       	pop	r19
 ac0:	2f 91       	pop	r18
 ac2:	0f 90       	pop	r0
 ac4:	0f be       	out	0x3f, r0	; 63
 ac6:	0f 90       	pop	r0
 ac8:	1f 90       	pop	r1
 aca:	18 95       	reti

00000acc <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
 acc:	01 97       	sbiw	r24, 0x01	; 1
 ace:	39 f0       	breq	.+14     	; 0xade <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
 ad0:	88 0f       	add	r24, r24
 ad2:	99 1f       	adc	r25, r25
 ad4:	88 0f       	add	r24, r24
 ad6:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
 ad8:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
 ada:	01 97       	sbiw	r24, 0x01	; 1
 adc:	f1 f7       	brne	.-4      	; 0xada <delayMicroseconds+0xe>
 ade:	08 95       	ret

00000ae0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 ae0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 ae2:	84 b5       	in	r24, 0x24	; 36
 ae4:	82 60       	ori	r24, 0x02	; 2
 ae6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 ae8:	84 b5       	in	r24, 0x24	; 36
 aea:	81 60       	ori	r24, 0x01	; 1
 aec:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 aee:	85 b5       	in	r24, 0x25	; 37
 af0:	82 60       	ori	r24, 0x02	; 2
 af2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 af4:	85 b5       	in	r24, 0x25	; 37
 af6:	81 60       	ori	r24, 0x01	; 1
 af8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 afa:	ee e6       	ldi	r30, 0x6E	; 110
 afc:	f0 e0       	ldi	r31, 0x00	; 0
 afe:	80 81       	ld	r24, Z
 b00:	81 60       	ori	r24, 0x01	; 1
 b02:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 b04:	e1 e8       	ldi	r30, 0x81	; 129
 b06:	f0 e0       	ldi	r31, 0x00	; 0
 b08:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 b0a:	80 81       	ld	r24, Z
 b0c:	82 60       	ori	r24, 0x02	; 2
 b0e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 b10:	80 81       	ld	r24, Z
 b12:	81 60       	ori	r24, 0x01	; 1
 b14:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 b16:	e0 e8       	ldi	r30, 0x80	; 128
 b18:	f0 e0       	ldi	r31, 0x00	; 0
 b1a:	80 81       	ld	r24, Z
 b1c:	81 60       	ori	r24, 0x01	; 1
 b1e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 b20:	e1 eb       	ldi	r30, 0xB1	; 177
 b22:	f0 e0       	ldi	r31, 0x00	; 0
 b24:	80 81       	ld	r24, Z
 b26:	84 60       	ori	r24, 0x04	; 4
 b28:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 b2a:	e0 eb       	ldi	r30, 0xB0	; 176
 b2c:	f0 e0       	ldi	r31, 0x00	; 0
 b2e:	80 81       	ld	r24, Z
 b30:	81 60       	ori	r24, 0x01	; 1
 b32:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 b34:	ea e7       	ldi	r30, 0x7A	; 122
 b36:	f0 e0       	ldi	r31, 0x00	; 0
 b38:	80 81       	ld	r24, Z
 b3a:	84 60       	ori	r24, 0x04	; 4
 b3c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 b3e:	80 81       	ld	r24, Z
 b40:	82 60       	ori	r24, 0x02	; 2
 b42:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 b44:	80 81       	ld	r24, Z
 b46:	81 60       	ori	r24, 0x01	; 1
 b48:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 b4a:	80 81       	ld	r24, Z
 b4c:	80 68       	ori	r24, 0x80	; 128
 b4e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 b50:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 b54:	08 95       	ret

00000b56 <turnOffPWM>:
 b56:	83 30       	cpi	r24, 0x03	; 3
 b58:	81 f0       	breq	.+32     	; 0xb7a <turnOffPWM+0x24>
 b5a:	28 f4       	brcc	.+10     	; 0xb66 <turnOffPWM+0x10>
 b5c:	81 30       	cpi	r24, 0x01	; 1
 b5e:	99 f0       	breq	.+38     	; 0xb86 <turnOffPWM+0x30>
 b60:	82 30       	cpi	r24, 0x02	; 2
 b62:	a1 f0       	breq	.+40     	; 0xb8c <turnOffPWM+0x36>
 b64:	08 95       	ret
 b66:	87 30       	cpi	r24, 0x07	; 7
 b68:	a9 f0       	breq	.+42     	; 0xb94 <turnOffPWM+0x3e>
 b6a:	88 30       	cpi	r24, 0x08	; 8
 b6c:	b9 f0       	breq	.+46     	; 0xb9c <turnOffPWM+0x46>
 b6e:	84 30       	cpi	r24, 0x04	; 4
 b70:	d1 f4       	brne	.+52     	; 0xba6 <turnOffPWM+0x50>
 b72:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 b76:	8f 7d       	andi	r24, 0xDF	; 223
 b78:	03 c0       	rjmp	.+6      	; 0xb80 <turnOffPWM+0x2a>
 b7a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 b7e:	8f 77       	andi	r24, 0x7F	; 127
 b80:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 b84:	08 95       	ret
 b86:	84 b5       	in	r24, 0x24	; 36
 b88:	8f 77       	andi	r24, 0x7F	; 127
 b8a:	02 c0       	rjmp	.+4      	; 0xb90 <turnOffPWM+0x3a>
 b8c:	84 b5       	in	r24, 0x24	; 36
 b8e:	8f 7d       	andi	r24, 0xDF	; 223
 b90:	84 bd       	out	0x24, r24	; 36
 b92:	08 95       	ret
 b94:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 b98:	8f 77       	andi	r24, 0x7F	; 127
 b9a:	03 c0       	rjmp	.+6      	; 0xba2 <turnOffPWM+0x4c>
 b9c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 ba0:	8f 7d       	andi	r24, 0xDF	; 223
 ba2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 ba6:	08 95       	ret

00000ba8 <pinMode>:
 ba8:	cf 93       	push	r28
 baa:	df 93       	push	r29
 bac:	90 e0       	ldi	r25, 0x00	; 0
 bae:	fc 01       	movw	r30, r24
 bb0:	e1 5c       	subi	r30, 0xC1	; 193
 bb2:	fc 4f       	sbci	r31, 0xFC	; 252
 bb4:	24 91       	lpm	r18, Z
 bb6:	fc 01       	movw	r30, r24
 bb8:	ed 5a       	subi	r30, 0xAD	; 173
 bba:	fc 4f       	sbci	r31, 0xFC	; 252
 bbc:	84 91       	lpm	r24, Z
 bbe:	88 23       	and	r24, r24
 bc0:	61 f1       	breq	.+88     	; 0xc1a <pinMode+0x72>
 bc2:	90 e0       	ldi	r25, 0x00	; 0
 bc4:	88 0f       	add	r24, r24
 bc6:	99 1f       	adc	r25, r25
 bc8:	fc 01       	movw	r30, r24
 bca:	ef 58       	subi	r30, 0x8F	; 143
 bcc:	fc 4f       	sbci	r31, 0xFC	; 252
 bce:	c5 91       	lpm	r28, Z+
 bd0:	d4 91       	lpm	r29, Z
 bd2:	fc 01       	movw	r30, r24
 bd4:	e9 59       	subi	r30, 0x99	; 153
 bd6:	fc 4f       	sbci	r31, 0xFC	; 252
 bd8:	a5 91       	lpm	r26, Z+
 bda:	b4 91       	lpm	r27, Z
 bdc:	61 11       	cpse	r22, r1
 bde:	09 c0       	rjmp	.+18     	; 0xbf2 <pinMode+0x4a>
 be0:	9f b7       	in	r25, 0x3f	; 63
 be2:	f8 94       	cli
 be4:	88 81       	ld	r24, Y
 be6:	20 95       	com	r18
 be8:	82 23       	and	r24, r18
 bea:	88 83       	st	Y, r24
 bec:	ec 91       	ld	r30, X
 bee:	2e 23       	and	r18, r30
 bf0:	0b c0       	rjmp	.+22     	; 0xc08 <pinMode+0x60>
 bf2:	62 30       	cpi	r22, 0x02	; 2
 bf4:	61 f4       	brne	.+24     	; 0xc0e <pinMode+0x66>
 bf6:	9f b7       	in	r25, 0x3f	; 63
 bf8:	f8 94       	cli
 bfa:	38 81       	ld	r19, Y
 bfc:	82 2f       	mov	r24, r18
 bfe:	80 95       	com	r24
 c00:	83 23       	and	r24, r19
 c02:	88 83       	st	Y, r24
 c04:	ec 91       	ld	r30, X
 c06:	2e 2b       	or	r18, r30
 c08:	2c 93       	st	X, r18
 c0a:	9f bf       	out	0x3f, r25	; 63
 c0c:	06 c0       	rjmp	.+12     	; 0xc1a <pinMode+0x72>
 c0e:	8f b7       	in	r24, 0x3f	; 63
 c10:	f8 94       	cli
 c12:	e8 81       	ld	r30, Y
 c14:	2e 2b       	or	r18, r30
 c16:	28 83       	st	Y, r18
 c18:	8f bf       	out	0x3f, r24	; 63
 c1a:	df 91       	pop	r29
 c1c:	cf 91       	pop	r28
 c1e:	08 95       	ret

00000c20 <digitalWrite>:
 c20:	1f 93       	push	r17
 c22:	cf 93       	push	r28
 c24:	df 93       	push	r29
 c26:	28 2f       	mov	r18, r24
 c28:	30 e0       	ldi	r19, 0x00	; 0
 c2a:	f9 01       	movw	r30, r18
 c2c:	e5 5d       	subi	r30, 0xD5	; 213
 c2e:	fc 4f       	sbci	r31, 0xFC	; 252
 c30:	84 91       	lpm	r24, Z
 c32:	f9 01       	movw	r30, r18
 c34:	e1 5c       	subi	r30, 0xC1	; 193
 c36:	fc 4f       	sbci	r31, 0xFC	; 252
 c38:	d4 91       	lpm	r29, Z
 c3a:	f9 01       	movw	r30, r18
 c3c:	ed 5a       	subi	r30, 0xAD	; 173
 c3e:	fc 4f       	sbci	r31, 0xFC	; 252
 c40:	c4 91       	lpm	r28, Z
 c42:	cc 23       	and	r28, r28
 c44:	c9 f0       	breq	.+50     	; 0xc78 <digitalWrite+0x58>
 c46:	16 2f       	mov	r17, r22
 c48:	81 11       	cpse	r24, r1
 c4a:	0e 94 ab 05 	call	0xb56	; 0xb56 <turnOffPWM>
 c4e:	ec 2f       	mov	r30, r28
 c50:	f0 e0       	ldi	r31, 0x00	; 0
 c52:	ee 0f       	add	r30, r30
 c54:	ff 1f       	adc	r31, r31
 c56:	e9 59       	subi	r30, 0x99	; 153
 c58:	fc 4f       	sbci	r31, 0xFC	; 252
 c5a:	a5 91       	lpm	r26, Z+
 c5c:	b4 91       	lpm	r27, Z
 c5e:	8f b7       	in	r24, 0x3f	; 63
 c60:	f8 94       	cli
 c62:	11 11       	cpse	r17, r1
 c64:	05 c0       	rjmp	.+10     	; 0xc70 <digitalWrite+0x50>
 c66:	9c 91       	ld	r25, X
 c68:	ed 2f       	mov	r30, r29
 c6a:	e0 95       	com	r30
 c6c:	e9 23       	and	r30, r25
 c6e:	02 c0       	rjmp	.+4      	; 0xc74 <digitalWrite+0x54>
 c70:	ec 91       	ld	r30, X
 c72:	ed 2b       	or	r30, r29
 c74:	ec 93       	st	X, r30
 c76:	8f bf       	out	0x3f, r24	; 63
 c78:	df 91       	pop	r29
 c7a:	cf 91       	pop	r28
 c7c:	1f 91       	pop	r17
 c7e:	08 95       	ret

00000c80 <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 c80:	bf 92       	push	r11
 c82:	cf 92       	push	r12
 c84:	df 92       	push	r13
 c86:	ef 92       	push	r14
 c88:	ff 92       	push	r15
 c8a:	0f 93       	push	r16
 c8c:	1f 93       	push	r17
 c8e:	cf 93       	push	r28
 c90:	df 93       	push	r29
 c92:	c8 2e       	mov	r12, r24
 c94:	d6 2e       	mov	r13, r22
 c96:	b4 2e       	mov	r11, r20
 c98:	c7 e0       	ldi	r28, 0x07	; 7
 c9a:	d0 e0       	ldi	r29, 0x00	; 0
 c9c:	02 2f       	mov	r16, r18
 c9e:	10 e0       	ldi	r17, 0x00	; 0
 ca0:	87 e0       	ldi	r24, 0x07	; 7
 ca2:	e8 2e       	mov	r14, r24
 ca4:	f1 2c       	mov	r15, r1
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
 ca6:	b1 10       	cpse	r11, r1
 ca8:	05 c0       	rjmp	.+10     	; 0xcb4 <shiftOut+0x34>
 caa:	c7 01       	movw	r24, r14
 cac:	8c 1b       	sub	r24, r28
 cae:	9d 0b       	sbc	r25, r29
			digitalWrite(dataPin, !!(val & (1 << i)));
 cb0:	98 01       	movw	r18, r16
 cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <shiftOut+0x38>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 cb4:	98 01       	movw	r18, r16
 cb6:	8c 2f       	mov	r24, r28
 cb8:	02 c0       	rjmp	.+4      	; 0xcbe <shiftOut+0x3e>
 cba:	35 95       	asr	r19
 cbc:	27 95       	ror	r18
 cbe:	8a 95       	dec	r24
 cc0:	e2 f7       	brpl	.-8      	; 0xcba <shiftOut+0x3a>
 cc2:	b9 01       	movw	r22, r18
 cc4:	61 70       	andi	r22, 0x01	; 1
 cc6:	77 27       	eor	r23, r23
 cc8:	8c 2d       	mov	r24, r12
 cca:	0e 94 10 06 	call	0xc20	; 0xc20 <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
 cce:	61 e0       	ldi	r22, 0x01	; 1
 cd0:	8d 2d       	mov	r24, r13
 cd2:	0e 94 10 06 	call	0xc20	; 0xc20 <digitalWrite>
		digitalWrite(clockPin, LOW);		
 cd6:	60 e0       	ldi	r22, 0x00	; 0
 cd8:	8d 2d       	mov	r24, r13
 cda:	0e 94 10 06 	call	0xc20	; 0xc20 <digitalWrite>
 cde:	21 97       	sbiw	r28, 0x01	; 1
 ce0:	10 f7       	brcc	.-60     	; 0xca6 <shiftOut+0x26>
	}
}
 ce2:	df 91       	pop	r29
 ce4:	cf 91       	pop	r28
 ce6:	1f 91       	pop	r17
 ce8:	0f 91       	pop	r16
 cea:	ff 90       	pop	r15
 cec:	ef 90       	pop	r14
 cee:	df 90       	pop	r13
 cf0:	cf 90       	pop	r12
 cf2:	bf 90       	pop	r11
 cf4:	08 95       	ret

00000cf6 <__tablejump2__>:
 cf6:	ee 0f       	add	r30, r30
 cf8:	ff 1f       	adc	r31, r31
 cfa:	05 90       	lpm	r0, Z+
 cfc:	f4 91       	lpm	r31, Z
 cfe:	e0 2d       	mov	r30, r0
 d00:	09 94       	ijmp

00000d02 <memcpy_P>:
 d02:	fb 01       	movw	r30, r22
 d04:	dc 01       	movw	r26, r24
 d06:	02 c0       	rjmp	.+4      	; 0xd0c <memcpy_P+0xa>
 d08:	05 90       	lpm	r0, Z+
 d0a:	0d 92       	st	X+, r0
 d0c:	41 50       	subi	r20, 0x01	; 1
 d0e:	50 40       	sbci	r21, 0x00	; 0
 d10:	d8 f7       	brcc	.-10     	; 0xd08 <memcpy_P+0x6>
 d12:	08 95       	ret

00000d14 <__do_global_dtors>:
 d14:	11 e0       	ldi	r17, 0x01	; 1
 d16:	cf eb       	ldi	r28, 0xBF	; 191
 d18:	d1 e0       	ldi	r29, 0x01	; 1
 d1a:	04 c0       	rjmp	.+8      	; 0xd24 <__do_global_dtors+0x10>
 d1c:	fe 01       	movw	r30, r28
 d1e:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__tablejump2__>
 d22:	21 96       	adiw	r28, 0x01	; 1
 d24:	c0 3c       	cpi	r28, 0xC0	; 192
 d26:	d1 07       	cpc	r29, r17
 d28:	c9 f7       	brne	.-14     	; 0xd1c <__do_global_dtors+0x8>
 d2a:	f8 94       	cli

00000d2c <__stop_program>:
 d2c:	ff cf       	rjmp	.-2      	; 0xd2c <__stop_program>
